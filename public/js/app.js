/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];
  var defaultToConfig2Keys = [
    'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',
    'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath'
  ];

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
    if (utils.isObject(config2[prop])) {
      config[prop] = utils.deepMerge(config1[prop], config2[prop]);
    } else if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (utils.isObject(config1[prop])) {
      config[prop] = utils.deepMerge(config1[prop]);
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys);

  var otherKeys = Object
    .keys(config2)
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function deepMerge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = deepMerge(result[key], val);
    } else if (typeof val === 'object') {
      result[key] = deepMerge({}, val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  deepMerge: deepMerge,
  extend: extend,
  trim: trim
};


/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=script&lang=js&":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Cursos.vue?vue&type=script&lang=js& ***!
  \*********************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "cursos-component",
  props: ['idiomas'],
  mounted: function mounted() {
    $("path.flag").on("mouseenter mouseleave", function (e) {
      var flag = e.target;

      switch (e.type) {
        case 'mouseenter':
          document.querySelector("path.country.".concat(flag.classList[1])).setAttribute('fill', '#E4032F');
          document.querySelector("path.country.".concat(flag.classList[1])).setAttribute('stroke', 'white');
          break;

        case 'mouseleave':
          document.querySelector("path.country.".concat(flag.classList[1])).setAttribute('fill', '#FAB500');
          document.querySelector("path.country.".concat(flag.classList[1])).removeAttribute('stroke');
          break;

        default:
          break;
      }
    });
    var thisComponent = this;
    $("path.country").on('click', function (e) {
      var language = e.currentTarget.dataset.language;
      var idioma = thisComponent.idiomas.find(function (idioma) {
        return idioma.diminutivo === language;
      });
      window.location.href = "/cursos/".concat(idioma.nombreURL);
    });
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=script&lang=js&":
/*!*******************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Show.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "curso-show-component",
  props: ["idioma", "idiomas"],
  data: function data() {
    return {
      keysArray: Object.keys(this.idioma.membresias)
    };
  },
  methods: {
    offsetCarousel: function offsetCarousel(start) {
      return this.idioma.membresias.slice(start, parseInt(start) + 3);
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=script&lang=js&":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Membresia/show.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "menbresua-sow",
  props: ['membresia'],
  data: function data() {
    return {
      keysArray: Object.keys(this.membresia.planes),
      screenWidth: window.innerWidth,
      limit: 3
    };
  },
  mounted: function mounted() {
    var thisComponent = this;

    window.onresize = function () {
      return thisComponent.screenWidth = window.innerWidth;
    };
  },
  methods: {
    offsetCarousel: function offsetCarousel(start) {
      if (this.screenWidth <= 768) this.limit = 1;else if (this.screenWidth <= 1024) this.limit = 2;else this.limit = 3;
      return this.membresia.planes.slice(start, parseInt(start) + this.limit);
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=script&lang=js&":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=script&lang=js& ***!
  \*********************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "payment-check-selected",
  data: function data() {
    return {
      paymentmetod: null
    };
  },
  methods: {
    definir: function definir(id) {
      this.paymentmetod = id;
      this.$store.commit("setPayment", id);
      $("#" + id).collapse("show");
    },
    cambiar: function cambiar() {
      $("#" + this.paymentmetod).collapse("hide");
      this.$store.commit("setPayment", null);
      this.paymentmetod = null;
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=script&lang=js&":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vuex */ "./node_modules/vuex/dist/vuex.esm.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  name: "process-component",
  props: ['accion'],
  computed: _objectSpread(_objectSpread({}, Object(vuex__WEBPACK_IMPORTED_MODULE_0__["mapState"])({
    paymentselected: function paymentselected(state) {
      return state.paymentselected;
    }
  })), {}, {
    process: function process() {
      var process = 33.3;

      if (this.accion === 'completado') {
        process = 100;
        return process;
      } else {
        if (this.paymentselected) {
          process = 66.6;
          return process;
        } else {
          return process;
        }
      }
    }
  })
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer.vue?vue&type=script&lang=js&":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Templades/Footer/footer.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "footer"
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=script&lang=js&":
/*!********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=script&lang=js& ***!
  \********************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "footer-dos"
});

/***/ }),

/***/ "./node_modules/bootstrap/dist/js/bootstrap.js":
/*!*****************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
  * Bootstrap v4.6.0 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
(function (global, factory) {
   true ? factory(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js")) :
  undefined;
}(this, (function (exports, $, Popper) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var $__default = /*#__PURE__*/_interopDefaultLegacy($);
  var Popper__default = /*#__PURE__*/_interopDefaultLegacy(Popper);

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.6.0): util.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Private TransitionEnd Helpers
   * ------------------------------------------------------------------------
   */

  var TRANSITION_END = 'transitionend';
  var MAX_UID = 1000000;
  var MILLISECONDS_MULTIPLIER = 1000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

  function toType(obj) {
    if (obj === null || typeof obj === 'undefined') {
      return "" + obj;
    }

    return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
  }

  function getSpecialTransitionEndEvent() {
    return {
      bindType: TRANSITION_END,
      delegateType: TRANSITION_END,
      handle: function handle(event) {
        if ($__default['default'](event.target).is(this)) {
          return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
        }

        return undefined;
      }
    };
  }

  function transitionEndEmulator(duration) {
    var _this = this;

    var called = false;
    $__default['default'](this).one(Util.TRANSITION_END, function () {
      called = true;
    });
    setTimeout(function () {
      if (!called) {
        Util.triggerTransitionEnd(_this);
      }
    }, duration);
    return this;
  }

  function setTransitionEndSupport() {
    $__default['default'].fn.emulateTransitionEnd = transitionEndEmulator;
    $__default['default'].event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
  }
  /**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */


  var Util = {
    TRANSITION_END: 'bsTransitionEnd',
    getUID: function getUID(prefix) {
      do {
        prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
      } while (document.getElementById(prefix));

      return prefix;
    },
    getSelectorFromElement: function getSelectorFromElement(element) {
      var selector = element.getAttribute('data-target');

      if (!selector || selector === '#') {
        var hrefAttr = element.getAttribute('href');
        selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : '';
      }

      try {
        return document.querySelector(selector) ? selector : null;
      } catch (_) {
        return null;
      }
    },
    getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {
      if (!element) {
        return 0;
      } // Get transition-duration of the element


      var transitionDuration = $__default['default'](element).css('transition-duration');
      var transitionDelay = $__default['default'](element).css('transition-delay');
      var floatTransitionDuration = parseFloat(transitionDuration);
      var floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

      if (!floatTransitionDuration && !floatTransitionDelay) {
        return 0;
      } // If multiple durations are defined, take the first


      transitionDuration = transitionDuration.split(',')[0];
      transitionDelay = transitionDelay.split(',')[0];
      return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
    },
    reflow: function reflow(element) {
      return element.offsetHeight;
    },
    triggerTransitionEnd: function triggerTransitionEnd(element) {
      $__default['default'](element).trigger(TRANSITION_END);
    },
    supportsTransitionEnd: function supportsTransitionEnd() {
      return Boolean(TRANSITION_END);
    },
    isElement: function isElement(obj) {
      return (obj[0] || obj).nodeType;
    },
    typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
      for (var property in configTypes) {
        if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
          var expectedTypes = configTypes[property];
          var value = config[property];
          var valueType = value && Util.isElement(value) ? 'element' : toType(value);

          if (!new RegExp(expectedTypes).test(valueType)) {
            throw new Error(componentName.toUpperCase() + ": " + ("Option \"" + property + "\" provided type \"" + valueType + "\" ") + ("but expected type \"" + expectedTypes + "\"."));
          }
        }
      }
    },
    findShadowRoot: function findShadowRoot(element) {
      if (!document.documentElement.attachShadow) {
        return null;
      } // Can find the shadow root otherwise it'll return the document


      if (typeof element.getRootNode === 'function') {
        var root = element.getRootNode();
        return root instanceof ShadowRoot ? root : null;
      }

      if (element instanceof ShadowRoot) {
        return element;
      } // when we don't find a shadow root


      if (!element.parentNode) {
        return null;
      }

      return Util.findShadowRoot(element.parentNode);
    },
    jQueryDetection: function jQueryDetection() {
      if (typeof $__default['default'] === 'undefined') {
        throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.');
      }

      var version = $__default['default'].fn.jquery.split(' ')[0].split('.');
      var minMajor = 1;
      var ltMajor = 2;
      var minMinor = 9;
      var minPatch = 1;
      var maxMajor = 4;

      if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
        throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');
      }
    }
  };
  Util.jQueryDetection();
  setTransitionEndSupport();

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'alert';
  var VERSION = '4.6.0';
  var DATA_KEY = 'bs.alert';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $__default['default'].fn[NAME];
  var SELECTOR_DISMISS = '[data-dismiss="alert"]';
  var EVENT_CLOSE = "close" + EVENT_KEY;
  var EVENT_CLOSED = "closed" + EVENT_KEY;
  var EVENT_CLICK_DATA_API = "click" + EVENT_KEY + DATA_API_KEY;
  var CLASS_NAME_ALERT = 'alert';
  var CLASS_NAME_FADE = 'fade';
  var CLASS_NAME_SHOW = 'show';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Alert = /*#__PURE__*/function () {
    function Alert(element) {
      this._element = element;
    } // Getters


    var _proto = Alert.prototype;

    // Public
    _proto.close = function close(element) {
      var rootElement = this._element;

      if (element) {
        rootElement = this._getRootElement(element);
      }

      var customEvent = this._triggerCloseEvent(rootElement);

      if (customEvent.isDefaultPrevented()) {
        return;
      }

      this._removeElement(rootElement);
    };

    _proto.dispose = function dispose() {
      $__default['default'].removeData(this._element, DATA_KEY);
      this._element = null;
    } // Private
    ;

    _proto._getRootElement = function _getRootElement(element) {
      var selector = Util.getSelectorFromElement(element);
      var parent = false;

      if (selector) {
        parent = document.querySelector(selector);
      }

      if (!parent) {
        parent = $__default['default'](element).closest("." + CLASS_NAME_ALERT)[0];
      }

      return parent;
    };

    _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
      var closeEvent = $__default['default'].Event(EVENT_CLOSE);
      $__default['default'](element).trigger(closeEvent);
      return closeEvent;
    };

    _proto._removeElement = function _removeElement(element) {
      var _this = this;

      $__default['default'](element).removeClass(CLASS_NAME_SHOW);

      if (!$__default['default'](element).hasClass(CLASS_NAME_FADE)) {
        this._destroyElement(element);

        return;
      }

      var transitionDuration = Util.getTransitionDurationFromElement(element);
      $__default['default'](element).one(Util.TRANSITION_END, function (event) {
        return _this._destroyElement(element, event);
      }).emulateTransitionEnd(transitionDuration);
    };

    _proto._destroyElement = function _destroyElement(element) {
      $__default['default'](element).detach().trigger(EVENT_CLOSED).remove();
    } // Static
    ;

    Alert._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $__default['default'](this);
        var data = $element.data(DATA_KEY);

        if (!data) {
          data = new Alert(this);
          $element.data(DATA_KEY, data);
        }

        if (config === 'close') {
          data[config](this);
        }
      });
    };

    Alert._handleDismiss = function _handleDismiss(alertInstance) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }

        alertInstance.close(this);
      };
    };

    _createClass(Alert, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }]);

    return Alert;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_CLICK_DATA_API, SELECTOR_DISMISS, Alert._handleDismiss(new Alert()));
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME] = Alert._jQueryInterface;
  $__default['default'].fn[NAME].Constructor = Alert;

  $__default['default'].fn[NAME].noConflict = function () {
    $__default['default'].fn[NAME] = JQUERY_NO_CONFLICT;
    return Alert._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$1 = 'button';
  var VERSION$1 = '4.6.0';
  var DATA_KEY$1 = 'bs.button';
  var EVENT_KEY$1 = "." + DATA_KEY$1;
  var DATA_API_KEY$1 = '.data-api';
  var JQUERY_NO_CONFLICT$1 = $__default['default'].fn[NAME$1];
  var CLASS_NAME_ACTIVE = 'active';
  var CLASS_NAME_BUTTON = 'btn';
  var CLASS_NAME_FOCUS = 'focus';
  var SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^="button"]';
  var SELECTOR_DATA_TOGGLES = '[data-toggle="buttons"]';
  var SELECTOR_DATA_TOGGLE = '[data-toggle="button"]';
  var SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle="buttons"] .btn';
  var SELECTOR_INPUT = 'input:not([type="hidden"])';
  var SELECTOR_ACTIVE = '.active';
  var SELECTOR_BUTTON = '.btn';
  var EVENT_CLICK_DATA_API$1 = "click" + EVENT_KEY$1 + DATA_API_KEY$1;
  var EVENT_FOCUS_BLUR_DATA_API = "focus" + EVENT_KEY$1 + DATA_API_KEY$1 + " " + ("blur" + EVENT_KEY$1 + DATA_API_KEY$1);
  var EVENT_LOAD_DATA_API = "load" + EVENT_KEY$1 + DATA_API_KEY$1;
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Button = /*#__PURE__*/function () {
    function Button(element) {
      this._element = element;
      this.shouldAvoidTriggerChange = false;
    } // Getters


    var _proto = Button.prototype;

    // Public
    _proto.toggle = function toggle() {
      var triggerChangeEvent = true;
      var addAriaPressed = true;
      var rootElement = $__default['default'](this._element).closest(SELECTOR_DATA_TOGGLES)[0];

      if (rootElement) {
        var input = this._element.querySelector(SELECTOR_INPUT);

        if (input) {
          if (input.type === 'radio') {
            if (input.checked && this._element.classList.contains(CLASS_NAME_ACTIVE)) {
              triggerChangeEvent = false;
            } else {
              var activeElement = rootElement.querySelector(SELECTOR_ACTIVE);

              if (activeElement) {
                $__default['default'](activeElement).removeClass(CLASS_NAME_ACTIVE);
              }
            }
          }

          if (triggerChangeEvent) {
            // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input
            if (input.type === 'checkbox' || input.type === 'radio') {
              input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE);
            }

            if (!this.shouldAvoidTriggerChange) {
              $__default['default'](input).trigger('change');
            }
          }

          input.focus();
          addAriaPressed = false;
        }
      }

      if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {
        if (addAriaPressed) {
          this._element.setAttribute('aria-pressed', !this._element.classList.contains(CLASS_NAME_ACTIVE));
        }

        if (triggerChangeEvent) {
          $__default['default'](this._element).toggleClass(CLASS_NAME_ACTIVE);
        }
      }
    };

    _proto.dispose = function dispose() {
      $__default['default'].removeData(this._element, DATA_KEY$1);
      this._element = null;
    } // Static
    ;

    Button._jQueryInterface = function _jQueryInterface(config, avoidTriggerChange) {
      return this.each(function () {
        var $element = $__default['default'](this);
        var data = $element.data(DATA_KEY$1);

        if (!data) {
          data = new Button(this);
          $element.data(DATA_KEY$1, data);
        }

        data.shouldAvoidTriggerChange = avoidTriggerChange;

        if (config === 'toggle') {
          data[config]();
        }
      });
    };

    _createClass(Button, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$1;
      }
    }]);

    return Button;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE_CARROT, function (event) {
    var button = event.target;
    var initialButton = button;

    if (!$__default['default'](button).hasClass(CLASS_NAME_BUTTON)) {
      button = $__default['default'](button).closest(SELECTOR_BUTTON)[0];
    }

    if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {
      event.preventDefault(); // work around Firefox bug #1540995
    } else {
      var inputBtn = button.querySelector(SELECTOR_INPUT);

      if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {
        event.preventDefault(); // work around Firefox bug #1540995

        return;
      }

      if (initialButton.tagName === 'INPUT' || button.tagName !== 'LABEL') {
        Button._jQueryInterface.call($__default['default'](button), 'toggle', initialButton.tagName === 'INPUT');
      }
    }
  }).on(EVENT_FOCUS_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, function (event) {
    var button = $__default['default'](event.target).closest(SELECTOR_BUTTON)[0];
    $__default['default'](button).toggleClass(CLASS_NAME_FOCUS, /^focus(in)?$/.test(event.type));
  });
  $__default['default'](window).on(EVENT_LOAD_DATA_API, function () {
    // ensure correct active class is set to match the controls' actual values/states
    // find all checkboxes/readio buttons inside data-toggle groups
    var buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS));

    for (var i = 0, len = buttons.length; i < len; i++) {
      var button = buttons[i];
      var input = button.querySelector(SELECTOR_INPUT);

      if (input.checked || input.hasAttribute('checked')) {
        button.classList.add(CLASS_NAME_ACTIVE);
      } else {
        button.classList.remove(CLASS_NAME_ACTIVE);
      }
    } // find all button toggles


    buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE));

    for (var _i = 0, _len = buttons.length; _i < _len; _i++) {
      var _button = buttons[_i];

      if (_button.getAttribute('aria-pressed') === 'true') {
        _button.classList.add(CLASS_NAME_ACTIVE);
      } else {
        _button.classList.remove(CLASS_NAME_ACTIVE);
      }
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$1] = Button._jQueryInterface;
  $__default['default'].fn[NAME$1].Constructor = Button;

  $__default['default'].fn[NAME$1].noConflict = function () {
    $__default['default'].fn[NAME$1] = JQUERY_NO_CONFLICT$1;
    return Button._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$2 = 'carousel';
  var VERSION$2 = '4.6.0';
  var DATA_KEY$2 = 'bs.carousel';
  var EVENT_KEY$2 = "." + DATA_KEY$2;
  var DATA_API_KEY$2 = '.data-api';
  var JQUERY_NO_CONFLICT$2 = $__default['default'].fn[NAME$2];
  var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

  var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

  var SWIPE_THRESHOLD = 40;
  var Default = {
    interval: 5000,
    keyboard: true,
    slide: false,
    pause: 'hover',
    wrap: true,
    touch: true
  };
  var DefaultType = {
    interval: '(number|boolean)',
    keyboard: 'boolean',
    slide: '(boolean|string)',
    pause: '(string|boolean)',
    wrap: 'boolean',
    touch: 'boolean'
  };
  var DIRECTION_NEXT = 'next';
  var DIRECTION_PREV = 'prev';
  var DIRECTION_LEFT = 'left';
  var DIRECTION_RIGHT = 'right';
  var EVENT_SLIDE = "slide" + EVENT_KEY$2;
  var EVENT_SLID = "slid" + EVENT_KEY$2;
  var EVENT_KEYDOWN = "keydown" + EVENT_KEY$2;
  var EVENT_MOUSEENTER = "mouseenter" + EVENT_KEY$2;
  var EVENT_MOUSELEAVE = "mouseleave" + EVENT_KEY$2;
  var EVENT_TOUCHSTART = "touchstart" + EVENT_KEY$2;
  var EVENT_TOUCHMOVE = "touchmove" + EVENT_KEY$2;
  var EVENT_TOUCHEND = "touchend" + EVENT_KEY$2;
  var EVENT_POINTERDOWN = "pointerdown" + EVENT_KEY$2;
  var EVENT_POINTERUP = "pointerup" + EVENT_KEY$2;
  var EVENT_DRAG_START = "dragstart" + EVENT_KEY$2;
  var EVENT_LOAD_DATA_API$1 = "load" + EVENT_KEY$2 + DATA_API_KEY$2;
  var EVENT_CLICK_DATA_API$2 = "click" + EVENT_KEY$2 + DATA_API_KEY$2;
  var CLASS_NAME_CAROUSEL = 'carousel';
  var CLASS_NAME_ACTIVE$1 = 'active';
  var CLASS_NAME_SLIDE = 'slide';
  var CLASS_NAME_RIGHT = 'carousel-item-right';
  var CLASS_NAME_LEFT = 'carousel-item-left';
  var CLASS_NAME_NEXT = 'carousel-item-next';
  var CLASS_NAME_PREV = 'carousel-item-prev';
  var CLASS_NAME_POINTER_EVENT = 'pointer-event';
  var SELECTOR_ACTIVE$1 = '.active';
  var SELECTOR_ACTIVE_ITEM = '.active.carousel-item';
  var SELECTOR_ITEM = '.carousel-item';
  var SELECTOR_ITEM_IMG = '.carousel-item img';
  var SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';
  var SELECTOR_INDICATORS = '.carousel-indicators';
  var SELECTOR_DATA_SLIDE = '[data-slide], [data-slide-to]';
  var SELECTOR_DATA_RIDE = '[data-ride="carousel"]';
  var PointerType = {
    TOUCH: 'touch',
    PEN: 'pen'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Carousel = /*#__PURE__*/function () {
    function Carousel(element, config) {
      this._items = null;
      this._interval = null;
      this._activeElement = null;
      this._isPaused = false;
      this._isSliding = false;
      this.touchTimeout = null;
      this.touchStartX = 0;
      this.touchDeltaX = 0;
      this._config = this._getConfig(config);
      this._element = element;
      this._indicatorsElement = this._element.querySelector(SELECTOR_INDICATORS);
      this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
      this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);

      this._addEventListeners();
    } // Getters


    var _proto = Carousel.prototype;

    // Public
    _proto.next = function next() {
      if (!this._isSliding) {
        this._slide(DIRECTION_NEXT);
      }
    };

    _proto.nextWhenVisible = function nextWhenVisible() {
      var $element = $__default['default'](this._element); // Don't call next when the page isn't visible
      // or the carousel or its parent isn't visible

      if (!document.hidden && $element.is(':visible') && $element.css('visibility') !== 'hidden') {
        this.next();
      }
    };

    _proto.prev = function prev() {
      if (!this._isSliding) {
        this._slide(DIRECTION_PREV);
      }
    };

    _proto.pause = function pause(event) {
      if (!event) {
        this._isPaused = true;
      }

      if (this._element.querySelector(SELECTOR_NEXT_PREV)) {
        Util.triggerTransitionEnd(this._element);
        this.cycle(true);
      }

      clearInterval(this._interval);
      this._interval = null;
    };

    _proto.cycle = function cycle(event) {
      if (!event) {
        this._isPaused = false;
      }

      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }

      if (this._config.interval && !this._isPaused) {
        this._updateInterval();

        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
      }
    };

    _proto.to = function to(index) {
      var _this = this;

      this._activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM);

      var activeIndex = this._getItemIndex(this._activeElement);

      if (index > this._items.length - 1 || index < 0) {
        return;
      }

      if (this._isSliding) {
        $__default['default'](this._element).one(EVENT_SLID, function () {
          return _this.to(index);
        });
        return;
      }

      if (activeIndex === index) {
        this.pause();
        this.cycle();
        return;
      }

      var direction = index > activeIndex ? DIRECTION_NEXT : DIRECTION_PREV;

      this._slide(direction, this._items[index]);
    };

    _proto.dispose = function dispose() {
      $__default['default'](this._element).off(EVENT_KEY$2);
      $__default['default'].removeData(this._element, DATA_KEY$2);
      this._items = null;
      this._config = null;
      this._element = null;
      this._interval = null;
      this._isPaused = null;
      this._isSliding = null;
      this._activeElement = null;
      this._indicatorsElement = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default, config);
      Util.typeCheckConfig(NAME$2, config, DefaultType);
      return config;
    };

    _proto._handleSwipe = function _handleSwipe() {
      var absDeltax = Math.abs(this.touchDeltaX);

      if (absDeltax <= SWIPE_THRESHOLD) {
        return;
      }

      var direction = absDeltax / this.touchDeltaX;
      this.touchDeltaX = 0; // swipe left

      if (direction > 0) {
        this.prev();
      } // swipe right


      if (direction < 0) {
        this.next();
      }
    };

    _proto._addEventListeners = function _addEventListeners() {
      var _this2 = this;

      if (this._config.keyboard) {
        $__default['default'](this._element).on(EVENT_KEYDOWN, function (event) {
          return _this2._keydown(event);
        });
      }

      if (this._config.pause === 'hover') {
        $__default['default'](this._element).on(EVENT_MOUSEENTER, function (event) {
          return _this2.pause(event);
        }).on(EVENT_MOUSELEAVE, function (event) {
          return _this2.cycle(event);
        });
      }

      if (this._config.touch) {
        this._addTouchEventListeners();
      }
    };

    _proto._addTouchEventListeners = function _addTouchEventListeners() {
      var _this3 = this;

      if (!this._touchSupported) {
        return;
      }

      var start = function start(event) {
        if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
          _this3.touchStartX = event.originalEvent.clientX;
        } else if (!_this3._pointerEvent) {
          _this3.touchStartX = event.originalEvent.touches[0].clientX;
        }
      };

      var move = function move(event) {
        // ensure swiping with one touch and not pinching
        if (event.originalEvent.touches && event.originalEvent.touches.length > 1) {
          _this3.touchDeltaX = 0;
        } else {
          _this3.touchDeltaX = event.originalEvent.touches[0].clientX - _this3.touchStartX;
        }
      };

      var end = function end(event) {
        if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
          _this3.touchDeltaX = event.originalEvent.clientX - _this3.touchStartX;
        }

        _this3._handleSwipe();

        if (_this3._config.pause === 'hover') {
          // If it's a touch-enabled device, mouseenter/leave are fired as
          // part of the mouse compatibility events on first tap - the carousel
          // would stop cycling until user tapped out of it;
          // here, we listen for touchend, explicitly pause the carousel
          // (as if it's the second time we tap on it, mouseenter compat event
          // is NOT fired) and after a timeout (to allow for mouse compatibility
          // events to fire) we explicitly restart cycling
          _this3.pause();

          if (_this3.touchTimeout) {
            clearTimeout(_this3.touchTimeout);
          }

          _this3.touchTimeout = setTimeout(function (event) {
            return _this3.cycle(event);
          }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval);
        }
      };

      $__default['default'](this._element.querySelectorAll(SELECTOR_ITEM_IMG)).on(EVENT_DRAG_START, function (e) {
        return e.preventDefault();
      });

      if (this._pointerEvent) {
        $__default['default'](this._element).on(EVENT_POINTERDOWN, function (event) {
          return start(event);
        });
        $__default['default'](this._element).on(EVENT_POINTERUP, function (event) {
          return end(event);
        });

        this._element.classList.add(CLASS_NAME_POINTER_EVENT);
      } else {
        $__default['default'](this._element).on(EVENT_TOUCHSTART, function (event) {
          return start(event);
        });
        $__default['default'](this._element).on(EVENT_TOUCHMOVE, function (event) {
          return move(event);
        });
        $__default['default'](this._element).on(EVENT_TOUCHEND, function (event) {
          return end(event);
        });
      }
    };

    _proto._keydown = function _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }

      switch (event.which) {
        case ARROW_LEFT_KEYCODE:
          event.preventDefault();
          this.prev();
          break;

        case ARROW_RIGHT_KEYCODE:
          event.preventDefault();
          this.next();
          break;
      }
    };

    _proto._getItemIndex = function _getItemIndex(element) {
      this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(SELECTOR_ITEM)) : [];
      return this._items.indexOf(element);
    };

    _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
      var isNextDirection = direction === DIRECTION_NEXT;
      var isPrevDirection = direction === DIRECTION_PREV;

      var activeIndex = this._getItemIndex(activeElement);

      var lastItemIndex = this._items.length - 1;
      var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

      if (isGoingToWrap && !this._config.wrap) {
        return activeElement;
      }

      var delta = direction === DIRECTION_PREV ? -1 : 1;
      var itemIndex = (activeIndex + delta) % this._items.length;
      return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
    };

    _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
      var targetIndex = this._getItemIndex(relatedTarget);

      var fromIndex = this._getItemIndex(this._element.querySelector(SELECTOR_ACTIVE_ITEM));

      var slideEvent = $__default['default'].Event(EVENT_SLIDE, {
        relatedTarget: relatedTarget,
        direction: eventDirectionName,
        from: fromIndex,
        to: targetIndex
      });
      $__default['default'](this._element).trigger(slideEvent);
      return slideEvent;
    };

    _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
      if (this._indicatorsElement) {
        var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(SELECTOR_ACTIVE$1));
        $__default['default'](indicators).removeClass(CLASS_NAME_ACTIVE$1);

        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

        if (nextIndicator) {
          $__default['default'](nextIndicator).addClass(CLASS_NAME_ACTIVE$1);
        }
      }
    };

    _proto._updateInterval = function _updateInterval() {
      var element = this._activeElement || this._element.querySelector(SELECTOR_ACTIVE_ITEM);

      if (!element) {
        return;
      }

      var elementInterval = parseInt(element.getAttribute('data-interval'), 10);

      if (elementInterval) {
        this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
        this._config.interval = elementInterval;
      } else {
        this._config.interval = this._config.defaultInterval || this._config.interval;
      }
    };

    _proto._slide = function _slide(direction, element) {
      var _this4 = this;

      var activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM);

      var activeElementIndex = this._getItemIndex(activeElement);

      var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);

      var nextElementIndex = this._getItemIndex(nextElement);

      var isCycling = Boolean(this._interval);
      var directionalClassName;
      var orderClassName;
      var eventDirectionName;

      if (direction === DIRECTION_NEXT) {
        directionalClassName = CLASS_NAME_LEFT;
        orderClassName = CLASS_NAME_NEXT;
        eventDirectionName = DIRECTION_LEFT;
      } else {
        directionalClassName = CLASS_NAME_RIGHT;
        orderClassName = CLASS_NAME_PREV;
        eventDirectionName = DIRECTION_RIGHT;
      }

      if (nextElement && $__default['default'](nextElement).hasClass(CLASS_NAME_ACTIVE$1)) {
        this._isSliding = false;
        return;
      }

      var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

      if (slideEvent.isDefaultPrevented()) {
        return;
      }

      if (!activeElement || !nextElement) {
        // Some weirdness is happening, so we bail
        return;
      }

      this._isSliding = true;

      if (isCycling) {
        this.pause();
      }

      this._setActiveIndicatorElement(nextElement);

      this._activeElement = nextElement;
      var slidEvent = $__default['default'].Event(EVENT_SLID, {
        relatedTarget: nextElement,
        direction: eventDirectionName,
        from: activeElementIndex,
        to: nextElementIndex
      });

      if ($__default['default'](this._element).hasClass(CLASS_NAME_SLIDE)) {
        $__default['default'](nextElement).addClass(orderClassName);
        Util.reflow(nextElement);
        $__default['default'](activeElement).addClass(directionalClassName);
        $__default['default'](nextElement).addClass(directionalClassName);
        var transitionDuration = Util.getTransitionDurationFromElement(activeElement);
        $__default['default'](activeElement).one(Util.TRANSITION_END, function () {
          $__default['default'](nextElement).removeClass(directionalClassName + " " + orderClassName).addClass(CLASS_NAME_ACTIVE$1);
          $__default['default'](activeElement).removeClass(CLASS_NAME_ACTIVE$1 + " " + orderClassName + " " + directionalClassName);
          _this4._isSliding = false;
          setTimeout(function () {
            return $__default['default'](_this4._element).trigger(slidEvent);
          }, 0);
        }).emulateTransitionEnd(transitionDuration);
      } else {
        $__default['default'](activeElement).removeClass(CLASS_NAME_ACTIVE$1);
        $__default['default'](nextElement).addClass(CLASS_NAME_ACTIVE$1);
        this._isSliding = false;
        $__default['default'](this._element).trigger(slidEvent);
      }

      if (isCycling) {
        this.cycle();
      }
    } // Static
    ;

    Carousel._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $__default['default'](this).data(DATA_KEY$2);

        var _config = _extends({}, Default, $__default['default'](this).data());

        if (typeof config === 'object') {
          _config = _extends({}, _config, config);
        }

        var action = typeof config === 'string' ? config : _config.slide;

        if (!data) {
          data = new Carousel(this, _config);
          $__default['default'](this).data(DATA_KEY$2, data);
        }

        if (typeof config === 'number') {
          data.to(config);
        } else if (typeof action === 'string') {
          if (typeof data[action] === 'undefined') {
            throw new TypeError("No method named \"" + action + "\"");
          }

          data[action]();
        } else if (_config.interval && _config.ride) {
          data.pause();
          data.cycle();
        }
      });
    };

    Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
      var selector = Util.getSelectorFromElement(this);

      if (!selector) {
        return;
      }

      var target = $__default['default'](selector)[0];

      if (!target || !$__default['default'](target).hasClass(CLASS_NAME_CAROUSEL)) {
        return;
      }

      var config = _extends({}, $__default['default'](target).data(), $__default['default'](this).data());

      var slideIndex = this.getAttribute('data-slide-to');

      if (slideIndex) {
        config.interval = false;
      }

      Carousel._jQueryInterface.call($__default['default'](target), config);

      if (slideIndex) {
        $__default['default'](target).data(DATA_KEY$2).to(slideIndex);
      }

      event.preventDefault();
    };

    _createClass(Carousel, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$2;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }]);

    return Carousel;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_CLICK_DATA_API$2, SELECTOR_DATA_SLIDE, Carousel._dataApiClickHandler);
  $__default['default'](window).on(EVENT_LOAD_DATA_API$1, function () {
    var carousels = [].slice.call(document.querySelectorAll(SELECTOR_DATA_RIDE));

    for (var i = 0, len = carousels.length; i < len; i++) {
      var $carousel = $__default['default'](carousels[i]);

      Carousel._jQueryInterface.call($carousel, $carousel.data());
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$2] = Carousel._jQueryInterface;
  $__default['default'].fn[NAME$2].Constructor = Carousel;

  $__default['default'].fn[NAME$2].noConflict = function () {
    $__default['default'].fn[NAME$2] = JQUERY_NO_CONFLICT$2;
    return Carousel._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$3 = 'collapse';
  var VERSION$3 = '4.6.0';
  var DATA_KEY$3 = 'bs.collapse';
  var EVENT_KEY$3 = "." + DATA_KEY$3;
  var DATA_API_KEY$3 = '.data-api';
  var JQUERY_NO_CONFLICT$3 = $__default['default'].fn[NAME$3];
  var Default$1 = {
    toggle: true,
    parent: ''
  };
  var DefaultType$1 = {
    toggle: 'boolean',
    parent: '(string|element)'
  };
  var EVENT_SHOW = "show" + EVENT_KEY$3;
  var EVENT_SHOWN = "shown" + EVENT_KEY$3;
  var EVENT_HIDE = "hide" + EVENT_KEY$3;
  var EVENT_HIDDEN = "hidden" + EVENT_KEY$3;
  var EVENT_CLICK_DATA_API$3 = "click" + EVENT_KEY$3 + DATA_API_KEY$3;
  var CLASS_NAME_SHOW$1 = 'show';
  var CLASS_NAME_COLLAPSE = 'collapse';
  var CLASS_NAME_COLLAPSING = 'collapsing';
  var CLASS_NAME_COLLAPSED = 'collapsed';
  var DIMENSION_WIDTH = 'width';
  var DIMENSION_HEIGHT = 'height';
  var SELECTOR_ACTIVES = '.show, .collapsing';
  var SELECTOR_DATA_TOGGLE$1 = '[data-toggle="collapse"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Collapse = /*#__PURE__*/function () {
    function Collapse(element, config) {
      this._isTransitioning = false;
      this._element = element;
      this._config = this._getConfig(config);
      this._triggerArray = [].slice.call(document.querySelectorAll("[data-toggle=\"collapse\"][href=\"#" + element.id + "\"]," + ("[data-toggle=\"collapse\"][data-target=\"#" + element.id + "\"]")));
      var toggleList = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE$1));

      for (var i = 0, len = toggleList.length; i < len; i++) {
        var elem = toggleList[i];
        var selector = Util.getSelectorFromElement(elem);
        var filterElement = [].slice.call(document.querySelectorAll(selector)).filter(function (foundElem) {
          return foundElem === element;
        });

        if (selector !== null && filterElement.length > 0) {
          this._selector = selector;

          this._triggerArray.push(elem);
        }
      }

      this._parent = this._config.parent ? this._getParent() : null;

      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._element, this._triggerArray);
      }

      if (this._config.toggle) {
        this.toggle();
      }
    } // Getters


    var _proto = Collapse.prototype;

    // Public
    _proto.toggle = function toggle() {
      if ($__default['default'](this._element).hasClass(CLASS_NAME_SHOW$1)) {
        this.hide();
      } else {
        this.show();
      }
    };

    _proto.show = function show() {
      var _this = this;

      if (this._isTransitioning || $__default['default'](this._element).hasClass(CLASS_NAME_SHOW$1)) {
        return;
      }

      var actives;
      var activesData;

      if (this._parent) {
        actives = [].slice.call(this._parent.querySelectorAll(SELECTOR_ACTIVES)).filter(function (elem) {
          if (typeof _this._config.parent === 'string') {
            return elem.getAttribute('data-parent') === _this._config.parent;
          }

          return elem.classList.contains(CLASS_NAME_COLLAPSE);
        });

        if (actives.length === 0) {
          actives = null;
        }
      }

      if (actives) {
        activesData = $__default['default'](actives).not(this._selector).data(DATA_KEY$3);

        if (activesData && activesData._isTransitioning) {
          return;
        }
      }

      var startEvent = $__default['default'].Event(EVENT_SHOW);
      $__default['default'](this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      if (actives) {
        Collapse._jQueryInterface.call($__default['default'](actives).not(this._selector), 'hide');

        if (!activesData) {
          $__default['default'](actives).data(DATA_KEY$3, null);
        }
      }

      var dimension = this._getDimension();

      $__default['default'](this._element).removeClass(CLASS_NAME_COLLAPSE).addClass(CLASS_NAME_COLLAPSING);
      this._element.style[dimension] = 0;

      if (this._triggerArray.length) {
        $__default['default'](this._triggerArray).removeClass(CLASS_NAME_COLLAPSED).attr('aria-expanded', true);
      }

      this.setTransitioning(true);

      var complete = function complete() {
        $__default['default'](_this._element).removeClass(CLASS_NAME_COLLAPSING).addClass(CLASS_NAME_COLLAPSE + " " + CLASS_NAME_SHOW$1);
        _this._element.style[dimension] = '';

        _this.setTransitioning(false);

        $__default['default'](_this._element).trigger(EVENT_SHOWN);
      };

      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      var scrollSize = "scroll" + capitalizedDimension;
      var transitionDuration = Util.getTransitionDurationFromElement(this._element);
      $__default['default'](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      this._element.style[dimension] = this._element[scrollSize] + "px";
    };

    _proto.hide = function hide() {
      var _this2 = this;

      if (this._isTransitioning || !$__default['default'](this._element).hasClass(CLASS_NAME_SHOW$1)) {
        return;
      }

      var startEvent = $__default['default'].Event(EVENT_HIDE);
      $__default['default'](this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      var dimension = this._getDimension();

      this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
      Util.reflow(this._element);
      $__default['default'](this._element).addClass(CLASS_NAME_COLLAPSING).removeClass(CLASS_NAME_COLLAPSE + " " + CLASS_NAME_SHOW$1);
      var triggerArrayLength = this._triggerArray.length;

      if (triggerArrayLength > 0) {
        for (var i = 0; i < triggerArrayLength; i++) {
          var trigger = this._triggerArray[i];
          var selector = Util.getSelectorFromElement(trigger);

          if (selector !== null) {
            var $elem = $__default['default']([].slice.call(document.querySelectorAll(selector)));

            if (!$elem.hasClass(CLASS_NAME_SHOW$1)) {
              $__default['default'](trigger).addClass(CLASS_NAME_COLLAPSED).attr('aria-expanded', false);
            }
          }
        }
      }

      this.setTransitioning(true);

      var complete = function complete() {
        _this2.setTransitioning(false);

        $__default['default'](_this2._element).removeClass(CLASS_NAME_COLLAPSING).addClass(CLASS_NAME_COLLAPSE).trigger(EVENT_HIDDEN);
      };

      this._element.style[dimension] = '';
      var transitionDuration = Util.getTransitionDurationFromElement(this._element);
      $__default['default'](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
    };

    _proto.setTransitioning = function setTransitioning(isTransitioning) {
      this._isTransitioning = isTransitioning;
    };

    _proto.dispose = function dispose() {
      $__default['default'].removeData(this._element, DATA_KEY$3);
      this._config = null;
      this._parent = null;
      this._element = null;
      this._triggerArray = null;
      this._isTransitioning = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default$1, config);
      config.toggle = Boolean(config.toggle); // Coerce string values

      Util.typeCheckConfig(NAME$3, config, DefaultType$1);
      return config;
    };

    _proto._getDimension = function _getDimension() {
      var hasWidth = $__default['default'](this._element).hasClass(DIMENSION_WIDTH);
      return hasWidth ? DIMENSION_WIDTH : DIMENSION_HEIGHT;
    };

    _proto._getParent = function _getParent() {
      var _this3 = this;

      var parent;

      if (Util.isElement(this._config.parent)) {
        parent = this._config.parent; // It's a jQuery object

        if (typeof this._config.parent.jquery !== 'undefined') {
          parent = this._config.parent[0];
        }
      } else {
        parent = document.querySelector(this._config.parent);
      }

      var selector = "[data-toggle=\"collapse\"][data-parent=\"" + this._config.parent + "\"]";
      var children = [].slice.call(parent.querySelectorAll(selector));
      $__default['default'](children).each(function (i, element) {
        _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
      });
      return parent;
    };

    _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
      var isOpen = $__default['default'](element).hasClass(CLASS_NAME_SHOW$1);

      if (triggerArray.length) {
        $__default['default'](triggerArray).toggleClass(CLASS_NAME_COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
      }
    } // Static
    ;

    Collapse._getTargetFromElement = function _getTargetFromElement(element) {
      var selector = Util.getSelectorFromElement(element);
      return selector ? document.querySelector(selector) : null;
    };

    Collapse._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $__default['default'](this);
        var data = $element.data(DATA_KEY$3);

        var _config = _extends({}, Default$1, $element.data(), typeof config === 'object' && config ? config : {});

        if (!data && _config.toggle && typeof config === 'string' && /show|hide/.test(config)) {
          _config.toggle = false;
        }

        if (!data) {
          data = new Collapse(this, _config);
          $element.data(DATA_KEY$3, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Collapse, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$3;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$1;
      }
    }]);

    return Collapse;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$1, function (event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.currentTarget.tagName === 'A') {
      event.preventDefault();
    }

    var $trigger = $__default['default'](this);
    var selector = Util.getSelectorFromElement(this);
    var selectors = [].slice.call(document.querySelectorAll(selector));
    $__default['default'](selectors).each(function () {
      var $target = $__default['default'](this);
      var data = $target.data(DATA_KEY$3);
      var config = data ? 'toggle' : $trigger.data();

      Collapse._jQueryInterface.call($target, config);
    });
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$3] = Collapse._jQueryInterface;
  $__default['default'].fn[NAME$3].Constructor = Collapse;

  $__default['default'].fn[NAME$3].noConflict = function () {
    $__default['default'].fn[NAME$3] = JQUERY_NO_CONFLICT$3;
    return Collapse._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$4 = 'dropdown';
  var VERSION$4 = '4.6.0';
  var DATA_KEY$4 = 'bs.dropdown';
  var EVENT_KEY$4 = "." + DATA_KEY$4;
  var DATA_API_KEY$4 = '.data-api';
  var JQUERY_NO_CONFLICT$4 = $__default['default'].fn[NAME$4];
  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

  var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

  var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

  var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

  var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

  var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

  var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE);
  var EVENT_HIDE$1 = "hide" + EVENT_KEY$4;
  var EVENT_HIDDEN$1 = "hidden" + EVENT_KEY$4;
  var EVENT_SHOW$1 = "show" + EVENT_KEY$4;
  var EVENT_SHOWN$1 = "shown" + EVENT_KEY$4;
  var EVENT_CLICK = "click" + EVENT_KEY$4;
  var EVENT_CLICK_DATA_API$4 = "click" + EVENT_KEY$4 + DATA_API_KEY$4;
  var EVENT_KEYDOWN_DATA_API = "keydown" + EVENT_KEY$4 + DATA_API_KEY$4;
  var EVENT_KEYUP_DATA_API = "keyup" + EVENT_KEY$4 + DATA_API_KEY$4;
  var CLASS_NAME_DISABLED = 'disabled';
  var CLASS_NAME_SHOW$2 = 'show';
  var CLASS_NAME_DROPUP = 'dropup';
  var CLASS_NAME_DROPRIGHT = 'dropright';
  var CLASS_NAME_DROPLEFT = 'dropleft';
  var CLASS_NAME_MENURIGHT = 'dropdown-menu-right';
  var CLASS_NAME_POSITION_STATIC = 'position-static';
  var SELECTOR_DATA_TOGGLE$2 = '[data-toggle="dropdown"]';
  var SELECTOR_FORM_CHILD = '.dropdown form';
  var SELECTOR_MENU = '.dropdown-menu';
  var SELECTOR_NAVBAR_NAV = '.navbar-nav';
  var SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
  var PLACEMENT_TOP = 'top-start';
  var PLACEMENT_TOPEND = 'top-end';
  var PLACEMENT_BOTTOM = 'bottom-start';
  var PLACEMENT_BOTTOMEND = 'bottom-end';
  var PLACEMENT_RIGHT = 'right-start';
  var PLACEMENT_LEFT = 'left-start';
  var Default$2 = {
    offset: 0,
    flip: true,
    boundary: 'scrollParent',
    reference: 'toggle',
    display: 'dynamic',
    popperConfig: null
  };
  var DefaultType$2 = {
    offset: '(number|string|function)',
    flip: 'boolean',
    boundary: '(string|element)',
    reference: '(string|element)',
    display: 'string',
    popperConfig: '(null|object)'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Dropdown = /*#__PURE__*/function () {
    function Dropdown(element, config) {
      this._element = element;
      this._popper = null;
      this._config = this._getConfig(config);
      this._menu = this._getMenuElement();
      this._inNavbar = this._detectNavbar();

      this._addEventListeners();
    } // Getters


    var _proto = Dropdown.prototype;

    // Public
    _proto.toggle = function toggle() {
      if (this._element.disabled || $__default['default'](this._element).hasClass(CLASS_NAME_DISABLED)) {
        return;
      }

      var isActive = $__default['default'](this._menu).hasClass(CLASS_NAME_SHOW$2);

      Dropdown._clearMenus();

      if (isActive) {
        return;
      }

      this.show(true);
    };

    _proto.show = function show(usePopper) {
      if (usePopper === void 0) {
        usePopper = false;
      }

      if (this._element.disabled || $__default['default'](this._element).hasClass(CLASS_NAME_DISABLED) || $__default['default'](this._menu).hasClass(CLASS_NAME_SHOW$2)) {
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };
      var showEvent = $__default['default'].Event(EVENT_SHOW$1, relatedTarget);

      var parent = Dropdown._getParentFromElement(this._element);

      $__default['default'](parent).trigger(showEvent);

      if (showEvent.isDefaultPrevented()) {
        return;
      } // Totally disable Popper for Dropdowns in Navbar


      if (!this._inNavbar && usePopper) {
        /**
         * Check for Popper dependency
         * Popper - https://popper.js.org
         */
        if (typeof Popper__default['default'] === 'undefined') {
          throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
        }

        var referenceElement = this._element;

        if (this._config.reference === 'parent') {
          referenceElement = parent;
        } else if (Util.isElement(this._config.reference)) {
          referenceElement = this._config.reference; // Check if it's jQuery element

          if (typeof this._config.reference.jquery !== 'undefined') {
            referenceElement = this._config.reference[0];
          }
        } // If boundary is not `scrollParent`, then set position to `static`
        // to allow the menu to "escape" the scroll parent's boundaries
        // https://github.com/twbs/bootstrap/issues/24251


        if (this._config.boundary !== 'scrollParent') {
          $__default['default'](parent).addClass(CLASS_NAME_POSITION_STATIC);
        }

        this._popper = new Popper__default['default'](referenceElement, this._menu, this._getPopperConfig());
      } // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


      if ('ontouchstart' in document.documentElement && $__default['default'](parent).closest(SELECTOR_NAVBAR_NAV).length === 0) {
        $__default['default'](document.body).children().on('mouseover', null, $__default['default'].noop);
      }

      this._element.focus();

      this._element.setAttribute('aria-expanded', true);

      $__default['default'](this._menu).toggleClass(CLASS_NAME_SHOW$2);
      $__default['default'](parent).toggleClass(CLASS_NAME_SHOW$2).trigger($__default['default'].Event(EVENT_SHOWN$1, relatedTarget));
    };

    _proto.hide = function hide() {
      if (this._element.disabled || $__default['default'](this._element).hasClass(CLASS_NAME_DISABLED) || !$__default['default'](this._menu).hasClass(CLASS_NAME_SHOW$2)) {
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };
      var hideEvent = $__default['default'].Event(EVENT_HIDE$1, relatedTarget);

      var parent = Dropdown._getParentFromElement(this._element);

      $__default['default'](parent).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      if (this._popper) {
        this._popper.destroy();
      }

      $__default['default'](this._menu).toggleClass(CLASS_NAME_SHOW$2);
      $__default['default'](parent).toggleClass(CLASS_NAME_SHOW$2).trigger($__default['default'].Event(EVENT_HIDDEN$1, relatedTarget));
    };

    _proto.dispose = function dispose() {
      $__default['default'].removeData(this._element, DATA_KEY$4);
      $__default['default'](this._element).off(EVENT_KEY$4);
      this._element = null;
      this._menu = null;

      if (this._popper !== null) {
        this._popper.destroy();

        this._popper = null;
      }
    };

    _proto.update = function update() {
      this._inNavbar = this._detectNavbar();

      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    } // Private
    ;

    _proto._addEventListeners = function _addEventListeners() {
      var _this = this;

      $__default['default'](this._element).on(EVENT_CLICK, function (event) {
        event.preventDefault();
        event.stopPropagation();

        _this.toggle();
      });
    };

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, this.constructor.Default, $__default['default'](this._element).data(), config);
      Util.typeCheckConfig(NAME$4, config, this.constructor.DefaultType);
      return config;
    };

    _proto._getMenuElement = function _getMenuElement() {
      if (!this._menu) {
        var parent = Dropdown._getParentFromElement(this._element);

        if (parent) {
          this._menu = parent.querySelector(SELECTOR_MENU);
        }
      }

      return this._menu;
    };

    _proto._getPlacement = function _getPlacement() {
      var $parentDropdown = $__default['default'](this._element.parentNode);
      var placement = PLACEMENT_BOTTOM; // Handle dropup

      if ($parentDropdown.hasClass(CLASS_NAME_DROPUP)) {
        placement = $__default['default'](this._menu).hasClass(CLASS_NAME_MENURIGHT) ? PLACEMENT_TOPEND : PLACEMENT_TOP;
      } else if ($parentDropdown.hasClass(CLASS_NAME_DROPRIGHT)) {
        placement = PLACEMENT_RIGHT;
      } else if ($parentDropdown.hasClass(CLASS_NAME_DROPLEFT)) {
        placement = PLACEMENT_LEFT;
      } else if ($__default['default'](this._menu).hasClass(CLASS_NAME_MENURIGHT)) {
        placement = PLACEMENT_BOTTOMEND;
      }

      return placement;
    };

    _proto._detectNavbar = function _detectNavbar() {
      return $__default['default'](this._element).closest('.navbar').length > 0;
    };

    _proto._getOffset = function _getOffset() {
      var _this2 = this;

      var offset = {};

      if (typeof this._config.offset === 'function') {
        offset.fn = function (data) {
          data.offsets = _extends({}, data.offsets, _this2._config.offset(data.offsets, _this2._element) || {});
          return data;
        };
      } else {
        offset.offset = this._config.offset;
      }

      return offset;
    };

    _proto._getPopperConfig = function _getPopperConfig() {
      var popperConfig = {
        placement: this._getPlacement(),
        modifiers: {
          offset: this._getOffset(),
          flip: {
            enabled: this._config.flip
          },
          preventOverflow: {
            boundariesElement: this._config.boundary
          }
        }
      }; // Disable Popper if we have a static display

      if (this._config.display === 'static') {
        popperConfig.modifiers.applyStyle = {
          enabled: false
        };
      }

      return _extends({}, popperConfig, this._config.popperConfig);
    } // Static
    ;

    Dropdown._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $__default['default'](this).data(DATA_KEY$4);

        var _config = typeof config === 'object' ? config : null;

        if (!data) {
          data = new Dropdown(this, _config);
          $__default['default'](this).data(DATA_KEY$4, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    Dropdown._clearMenus = function _clearMenus(event) {
      if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
        return;
      }

      var toggles = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE$2));

      for (var i = 0, len = toggles.length; i < len; i++) {
        var parent = Dropdown._getParentFromElement(toggles[i]);

        var context = $__default['default'](toggles[i]).data(DATA_KEY$4);
        var relatedTarget = {
          relatedTarget: toggles[i]
        };

        if (event && event.type === 'click') {
          relatedTarget.clickEvent = event;
        }

        if (!context) {
          continue;
        }

        var dropdownMenu = context._menu;

        if (!$__default['default'](parent).hasClass(CLASS_NAME_SHOW$2)) {
          continue;
        }

        if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $__default['default'].contains(parent, event.target)) {
          continue;
        }

        var hideEvent = $__default['default'].Event(EVENT_HIDE$1, relatedTarget);
        $__default['default'](parent).trigger(hideEvent);

        if (hideEvent.isDefaultPrevented()) {
          continue;
        } // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support


        if ('ontouchstart' in document.documentElement) {
          $__default['default'](document.body).children().off('mouseover', null, $__default['default'].noop);
        }

        toggles[i].setAttribute('aria-expanded', 'false');

        if (context._popper) {
          context._popper.destroy();
        }

        $__default['default'](dropdownMenu).removeClass(CLASS_NAME_SHOW$2);
        $__default['default'](parent).removeClass(CLASS_NAME_SHOW$2).trigger($__default['default'].Event(EVENT_HIDDEN$1, relatedTarget));
      }
    };

    Dropdown._getParentFromElement = function _getParentFromElement(element) {
      var parent;
      var selector = Util.getSelectorFromElement(element);

      if (selector) {
        parent = document.querySelector(selector);
      }

      return parent || element.parentNode;
    } // eslint-disable-next-line complexity
    ;

    Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
      // If not input/textarea:
      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
      // If input/textarea:
      //  - If space key => not a dropdown command
      //  - If key is other than escape
      //    - If key is not up or down => not a dropdown command
      //    - If trigger inside the menu => not a dropdown command
      if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $__default['default'](event.target).closest(SELECTOR_MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
        return;
      }

      if (this.disabled || $__default['default'](this).hasClass(CLASS_NAME_DISABLED)) {
        return;
      }

      var parent = Dropdown._getParentFromElement(this);

      var isActive = $__default['default'](parent).hasClass(CLASS_NAME_SHOW$2);

      if (!isActive && event.which === ESCAPE_KEYCODE) {
        return;
      }

      event.preventDefault();
      event.stopPropagation();

      if (!isActive || event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE) {
        if (event.which === ESCAPE_KEYCODE) {
          $__default['default'](parent.querySelector(SELECTOR_DATA_TOGGLE$2)).trigger('focus');
        }

        $__default['default'](this).trigger('click');
        return;
      }

      var items = [].slice.call(parent.querySelectorAll(SELECTOR_VISIBLE_ITEMS)).filter(function (item) {
        return $__default['default'](item).is(':visible');
      });

      if (items.length === 0) {
        return;
      }

      var index = items.indexOf(event.target);

      if (event.which === ARROW_UP_KEYCODE && index > 0) {
        // Up
        index--;
      }

      if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
        // Down
        index++;
      }

      if (index < 0) {
        index = 0;
      }

      items[index].focus();
    };

    _createClass(Dropdown, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$4;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$2;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$2;
      }
    }]);

    return Dropdown;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$2, Dropdown._dataApiKeydownHandler).on(EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown._dataApiKeydownHandler).on(EVENT_CLICK_DATA_API$4 + " " + EVENT_KEYUP_DATA_API, Dropdown._clearMenus).on(EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$2, function (event) {
    event.preventDefault();
    event.stopPropagation();

    Dropdown._jQueryInterface.call($__default['default'](this), 'toggle');
  }).on(EVENT_CLICK_DATA_API$4, SELECTOR_FORM_CHILD, function (e) {
    e.stopPropagation();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$4] = Dropdown._jQueryInterface;
  $__default['default'].fn[NAME$4].Constructor = Dropdown;

  $__default['default'].fn[NAME$4].noConflict = function () {
    $__default['default'].fn[NAME$4] = JQUERY_NO_CONFLICT$4;
    return Dropdown._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$5 = 'modal';
  var VERSION$5 = '4.6.0';
  var DATA_KEY$5 = 'bs.modal';
  var EVENT_KEY$5 = "." + DATA_KEY$5;
  var DATA_API_KEY$5 = '.data-api';
  var JQUERY_NO_CONFLICT$5 = $__default['default'].fn[NAME$5];
  var ESCAPE_KEYCODE$1 = 27; // KeyboardEvent.which value for Escape (Esc) key

  var Default$3 = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: true
  };
  var DefaultType$3 = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    focus: 'boolean',
    show: 'boolean'
  };
  var EVENT_HIDE$2 = "hide" + EVENT_KEY$5;
  var EVENT_HIDE_PREVENTED = "hidePrevented" + EVENT_KEY$5;
  var EVENT_HIDDEN$2 = "hidden" + EVENT_KEY$5;
  var EVENT_SHOW$2 = "show" + EVENT_KEY$5;
  var EVENT_SHOWN$2 = "shown" + EVENT_KEY$5;
  var EVENT_FOCUSIN = "focusin" + EVENT_KEY$5;
  var EVENT_RESIZE = "resize" + EVENT_KEY$5;
  var EVENT_CLICK_DISMISS = "click.dismiss" + EVENT_KEY$5;
  var EVENT_KEYDOWN_DISMISS = "keydown.dismiss" + EVENT_KEY$5;
  var EVENT_MOUSEUP_DISMISS = "mouseup.dismiss" + EVENT_KEY$5;
  var EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss" + EVENT_KEY$5;
  var EVENT_CLICK_DATA_API$5 = "click" + EVENT_KEY$5 + DATA_API_KEY$5;
  var CLASS_NAME_SCROLLABLE = 'modal-dialog-scrollable';
  var CLASS_NAME_SCROLLBAR_MEASURER = 'modal-scrollbar-measure';
  var CLASS_NAME_BACKDROP = 'modal-backdrop';
  var CLASS_NAME_OPEN = 'modal-open';
  var CLASS_NAME_FADE$1 = 'fade';
  var CLASS_NAME_SHOW$3 = 'show';
  var CLASS_NAME_STATIC = 'modal-static';
  var SELECTOR_DIALOG = '.modal-dialog';
  var SELECTOR_MODAL_BODY = '.modal-body';
  var SELECTOR_DATA_TOGGLE$3 = '[data-toggle="modal"]';
  var SELECTOR_DATA_DISMISS = '[data-dismiss="modal"]';
  var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
  var SELECTOR_STICKY_CONTENT = '.sticky-top';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Modal = /*#__PURE__*/function () {
    function Modal(element, config) {
      this._config = this._getConfig(config);
      this._element = element;
      this._dialog = element.querySelector(SELECTOR_DIALOG);
      this._backdrop = null;
      this._isShown = false;
      this._isBodyOverflowing = false;
      this._ignoreBackdropClick = false;
      this._isTransitioning = false;
      this._scrollbarWidth = 0;
    } // Getters


    var _proto = Modal.prototype;

    // Public
    _proto.toggle = function toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    };

    _proto.show = function show(relatedTarget) {
      var _this = this;

      if (this._isShown || this._isTransitioning) {
        return;
      }

      if ($__default['default'](this._element).hasClass(CLASS_NAME_FADE$1)) {
        this._isTransitioning = true;
      }

      var showEvent = $__default['default'].Event(EVENT_SHOW$2, {
        relatedTarget: relatedTarget
      });
      $__default['default'](this._element).trigger(showEvent);

      if (this._isShown || showEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = true;

      this._checkScrollbar();

      this._setScrollbar();

      this._adjustDialog();

      this._setEscapeEvent();

      this._setResizeEvent();

      $__default['default'](this._element).on(EVENT_CLICK_DISMISS, SELECTOR_DATA_DISMISS, function (event) {
        return _this.hide(event);
      });
      $__default['default'](this._dialog).on(EVENT_MOUSEDOWN_DISMISS, function () {
        $__default['default'](_this._element).one(EVENT_MOUSEUP_DISMISS, function (event) {
          if ($__default['default'](event.target).is(_this._element)) {
            _this._ignoreBackdropClick = true;
          }
        });
      });

      this._showBackdrop(function () {
        return _this._showElement(relatedTarget);
      });
    };

    _proto.hide = function hide(event) {
      var _this2 = this;

      if (event) {
        event.preventDefault();
      }

      if (!this._isShown || this._isTransitioning) {
        return;
      }

      var hideEvent = $__default['default'].Event(EVENT_HIDE$2);
      $__default['default'](this._element).trigger(hideEvent);

      if (!this._isShown || hideEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = false;
      var transition = $__default['default'](this._element).hasClass(CLASS_NAME_FADE$1);

      if (transition) {
        this._isTransitioning = true;
      }

      this._setEscapeEvent();

      this._setResizeEvent();

      $__default['default'](document).off(EVENT_FOCUSIN);
      $__default['default'](this._element).removeClass(CLASS_NAME_SHOW$3);
      $__default['default'](this._element).off(EVENT_CLICK_DISMISS);
      $__default['default'](this._dialog).off(EVENT_MOUSEDOWN_DISMISS);

      if (transition) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        $__default['default'](this._element).one(Util.TRANSITION_END, function (event) {
          return _this2._hideModal(event);
        }).emulateTransitionEnd(transitionDuration);
      } else {
        this._hideModal();
      }
    };

    _proto.dispose = function dispose() {
      [window, this._element, this._dialog].forEach(function (htmlElement) {
        return $__default['default'](htmlElement).off(EVENT_KEY$5);
      });
      /**
       * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`
       * Do not move `document` in `htmlElements` array
       * It will remove `EVENT_CLICK_DATA_API` event that should remain
       */

      $__default['default'](document).off(EVENT_FOCUSIN);
      $__default['default'].removeData(this._element, DATA_KEY$5);
      this._config = null;
      this._element = null;
      this._dialog = null;
      this._backdrop = null;
      this._isShown = null;
      this._isBodyOverflowing = null;
      this._ignoreBackdropClick = null;
      this._isTransitioning = null;
      this._scrollbarWidth = null;
    };

    _proto.handleUpdate = function handleUpdate() {
      this._adjustDialog();
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default$3, config);
      Util.typeCheckConfig(NAME$5, config, DefaultType$3);
      return config;
    };

    _proto._triggerBackdropTransition = function _triggerBackdropTransition() {
      var _this3 = this;

      var hideEventPrevented = $__default['default'].Event(EVENT_HIDE_PREVENTED);
      $__default['default'](this._element).trigger(hideEventPrevented);

      if (hideEventPrevented.isDefaultPrevented()) {
        return;
      }

      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      if (!isModalOverflowing) {
        this._element.style.overflowY = 'hidden';
      }

      this._element.classList.add(CLASS_NAME_STATIC);

      var modalTransitionDuration = Util.getTransitionDurationFromElement(this._dialog);
      $__default['default'](this._element).off(Util.TRANSITION_END);
      $__default['default'](this._element).one(Util.TRANSITION_END, function () {
        _this3._element.classList.remove(CLASS_NAME_STATIC);

        if (!isModalOverflowing) {
          $__default['default'](_this3._element).one(Util.TRANSITION_END, function () {
            _this3._element.style.overflowY = '';
          }).emulateTransitionEnd(_this3._element, modalTransitionDuration);
        }
      }).emulateTransitionEnd(modalTransitionDuration);

      this._element.focus();
    };

    _proto._showElement = function _showElement(relatedTarget) {
      var _this4 = this;

      var transition = $__default['default'](this._element).hasClass(CLASS_NAME_FADE$1);
      var modalBody = this._dialog ? this._dialog.querySelector(SELECTOR_MODAL_BODY) : null;

      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
        // Don't move modal's DOM position
        document.body.appendChild(this._element);
      }

      this._element.style.display = 'block';

      this._element.removeAttribute('aria-hidden');

      this._element.setAttribute('aria-modal', true);

      this._element.setAttribute('role', 'dialog');

      if ($__default['default'](this._dialog).hasClass(CLASS_NAME_SCROLLABLE) && modalBody) {
        modalBody.scrollTop = 0;
      } else {
        this._element.scrollTop = 0;
      }

      if (transition) {
        Util.reflow(this._element);
      }

      $__default['default'](this._element).addClass(CLASS_NAME_SHOW$3);

      if (this._config.focus) {
        this._enforceFocus();
      }

      var shownEvent = $__default['default'].Event(EVENT_SHOWN$2, {
        relatedTarget: relatedTarget
      });

      var transitionComplete = function transitionComplete() {
        if (_this4._config.focus) {
          _this4._element.focus();
        }

        _this4._isTransitioning = false;
        $__default['default'](_this4._element).trigger(shownEvent);
      };

      if (transition) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._dialog);
        $__default['default'](this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);
      } else {
        transitionComplete();
      }
    };

    _proto._enforceFocus = function _enforceFocus() {
      var _this5 = this;

      $__default['default'](document).off(EVENT_FOCUSIN) // Guard against infinite focus loop
      .on(EVENT_FOCUSIN, function (event) {
        if (document !== event.target && _this5._element !== event.target && $__default['default'](_this5._element).has(event.target).length === 0) {
          _this5._element.focus();
        }
      });
    };

    _proto._setEscapeEvent = function _setEscapeEvent() {
      var _this6 = this;

      if (this._isShown) {
        $__default['default'](this._element).on(EVENT_KEYDOWN_DISMISS, function (event) {
          if (_this6._config.keyboard && event.which === ESCAPE_KEYCODE$1) {
            event.preventDefault();

            _this6.hide();
          } else if (!_this6._config.keyboard && event.which === ESCAPE_KEYCODE$1) {
            _this6._triggerBackdropTransition();
          }
        });
      } else if (!this._isShown) {
        $__default['default'](this._element).off(EVENT_KEYDOWN_DISMISS);
      }
    };

    _proto._setResizeEvent = function _setResizeEvent() {
      var _this7 = this;

      if (this._isShown) {
        $__default['default'](window).on(EVENT_RESIZE, function (event) {
          return _this7.handleUpdate(event);
        });
      } else {
        $__default['default'](window).off(EVENT_RESIZE);
      }
    };

    _proto._hideModal = function _hideModal() {
      var _this8 = this;

      this._element.style.display = 'none';

      this._element.setAttribute('aria-hidden', true);

      this._element.removeAttribute('aria-modal');

      this._element.removeAttribute('role');

      this._isTransitioning = false;

      this._showBackdrop(function () {
        $__default['default'](document.body).removeClass(CLASS_NAME_OPEN);

        _this8._resetAdjustments();

        _this8._resetScrollbar();

        $__default['default'](_this8._element).trigger(EVENT_HIDDEN$2);
      });
    };

    _proto._removeBackdrop = function _removeBackdrop() {
      if (this._backdrop) {
        $__default['default'](this._backdrop).remove();
        this._backdrop = null;
      }
    };

    _proto._showBackdrop = function _showBackdrop(callback) {
      var _this9 = this;

      var animate = $__default['default'](this._element).hasClass(CLASS_NAME_FADE$1) ? CLASS_NAME_FADE$1 : '';

      if (this._isShown && this._config.backdrop) {
        this._backdrop = document.createElement('div');
        this._backdrop.className = CLASS_NAME_BACKDROP;

        if (animate) {
          this._backdrop.classList.add(animate);
        }

        $__default['default'](this._backdrop).appendTo(document.body);
        $__default['default'](this._element).on(EVENT_CLICK_DISMISS, function (event) {
          if (_this9._ignoreBackdropClick) {
            _this9._ignoreBackdropClick = false;
            return;
          }

          if (event.target !== event.currentTarget) {
            return;
          }

          if (_this9._config.backdrop === 'static') {
            _this9._triggerBackdropTransition();
          } else {
            _this9.hide();
          }
        });

        if (animate) {
          Util.reflow(this._backdrop);
        }

        $__default['default'](this._backdrop).addClass(CLASS_NAME_SHOW$3);

        if (!callback) {
          return;
        }

        if (!animate) {
          callback();
          return;
        }

        var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
        $__default['default'](this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);
      } else if (!this._isShown && this._backdrop) {
        $__default['default'](this._backdrop).removeClass(CLASS_NAME_SHOW$3);

        var callbackRemove = function callbackRemove() {
          _this9._removeBackdrop();

          if (callback) {
            callback();
          }
        };

        if ($__default['default'](this._element).hasClass(CLASS_NAME_FADE$1)) {
          var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);

          $__default['default'](this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);
        } else {
          callbackRemove();
        }
      } else if (callback) {
        callback();
      }
    } // ----------------------------------------------------------------------
    // the following methods are used to handle overflowing modals
    // todo (fat): these should probably be refactored out of modal.js
    // ----------------------------------------------------------------------
    ;

    _proto._adjustDialog = function _adjustDialog() {
      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      if (!this._isBodyOverflowing && isModalOverflowing) {
        this._element.style.paddingLeft = this._scrollbarWidth + "px";
      }

      if (this._isBodyOverflowing && !isModalOverflowing) {
        this._element.style.paddingRight = this._scrollbarWidth + "px";
      }
    };

    _proto._resetAdjustments = function _resetAdjustments() {
      this._element.style.paddingLeft = '';
      this._element.style.paddingRight = '';
    };

    _proto._checkScrollbar = function _checkScrollbar() {
      var rect = document.body.getBoundingClientRect();
      this._isBodyOverflowing = Math.round(rect.left + rect.right) < window.innerWidth;
      this._scrollbarWidth = this._getScrollbarWidth();
    };

    _proto._setScrollbar = function _setScrollbar() {
      var _this10 = this;

      if (this._isBodyOverflowing) {
        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
        var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT));
        var stickyContent = [].slice.call(document.querySelectorAll(SELECTOR_STICKY_CONTENT)); // Adjust fixed content padding

        $__default['default'](fixedContent).each(function (index, element) {
          var actualPadding = element.style.paddingRight;
          var calculatedPadding = $__default['default'](element).css('padding-right');
          $__default['default'](element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this10._scrollbarWidth + "px");
        }); // Adjust sticky content margin

        $__default['default'](stickyContent).each(function (index, element) {
          var actualMargin = element.style.marginRight;
          var calculatedMargin = $__default['default'](element).css('margin-right');
          $__default['default'](element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this10._scrollbarWidth + "px");
        }); // Adjust body padding

        var actualPadding = document.body.style.paddingRight;
        var calculatedPadding = $__default['default'](document.body).css('padding-right');
        $__default['default'](document.body).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
      }

      $__default['default'](document.body).addClass(CLASS_NAME_OPEN);
    };

    _proto._resetScrollbar = function _resetScrollbar() {
      // Restore fixed content padding
      var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT));
      $__default['default'](fixedContent).each(function (index, element) {
        var padding = $__default['default'](element).data('padding-right');
        $__default['default'](element).removeData('padding-right');
        element.style.paddingRight = padding ? padding : '';
      }); // Restore sticky content

      var elements = [].slice.call(document.querySelectorAll("" + SELECTOR_STICKY_CONTENT));
      $__default['default'](elements).each(function (index, element) {
        var margin = $__default['default'](element).data('margin-right');

        if (typeof margin !== 'undefined') {
          $__default['default'](element).css('margin-right', margin).removeData('margin-right');
        }
      }); // Restore body padding

      var padding = $__default['default'](document.body).data('padding-right');
      $__default['default'](document.body).removeData('padding-right');
      document.body.style.paddingRight = padding ? padding : '';
    };

    _proto._getScrollbarWidth = function _getScrollbarWidth() {
      // thx d.walsh
      var scrollDiv = document.createElement('div');
      scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER;
      document.body.appendChild(scrollDiv);
      var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    } // Static
    ;

    Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
      return this.each(function () {
        var data = $__default['default'](this).data(DATA_KEY$5);

        var _config = _extends({}, Default$3, $__default['default'](this).data(), typeof config === 'object' && config ? config : {});

        if (!data) {
          data = new Modal(this, _config);
          $__default['default'](this).data(DATA_KEY$5, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config](relatedTarget);
        } else if (_config.show) {
          data.show(relatedTarget);
        }
      });
    };

    _createClass(Modal, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$5;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$3;
      }
    }]);

    return Modal;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_CLICK_DATA_API$5, SELECTOR_DATA_TOGGLE$3, function (event) {
    var _this11 = this;

    var target;
    var selector = Util.getSelectorFromElement(this);

    if (selector) {
      target = document.querySelector(selector);
    }

    var config = $__default['default'](target).data(DATA_KEY$5) ? 'toggle' : _extends({}, $__default['default'](target).data(), $__default['default'](this).data());

    if (this.tagName === 'A' || this.tagName === 'AREA') {
      event.preventDefault();
    }

    var $target = $__default['default'](target).one(EVENT_SHOW$2, function (showEvent) {
      if (showEvent.isDefaultPrevented()) {
        // Only register focus restorer if modal will actually get shown
        return;
      }

      $target.one(EVENT_HIDDEN$2, function () {
        if ($__default['default'](_this11).is(':visible')) {
          _this11.focus();
        }
      });
    });

    Modal._jQueryInterface.call($__default['default'](target), config, this);
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$5] = Modal._jQueryInterface;
  $__default['default'].fn[NAME$5].Constructor = Modal;

  $__default['default'].fn[NAME$5].noConflict = function () {
    $__default['default'].fn[NAME$5] = JQUERY_NO_CONFLICT$5;
    return Modal._jQueryInterface;
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.6.0): tools/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  var uriAttrs = ['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href'];
  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  var DefaultWhitelist = {
    // Global attributes allowed on any supplied element below.
    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
    a: ['target', 'href', 'title', 'rel'],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };
  /**
   * A pattern that recognizes a commonly useful subset of URLs that are safe.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */

  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi;
  /**
   * A pattern that matches safe data URLs. Only matches image, video and audio types.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */

  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;

  function allowedAttribute(attr, allowedAttributeList) {
    var attrName = attr.nodeName.toLowerCase();

    if (allowedAttributeList.indexOf(attrName) !== -1) {
      if (uriAttrs.indexOf(attrName) !== -1) {
        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN));
      }

      return true;
    }

    var regExp = allowedAttributeList.filter(function (attrRegex) {
      return attrRegex instanceof RegExp;
    }); // Check if a regular expression validates the attribute.

    for (var i = 0, len = regExp.length; i < len; i++) {
      if (attrName.match(regExp[i])) {
        return true;
      }
    }

    return false;
  }

  function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
    if (unsafeHtml.length === 0) {
      return unsafeHtml;
    }

    if (sanitizeFn && typeof sanitizeFn === 'function') {
      return sanitizeFn(unsafeHtml);
    }

    var domParser = new window.DOMParser();
    var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
    var whitelistKeys = Object.keys(whiteList);
    var elements = [].slice.call(createdDocument.body.querySelectorAll('*'));

    var _loop = function _loop(i, len) {
      var el = elements[i];
      var elName = el.nodeName.toLowerCase();

      if (whitelistKeys.indexOf(el.nodeName.toLowerCase()) === -1) {
        el.parentNode.removeChild(el);
        return "continue";
      }

      var attributeList = [].slice.call(el.attributes);
      var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);
      attributeList.forEach(function (attr) {
        if (!allowedAttribute(attr, whitelistedAttributes)) {
          el.removeAttribute(attr.nodeName);
        }
      });
    };

    for (var i = 0, len = elements.length; i < len; i++) {
      var _ret = _loop(i);

      if (_ret === "continue") continue;
    }

    return createdDocument.body.innerHTML;
  }

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$6 = 'tooltip';
  var VERSION$6 = '4.6.0';
  var DATA_KEY$6 = 'bs.tooltip';
  var EVENT_KEY$6 = "." + DATA_KEY$6;
  var JQUERY_NO_CONFLICT$6 = $__default['default'].fn[NAME$6];
  var CLASS_PREFIX = 'bs-tooltip';
  var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];
  var DefaultType$4 = {
    animation: 'boolean',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string',
    delay: '(number|object)',
    html: 'boolean',
    selector: '(string|boolean)',
    placement: '(string|function)',
    offset: '(number|string|function)',
    container: '(string|element|boolean)',
    fallbackPlacement: '(string|array)',
    boundary: '(string|element)',
    customClass: '(string|function)',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    whiteList: 'object',
    popperConfig: '(null|object)'
  };
  var AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: 'right',
    BOTTOM: 'bottom',
    LEFT: 'left'
  };
  var Default$4 = {
    animation: true,
    template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    selector: false,
    placement: 'top',
    offset: 0,
    container: false,
    fallbackPlacement: 'flip',
    boundary: 'scrollParent',
    customClass: '',
    sanitize: true,
    sanitizeFn: null,
    whiteList: DefaultWhitelist,
    popperConfig: null
  };
  var HOVER_STATE_SHOW = 'show';
  var HOVER_STATE_OUT = 'out';
  var Event = {
    HIDE: "hide" + EVENT_KEY$6,
    HIDDEN: "hidden" + EVENT_KEY$6,
    SHOW: "show" + EVENT_KEY$6,
    SHOWN: "shown" + EVENT_KEY$6,
    INSERTED: "inserted" + EVENT_KEY$6,
    CLICK: "click" + EVENT_KEY$6,
    FOCUSIN: "focusin" + EVENT_KEY$6,
    FOCUSOUT: "focusout" + EVENT_KEY$6,
    MOUSEENTER: "mouseenter" + EVENT_KEY$6,
    MOUSELEAVE: "mouseleave" + EVENT_KEY$6
  };
  var CLASS_NAME_FADE$2 = 'fade';
  var CLASS_NAME_SHOW$4 = 'show';
  var SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
  var SELECTOR_ARROW = '.arrow';
  var TRIGGER_HOVER = 'hover';
  var TRIGGER_FOCUS = 'focus';
  var TRIGGER_CLICK = 'click';
  var TRIGGER_MANUAL = 'manual';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Tooltip = /*#__PURE__*/function () {
    function Tooltip(element, config) {
      if (typeof Popper__default['default'] === 'undefined') {
        throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)');
      } // private


      this._isEnabled = true;
      this._timeout = 0;
      this._hoverState = '';
      this._activeTrigger = {};
      this._popper = null; // Protected

      this.element = element;
      this.config = this._getConfig(config);
      this.tip = null;

      this._setListeners();
    } // Getters


    var _proto = Tooltip.prototype;

    // Public
    _proto.enable = function enable() {
      this._isEnabled = true;
    };

    _proto.disable = function disable() {
      this._isEnabled = false;
    };

    _proto.toggleEnabled = function toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    };

    _proto.toggle = function toggle(event) {
      if (!this._isEnabled) {
        return;
      }

      if (event) {
        var dataKey = this.constructor.DATA_KEY;
        var context = $__default['default'](event.currentTarget).data(dataKey);

        if (!context) {
          context = new this.constructor(event.currentTarget, this._getDelegateConfig());
          $__default['default'](event.currentTarget).data(dataKey, context);
        }

        context._activeTrigger.click = !context._activeTrigger.click;

        if (context._isWithActiveTrigger()) {
          context._enter(null, context);
        } else {
          context._leave(null, context);
        }
      } else {
        if ($__default['default'](this.getTipElement()).hasClass(CLASS_NAME_SHOW$4)) {
          this._leave(null, this);

          return;
        }

        this._enter(null, this);
      }
    };

    _proto.dispose = function dispose() {
      clearTimeout(this._timeout);
      $__default['default'].removeData(this.element, this.constructor.DATA_KEY);
      $__default['default'](this.element).off(this.constructor.EVENT_KEY);
      $__default['default'](this.element).closest('.modal').off('hide.bs.modal', this._hideModalHandler);

      if (this.tip) {
        $__default['default'](this.tip).remove();
      }

      this._isEnabled = null;
      this._timeout = null;
      this._hoverState = null;
      this._activeTrigger = null;

      if (this._popper) {
        this._popper.destroy();
      }

      this._popper = null;
      this.element = null;
      this.config = null;
      this.tip = null;
    };

    _proto.show = function show() {
      var _this = this;

      if ($__default['default'](this.element).css('display') === 'none') {
        throw new Error('Please use show on visible elements');
      }

      var showEvent = $__default['default'].Event(this.constructor.Event.SHOW);

      if (this.isWithContent() && this._isEnabled) {
        $__default['default'](this.element).trigger(showEvent);
        var shadowRoot = Util.findShadowRoot(this.element);
        var isInTheDom = $__default['default'].contains(shadowRoot !== null ? shadowRoot : this.element.ownerDocument.documentElement, this.element);

        if (showEvent.isDefaultPrevented() || !isInTheDom) {
          return;
        }

        var tip = this.getTipElement();
        var tipId = Util.getUID(this.constructor.NAME);
        tip.setAttribute('id', tipId);
        this.element.setAttribute('aria-describedby', tipId);
        this.setContent();

        if (this.config.animation) {
          $__default['default'](tip).addClass(CLASS_NAME_FADE$2);
        }

        var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;

        var attachment = this._getAttachment(placement);

        this.addAttachmentClass(attachment);

        var container = this._getContainer();

        $__default['default'](tip).data(this.constructor.DATA_KEY, this);

        if (!$__default['default'].contains(this.element.ownerDocument.documentElement, this.tip)) {
          $__default['default'](tip).appendTo(container);
        }

        $__default['default'](this.element).trigger(this.constructor.Event.INSERTED);
        this._popper = new Popper__default['default'](this.element, tip, this._getPopperConfig(attachment));
        $__default['default'](tip).addClass(CLASS_NAME_SHOW$4);
        $__default['default'](tip).addClass(this.config.customClass); // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

        if ('ontouchstart' in document.documentElement) {
          $__default['default'](document.body).children().on('mouseover', null, $__default['default'].noop);
        }

        var complete = function complete() {
          if (_this.config.animation) {
            _this._fixTransition();
          }

          var prevHoverState = _this._hoverState;
          _this._hoverState = null;
          $__default['default'](_this.element).trigger(_this.constructor.Event.SHOWN);

          if (prevHoverState === HOVER_STATE_OUT) {
            _this._leave(null, _this);
          }
        };

        if ($__default['default'](this.tip).hasClass(CLASS_NAME_FADE$2)) {
          var transitionDuration = Util.getTransitionDurationFromElement(this.tip);
          $__default['default'](this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
        } else {
          complete();
        }
      }
    };

    _proto.hide = function hide(callback) {
      var _this2 = this;

      var tip = this.getTipElement();
      var hideEvent = $__default['default'].Event(this.constructor.Event.HIDE);

      var complete = function complete() {
        if (_this2._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {
          tip.parentNode.removeChild(tip);
        }

        _this2._cleanTipClass();

        _this2.element.removeAttribute('aria-describedby');

        $__default['default'](_this2.element).trigger(_this2.constructor.Event.HIDDEN);

        if (_this2._popper !== null) {
          _this2._popper.destroy();
        }

        if (callback) {
          callback();
        }
      };

      $__default['default'](this.element).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      $__default['default'](tip).removeClass(CLASS_NAME_SHOW$4); // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support

      if ('ontouchstart' in document.documentElement) {
        $__default['default'](document.body).children().off('mouseover', null, $__default['default'].noop);
      }

      this._activeTrigger[TRIGGER_CLICK] = false;
      this._activeTrigger[TRIGGER_FOCUS] = false;
      this._activeTrigger[TRIGGER_HOVER] = false;

      if ($__default['default'](this.tip).hasClass(CLASS_NAME_FADE$2)) {
        var transitionDuration = Util.getTransitionDurationFromElement(tip);
        $__default['default'](tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }

      this._hoverState = '';
    };

    _proto.update = function update() {
      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    } // Protected
    ;

    _proto.isWithContent = function isWithContent() {
      return Boolean(this.getTitle());
    };

    _proto.addAttachmentClass = function addAttachmentClass(attachment) {
      $__default['default'](this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
    };

    _proto.getTipElement = function getTipElement() {
      this.tip = this.tip || $__default['default'](this.config.template)[0];
      return this.tip;
    };

    _proto.setContent = function setContent() {
      var tip = this.getTipElement();
      this.setElementContent($__default['default'](tip.querySelectorAll(SELECTOR_TOOLTIP_INNER)), this.getTitle());
      $__default['default'](tip).removeClass(CLASS_NAME_FADE$2 + " " + CLASS_NAME_SHOW$4);
    };

    _proto.setElementContent = function setElementContent($element, content) {
      if (typeof content === 'object' && (content.nodeType || content.jquery)) {
        // Content is a DOM node or a jQuery
        if (this.config.html) {
          if (!$__default['default'](content).parent().is($element)) {
            $element.empty().append(content);
          }
        } else {
          $element.text($__default['default'](content).text());
        }

        return;
      }

      if (this.config.html) {
        if (this.config.sanitize) {
          content = sanitizeHtml(content, this.config.whiteList, this.config.sanitizeFn);
        }

        $element.html(content);
      } else {
        $element.text(content);
      }
    };

    _proto.getTitle = function getTitle() {
      var title = this.element.getAttribute('data-original-title');

      if (!title) {
        title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
      }

      return title;
    } // Private
    ;

    _proto._getPopperConfig = function _getPopperConfig(attachment) {
      var _this3 = this;

      var defaultBsConfig = {
        placement: attachment,
        modifiers: {
          offset: this._getOffset(),
          flip: {
            behavior: this.config.fallbackPlacement
          },
          arrow: {
            element: SELECTOR_ARROW
          },
          preventOverflow: {
            boundariesElement: this.config.boundary
          }
        },
        onCreate: function onCreate(data) {
          if (data.originalPlacement !== data.placement) {
            _this3._handlePopperPlacementChange(data);
          }
        },
        onUpdate: function onUpdate(data) {
          return _this3._handlePopperPlacementChange(data);
        }
      };
      return _extends({}, defaultBsConfig, this.config.popperConfig);
    };

    _proto._getOffset = function _getOffset() {
      var _this4 = this;

      var offset = {};

      if (typeof this.config.offset === 'function') {
        offset.fn = function (data) {
          data.offsets = _extends({}, data.offsets, _this4.config.offset(data.offsets, _this4.element) || {});
          return data;
        };
      } else {
        offset.offset = this.config.offset;
      }

      return offset;
    };

    _proto._getContainer = function _getContainer() {
      if (this.config.container === false) {
        return document.body;
      }

      if (Util.isElement(this.config.container)) {
        return $__default['default'](this.config.container);
      }

      return $__default['default'](document).find(this.config.container);
    };

    _proto._getAttachment = function _getAttachment(placement) {
      return AttachmentMap[placement.toUpperCase()];
    };

    _proto._setListeners = function _setListeners() {
      var _this5 = this;

      var triggers = this.config.trigger.split(' ');
      triggers.forEach(function (trigger) {
        if (trigger === 'click') {
          $__default['default'](_this5.element).on(_this5.constructor.Event.CLICK, _this5.config.selector, function (event) {
            return _this5.toggle(event);
          });
        } else if (trigger !== TRIGGER_MANUAL) {
          var eventIn = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSEENTER : _this5.constructor.Event.FOCUSIN;
          var eventOut = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSELEAVE : _this5.constructor.Event.FOCUSOUT;
          $__default['default'](_this5.element).on(eventIn, _this5.config.selector, function (event) {
            return _this5._enter(event);
          }).on(eventOut, _this5.config.selector, function (event) {
            return _this5._leave(event);
          });
        }
      });

      this._hideModalHandler = function () {
        if (_this5.element) {
          _this5.hide();
        }
      };

      $__default['default'](this.element).closest('.modal').on('hide.bs.modal', this._hideModalHandler);

      if (this.config.selector) {
        this.config = _extends({}, this.config, {
          trigger: 'manual',
          selector: ''
        });
      } else {
        this._fixTitle();
      }
    };

    _proto._fixTitle = function _fixTitle() {
      var titleType = typeof this.element.getAttribute('data-original-title');

      if (this.element.getAttribute('title') || titleType !== 'string') {
        this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
        this.element.setAttribute('title', '');
      }
    };

    _proto._enter = function _enter(event, context) {
      var dataKey = this.constructor.DATA_KEY;
      context = context || $__default['default'](event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $__default['default'](event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
      }

      if ($__default['default'](context.getTipElement()).hasClass(CLASS_NAME_SHOW$4) || context._hoverState === HOVER_STATE_SHOW) {
        context._hoverState = HOVER_STATE_SHOW;
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HOVER_STATE_SHOW;

      if (!context.config.delay || !context.config.delay.show) {
        context.show();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HOVER_STATE_SHOW) {
          context.show();
        }
      }, context.config.delay.show);
    };

    _proto._leave = function _leave(event, context) {
      var dataKey = this.constructor.DATA_KEY;
      context = context || $__default['default'](event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $__default['default'](event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = false;
      }

      if (context._isWithActiveTrigger()) {
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HOVER_STATE_OUT;

      if (!context.config.delay || !context.config.delay.hide) {
        context.hide();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HOVER_STATE_OUT) {
          context.hide();
        }
      }, context.config.delay.hide);
    };

    _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
      for (var trigger in this._activeTrigger) {
        if (this._activeTrigger[trigger]) {
          return true;
        }
      }

      return false;
    };

    _proto._getConfig = function _getConfig(config) {
      var dataAttributes = $__default['default'](this.element).data();
      Object.keys(dataAttributes).forEach(function (dataAttr) {
        if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
          delete dataAttributes[dataAttr];
        }
      });
      config = _extends({}, this.constructor.Default, dataAttributes, typeof config === 'object' && config ? config : {});

      if (typeof config.delay === 'number') {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }

      if (typeof config.title === 'number') {
        config.title = config.title.toString();
      }

      if (typeof config.content === 'number') {
        config.content = config.content.toString();
      }

      Util.typeCheckConfig(NAME$6, config, this.constructor.DefaultType);

      if (config.sanitize) {
        config.template = sanitizeHtml(config.template, config.whiteList, config.sanitizeFn);
      }

      return config;
    };

    _proto._getDelegateConfig = function _getDelegateConfig() {
      var config = {};

      if (this.config) {
        for (var key in this.config) {
          if (this.constructor.Default[key] !== this.config[key]) {
            config[key] = this.config[key];
          }
        }
      }

      return config;
    };

    _proto._cleanTipClass = function _cleanTipClass() {
      var $tip = $__default['default'](this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

      if (tabClass !== null && tabClass.length) {
        $tip.removeClass(tabClass.join(''));
      }
    };

    _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(popperData) {
      this.tip = popperData.instance.popper;

      this._cleanTipClass();

      this.addAttachmentClass(this._getAttachment(popperData.placement));
    };

    _proto._fixTransition = function _fixTransition() {
      var tip = this.getTipElement();
      var initConfigAnimation = this.config.animation;

      if (tip.getAttribute('x-placement') !== null) {
        return;
      }

      $__default['default'](tip).removeClass(CLASS_NAME_FADE$2);
      this.config.animation = false;
      this.hide();
      this.show();
      this.config.animation = initConfigAnimation;
    } // Static
    ;

    Tooltip._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $__default['default'](this);
        var data = $element.data(DATA_KEY$6);

        var _config = typeof config === 'object' && config;

        if (!data && /dispose|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Tooltip(this, _config);
          $element.data(DATA_KEY$6, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Tooltip, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$6;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$4;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$6;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY$6;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY$6;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$4;
      }
    }]);

    return Tooltip;
  }();
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $__default['default'].fn[NAME$6] = Tooltip._jQueryInterface;
  $__default['default'].fn[NAME$6].Constructor = Tooltip;

  $__default['default'].fn[NAME$6].noConflict = function () {
    $__default['default'].fn[NAME$6] = JQUERY_NO_CONFLICT$6;
    return Tooltip._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$7 = 'popover';
  var VERSION$7 = '4.6.0';
  var DATA_KEY$7 = 'bs.popover';
  var EVENT_KEY$7 = "." + DATA_KEY$7;
  var JQUERY_NO_CONFLICT$7 = $__default['default'].fn[NAME$7];
  var CLASS_PREFIX$1 = 'bs-popover';
  var BSCLS_PREFIX_REGEX$1 = new RegExp("(^|\\s)" + CLASS_PREFIX$1 + "\\S+", 'g');

  var Default$5 = _extends({}, Tooltip.Default, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
  });

  var DefaultType$5 = _extends({}, Tooltip.DefaultType, {
    content: '(string|element|function)'
  });

  var CLASS_NAME_FADE$3 = 'fade';
  var CLASS_NAME_SHOW$5 = 'show';
  var SELECTOR_TITLE = '.popover-header';
  var SELECTOR_CONTENT = '.popover-body';
  var Event$1 = {
    HIDE: "hide" + EVENT_KEY$7,
    HIDDEN: "hidden" + EVENT_KEY$7,
    SHOW: "show" + EVENT_KEY$7,
    SHOWN: "shown" + EVENT_KEY$7,
    INSERTED: "inserted" + EVENT_KEY$7,
    CLICK: "click" + EVENT_KEY$7,
    FOCUSIN: "focusin" + EVENT_KEY$7,
    FOCUSOUT: "focusout" + EVENT_KEY$7,
    MOUSEENTER: "mouseenter" + EVENT_KEY$7,
    MOUSELEAVE: "mouseleave" + EVENT_KEY$7
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Popover = /*#__PURE__*/function (_Tooltip) {
    _inheritsLoose(Popover, _Tooltip);

    function Popover() {
      return _Tooltip.apply(this, arguments) || this;
    }

    var _proto = Popover.prototype;

    // Overrides
    _proto.isWithContent = function isWithContent() {
      return this.getTitle() || this._getContent();
    };

    _proto.addAttachmentClass = function addAttachmentClass(attachment) {
      $__default['default'](this.getTipElement()).addClass(CLASS_PREFIX$1 + "-" + attachment);
    };

    _proto.getTipElement = function getTipElement() {
      this.tip = this.tip || $__default['default'](this.config.template)[0];
      return this.tip;
    };

    _proto.setContent = function setContent() {
      var $tip = $__default['default'](this.getTipElement()); // We use append for html objects to maintain js events

      this.setElementContent($tip.find(SELECTOR_TITLE), this.getTitle());

      var content = this._getContent();

      if (typeof content === 'function') {
        content = content.call(this.element);
      }

      this.setElementContent($tip.find(SELECTOR_CONTENT), content);
      $tip.removeClass(CLASS_NAME_FADE$3 + " " + CLASS_NAME_SHOW$5);
    } // Private
    ;

    _proto._getContent = function _getContent() {
      return this.element.getAttribute('data-content') || this.config.content;
    };

    _proto._cleanTipClass = function _cleanTipClass() {
      var $tip = $__default['default'](this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX$1);

      if (tabClass !== null && tabClass.length > 0) {
        $tip.removeClass(tabClass.join(''));
      }
    } // Static
    ;

    Popover._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $__default['default'](this).data(DATA_KEY$7);

        var _config = typeof config === 'object' ? config : null;

        if (!data && /dispose|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Popover(this, _config);
          $__default['default'](this).data(DATA_KEY$7, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Popover, null, [{
      key: "VERSION",
      // Getters
      get: function get() {
        return VERSION$7;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$5;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$7;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY$7;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event$1;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY$7;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$5;
      }
    }]);

    return Popover;
  }(Tooltip);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $__default['default'].fn[NAME$7] = Popover._jQueryInterface;
  $__default['default'].fn[NAME$7].Constructor = Popover;

  $__default['default'].fn[NAME$7].noConflict = function () {
    $__default['default'].fn[NAME$7] = JQUERY_NO_CONFLICT$7;
    return Popover._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$8 = 'scrollspy';
  var VERSION$8 = '4.6.0';
  var DATA_KEY$8 = 'bs.scrollspy';
  var EVENT_KEY$8 = "." + DATA_KEY$8;
  var DATA_API_KEY$6 = '.data-api';
  var JQUERY_NO_CONFLICT$8 = $__default['default'].fn[NAME$8];
  var Default$6 = {
    offset: 10,
    method: 'auto',
    target: ''
  };
  var DefaultType$6 = {
    offset: 'number',
    method: 'string',
    target: '(string|element)'
  };
  var EVENT_ACTIVATE = "activate" + EVENT_KEY$8;
  var EVENT_SCROLL = "scroll" + EVENT_KEY$8;
  var EVENT_LOAD_DATA_API$2 = "load" + EVENT_KEY$8 + DATA_API_KEY$6;
  var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
  var CLASS_NAME_ACTIVE$2 = 'active';
  var SELECTOR_DATA_SPY = '[data-spy="scroll"]';
  var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
  var SELECTOR_NAV_LINKS = '.nav-link';
  var SELECTOR_NAV_ITEMS = '.nav-item';
  var SELECTOR_LIST_ITEMS = '.list-group-item';
  var SELECTOR_DROPDOWN = '.dropdown';
  var SELECTOR_DROPDOWN_ITEMS = '.dropdown-item';
  var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
  var METHOD_OFFSET = 'offset';
  var METHOD_POSITION = 'position';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var ScrollSpy = /*#__PURE__*/function () {
    function ScrollSpy(element, config) {
      var _this = this;

      this._element = element;
      this._scrollElement = element.tagName === 'BODY' ? window : element;
      this._config = this._getConfig(config);
      this._selector = this._config.target + " " + SELECTOR_NAV_LINKS + "," + (this._config.target + " " + SELECTOR_LIST_ITEMS + ",") + (this._config.target + " " + SELECTOR_DROPDOWN_ITEMS);
      this._offsets = [];
      this._targets = [];
      this._activeTarget = null;
      this._scrollHeight = 0;
      $__default['default'](this._scrollElement).on(EVENT_SCROLL, function (event) {
        return _this._process(event);
      });
      this.refresh();

      this._process();
    } // Getters


    var _proto = ScrollSpy.prototype;

    // Public
    _proto.refresh = function refresh() {
      var _this2 = this;

      var autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;
      var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
      var offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;
      this._offsets = [];
      this._targets = [];
      this._scrollHeight = this._getScrollHeight();
      var targets = [].slice.call(document.querySelectorAll(this._selector));
      targets.map(function (element) {
        var target;
        var targetSelector = Util.getSelectorFromElement(element);

        if (targetSelector) {
          target = document.querySelector(targetSelector);
        }

        if (target) {
          var targetBCR = target.getBoundingClientRect();

          if (targetBCR.width || targetBCR.height) {
            // TODO (fat): remove sketch reliance on jQuery position/offset
            return [$__default['default'](target)[offsetMethod]().top + offsetBase, targetSelector];
          }
        }

        return null;
      }).filter(function (item) {
        return item;
      }).sort(function (a, b) {
        return a[0] - b[0];
      }).forEach(function (item) {
        _this2._offsets.push(item[0]);

        _this2._targets.push(item[1]);
      });
    };

    _proto.dispose = function dispose() {
      $__default['default'].removeData(this._element, DATA_KEY$8);
      $__default['default'](this._scrollElement).off(EVENT_KEY$8);
      this._element = null;
      this._scrollElement = null;
      this._config = null;
      this._selector = null;
      this._offsets = null;
      this._targets = null;
      this._activeTarget = null;
      this._scrollHeight = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default$6, typeof config === 'object' && config ? config : {});

      if (typeof config.target !== 'string' && Util.isElement(config.target)) {
        var id = $__default['default'](config.target).attr('id');

        if (!id) {
          id = Util.getUID(NAME$8);
          $__default['default'](config.target).attr('id', id);
        }

        config.target = "#" + id;
      }

      Util.typeCheckConfig(NAME$8, config, DefaultType$6);
      return config;
    };

    _proto._getScrollTop = function _getScrollTop() {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    };

    _proto._getScrollHeight = function _getScrollHeight() {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    };

    _proto._getOffsetHeight = function _getOffsetHeight() {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    };

    _proto._process = function _process() {
      var scrollTop = this._getScrollTop() + this._config.offset;

      var scrollHeight = this._getScrollHeight();

      var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

      if (this._scrollHeight !== scrollHeight) {
        this.refresh();
      }

      if (scrollTop >= maxScroll) {
        var target = this._targets[this._targets.length - 1];

        if (this._activeTarget !== target) {
          this._activate(target);
        }

        return;
      }

      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
        this._activeTarget = null;

        this._clear();

        return;
      }

      for (var i = this._offsets.length; i--;) {
        var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

        if (isActiveTarget) {
          this._activate(this._targets[i]);
        }
      }
    };

    _proto._activate = function _activate(target) {
      this._activeTarget = target;

      this._clear();

      var queries = this._selector.split(',').map(function (selector) {
        return selector + "[data-target=\"" + target + "\"]," + selector + "[href=\"" + target + "\"]";
      });

      var $link = $__default['default']([].slice.call(document.querySelectorAll(queries.join(','))));

      if ($link.hasClass(CLASS_NAME_DROPDOWN_ITEM)) {
        $link.closest(SELECTOR_DROPDOWN).find(SELECTOR_DROPDOWN_TOGGLE).addClass(CLASS_NAME_ACTIVE$2);
        $link.addClass(CLASS_NAME_ACTIVE$2);
      } else {
        // Set triggered link as active
        $link.addClass(CLASS_NAME_ACTIVE$2); // Set triggered links parents as active
        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

        $link.parents(SELECTOR_NAV_LIST_GROUP).prev(SELECTOR_NAV_LINKS + ", " + SELECTOR_LIST_ITEMS).addClass(CLASS_NAME_ACTIVE$2); // Handle special case when .nav-link is inside .nav-item

        $link.parents(SELECTOR_NAV_LIST_GROUP).prev(SELECTOR_NAV_ITEMS).children(SELECTOR_NAV_LINKS).addClass(CLASS_NAME_ACTIVE$2);
      }

      $__default['default'](this._scrollElement).trigger(EVENT_ACTIVATE, {
        relatedTarget: target
      });
    };

    _proto._clear = function _clear() {
      [].slice.call(document.querySelectorAll(this._selector)).filter(function (node) {
        return node.classList.contains(CLASS_NAME_ACTIVE$2);
      }).forEach(function (node) {
        return node.classList.remove(CLASS_NAME_ACTIVE$2);
      });
    } // Static
    ;

    ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $__default['default'](this).data(DATA_KEY$8);

        var _config = typeof config === 'object' && config;

        if (!data) {
          data = new ScrollSpy(this, _config);
          $__default['default'](this).data(DATA_KEY$8, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(ScrollSpy, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$8;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$6;
      }
    }]);

    return ScrollSpy;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](window).on(EVENT_LOAD_DATA_API$2, function () {
    var scrollSpys = [].slice.call(document.querySelectorAll(SELECTOR_DATA_SPY));
    var scrollSpysLength = scrollSpys.length;

    for (var i = scrollSpysLength; i--;) {
      var $spy = $__default['default'](scrollSpys[i]);

      ScrollSpy._jQueryInterface.call($spy, $spy.data());
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$8] = ScrollSpy._jQueryInterface;
  $__default['default'].fn[NAME$8].Constructor = ScrollSpy;

  $__default['default'].fn[NAME$8].noConflict = function () {
    $__default['default'].fn[NAME$8] = JQUERY_NO_CONFLICT$8;
    return ScrollSpy._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$9 = 'tab';
  var VERSION$9 = '4.6.0';
  var DATA_KEY$9 = 'bs.tab';
  var EVENT_KEY$9 = "." + DATA_KEY$9;
  var DATA_API_KEY$7 = '.data-api';
  var JQUERY_NO_CONFLICT$9 = $__default['default'].fn[NAME$9];
  var EVENT_HIDE$3 = "hide" + EVENT_KEY$9;
  var EVENT_HIDDEN$3 = "hidden" + EVENT_KEY$9;
  var EVENT_SHOW$3 = "show" + EVENT_KEY$9;
  var EVENT_SHOWN$3 = "shown" + EVENT_KEY$9;
  var EVENT_CLICK_DATA_API$6 = "click" + EVENT_KEY$9 + DATA_API_KEY$7;
  var CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';
  var CLASS_NAME_ACTIVE$3 = 'active';
  var CLASS_NAME_DISABLED$1 = 'disabled';
  var CLASS_NAME_FADE$4 = 'fade';
  var CLASS_NAME_SHOW$6 = 'show';
  var SELECTOR_DROPDOWN$1 = '.dropdown';
  var SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';
  var SELECTOR_ACTIVE$2 = '.active';
  var SELECTOR_ACTIVE_UL = '> li > .active';
  var SELECTOR_DATA_TOGGLE$4 = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]';
  var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
  var SELECTOR_DROPDOWN_ACTIVE_CHILD = '> .dropdown-menu .active';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Tab = /*#__PURE__*/function () {
    function Tab(element) {
      this._element = element;
    } // Getters


    var _proto = Tab.prototype;

    // Public
    _proto.show = function show() {
      var _this = this;

      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $__default['default'](this._element).hasClass(CLASS_NAME_ACTIVE$3) || $__default['default'](this._element).hasClass(CLASS_NAME_DISABLED$1)) {
        return;
      }

      var target;
      var previous;
      var listElement = $__default['default'](this._element).closest(SELECTOR_NAV_LIST_GROUP$1)[0];
      var selector = Util.getSelectorFromElement(this._element);

      if (listElement) {
        var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE$2;
        previous = $__default['default'].makeArray($__default['default'](listElement).find(itemSelector));
        previous = previous[previous.length - 1];
      }

      var hideEvent = $__default['default'].Event(EVENT_HIDE$3, {
        relatedTarget: this._element
      });
      var showEvent = $__default['default'].Event(EVENT_SHOW$3, {
        relatedTarget: previous
      });

      if (previous) {
        $__default['default'](previous).trigger(hideEvent);
      }

      $__default['default'](this._element).trigger(showEvent);

      if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
        return;
      }

      if (selector) {
        target = document.querySelector(selector);
      }

      this._activate(this._element, listElement);

      var complete = function complete() {
        var hiddenEvent = $__default['default'].Event(EVENT_HIDDEN$3, {
          relatedTarget: _this._element
        });
        var shownEvent = $__default['default'].Event(EVENT_SHOWN$3, {
          relatedTarget: previous
        });
        $__default['default'](previous).trigger(hiddenEvent);
        $__default['default'](_this._element).trigger(shownEvent);
      };

      if (target) {
        this._activate(target, target.parentNode, complete);
      } else {
        complete();
      }
    };

    _proto.dispose = function dispose() {
      $__default['default'].removeData(this._element, DATA_KEY$9);
      this._element = null;
    } // Private
    ;

    _proto._activate = function _activate(element, container, callback) {
      var _this2 = this;

      var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? $__default['default'](container).find(SELECTOR_ACTIVE_UL) : $__default['default'](container).children(SELECTOR_ACTIVE$2);
      var active = activeElements[0];
      var isTransitioning = callback && active && $__default['default'](active).hasClass(CLASS_NAME_FADE$4);

      var complete = function complete() {
        return _this2._transitionComplete(element, active, callback);
      };

      if (active && isTransitioning) {
        var transitionDuration = Util.getTransitionDurationFromElement(active);
        $__default['default'](active).removeClass(CLASS_NAME_SHOW$6).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }
    };

    _proto._transitionComplete = function _transitionComplete(element, active, callback) {
      if (active) {
        $__default['default'](active).removeClass(CLASS_NAME_ACTIVE$3);
        var dropdownChild = $__default['default'](active.parentNode).find(SELECTOR_DROPDOWN_ACTIVE_CHILD)[0];

        if (dropdownChild) {
          $__default['default'](dropdownChild).removeClass(CLASS_NAME_ACTIVE$3);
        }

        if (active.getAttribute('role') === 'tab') {
          active.setAttribute('aria-selected', false);
        }
      }

      $__default['default'](element).addClass(CLASS_NAME_ACTIVE$3);

      if (element.getAttribute('role') === 'tab') {
        element.setAttribute('aria-selected', true);
      }

      Util.reflow(element);

      if (element.classList.contains(CLASS_NAME_FADE$4)) {
        element.classList.add(CLASS_NAME_SHOW$6);
      }

      if (element.parentNode && $__default['default'](element.parentNode).hasClass(CLASS_NAME_DROPDOWN_MENU)) {
        var dropdownElement = $__default['default'](element).closest(SELECTOR_DROPDOWN$1)[0];

        if (dropdownElement) {
          var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(SELECTOR_DROPDOWN_TOGGLE$1));
          $__default['default'](dropdownToggleList).addClass(CLASS_NAME_ACTIVE$3);
        }

        element.setAttribute('aria-expanded', true);
      }

      if (callback) {
        callback();
      }
    } // Static
    ;

    Tab._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $this = $__default['default'](this);
        var data = $this.data(DATA_KEY$9);

        if (!data) {
          data = new Tab(this);
          $this.data(DATA_KEY$9, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Tab, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$9;
      }
    }]);

    return Tab;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$4, function (event) {
    event.preventDefault();

    Tab._jQueryInterface.call($__default['default'](this), 'show');
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$9] = Tab._jQueryInterface;
  $__default['default'].fn[NAME$9].Constructor = Tab;

  $__default['default'].fn[NAME$9].noConflict = function () {
    $__default['default'].fn[NAME$9] = JQUERY_NO_CONFLICT$9;
    return Tab._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$a = 'toast';
  var VERSION$a = '4.6.0';
  var DATA_KEY$a = 'bs.toast';
  var EVENT_KEY$a = "." + DATA_KEY$a;
  var JQUERY_NO_CONFLICT$a = $__default['default'].fn[NAME$a];
  var EVENT_CLICK_DISMISS$1 = "click.dismiss" + EVENT_KEY$a;
  var EVENT_HIDE$4 = "hide" + EVENT_KEY$a;
  var EVENT_HIDDEN$4 = "hidden" + EVENT_KEY$a;
  var EVENT_SHOW$4 = "show" + EVENT_KEY$a;
  var EVENT_SHOWN$4 = "shown" + EVENT_KEY$a;
  var CLASS_NAME_FADE$5 = 'fade';
  var CLASS_NAME_HIDE = 'hide';
  var CLASS_NAME_SHOW$7 = 'show';
  var CLASS_NAME_SHOWING = 'showing';
  var DefaultType$7 = {
    animation: 'boolean',
    autohide: 'boolean',
    delay: 'number'
  };
  var Default$7 = {
    animation: true,
    autohide: true,
    delay: 500
  };
  var SELECTOR_DATA_DISMISS$1 = '[data-dismiss="toast"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Toast = /*#__PURE__*/function () {
    function Toast(element, config) {
      this._element = element;
      this._config = this._getConfig(config);
      this._timeout = null;

      this._setListeners();
    } // Getters


    var _proto = Toast.prototype;

    // Public
    _proto.show = function show() {
      var _this = this;

      var showEvent = $__default['default'].Event(EVENT_SHOW$4);
      $__default['default'](this._element).trigger(showEvent);

      if (showEvent.isDefaultPrevented()) {
        return;
      }

      this._clearTimeout();

      if (this._config.animation) {
        this._element.classList.add(CLASS_NAME_FADE$5);
      }

      var complete = function complete() {
        _this._element.classList.remove(CLASS_NAME_SHOWING);

        _this._element.classList.add(CLASS_NAME_SHOW$7);

        $__default['default'](_this._element).trigger(EVENT_SHOWN$4);

        if (_this._config.autohide) {
          _this._timeout = setTimeout(function () {
            _this.hide();
          }, _this._config.delay);
        }
      };

      this._element.classList.remove(CLASS_NAME_HIDE);

      Util.reflow(this._element);

      this._element.classList.add(CLASS_NAME_SHOWING);

      if (this._config.animation) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        $__default['default'](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }
    };

    _proto.hide = function hide() {
      if (!this._element.classList.contains(CLASS_NAME_SHOW$7)) {
        return;
      }

      var hideEvent = $__default['default'].Event(EVENT_HIDE$4);
      $__default['default'](this._element).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      this._close();
    };

    _proto.dispose = function dispose() {
      this._clearTimeout();

      if (this._element.classList.contains(CLASS_NAME_SHOW$7)) {
        this._element.classList.remove(CLASS_NAME_SHOW$7);
      }

      $__default['default'](this._element).off(EVENT_CLICK_DISMISS$1);
      $__default['default'].removeData(this._element, DATA_KEY$a);
      this._element = null;
      this._config = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default$7, $__default['default'](this._element).data(), typeof config === 'object' && config ? config : {});
      Util.typeCheckConfig(NAME$a, config, this.constructor.DefaultType);
      return config;
    };

    _proto._setListeners = function _setListeners() {
      var _this2 = this;

      $__default['default'](this._element).on(EVENT_CLICK_DISMISS$1, SELECTOR_DATA_DISMISS$1, function () {
        return _this2.hide();
      });
    };

    _proto._close = function _close() {
      var _this3 = this;

      var complete = function complete() {
        _this3._element.classList.add(CLASS_NAME_HIDE);

        $__default['default'](_this3._element).trigger(EVENT_HIDDEN$4);
      };

      this._element.classList.remove(CLASS_NAME_SHOW$7);

      if (this._config.animation) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        $__default['default'](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }
    };

    _proto._clearTimeout = function _clearTimeout() {
      clearTimeout(this._timeout);
      this._timeout = null;
    } // Static
    ;

    Toast._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $__default['default'](this);
        var data = $element.data(DATA_KEY$a);

        var _config = typeof config === 'object' && config;

        if (!data) {
          data = new Toast(this, _config);
          $element.data(DATA_KEY$a, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config](this);
        }
      });
    };

    _createClass(Toast, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$a;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$7;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$7;
      }
    }]);

    return Toast;
  }();
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $__default['default'].fn[NAME$a] = Toast._jQueryInterface;
  $__default['default'].fn[NAME$a].Constructor = Toast;

  $__default['default'].fn[NAME$a].noConflict = function () {
    $__default['default'].fn[NAME$a] = JQUERY_NO_CONFLICT$a;
    return Toast._jQueryInterface;
  };

  exports.Alert = Alert;
  exports.Button = Button;
  exports.Carousel = Carousel;
  exports.Collapse = Collapse;
  exports.Dropdown = Dropdown;
  exports.Modal = Modal;
  exports.Popover = Popover;
  exports.Scrollspy = ScrollSpy;
  exports.Tab = Tab;
  exports.Toast = Toast;
  exports.Tooltip = Tooltip;
  exports.Util = Util;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bootstrap.js.map


/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true&":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".lh[data-v-6e45ef0f] {\n  line-height: 4;\n}\n.mini-flag-img[data-v-6e45ef0f] {\n  opacity: 0.5;\n}\n.mini-flag-img.active[data-v-6e45ef0f] {\n  opacity: 1;\n  width: 113%;\n  border: 3px solid black;\n  border-radius: 50px;\n}\n.card.card-course-carrousel[data-v-6e45ef0f]:hover {\n  background-color: #31348B;\n  transition: background-color 0.3s linear;\n}\n.card.card-course-carrousel:hover div[data-v-6e45ef0f] {\n  color: white !important;\n}\n.card-body div[data-v-6e45ef0f] {\n  color: #606060;\n}\n.carousel-indicators[data-v-6e45ef0f] {\n  position: absolute;\n  top: 0%;\n  bottom: 100%;\n}\n.carousel-control-icon[data-v-6e45ef0f] {\n  background-color: #31348B;\n  padding: 20px;\n  border-radius: 10px;\n}\n.carousel-indicators li[data-v-6e45ef0f] {\n  background-color: #31348B;\n}", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true&":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".li-benefits[data-v-3a5f66d2] {\n  text-indent: -4px;\n  margin-left: -2em;\n  font-size: 0.8rem;\n  line-height: 40px;\n}\n.span-payment-methods[data-v-3a5f66d2] {\n  font-size: 0.85rem;\n}\n.select-subtitle[data-v-3a5f66d2] {\n  font-size: 0.8rem;\n  font-weight: 500;\n  line-height: 20px;\n}\n.card-membership-web[data-v-3a5f66d2] {\n  background: #FFFFFF;\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\n}\n.card-membership-web .card-header[data-v-3a5f66d2] {\n  background-color: #31348B;\n  color: white;\n  border-radius: 12px 12px 0 0;\n  transition: background-color 0.3s linear;\n}\n.card-membership-web:hover .card-header[data-v-3a5f66d2] {\n  background-color: #FAB500;\n  color: #31348B;\n}\n.price-web[data-v-3a5f66d2] {\n  font-style: normal;\n  font-weight: 500;\n  font-size: 30px;\n  line-height: 48px;\n  margin-bottom: 0;\n}\n.price-mobile[data-v-3a5f66d2] {\n  font-style: normal;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 48px;\n}\n.card-membership-mobile ul li[data-v-3a5f66d2] {\n  margin: 15px 0 0 0;\n}\n.membership-details[data-v-3a5f66d2] {\n  padding: 0;\n}\n.membership-details li[data-v-3a5f66d2] {\n  list-style: none;\n  border-bottom: 1px solid #B5B5BB;\n}\n.membership-details li h4[data-v-3a5f66d2] {\n  font-size: 1rem;\n  font-weight: 500;\n}\n.w-24[data-v-3a5f66d2] {\n  width: 24% !important;\n}\n.w-38[data-v-3a5f66d2] {\n  width: 38% !important;\n}\n.carousel-indicators[data-v-3a5f66d2] {\n  position: absolute;\n  top: 0%;\n  bottom: 100%;\n}\n.carousel-control-icon[data-v-3a5f66d2] {\n  background-color: #31348B;\n  padding: 20px;\n  border-radius: 10px;\n}\n.carousel-indicators li[data-v-3a5f66d2] {\n  background-color: #31348B;\n}", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true&":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".btn-registro[data-v-6feb5108] {\n  transition: ease all 0.3s;\n  transform: scale(1);\n}\ninput[type=radio][data-v-6feb5108] {\n  border: 0.1em solid red;\n  box-sizing: border-box;\n}\n.iz[data-v-6feb5108] {\n  width: 80px;\n  height: 38px;\n}\n.iz-lg[data-v-6feb5108] {\n  width: 115px;\n  height: 50px;\n}", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true&":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".process-dot[data-v-107001ad] {\n  width: 30px;\n}\n.line1[data-v-107001ad] {\n  position: relative;\n  left: -9px;\n  top: 3px;\n  width: 220%;\n}\n.line2[data-v-107001ad] {\n  position: relative;\n  left: -24px;\n  top: 3px;\n  width: 220%;\n}", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css&":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css& ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "\nspan.courses-title[data-v-0a1453e9] {\n    color : #FFF;\n    background-color: #31348B;\n    border-radius: 50px;\n}\nspan > span.courses-span[data-v-0a1453e9] {\n    color : #FAB500;\n}\npath.country.mexico[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}\npath.country.argentina[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}\npath.country.usa[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}\npath.country.uk[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}\npath.country.croatia[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}\npath.country.france[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}\npath.country.Switzerland[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}    \n\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.6.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						// Support: Chrome 86+
						// In Chrome, if an element having a focusout handler is blurred by
						// clicking outside of it, it invokes the handler synchronously. If
						// that handler calls `.remove()` on the element, the data is cleared,
						// leaving `result` undefined. We need to guard against this.
						return result && result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		// Suppress native focus or blur as it's already being fired
		// in leverageNative.
		_default: function() {
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/popper.js/dist/esm/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';

var timeoutDuration = function () {
  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
      return 1;
    }
  }
  return 0;
}();

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser && window.Promise;

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var window = element.ownerDocument.defaultView;
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;
    case '#document':
      return element.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

/**
 * Returns the reference node of the reference object, or the reference object itself.
 * @method
 * @memberof Popper.Utils
 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
 * @returns {Element} parent
 */
function getReferenceNode(reference) {
  return reference && reference.referenceNode ? reference.referenceNode : reference;
}

var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */
function isIE(version) {
  if (version === 11) {
    return isIE11;
  }
  if (version === 10) {
    return isIE10;
  }
  return isIE11 || isIE10;
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }

  var noOffsetParent = isIE(10) ? document.body : null;

  // NOTE: 1 DOM access here
  var offsetParent = element.offsetParent || null;
  // Skip hidden elements which don't have an offsetParent
  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }

  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  }

  // .offsetParent will return the closest TH, TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);
}

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
}

function getWindowSizes(document) {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE(10) && getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  try {
    if (isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {}

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
  var width = sizes.width || element.clientWidth || result.width;
  var height = sizes.height || element.clientHeight || result.height;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var isIE10 = isIE(10);
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth);

  // In cases where the parent is fixed, we must ignore negative scroll in offset calc
  if (fixedPosition && isHTML) {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }
  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop);
    var marginLeft = parseFloat(styles.marginLeft);

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  var parentNode = getParentNode(element);
  if (!parentNode) {
    return false;
  }
  return isFixed(parentNode);
}

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

function getFixedPositionOffsetParent(element) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element || !element.parentElement || isIE()) {
    return document.documentElement;
  }
  var el = element.parentElement;
  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
    el = el.parentElement;
  }
  return el || document.documentElement;
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  // NOTE: 1 DOM access here

  var boundaries = { top: 0, left: 0 };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(popper.ownerDocument),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  padding = padding || 0;
  var isPaddingNumber = typeof padding === 'number';
  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var window = element.ownerDocument.defaultView;
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  data.positionFixed = this.options.positionFixed;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style.left = '';
    this.popper.style.right = '';
    this.popper.style.bottom = '';
    this.popper.style.willChange = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicitly asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */
function getRoundedOffsets(data, shouldRound) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var round = Math.round,
      floor = Math.floor;

  var noRound = function noRound(v) {
    return v;
  };

  var referenceWidth = round(reference.width);
  var popperWidth = round(popper.width);

  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
  var isVariation = data.placement.indexOf('-') !== -1;
  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
  var verticalToInteger = !shouldRound ? noRound : round;

  return {
    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
    top: verticalToInteger(popper.top),
    bottom: verticalToInteger(popper.bottom),
    right: horizontalToInteger(popper.right)
  };
}

var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
    // and not the bottom of the html element
    if (offsetParent.nodeName === 'HTML') {
      top = -offsetParent.clientHeight + offsets.bottom;
    } else {
      top = -offsetParentRect.height + offsets.bottom;
    }
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    if (offsetParent.nodeName === 'HTML') {
      left = -offsetParent.clientWidth + offsets.right;
    } else {
      left = -offsetParentRect.width + offsets.right;
    }
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  var _data$offsets$arrow;

  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjunction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;

    // flips variation if reference element overflows boundaries
    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    // flips variation if popper content overflows boundaries
    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);

    var flippedVariation = flippedVariationByRef || flippedVariationByContent;

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  // NOTE: DOM access here
  // resets the popper's position so that the document size can be calculated excluding
  // the size of the popper element itself
  var transformProp = getSupportedPropertyName('transform');
  var popperStyles = data.instance.popper.style; // assignment to help minification
  var top = popperStyles.top,
      left = popperStyles.left,
      transform = popperStyles[transformProp];

  popperStyles.top = '';
  popperStyles.left = '';
  popperStyles[transformProp] = '';

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

  // NOTE: DOM access here
  // restores the original style properties after the offsets have been computed
  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform;

  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */
    boundariesElement: 'viewport',
    /**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariations: false,
    /**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariationsByContent: false
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults = {
  /**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */
  positionFixed: false,

  /**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = debounce(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */


    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;

/* harmony default export */ __webpack_exports__["default"] = (Popper);
//# sourceMappingURL=popper.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true&":
/*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true& ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true& */ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true&":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true& */ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true&":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true& */ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true&":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true& */ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css&":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader??ref--6-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--6-2!../../../../node_modules/vue-loader/lib??vue-loader-options!./Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=template&id=0a1453e9&scoped=true&":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Cursos.vue?vue&type=template&id=0a1453e9&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass: "container text-center",
      staticStyle: { position: "relative" }
    },
    [
      _c("div", { staticClass: "row justify-content-center" }, [
        _vm._m(0),
        _vm._v(" "),
        _c("div", { staticClass: "map" }, [
          _c(
            "svg",
            {
              staticStyle: { width: "100%", height: "100%" },
              attrs: {
                width: "942",
                height: "606",
                viewBox: "0 0 942 606",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg"
              }
            },
            [
              _c("path", {
                attrs: {
                  d:
                    "M328.313 196.908C337.401 187.582 337.421 172.712 347.044 163.88C356.667 155.049 371.379 155.96 383.398 152C394.764 148.198 406.862 139.466 406.823 126.259C406.7 122.209 405.102 118.343 402.328 115.388C405.438 111.636 407.798 107.32 409.278 102.676C414.332 88.9376 415.41 74.052 412.387 59.7286C419.911 61.7086 428.92 57.1149 431.019 49.3728C433.692 39.5912 424.049 30.3839 414.604 31.2749C413.64 25.0311 410.802 19.2277 406.464 14.634C402.127 10.0402 396.496 6.87312 390.318 5.55244C384.14 4.23176 377.706 4.81989 371.87 7.23887C366.033 9.65785 361.07 13.7934 357.638 19.0974C347.225 9.06719 333.915 2.57506 319.6 0.544138C307.845 -0.932595 295.907 0.608348 284.911 5.02175C273.916 9.43516 264.225 16.5757 256.753 25.7703C240.912 21.4537 224.22 17.5134 207.766 19.9885C201.089 20.8933 194.665 23.1404 188.88 26.5944C183.094 30.0484 178.068 34.6379 174.104 40.0862C170.688 45.0147 168.638 50.7605 168.164 56.7386C144.265 49.947 117.177 64.4015 108.445 87.3704C104.689 80.9002 100.205 74.8813 95.0797 69.4309C88.5368 62.3547 80.2669 57.1007 71.0812 54.1843C62.0209 51.4653 52.2839 52.105 43.6572 55.9862C40.1355 57.7576 37.0017 60.2124 34.4385 63.2074C31.8752 66.2024 29.9338 69.6777 28.7275 73.4307C28.5294 74.0049 28.3908 74.5989 28.2324 75.1929C25.9955 75.209 23.783 75.6595 21.718 76.5196C13.7957 80.1134 7.57229 86.6348 4.35273 94.7165C2.09545 100.379 2.37265 107.508 6.53081 112.121C2.67158 115.866 0.366552 120.929 0.0757789 126.299C-0.478642 139.05 9.97615 150.198 22.1338 152.614C28.9744 153.896 36.0413 153.132 42.4494 150.416C44.0483 149.767 45.6086 149.027 47.1223 148.198C50.1516 152.56 54.2104 156.108 58.9389 158.526C63.6675 160.943 68.9196 162.157 74.2296 162.059C71.2793 175.919 70.1704 191.186 76.0314 204.234C78.9354 210.837 83.8207 216.373 90.0107 220.075C86.7589 221.85 83.7282 224.004 80.9816 226.49C78.336 229.346 76.3727 232.765 75.2394 236.49C71.4376 246.984 70.9624 258.845 71.497 269.894C72.8831 298.149 83.5953 328.9 106.089 347.612C112.763 353.191 120.399 357.506 128.622 360.343C136.919 363.215 146.185 363.591 154.957 363.393C156.532 367.276 159.458 370.457 163.196 372.35C166.934 374.243 171.231 374.718 175.293 373.689C180.916 386.421 196.816 389.173 209.429 384.857C207.614 388.614 207.052 392.855 207.825 396.955C204.072 397.646 200.583 399.365 197.748 401.921C194.913 404.476 192.843 407.767 191.767 411.429C191.044 413.66 190.807 416.019 191.074 418.349C191.34 420.679 192.103 422.924 193.311 424.933C193.883 425.789 194.547 426.58 195.291 427.29C194.431 430.571 194.051 433.959 194.163 437.349C194.176 442.613 195.424 447.801 197.806 452.496C200.381 457.324 204.108 461.441 208.658 464.481C213.207 467.521 218.438 469.39 223.884 469.921C218.245 488.286 219.105 508.033 226.319 525.838C227.912 530.147 230.041 534.238 232.655 538.015C231.486 539.583 230.521 541.293 229.784 543.104C228.194 547.414 228.216 552.153 229.846 556.447C231.476 560.742 234.605 564.301 238.655 566.469C235.804 573.241 233.368 580.468 234.22 587.874C235.031 594.923 238.635 601.734 245.466 604.546C251.268 606.942 258.614 605.952 262.257 600.408C263.489 598.523 264.184 596.338 264.268 594.088C264.352 591.838 263.821 589.607 262.733 587.636C264.767 586.643 266.467 585.079 267.624 583.133C268.781 581.188 269.345 578.948 269.247 576.686C269.055 574.545 268.261 572.502 266.958 570.792C265.655 569.083 263.895 567.776 261.881 567.024C267.034 560.853 270.396 553.388 271.603 545.441C274.615 546.155 277.743 546.224 280.783 545.644C283.823 545.064 286.707 543.848 289.244 542.075C291.781 540.303 293.915 538.014 295.505 535.359C297.096 532.704 298.107 529.743 298.473 526.67C300.078 526.227 301.598 525.517 302.968 524.571C313.779 516.908 316.115 501.067 310.888 489.385C315.38 488.681 319.668 487.019 323.46 484.511C327.253 482.004 330.461 478.709 332.867 474.851C335.131 471.02 336.536 466.743 336.984 462.315C337.432 457.888 336.912 453.416 335.461 449.209C337.594 449.491 339.764 449.229 341.769 448.446C343.773 447.664 345.547 446.387 346.925 444.734C352.45 438.101 350.886 428.735 347.262 421.627C341.322 409.746 328.233 402.895 315.244 402.281C308.8 401.792 302.367 403.359 296.869 406.756C293.741 394.876 281.88 384.698 269.267 387.866C268.764 385.106 267.586 382.514 265.838 380.319C264.09 378.125 261.826 376.397 259.248 375.29C256.671 374.182 253.859 373.729 251.064 373.972C248.269 374.214 245.577 375.144 243.229 376.679C243.308 373.422 242.305 370.232 240.378 367.605C238.45 364.979 235.707 363.066 232.576 362.165C223.963 359.987 216.003 367.472 215.686 375.788C208.716 378.025 199.667 379.61 193.747 374.659C195.293 372.454 196.088 369.808 196.013 367.116C195.938 364.423 194.998 361.826 193.331 359.71C191.618 357.684 189.276 356.29 186.678 355.75C187.555 353.634 187.898 351.336 187.677 349.057C187.456 346.778 186.678 344.589 185.411 342.681C178.995 333.652 165.966 338.167 159.214 344.661C155.793 341.089 153.64 336.49 153.089 331.574C152.538 326.658 153.619 321.697 156.165 317.455C160.89 321.898 166.616 325.137 172.858 326.898C179.099 328.659 185.674 328.891 192.024 327.573C198.736 326.043 204.919 322.753 209.937 318.041C214.955 313.329 218.628 307.365 220.577 300.763C220.953 299.516 221.27 298.229 221.527 296.941C227.25 296.229 232.556 292.645 236.695 288.803C242.373 283.455 246.597 276.75 248.971 269.319C250.739 264.053 251.784 258.571 252.08 253.023C255.427 255.308 259.394 256.51 263.445 256.469C266.364 256.468 269.235 255.72 271.782 254.295C274.33 252.871 276.47 250.817 277.999 248.331C284.411 248.868 290.846 247.595 296.57 244.654C302.293 241.713 307.076 237.224 310.373 231.698C312.819 227.263 314.218 222.327 314.461 217.268C314.705 212.209 313.787 207.161 311.779 202.512C312.633 202.7 313.5 202.819 314.373 202.868C316.988 202.931 319.586 202.432 321.991 201.403C324.396 200.375 326.552 198.842 328.313 196.908Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M916.472 48.0462C925.184 51.5113 932.966 57.2932 937.065 65.8669C940.688 73.4506 940.966 82.6183 935.877 89.3901C934.102 91.8182 931.794 93.8071 929.13 95.2041C926.466 96.6011 923.518 97.3691 920.511 97.4491C929.085 111.428 924.313 131.586 910.175 140.08C918.036 148 926.749 158.594 923.343 170.157C922.648 172.522 921.489 174.725 919.935 176.638C918.381 178.551 916.462 180.135 914.289 181.3C912.117 182.464 909.735 183.185 907.281 183.421C904.828 183.656 902.352 183.401 899.998 182.671C896.561 181.573 893.503 179.529 891.174 176.773C888.845 174.017 887.34 170.66 886.83 167.088C884.85 155.544 888.513 143.446 893.107 132.477C889.939 133.018 886.7 132.984 883.543 132.378C883.775 136.452 883.052 140.525 881.434 144.272C879.815 148.018 877.344 151.335 874.218 153.96C871.092 156.584 867.397 158.442 863.427 159.388C859.457 160.333 855.321 160.339 851.347 159.406C850.944 167.97 849.097 176.405 845.882 184.355C850.878 186.955 855.275 190.57 858.793 194.968C859.273 192.565 860.601 190.414 862.535 188.909C863.807 187.807 865.421 187.179 867.102 187.133C868.784 187.086 870.431 187.622 871.762 188.651C872.457 189.188 873.034 189.862 873.457 190.632C873.879 191.402 874.138 192.251 874.217 193.126C878.283 194.845 881.851 197.56 884.591 201.02C887.332 204.481 889.158 208.575 889.9 212.927C890.738 217.041 890.033 221.319 887.919 224.946C886.917 226.516 885.513 227.789 883.851 228.632C882.19 229.475 880.333 229.857 878.474 229.738C874.455 229.381 872.178 226.372 870.772 222.867C870.038 220.753 869.137 218.701 868.079 216.729C867.762 216.194 867.406 215.699 867.069 215.204V215.58C867.507 222.169 866.265 228.76 863.46 234.738C860.655 240.715 856.378 245.883 851.031 249.756C852.863 251.56 854.306 253.721 855.27 256.105C856.234 258.489 856.698 261.046 856.634 263.617C856.453 266.882 855.29 270.017 853.297 272.61C851.305 275.204 848.575 277.135 845.467 278.151C842.562 279.203 839.384 279.228 836.462 278.223C833.541 277.218 831.051 275.243 829.408 272.626C828.55 271.216 827.941 269.669 827.606 268.052C825.414 269.569 823.021 270.776 820.498 271.636C824.746 275.815 828.113 280.805 830.398 286.309C833.216 292.983 834.28 300.267 833.49 307.468C832.7 314.67 830.081 321.55 825.884 327.454C822.315 332.293 817.81 336.363 812.636 339.425C807.462 342.486 801.725 344.476 795.767 345.275C799.014 348.555 801.236 352.71 802.161 357.232C803.086 361.754 802.673 366.447 800.974 370.739C798.935 375.091 795.642 378.736 791.518 381.205C787.394 383.675 782.627 384.856 777.827 384.599C784.198 394.57 787.932 405.996 788.678 417.805C792.733 417.733 796.74 418.694 800.321 420.597C802.21 421.721 803.785 423.303 804.903 425.195C806.02 427.088 806.644 429.231 806.717 431.428C806.756 433.301 806.237 435.144 805.225 436.72C804.212 438.297 802.753 439.536 801.034 440.279C797.153 441.942 792.737 440.992 788.955 439.507C780.855 436.295 773.629 431.213 767.867 424.676C762.482 418.597 755.789 409.41 757.353 400.777C757.674 399.153 758.381 397.63 759.415 396.337C760.449 395.045 761.779 394.02 763.293 393.351C755.868 382.304 752.728 368.927 754.462 355.73C749.501 355.373 744.702 353.811 740.482 351.178C736.261 348.545 732.748 344.921 730.246 340.622C725.974 348.464 719.468 354.859 711.554 358.997C715.178 364.244 716.425 371.907 710.485 375.59C700.07 381.986 690.249 374.184 685.1 365.096C680.986 357.939 678.93 349.785 679.16 341.533C676.492 342.817 673.518 343.332 670.574 343.021C667.629 342.709 664.829 341.584 662.488 339.77C660.68 338.2 659.281 336.213 658.412 333.981C657.542 331.749 657.229 329.339 657.498 326.959C651.638 329.691 645.231 331.046 638.767 330.92C645.44 337.474 643.954 349.334 638.014 356.661C628.431 368.66 610.412 366.086 597.185 363.848C596.786 363.737 596.432 363.503 596.172 363.18C595.913 362.857 595.762 362.46 595.74 362.046C595.691 355.921 593.767 349.958 590.227 344.96C586.687 339.961 581.7 336.167 575.939 334.088C575.41 335.034 574.657 335.836 573.745 336.423C572.834 337.01 571.792 337.364 570.712 337.454C570.242 337.465 569.788 337.29 569.447 336.967C569.105 336.644 568.905 336.2 568.89 335.731C568.791 334.128 568.791 332.544 568.791 330.94V330.939C568.79 330.671 568.85 330.406 568.966 330.165C569.081 329.923 569.25 329.71 569.46 329.543C569.669 329.375 569.913 329.257 570.175 329.197C570.436 329.137 570.708 329.137 570.969 329.197C571.84 329.336 572.711 329.514 573.563 329.712C573.305 326.801 571.127 323.593 567.623 324.306C565.823 324.825 564.215 325.862 563 327.288C561.786 328.714 561.017 330.466 560.791 332.325C560.682 334.399 560.994 336.474 561.708 338.424C562.423 340.374 563.526 342.159 564.95 343.671C570.058 349.849 577.602 353.334 583.146 359.056C586.813 362.648 589.164 367.371 589.819 372.462C593.011 370.581 596.742 369.828 600.413 370.323C603.113 370.599 605.718 371.475 608.038 372.886C610.357 374.298 612.331 376.209 613.818 378.481C615.464 381.52 616.403 384.891 616.564 388.344C616.726 391.797 616.105 395.241 614.748 398.42C609.501 412.063 596.136 418.419 583.186 423.191C587.111 427.077 589.917 431.948 591.311 437.292C592.704 442.637 592.634 448.258 591.106 453.565C589.283 459.062 585.971 463.944 581.538 467.671C577.106 471.397 571.727 473.821 565.999 474.673C567.253 483.65 565.878 492.797 562.039 501.008C554.119 518.353 535.486 530.788 516.061 527.343C511.442 526.628 507.103 524.676 503.502 521.696C499.901 518.716 497.173 514.817 495.607 510.413C494.502 507.285 494.078 503.958 494.361 500.652C494.644 497.347 495.63 494.14 497.251 491.246C494.014 489.866 491.258 487.558 489.33 484.613C485.826 479.366 485.469 472.851 486.162 466.792C487.034 459.347 488.756 451.981 490.122 444.635L493.706 425.072C484.994 424.973 476.401 419.211 474.421 410.38C473.703 407.179 473.847 403.845 474.836 400.717C472.697 401.073 470.521 401.153 468.362 400.955C462.537 400.397 457.147 397.635 453.293 393.232C450.132 394.287 446.854 394.952 443.531 395.213C425.255 396.816 406.484 389.53 396.604 373.234C386.723 356.938 389.099 336.167 400.168 321.118C405.534 313.812 414.424 305.693 423.929 305.278C425.228 305.231 426.525 305.399 427.77 305.773C429.29 302.501 431.413 299.546 434.027 297.06C437.117 294.07 440.659 291.584 444.521 289.694C442.024 290.035 439.484 289.901 437.037 289.298C430.324 287.695 424.166 282.626 422.404 275.814C419.632 265.28 429.394 255.38 439.294 255.38C437.853 252.722 437.125 249.737 437.18 246.715C437.236 243.692 438.073 240.736 439.611 238.133C441.893 234.684 445.28 232.112 449.215 230.838C453.151 229.565 457.402 229.665 461.273 231.124C463.141 226.82 465.977 223.006 469.56 219.978C473.144 216.951 477.378 214.791 481.933 213.668C486.488 212.545 491.241 212.489 495.821 213.504C500.401 214.519 504.685 216.578 508.339 219.521C509.922 216.699 512.198 214.327 514.953 212.63C513.592 211.094 512.549 209.304 511.883 207.363C511.087 204.63 511.034 201.734 511.73 198.974C512.426 196.214 513.846 193.689 515.844 191.661C513.455 190.865 511.249 189.6 509.356 187.941C507.462 186.282 505.918 184.261 504.815 181.998C498.874 190.77 491.865 198.156 480.44 198.156C473.767 198.136 466.639 195.047 463.59 188.81C459.926 181.285 463.114 173.226 468.401 167.425C471.214 164.319 474.519 161.697 478.183 159.663C477.778 156.82 477.899 153.928 478.539 151.129C480.46 143.03 486.935 137.031 493.251 132.358C499.567 127.685 507.23 121.566 515.566 122.002C521.625 122.339 527.526 126.913 528.199 132.853C534.417 131.942 541.07 131.942 546.753 134.595C549.357 135.774 551.619 137.595 553.327 139.888C555.034 142.181 556.131 144.87 556.514 147.703C556.661 149.146 556.488 150.603 556.009 151.972C555.53 153.34 554.756 154.587 553.742 155.624C553.457 155.237 553.04 154.967 552.57 154.865C552.1 154.763 551.608 154.836 551.188 155.069C549.703 155.921 548.139 156.594 546.673 157.445L546.119 157.802L545.862 157.604C545.481 157.38 545.037 157.289 544.599 157.347C544.162 157.404 543.756 157.606 543.446 157.921C543.091 158.314 542.828 158.78 542.674 159.287C542.278 160.27 542.063 161.316 542.04 162.376C542.024 162.82 542.157 163.257 542.419 163.616C542.682 163.976 543.057 164.236 543.486 164.356C543.907 164.472 544.355 164.446 544.759 164.281C545.164 164.116 545.503 163.822 545.723 163.445L545.881 163.247C546.003 163.092 546.135 162.947 546.277 162.811C546.553 162.519 546.844 162.241 547.149 161.98L547.287 161.861L547.782 161.504C548.119 161.306 548.436 161.089 548.772 160.91C550.178 160.099 551.683 159.445 553.089 158.653C553.468 158.421 553.758 158.069 553.912 157.652C554.067 157.236 554.077 156.779 553.94 156.356C557.065 155.01 560.438 154.336 563.841 154.376C563.411 151.07 563.834 147.708 565.067 144.61C566.301 141.512 568.305 138.781 570.89 136.674C573.482 134.638 576.572 133.332 579.84 132.892C579.006 130.896 578.792 128.696 579.227 126.577C579.661 124.458 580.723 122.519 582.275 121.012C584.178 119.178 586.501 117.836 589.041 117.104C591.581 116.373 594.261 116.273 596.848 116.814C599.597 117.408 602.201 118.538 604.511 120.141C604.525 118.046 604.97 115.977 605.818 114.062C607.2 111.006 609.634 108.549 612.676 107.139C615.719 105.729 619.167 105.459 622.391 106.379C625.496 107.176 628.336 108.773 630.629 111.013C632.97 107.62 636.506 105.237 640.529 104.34C638.817 101.889 637.993 98.9271 638.192 95.9442C638.313 93.8843 639 91.8977 640.177 90.2032C641.354 88.5087 642.977 87.1721 644.865 86.3408C642.984 75.0544 651.796 62.9166 663.26 61.6691C663.322 59.2634 663.923 56.9022 665.02 54.7601C666.116 52.618 667.68 50.7498 669.596 49.2936C672.012 47.429 674.878 46.2362 677.903 45.8363C680.929 45.4364 684.006 45.8436 686.823 47.0166C698.703 51.6895 702.664 63.7086 702.664 75.589C706.839 72.5112 711.731 70.5487 716.876 69.887C722.021 69.2252 727.249 69.8861 732.068 71.8071C733.799 69.2279 736.25 67.2146 739.117 66.0177C741.984 64.8208 745.139 64.4932 748.19 65.0756C751.241 65.658 754.054 67.1248 756.278 69.2933C758.503 71.4619 760.04 74.2365 760.7 77.2721C765.642 73.7811 771.271 71.3846 777.213 70.2428C778.528 66.4968 780.846 63.184 783.916 60.6663C786.985 58.1486 790.688 56.5228 794.618 55.9665C798.628 55.5621 802.671 56.297 806.282 58.0868C809.893 59.8766 812.926 62.6487 815.033 66.0847C819.839 62.5708 825.68 60.762 831.631 60.9449C837.582 61.1278 843.301 63.2921 847.882 67.0945C855.622 62.489 864.439 60.0031 873.445 59.887C872 51.4717 879.92 44.3633 887.84 43.0762C897.166 41.5714 907.76 44.5811 916.472 48.0462Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M844.658 413.924C844.627 413.526 844.476 413.146 844.225 412.835C843.974 412.524 843.635 412.296 843.252 412.182C839.292 411.132 835.332 413.964 833.649 417.369C832.776 418.992 832.496 420.869 832.857 422.676C833.218 424.483 834.199 426.108 835.629 427.27C836.919 428.274 838.447 428.925 840.065 429.161C841.682 429.397 843.333 429.209 844.856 428.616C846.365 427.993 847.629 426.893 848.455 425.484C849.28 424.076 849.623 422.436 849.43 420.815C849.31 419.348 848.806 417.939 847.968 416.73C847.13 415.52 845.989 414.552 844.658 413.924Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M897.586 443.388C903.15 445.368 908.754 443.249 913.209 439.804C913.883 441.963 915.276 443.827 917.157 445.084C919.038 446.341 921.292 446.917 923.545 446.714C931.089 445.823 935.049 437.705 933.446 430.874C931.624 422.637 924.119 417.904 916.734 415.211C909.764 412.657 901.348 410.677 894.517 414.459C894.248 414.014 893.883 413.635 893.447 413.35C893.012 413.066 892.518 412.883 892.003 412.815C891.241 412.73 890.47 412.867 889.785 413.211C889.251 411.989 888.434 410.911 887.401 410.068C886.368 409.224 885.149 408.639 883.845 408.36C879.271 407.43 875.231 411.014 873.944 415.191C873.392 417.436 873.505 419.793 874.272 421.973C875.039 424.154 876.425 426.063 878.261 427.468C881.868 430.162 886.167 431.776 890.656 432.121C890.296 434.515 890.794 436.959 892.062 439.021C893.331 441.083 895.287 442.63 897.586 443.388Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M887.611 248.628C889.557 248.495 891.405 247.725 892.869 246.436C894.332 245.148 895.331 243.413 895.71 241.499C896.009 239.188 895.445 236.847 894.126 234.926C893.443 233.933 892.592 233.069 891.611 232.371C890.522 231.599 888.759 230.787 887.512 231.658C887.252 231.837 887.033 232.069 886.87 232.339C886.706 232.608 886.601 232.91 886.562 233.223C885.773 233.198 884.986 233.292 884.225 233.5C882.446 234.076 880.956 235.314 880.064 236.958C879.172 238.601 878.946 240.525 879.433 242.331C879.819 244.185 880.856 245.839 882.356 246.994C883.856 248.149 885.72 248.729 887.611 248.628Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M857.706 280.467C854.241 288.566 859.687 296.407 867.389 299.238C870.451 300.438 873.797 300.714 877.014 300.031C880.231 299.348 883.177 297.737 885.487 295.397C889.432 290.895 891.984 285.343 892.833 279.418C893.406 276.469 893.684 273.471 893.665 270.468C893.704 268.464 892.998 266.517 891.684 265.003C891.693 264.95 891.693 264.897 891.684 264.844C890.378 259.577 885.744 254.112 879.804 256.726C873.864 259.34 873.428 265.458 873.864 271.022C870.517 270.676 867.146 271.405 864.241 273.103C861.336 274.802 859.047 277.381 857.706 280.467Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M938.296 490.652C935.329 483.933 930.524 478.188 924.436 474.079C925.708 470.138 925.518 465.872 923.901 462.06C922.856 459.239 920.962 456.812 918.479 455.113C915.997 453.414 913.048 452.527 910.041 452.575C906.776 452.904 903.676 454.165 901.109 456.209C898.542 458.252 896.618 460.992 895.566 464.099C895.371 464.683 895.212 465.278 895.091 465.881C893.537 464.447 891.74 463.3 889.784 462.495C888.843 462.151 887.885 461.853 886.913 461.604C887.766 459.732 888.147 457.679 888.023 455.625C887.898 453.571 887.273 451.579 886.201 449.823C880.696 441.606 869.508 441.903 862.143 447.209C858.11 450.119 854.853 453.974 852.658 458.436C852.506 458.783 852.381 459.14 852.282 459.506C843.055 461.486 835.768 469.94 833.432 478.811C819.947 476.831 805.71 486.058 803.73 499.939C801.513 514.987 812.641 529.165 825.986 534.808C834.761 538.219 844.25 539.383 853.589 538.194C858.501 537.653 863.371 536.773 868.162 535.56L869.825 535.144C870.344 539.062 871.797 542.797 874.063 546.035C876.085 548.827 878.68 551.154 881.675 552.862C884.67 554.569 887.995 555.617 891.428 555.935C907.843 557.915 923.703 547.658 933.009 534.768C942.316 521.878 944.93 505.305 938.296 490.652Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M831.669 394.935C831.733 393.454 831.28 391.996 830.388 390.811C829.496 389.626 828.22 388.788 826.778 388.441C823.273 387.49 819.828 389.074 816.976 390.975C814.035 392.796 811.329 394.97 808.918 397.45C806.802 399.689 805.552 402.609 805.392 405.685C805.233 408.762 806.174 411.795 808.046 414.241C809.975 416.578 812.676 418.148 815.661 418.667C818.646 419.187 821.718 418.621 824.323 417.073C825.78 416.196 827.037 415.022 828.009 413.626C828.982 412.231 829.648 410.645 829.966 408.974C830.484 405.825 829.984 402.593 828.54 399.747C829.436 399.288 830.197 398.603 830.746 397.758C831.295 396.914 831.613 395.941 831.669 394.935Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M111.816 93.2099C107.216 84.6109 101.547 76.6274 94.9458 69.449C88.4018 62.3786 80.1317 57.1313 70.9473 54.2222C61.8947 51.4937 52.1605 52.1337 43.5431 56.0241C40.0234 57.7932 36.8907 60.2449 34.3276 63.2364C31.7644 66.2279 29.822 69.6993 28.6134 73.4487C27.154 77.4404 26.7921 81.7505 27.5652 85.9297C28.3384 90.1089 30.2183 94.0042 33.0091 97.2096C33.4881 97.655 34.1 97.9311 34.7509 97.9954C35.4018 98.0598 36.0559 97.909 36.6129 97.566C42.2957 94.4771 42.5531 87.1706 39.8404 81.9828C36.2564 75.1714 28.3757 73.7259 21.6039 76.498C13.6816 80.0919 7.45821 86.6133 4.23864 94.6949C1.64475 101.229 2.41697 109.684 8.5948 114.02C14.7726 118.357 24.0988 114.812 24.4354 107.07C24.4296 106.813 24.3392 106.565 24.1781 106.365C24.017 106.164 23.7942 106.022 23.5444 105.962C11.6639 104.496 0.535911 114.397 0.0210914 126.277C-0.533329 139.029 9.92146 150.177 22.0791 152.592C28.9197 153.875 35.9866 153.11 42.3947 150.394C47.7805 148.177 54.6909 144.454 56.2552 138.257C57.463 133.306 52.9287 127.148 47.4835 128.911C41.4046 130.891 42.8303 138.989 44.652 143.444C50.0774 156.869 65.7001 164.077 79.6003 161.443L75.2837 157.344C71.6206 172.334 69.5019 189.639 76.0163 204.173C81.0655 215.4 92.5499 225.043 105.5 223.083C105.906 223.055 106.297 222.911 106.624 222.668C106.952 222.426 107.204 222.094 107.349 221.714C107.495 221.333 107.529 220.918 107.447 220.519C107.364 220.119 107.17 219.752 106.886 219.459C102.411 215.262 96.9853 216.212 91.8965 218.905C87.9491 220.914 84.2813 223.43 80.9863 226.39C78.342 229.212 76.3719 232.597 75.2243 236.29C71.4424 246.765 70.9473 258.625 71.5018 269.674C72.8878 297.93 83.6 328.68 106.074 347.392C112.759 352.95 120.393 357.256 128.607 360.104C137.537 363.193 147.596 363.411 156.922 363.094L154.427 361.292C156.645 371.608 168.902 376.994 178.188 372.598L174.446 371.173C180.228 389.865 205.929 390.32 218.997 379.568C220.978 377.964 218.7 374.796 216.503 375.608C208.78 378.162 198.128 380.222 192.167 373.113C192.167 374.262 192.167 375.39 192.167 376.539C194.426 374.457 195.818 371.601 196.065 368.539C196.312 365.477 195.397 362.434 193.502 360.017C191.606 357.6 188.87 355.985 185.838 355.495C182.805 355.005 179.699 355.675 177.139 357.372C176.708 357.656 176.381 358.071 176.205 358.556C176.03 359.041 176.015 359.57 176.164 360.064C176.313 360.558 176.618 360.99 177.032 361.297C177.447 361.604 177.95 361.769 178.465 361.767C187.653 361.154 190.088 349.372 185.396 342.739C178.545 333.096 164.209 338.779 157.952 345.947H160.506C156.337 342.271 153.685 337.176 153.066 331.653C152.448 326.129 153.907 320.574 157.16 316.067H154.784C159.5 320.983 165.39 324.617 171.9 326.626C178.409 328.635 185.323 328.954 191.989 327.552C198.702 326.027 204.888 322.741 209.91 318.032C214.931 313.324 218.608 307.362 220.562 300.761C222.661 294.022 222.859 286.835 221.136 279.99C220.205 276.624 216.384 276.149 213.532 277.456C212.357 278.051 211.321 278.888 210.492 279.911C209.662 280.935 209.059 282.123 208.721 283.396C208.219 284.826 208.043 286.35 208.205 287.857C208.367 289.364 208.864 290.816 209.659 292.106C210.454 293.397 211.528 294.493 212.801 295.316C214.074 296.138 215.514 296.666 217.017 296.861C224.443 298.049 231.472 293.633 236.68 288.802C242.348 283.445 246.57 276.743 248.956 269.318C251.589 261.787 252.575 253.779 251.847 245.834L247.214 247.22C250.025 253.418 256.896 256.467 263.43 256.447C266.928 256.463 270.345 255.402 273.219 253.407C276.092 251.413 278.281 248.582 279.489 245.299C278.023 246.19 276.558 247.081 275.073 247.953C281.907 249.106 288.931 248.172 295.225 245.272C301.52 242.372 306.794 237.641 310.358 231.696C313.646 225.645 314.999 218.731 314.234 211.887C313.47 205.043 310.624 198.598 306.081 193.421C304.358 191.441 301.547 194.075 302.695 196.174C303.914 198.184 305.624 199.851 307.664 201.018C309.704 202.185 312.008 202.814 314.358 202.847C316.959 202.907 319.543 202.408 321.934 201.383C324.325 200.359 326.469 198.832 328.218 196.906C337.307 187.58 337.307 172.71 346.95 163.899C356.593 155.087 371.285 155.978 383.304 152.018C394.67 148.236 406.748 139.484 406.728 126.277C406.728 115.466 393.521 104.952 383.561 112.12C383.062 112.448 382.708 112.956 382.572 113.538C382.436 114.12 382.528 114.732 382.829 115.248C385.858 120.238 392.729 121.188 397.699 118.832C403.897 115.802 406.887 108.773 409.164 102.675C414.724 87.5284 415.464 71.0331 411.283 55.4498L408.194 57.9249C416.114 63.2909 428.41 58.5982 430.905 49.3908C433.796 38.7776 422.193 28.798 412.074 31.7286L414.827 33.7086C413.5 20.2441 403.263 7.96766 389.759 5.49257C382.978 4.32572 376.002 5.34688 369.84 8.40827C363.678 11.4697 358.65 16.4124 355.484 22.5212L360.315 21.7886C353.449 14.5209 345.084 8.83403 335.8 5.12253C326.516 1.41104 316.535 -0.236238 306.551 0.294997C296.567 0.826234 286.818 3.52326 277.98 8.19896C269.143 12.8747 261.428 19.4171 255.371 27.3724L258.975 26.3229C242.422 21.7886 224.958 17.3136 207.711 19.9273C201.033 20.8277 194.607 23.0729 188.821 26.5273C183.036 29.9817 178.01 34.5735 174.05 40.0251C169.827 45.9844 167.665 53.1592 167.892 60.4594L171.278 57.7467C145.161 48.0048 113.856 65.1126 106.846 91.7248C106.772 92.1716 106.868 92.63 107.117 93.0087C107.365 93.3875 107.747 93.6588 108.186 93.7686C108.626 93.8785 109.091 93.8188 109.488 93.6015C109.885 93.3842 110.186 93.0252 110.331 92.596C116.647 68.6173 146.23 53.6876 169.298 62.7761C169.716 62.9804 170.179 63.0753 170.644 63.0519C171.109 63.0284 171.56 62.8875 171.956 62.6422C172.351 62.3969 172.678 62.0554 172.906 61.6494C173.134 61.2434 173.255 60.7863 173.258 60.3208C172.981 44.8564 186.069 32.778 199.91 28.2634C218.641 22.145 238.917 28.402 257.094 33.5304C257.73 33.7018 258.401 33.6945 259.034 33.5094C259.666 33.3242 260.235 32.9684 260.678 32.481C266.181 25.3038 273.154 19.385 281.13 15.1206C289.105 10.8562 297.9 8.34471 306.925 7.75418C315.949 7.16365 324.996 8.5077 333.46 11.6964C341.923 14.8851 349.607 19.8449 355.999 26.2437C356.342 26.5657 356.754 26.8057 357.203 26.9454C357.652 27.0852 358.127 27.1212 358.592 27.0507C359.058 26.9801 359.501 26.8049 359.888 26.5382C360.276 26.2715 360.598 25.9204 360.83 25.5111C363.178 20.2555 367.202 15.9262 372.272 13.2C377.341 10.4738 383.172 9.50437 388.851 10.4434C394.53 11.3823 399.738 14.1768 403.66 18.3897C407.583 22.6027 409.999 27.9967 410.53 33.7284C410.544 34.0545 410.632 34.3731 410.788 34.6602C410.943 34.9474 411.161 35.1956 411.426 35.3862C411.691 35.5768 411.995 35.7048 412.317 35.7606C412.639 35.8165 412.969 35.7986 413.282 35.7085C420.49 33.6096 429.222 41.2131 426.569 48.777C425.942 50.2838 424.997 51.6372 423.798 52.7441C422.599 53.851 421.174 54.6852 419.622 55.1894C418.07 55.6936 416.427 55.8558 414.806 55.6649C413.186 55.474 411.626 54.9346 410.233 54.0836C408.59 52.9747 406.709 54.8954 407.144 56.5587C410.574 69.3939 410.485 82.9158 406.887 95.7048C405.303 101.328 403.243 107.763 399.224 112.179C396.095 115.624 389.462 117.842 386.67 112.733C386.413 113.783 386.175 114.832 385.918 115.862C387.644 114.866 389.649 114.462 391.626 114.713C393.603 114.963 395.444 115.853 396.868 117.248C398.478 118.561 399.685 120.302 400.35 122.271C401.015 124.239 401.112 126.355 400.63 128.376C398.155 139.643 386.096 144.118 376.136 146.335C370.657 147.519 365.255 149.033 359.959 150.87C354.953 152.404 350.217 154.709 345.92 157.701C336.555 164.809 334.654 175.819 329.901 185.877C327.525 190.867 323.961 196.293 318.417 197.956C313.883 199.302 308.517 198.273 306.299 193.798L302.913 196.55C306.514 201.067 308.652 206.574 309.041 212.337C309.43 218.101 308.052 223.846 305.091 228.805C302.08 233.395 297.774 236.987 292.719 239.127C287.664 241.267 282.088 241.857 276.697 240.824C275.916 240.642 275.097 240.717 274.362 241.039C273.627 241.36 273.015 241.91 272.618 242.606C269.291 250.527 255.985 251.933 251.332 244.587C250.998 244.112 250.51 243.767 249.951 243.611C249.392 243.455 248.796 243.497 248.265 243.73C247.733 243.963 247.299 244.373 247.035 244.89C246.771 245.407 246.694 245.999 246.818 246.567C248.786 253.167 248.703 260.211 246.58 266.763C244.294 273.165 240.513 278.929 235.551 283.574C231.234 287.534 223.512 293.237 217.255 290.584C216.325 290.238 215.559 289.556 215.108 288.672C214.657 287.788 214.554 286.768 214.82 285.812C215.077 284.485 215.75 282.921 217.176 283.337L214.859 281.119C216.146 286.649 216.099 292.407 214.722 297.915C213.345 303.424 210.677 308.526 206.939 312.8C202.985 317.181 197.941 320.434 192.319 322.229C186.698 324.024 180.701 324.296 174.941 323.017C168.249 321.701 162.092 318.444 157.239 313.652C156.924 313.337 156.496 313.161 156.051 313.161C155.606 313.161 155.178 313.337 154.863 313.652C150.973 318.816 149.154 325.247 149.762 331.684C150.37 338.12 153.362 344.097 158.15 348.441C158.493 348.772 158.951 348.956 159.427 348.956C159.903 348.956 160.361 348.772 160.704 348.441C165.179 343.452 176.248 337.432 181.693 344.481C184.346 347.946 184.109 356.58 178.485 356.936L179.792 361.332C181.367 360.137 183.353 359.617 185.312 359.886C187.271 360.155 189.042 361.192 190.237 362.767C191.432 364.343 191.952 366.328 191.682 368.287C191.413 370.246 190.377 372.017 188.801 373.212C188.377 373.688 188.151 374.308 188.17 374.945C188.188 375.582 188.45 376.187 188.9 376.638C195.969 385.112 208.701 383.39 217.988 380.321L215.493 376.361C205.236 384.756 183.812 384.677 179.337 369.886C179.215 369.522 179.014 369.191 178.749 368.915C178.483 368.639 178.159 368.426 177.8 368.291C177.442 368.157 177.058 368.104 176.676 368.136C176.294 368.169 175.925 368.286 175.594 368.48C169.02 371.569 160.803 366.797 159.358 359.985C159.194 359.449 158.86 358.981 158.406 358.653C157.952 358.324 157.403 358.152 156.843 358.164C141.707 358.46 126.874 353.909 114.509 345.174C103.791 337.098 95.2681 326.464 89.7184 314.246C84.1699 302.327 80.4325 289.647 78.63 276.624C76.7692 265.624 76.7291 254.392 78.5112 243.379C79.0986 239.165 80.555 235.119 82.7882 231.498C83.1733 230.913 83.6179 230.369 84.1148 229.875L84.8871 229.142C84.4514 229.518 84.8871 229.142 84.8871 229.142C85.5405 228.627 86.2335 228.172 86.8671 227.677C91.2035 224.528 98.609 217.895 103.876 222.707L104.708 219.162C93.0252 221.142 82.5704 211.381 78.5904 201.183C73.3036 187.659 78.8082 172.532 81.8179 159.186C81.95 158.601 81.9278 157.991 81.7535 157.417C81.5792 156.843 81.2589 156.324 80.8238 155.911C80.3886 155.497 79.8537 155.204 79.2714 155.06C78.689 154.916 78.0791 154.925 77.5014 155.087C73.1709 155.835 68.7216 155.476 64.5672 154.043C60.4129 152.609 56.6885 150.149 53.7405 146.89C51.0278 143.999 47.8003 139.92 47.4637 135.821C47.2261 133.405 48.7903 131.386 51.1268 133.148C52.0916 133.939 52.7085 135.075 52.8455 136.315C52.9824 137.555 52.6285 138.799 51.8594 139.781C49.1665 144.276 43.1273 147.088 38.3553 148.652C33.0757 150.487 27.4016 150.876 21.9207 149.781C12.2579 147.682 3.80303 139.603 2.55558 129.564C1.12993 118.337 11.1293 106.536 22.8711 108.456L21.9801 107.328C21.7069 109.022 20.8271 110.558 19.5046 111.651C18.1822 112.744 16.5073 113.319 14.7924 113.268C13.0414 113.155 11.3659 112.513 9.98715 111.428C8.6084 110.343 7.5913 108.865 7.07015 107.189C4.29805 99.8827 9.05023 92.4376 13.941 87.3884C18.1388 83.0521 26.7917 76.9336 32.8309 81.4482C35.5238 83.4283 38.5731 90.517 34.1576 92.398L37.5435 93.6653C30.138 83.5669 35.7812 68.3599 46.3746 62.9741C60.849 55.6281 78.531 63.4691 89.4808 73.5081C96.4819 80.2331 102.87 87.5686 108.569 95.4275C108.888 95.6995 109.284 95.8634 109.702 95.8955C110.12 95.9275 110.537 95.8262 110.894 95.6061C111.251 95.386 111.528 95.0584 111.687 94.6705C111.845 94.2826 111.877 93.8544 111.776 93.4475L111.816 93.2099Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M87.4216 319.514C90.918 313.143 96.0824 307.844 102.361 304.185C108.64 300.526 115.796 298.645 123.063 298.743C130.093 298.95 136.935 301.058 142.864 304.842C144.309 305.753 145.636 306.822 147.061 307.753C148.551 308.631 149.973 309.617 151.319 310.703C154.011 313.139 155.279 316.881 158.051 319.158C158.981 319.93 160.744 319.435 160.625 318.029C160.348 315.119 158.209 312.485 156.467 310.267C154.694 307.863 152.776 305.568 150.725 303.397C145.925 299.188 140.122 296.29 133.874 294.981C127.94 293.532 121.751 293.475 115.792 294.814C109.832 296.154 104.263 298.854 99.5198 302.704C94.0768 307.123 89.738 312.75 86.8474 319.138C86.6494 319.574 87.2632 319.93 87.481 319.514H87.4216Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M217.749 376.224C215.525 377.38 213.552 378.965 211.943 380.887C210.334 382.808 209.121 385.029 208.374 387.422C207.627 389.814 207.36 392.331 207.589 394.827C207.819 397.322 208.539 399.748 209.709 401.965L213.452 396.836C208.684 396.295 203.879 397.463 199.891 400.131C195.902 402.8 192.99 406.796 191.671 411.41C190.953 413.641 190.719 416 190.986 418.328C191.252 420.657 192.012 422.902 193.215 424.914C195.354 428.26 199.651 431.567 203.789 429.626C206.72 428.24 208.64 423.904 206.799 420.973C204.343 417.013 199.591 419.409 197.492 422.28C194.463 426.438 193.948 432.359 193.988 437.329C194.001 442.593 195.249 447.782 197.631 452.476C200.536 457.974 204.946 462.531 210.346 465.613C215.747 468.696 221.913 470.176 228.124 469.881C227.095 468.614 226.144 467.327 225.055 466.04C218.01 485.415 218.398 506.713 226.144 525.818C227.824 530.456 230.158 534.83 233.074 538.808C235.312 541.54 240.183 543.48 242.123 539.322C243.371 536.629 241.688 532.313 238.163 533.382C234.203 534.59 231.055 539.481 229.649 543.045C227.932 547.746 228.12 552.933 230.173 557.498C232.226 562.062 235.981 565.644 240.638 567.479C240.302 566.331 239.985 565.202 239.648 564.073C236.421 571.538 233.233 579.577 234.183 587.834C234.995 594.883 238.619 601.695 245.43 604.487C251.232 606.882 258.558 605.892 262.201 600.348C265.31 595.636 265.033 588.626 260.419 584.963C260.142 586.171 259.845 587.399 259.548 588.606C262.328 588.181 264.849 586.735 266.62 584.551C268.392 582.367 269.285 579.601 269.127 576.794C268.969 573.986 267.77 571.338 265.764 569.367C263.759 567.396 261.091 566.243 258.281 566.133C258.776 567.222 259.251 568.33 259.746 569.42C266.924 561.925 271.248 552.151 271.963 541.797L268.597 544.49C272.797 546.054 277.369 546.324 281.724 545.265C286.079 544.207 290.018 541.868 293.031 538.55C296.104 535.096 298.01 530.761 298.479 526.162C298.949 521.562 297.957 516.932 295.645 512.928C295.393 512.527 295.042 512.198 294.625 511.973C294.209 511.747 293.742 511.633 293.269 511.641C287.744 511.78 285.764 518.037 287.665 522.531C290.298 528.788 298.318 527.739 302.912 524.511C314.594 516.235 316.396 498.454 309.584 486.633C309.03 487.642 308.476 488.613 307.941 489.662C312.984 489.353 317.88 487.841 322.22 485.254C326.56 482.668 330.218 479.08 332.89 474.792C335.65 470.073 337.121 464.712 337.156 459.245C337.19 453.778 335.788 448.399 333.088 443.645L329.544 446.516C332.1 448.573 335.368 449.532 338.631 449.183C341.893 448.834 344.884 447.206 346.948 444.655C352.493 438.042 350.909 428.676 347.285 421.567C341.345 409.687 328.257 402.856 315.287 402.242C308.014 401.641 300.775 403.757 294.971 408.182L297.367 408.736C295.031 395.45 281.527 383.53 267.666 388.302L269.646 389.748C269.382 386.375 268.13 383.155 266.047 380.49C263.963 377.825 261.139 375.834 257.93 374.765C254.72 373.695 251.267 373.596 248.001 374.479C244.736 375.362 241.803 377.188 239.569 379.728L242.301 381.708C243.036 379.795 243.366 377.75 243.271 375.703C243.176 373.655 242.659 371.65 241.751 369.812C240.844 367.975 239.565 366.345 237.997 365.025C236.429 363.706 234.604 362.725 232.639 362.145C223.273 359.789 214.679 368.818 215.808 377.986C216.046 379.748 218.818 379.709 218.6 377.986C217.729 371.095 224.817 364.026 231.787 365.729C233.247 366.159 234.605 366.878 235.78 367.845C236.955 368.812 237.923 370.006 238.625 371.355C239.328 372.705 239.751 374.183 239.869 375.7C239.987 377.217 239.797 378.742 239.312 380.184C238.658 381.847 240.638 383.748 242.044 382.164C243.822 380.073 246.176 378.552 248.813 377.792C251.451 377.032 254.253 377.066 256.871 377.89C259.489 378.714 261.806 380.291 263.533 382.425C265.259 384.559 266.318 387.154 266.577 389.886C266.587 390.122 266.649 390.352 266.76 390.56C266.871 390.768 267.027 390.948 267.218 391.087C267.408 391.226 267.628 391.321 267.86 391.363C268.092 391.405 268.33 391.394 268.557 391.332C279.507 387.371 296.377 395.708 294.655 408.895C294.516 409.845 295.328 411.033 296.437 410.598C302.466 407.882 309.101 406.789 315.683 407.43C322.034 408.214 328.048 410.727 333.068 414.696C338.451 418.696 342.223 424.491 343.701 431.032C344.394 434.695 344.315 439.309 341.325 442.022C339.167 444.002 335.226 445.407 332.731 443.328C332.32 442.973 331.797 442.773 331.253 442.764C330.709 442.755 330.18 442.938 329.757 443.28C329.335 443.622 329.046 444.102 328.942 444.636C328.838 445.17 328.924 445.723 329.187 446.199C331.413 450.278 332.561 454.858 332.523 459.504C332.485 464.151 331.262 468.711 328.969 472.752C326.759 476.467 323.687 479.595 320.013 481.873C316.34 484.151 312.172 485.512 307.862 485.841C307.511 485.847 307.169 485.946 306.869 486.128C306.57 486.31 306.324 486.568 306.157 486.876C305.99 487.184 305.907 487.531 305.918 487.881C305.929 488.232 306.032 488.573 306.218 488.87C308.63 493.093 309.841 497.896 309.719 502.758C309.597 507.62 308.146 512.356 305.525 516.453C303.288 519.878 297.605 525.739 292.972 523.145C292.359 522.735 291.881 522.155 291.596 521.475C291.311 520.796 291.231 520.048 291.368 519.324C291.368 518.73 291.823 517.027 292.714 517.146L290.734 515.304C292.066 518.44 292.518 521.881 292.04 525.255C291.562 528.629 290.172 531.808 288.021 534.451C285.742 536.858 282.842 538.588 279.641 539.451C276.441 540.314 273.064 540.276 269.884 539.342C269.48 539.246 269.059 539.243 268.653 539.334C268.247 539.425 267.868 539.607 267.543 539.866C267.218 540.126 266.957 540.456 266.78 540.832C266.602 541.208 266.512 541.619 266.518 542.035C266.639 551.244 263.19 560.143 256.895 566.865C256.645 567.15 256.481 567.5 256.424 567.875C256.368 568.249 256.419 568.632 256.574 568.978C256.728 569.324 256.978 569.619 257.295 569.827C257.611 570.035 257.981 570.148 258.36 570.152C260.13 570.352 261.774 571.168 263.004 572.456C264.235 573.744 264.974 575.424 265.092 577.201C265.066 578.95 264.427 580.635 263.288 581.963C262.148 583.29 260.58 584.177 258.855 584.468C257.192 584.706 255.786 586.904 257.409 588.23C258.141 588.913 258.728 589.736 259.137 590.649C259.545 591.563 259.766 592.55 259.786 593.55C259.806 594.551 259.626 595.545 259.255 596.475C258.884 597.404 258.331 598.25 257.627 598.962C254.182 602.546 248.162 601.536 244.559 598.804C240.282 595.576 238.757 589.814 238.856 584.706C238.856 578.35 241.529 572.31 244.024 566.568C244.2 566.231 244.299 565.858 244.312 565.477C244.326 565.096 244.254 564.718 244.102 564.368C243.95 564.019 243.722 563.708 243.434 563.458C243.147 563.209 242.807 563.026 242.44 562.925C239.392 561.927 236.788 559.894 235.081 557.178C233.374 554.462 232.671 551.234 233.094 548.054C233.572 544.846 235.088 541.883 237.411 539.619C237.628 539.402 239.391 538.214 239.49 537.956C239.072 537.675 238.628 537.436 238.163 537.243C238.163 537.243 238.044 537.54 238.163 537.56C237.628 537.099 237.132 536.596 236.678 536.055C236.009 535.207 235.419 534.299 234.916 533.343C229.185 523.573 225.824 512.597 225.102 501.294C224.38 489.991 226.317 478.676 230.758 468.258C231.011 467.779 231.137 467.242 231.121 466.7C231.105 466.159 230.948 465.63 230.667 465.167C230.386 464.704 229.989 464.322 229.515 464.058C229.042 463.795 228.508 463.659 227.966 463.664C220.644 464.197 213.374 462.089 207.472 457.724C204.453 455.333 201.948 452.358 200.107 448.976C198.267 445.594 197.128 441.874 196.76 438.042C196.387 434.069 196.935 430.065 198.364 426.339C199.057 424.557 200.344 422.003 202.581 421.884C204.819 421.765 204.561 423.706 203.928 425.072C201.948 428.854 197.651 425.528 196.384 422.953C195.71 421.477 195.341 419.879 195.296 418.257C195.252 416.635 195.534 415.02 196.126 413.508C198.383 407.449 205.017 402.163 211.709 403.489C212.367 403.63 213.051 403.579 213.679 403.34C214.308 403.101 214.854 402.685 215.251 402.143C215.649 401.601 215.881 400.956 215.92 400.285C215.959 399.614 215.803 398.945 215.471 398.361C213.902 395.258 213.491 391.698 214.311 388.319C215.131 384.94 217.129 381.964 219.946 379.926C220.435 379.624 220.783 379.141 220.915 378.582C221.047 378.023 220.951 377.435 220.649 376.946C220.347 376.458 219.864 376.11 219.305 375.978C218.746 375.846 218.158 375.942 217.669 376.243L217.749 376.224Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M543.588 167.761C543.668 165.153 543.608 162.542 543.41 159.94C542.899 157.8 541.77 155.859 540.163 154.356C539.509 153.643 538.4 154.614 538.876 155.406C540.033 157.075 541.735 158.288 543.69 158.838C545.645 159.387 547.731 159.238 549.588 158.415C551.791 157.685 553.679 156.226 554.942 154.279C556.206 152.332 556.768 150.013 556.538 147.703C556.157 144.872 555.061 142.184 553.353 139.894C551.645 137.604 549.381 135.787 546.776 134.615C540.004 131.427 531.827 132.061 524.678 133.486L527.946 136.575C529.926 128.952 522.857 122.418 515.59 122.022C507.254 121.566 499.611 127.685 493.274 132.377C486.938 137.07 480.503 143.05 478.582 151.129C477.058 157.564 478.226 166.969 484.622 170.533C491.453 174.494 496.047 162.752 490.087 158.97C482.958 154.435 473.038 162.395 468.425 167.445C463.138 173.226 459.95 181.305 463.633 188.79C466.682 195.027 473.791 198.116 480.463 198.136C501.531 198.136 507.59 172.929 519.53 160.514C519.987 160.003 520.267 159.359 520.328 158.676C520.39 157.994 520.23 157.31 519.872 156.725C519.515 156.141 518.978 155.687 518.342 155.432C517.706 155.176 517.005 155.132 516.342 155.307C506.165 159.029 500.106 171.326 504.6 181.503C506.854 186.212 510.865 189.847 515.771 191.629C520.678 193.41 526.088 193.194 530.836 191.027C533.569 189.78 531.648 186.216 529.351 186.037C518.501 185.107 508.422 196.71 511.927 207.343C512.779 209.615 514.101 211.682 515.805 213.409C517.509 215.137 519.557 216.486 521.817 217.37C524.077 218.253 526.498 218.651 528.922 218.537C531.346 218.423 533.718 217.8 535.886 216.709C536.207 216.484 536.468 216.183 536.645 215.833C536.822 215.483 536.909 215.094 536.899 214.702C536.89 214.31 536.783 213.926 536.589 213.585C536.395 213.245 536.119 212.957 535.787 212.749C525.787 205.601 510.481 211.323 506.957 222.827L510.917 221.699C507.207 218.06 502.633 215.424 497.624 214.038C492.615 212.653 487.336 212.564 482.283 213.78C477.231 214.995 472.57 217.476 468.74 220.988C464.909 224.5 462.034 228.928 460.385 233.856L463.831 232.351C459.813 230.145 455.112 229.532 450.662 230.632C446.212 231.733 442.339 234.467 439.812 238.292C434.823 246.212 437.832 257.261 445.456 262.389C447.693 263.894 450.426 260.211 448.267 258.548C436.743 249.598 418.982 262.092 422.526 275.953C424.308 282.764 430.546 287.833 437.159 289.437C440.713 290.309 444.437 290.191 447.928 289.095C451.419 287.998 454.543 285.966 456.96 283.22C459.775 279.968 461.76 276.083 462.746 271.897C463.732 267.71 463.69 263.348 462.623 259.181L459.692 262.27C463.594 262.821 467.571 262.182 471.103 260.437C474.636 258.692 477.56 255.922 479.493 252.489C480.8 250.113 477.275 247.321 475.533 249.598C469.593 257.399 473.83 268.904 482.641 272.488C484.968 273.374 487.48 273.657 489.945 273.311C492.41 272.965 494.748 272 496.74 270.507C501.65 266.765 500.462 261.241 496.225 257.518C495.737 257.127 495.12 256.933 494.496 256.976C493.872 257.018 493.287 257.293 492.856 257.746C492.425 258.199 492.18 258.798 492.17 259.423C492.159 260.048 492.384 260.654 492.799 261.122C495.496 264.242 499.1 266.441 503.108 267.414C507.116 268.387 511.327 268.084 515.154 266.547L513.174 262.033C510.283 264.171 505.947 267.201 507.234 271.398C508.462 275.18 513.63 278.349 517.134 279.319C521.166 280.413 525.463 279.923 529.145 277.95C532.827 275.976 535.614 272.669 536.935 268.706C537.047 268.222 537.015 267.716 536.842 267.251C536.669 266.785 536.363 266.381 535.963 266.087C535.562 265.794 535.084 265.625 534.588 265.601C534.092 265.578 533.6 265.7 533.173 265.953C525.629 270.369 526.738 280.804 531.708 286.764C539.272 295.793 552.914 292.704 562.676 290.011L560.102 285.813C557.164 288.637 554.949 292.126 553.643 295.986C552.337 299.846 551.978 303.963 552.597 307.99L555.766 305.456C548.207 303.456 540.323 302.998 532.584 304.111C524.844 305.223 517.408 307.882 510.719 311.931L514.263 312.782C498.561 287.041 457.534 274.27 433.912 297.08C430.732 299.946 428.338 303.576 426.955 307.627C425.573 311.678 425.248 316.015 426.011 320.227C426.261 320.988 426.799 321.621 427.509 321.991C428.22 322.361 429.046 322.438 429.813 322.207C431.665 321.466 433.169 320.052 434.025 318.25C434.88 316.448 435.023 314.389 434.427 312.485C433.808 310.238 432.416 308.281 430.497 306.959C428.577 305.637 426.252 305.034 423.932 305.258C414.448 305.654 405.537 313.792 400.171 321.098C389.103 336.127 386.727 356.898 396.587 373.174C406.448 389.45 425.239 396.777 443.515 395.173C450.822 394.539 462.326 391.827 463.554 382.916C463.666 382.107 463.605 381.283 463.374 380.499C463.142 379.715 462.746 378.989 462.212 378.371C461.678 377.752 461.018 377.255 460.276 376.912C459.534 376.569 458.728 376.388 457.91 376.382C455.986 376.456 454.155 377.229 452.759 378.555C451.363 379.882 450.499 381.672 450.327 383.589C449.317 393.49 459.811 400.123 468.385 400.915C476.959 401.707 486.067 397.925 490.344 390.144C490.504 389.805 490.565 389.429 490.52 389.058C490.476 388.686 490.326 388.335 490.09 388.045C489.854 387.755 489.54 387.538 489.186 387.419C488.831 387.299 488.45 387.283 488.087 387.371C483.356 388.806 479.333 391.958 476.808 396.208C474.284 400.459 473.44 405.5 474.444 410.34C476.761 420.359 487.473 426.438 497.274 424.755L494.324 421.944C492.845 429.494 491.446 437.058 490.126 444.635C488.76 451.981 487.037 459.347 486.166 466.792C485.493 472.851 485.829 479.366 489.354 484.613C490.812 486.971 492.853 488.914 495.281 490.253C497.709 491.592 500.442 492.282 503.214 492.256C502.422 490.494 501.65 488.731 500.878 486.969C494.324 492.751 492.958 502.394 495.67 510.413C497.245 514.814 499.978 518.708 503.581 521.684C507.185 524.66 511.525 526.609 516.144 527.323C535.549 530.768 554.182 518.334 562.082 500.988C566.505 491.537 567.614 480.871 565.23 470.713C564.201 472.158 563.151 473.584 562.122 475.01C568.574 474.857 574.822 472.715 580.011 468.877C585.199 465.038 589.076 459.691 591.11 453.565C592.872 447.44 592.701 440.921 590.621 434.897C588.541 428.873 584.653 423.637 579.487 419.904C579.309 421.508 579.15 423.092 578.972 424.676C593.09 419.746 608.931 413.568 614.871 398.42C616.229 395.241 616.848 391.795 616.684 388.342C616.519 384.888 615.574 381.517 613.92 378.481C612.437 376.212 610.465 374.304 608.149 372.896C605.833 371.488 603.232 370.615 600.535 370.343C597.593 369.831 594.565 370.223 591.85 371.468C589.135 372.712 586.861 374.75 585.328 377.313L589.169 378.837C591.684 371.689 588.259 364.205 583.229 359.037C577.685 353.314 570.141 349.849 565.032 343.651C563.608 342.139 562.506 340.354 561.791 338.404C561.076 336.454 560.765 334.38 560.874 332.306C561.1 330.446 561.868 328.694 563.083 327.268C564.298 325.842 565.905 324.805 567.705 324.286C573.646 323.059 575.844 333.315 570.596 333.89L572.418 335.612L572.279 330.84L570.101 332.583C577.168 333.644 583.624 337.193 588.307 342.591C592.989 347.988 595.591 354.881 595.644 362.026C595.666 362.44 595.818 362.837 596.077 363.16C596.336 363.483 596.691 363.717 597.09 363.828C610.317 366.066 628.335 368.64 637.899 356.641C644.948 347.829 645.819 332.523 633.662 327.712C625.741 324.563 616.831 328.009 609.683 331.672L613.366 336.206C623.405 327.633 619.187 309.99 607.208 305.713C604.614 304.802 602.693 308.129 603.921 310.208C607.031 315.501 611.26 320.051 616.311 323.539C621.363 327.028 627.115 329.371 633.167 330.405C639.521 331.359 646.008 330.862 652.143 328.952C658.278 327.042 663.901 323.768 668.59 319.376C671.244 316.92 667.66 312.703 664.63 314.544C656.195 319.712 654.512 333.197 662.373 339.711C664.252 341.147 666.425 342.15 668.737 342.649C671.048 343.148 673.442 343.13 675.746 342.597C678.05 342.063 680.208 341.027 682.065 339.563C683.922 338.099 685.433 336.243 686.49 334.127L681.283 331.256C676.768 342.008 679.401 355.175 684.985 365.036C690.114 374.145 699.935 381.946 710.33 375.531C717.973 370.818 713.736 359.472 707.855 355.215L707.261 360.878C713.45 358.395 719.013 354.575 723.552 349.69C728.091 344.805 731.494 338.977 733.517 332.622L727.062 332.781C728.763 339.732 732.888 345.848 738.695 350.029C744.503 354.211 751.611 356.183 758.743 355.591L755.199 351.176C753.307 359.827 753.548 368.809 755.901 377.346C758.253 385.884 762.647 393.721 768.703 400.182C771.356 402.994 776.267 399.074 773.99 395.886C769.059 388.995 758.723 393.133 757.337 400.737C755.793 409.37 762.485 418.558 767.851 424.617C773.62 431.154 780.853 436.236 788.959 439.447C792.721 440.952 797.137 441.883 801.018 440.22C802.734 439.479 804.189 438.242 805.198 436.669C806.207 435.096 806.723 433.257 806.681 431.388C806.614 429.195 805.995 427.054 804.88 425.164C803.766 423.275 802.192 421.697 800.305 420.577C795.909 417.924 790.583 417.766 785.613 417.726L788.761 420.736C788.492 405.641 783.314 391.044 774.009 379.154L771.158 383.114C776.741 385.302 782.956 385.232 788.488 382.919C794.02 380.606 798.435 376.232 800.799 370.721C803.163 365.211 803.291 358.997 801.155 353.394C799.019 347.791 794.787 343.239 789.355 340.701L788.167 345.552C795.438 345.863 802.675 344.378 809.236 341.229C815.798 338.079 821.483 333.362 825.788 327.494C829.986 321.589 832.604 314.709 833.394 307.508C834.185 300.306 833.12 293.022 830.303 286.348C827.208 278.759 822.058 272.183 815.432 267.359C814.957 269.339 814.502 271.161 814.027 273.062C818.417 272.633 822.655 271.222 826.425 268.932C830.196 266.642 833.403 263.533 835.807 259.835C837.788 256.786 833.214 253.617 830.778 256.132C828.792 258.372 827.592 261.199 827.359 264.183C827.127 267.167 827.876 270.146 829.491 272.666C831.139 275.277 833.629 277.248 836.549 278.252C839.469 279.257 842.644 279.235 845.549 278.19C848.651 277.166 851.374 275.232 853.362 272.64C855.35 270.048 856.512 266.918 856.697 263.656C856.749 260.179 855.869 256.752 854.149 253.73C852.429 250.707 849.931 248.201 846.916 246.469L847.074 252.41C853.56 248.818 858.89 243.456 862.442 236.948C865.994 230.441 867.62 223.057 867.132 215.659C866.402 208.36 863.659 201.406 859.208 195.575C854.757 189.743 848.774 185.262 841.926 182.632L844.302 188.097C849.272 177.51 851.706 165.91 851.41 154.218L845.728 157.663C850.373 159.89 855.567 160.716 860.674 160.038C865.781 159.361 870.58 157.211 874.485 153.85C878.389 150.49 881.23 146.064 882.66 141.115C884.09 136.166 884.048 130.907 882.537 125.982L877.132 130.358C881.049 132.201 885.352 133.073 889.678 132.901C894.003 132.728 898.224 131.517 901.982 129.368L896.774 124.398C890.834 137.288 884.379 152.673 886.874 167.148C887.382 170.718 888.887 174.072 891.217 176.825C893.546 179.578 896.605 181.618 900.041 182.711C902.393 183.444 904.866 183.701 907.318 183.468C909.77 183.235 912.151 182.516 914.323 181.353C916.494 180.19 918.412 178.606 919.964 176.694C921.517 174.782 922.674 172.58 923.366 170.217C927.168 157.366 915.981 145.703 907.526 137.585C907.189 139.05 906.833 140.516 906.496 141.961C925.03 134.278 930.851 108.181 917.347 93.3502L915.505 96.7163C923.03 99.231 931.208 95.6075 935.821 89.4494C941.009 82.5192 940.732 73.3911 937.108 65.8074C933.009 57.2336 925.228 51.4518 916.515 47.9867C907.803 44.5216 897.21 41.5118 887.883 43.0167C879.27 44.4226 870.657 52.6597 874.023 62.0056L875.607 59.8077C865.445 59.5496 855.434 62.3055 846.837 67.728L848.817 67.926C843.999 63.5233 837.734 61.041 831.209 60.9498C824.683 60.8585 818.351 63.1647 813.413 67.431L815.888 67.6884C813.944 63.816 810.87 60.6254 807.072 58.5392C803.275 56.453 798.933 55.5696 794.622 56.006C790.487 56.5949 786.609 58.3602 783.449 61.0915C780.29 63.8228 777.982 67.4049 776.801 71.411L778.049 70.1041C770.616 71.373 763.654 74.5912 757.872 79.4303L761.198 80.7173C761.104 76.842 759.616 73.1304 757.008 70.2629C754.399 67.3954 750.845 65.564 746.996 65.1045C743.147 64.645 739.261 65.5882 736.051 67.7611C732.84 69.934 730.521 73.1911 729.517 76.9354C729.385 77.4735 729.472 78.042 729.757 78.5168C730.043 78.9916 730.505 79.3342 731.042 79.4699L737.952 80.3015C739.932 80.5391 741.695 78.3214 739.932 76.6978C728.151 66.2628 708.41 67.6092 698.351 79.7867L702.311 81.9648C703.895 68.5201 700.846 52.5805 686.747 47.0759C683.932 45.9001 680.856 45.4897 677.83 45.8861C674.805 46.2825 671.938 47.4717 669.521 49.3331C667.135 51.1422 665.31 53.5904 664.259 56.394C663.208 59.1977 662.972 62.2419 663.581 65.1737L666.135 61.6294C652.057 60.8572 640.711 76.9354 645.819 89.9841L649.78 85.8259C643.522 84.9151 638.731 89.9247 638.216 95.9837C637.622 102.795 643.186 108.3 648.116 112.121L652.611 105.983C650.751 104.888 648.692 104.172 646.553 103.877C644.414 103.582 642.238 103.714 640.151 104.265C638.064 104.816 636.106 105.776 634.392 107.088C632.678 108.401 631.24 110.04 630.163 111.911C629.087 113.782 628.391 115.848 628.118 117.99C627.844 120.131 627.998 122.306 628.57 124.388C629.142 126.469 630.121 128.417 631.45 130.118C632.78 131.819 634.433 133.24 636.315 134.298C637.206 132.021 638.117 129.724 639.008 127.427C629.504 124.002 618.277 132.971 619.603 143.01C619.92 145.446 622.732 147.901 625.167 146.04C632.137 140.674 637.364 132.536 636.553 123.428C636.205 119.495 634.67 115.761 632.153 112.72C629.635 109.679 626.253 107.475 622.454 106.399C619.235 105.464 615.787 105.727 612.747 107.139C609.707 108.552 607.282 111.018 605.921 114.082C603.367 119.844 604.317 126.734 609.703 130.457C611.802 131.902 613.524 128.774 612.138 127.11C608.178 122.418 603.109 118.101 596.931 116.854C594.349 116.31 591.672 116.407 589.136 117.135C586.599 117.863 584.279 119.201 582.378 121.032C580.57 122.749 579.428 125.05 579.153 127.529C578.877 130.007 579.487 132.503 580.873 134.575C582.077 136.611 583.983 138.137 586.232 138.866C588.482 139.595 590.921 139.478 593.09 138.535C594.436 137.941 594.08 135.961 593.09 135.328C589.812 133.317 586.008 132.333 582.167 132.503C578.326 132.672 574.623 133.987 571.535 136.279C568.447 138.57 566.116 141.733 564.84 145.36C563.565 148.988 563.404 152.914 564.379 156.633L565.963 154.455C561.128 153.965 556.255 154.886 551.933 157.107C547.611 159.328 544.024 162.753 541.608 166.969C540.578 168.732 543.351 170.256 544.36 168.494C546.459 164.873 549.556 161.933 553.282 160.026C557.008 158.119 561.204 157.326 565.369 157.742C565.655 157.796 565.95 157.776 566.226 157.684C566.503 157.593 566.751 157.433 566.949 157.219C567.147 157.006 567.287 156.745 567.357 156.463C567.427 156.18 567.424 155.885 567.349 155.604C566.57 152.543 566.731 149.319 567.813 146.352C568.894 143.384 570.846 140.812 573.412 138.971C575.978 137.13 579.039 136.105 582.197 136.031C585.354 135.957 588.46 136.837 591.11 138.555L591.466 135.15C587.863 136.734 584.12 134.041 583.051 130.516C581.982 126.992 584.615 123.329 587.843 121.725C596.06 117.606 604.119 123.962 609.168 130.061L611.604 126.734C607.881 124.101 608.099 118.636 610.099 115.012C612.693 110.319 618.019 109.369 622.553 111.785C634.434 117.943 630.058 133.051 621.227 139.743L626.791 142.753C626.686 141.456 626.903 140.153 627.422 138.959C627.941 137.765 628.745 136.718 629.765 135.91C630.785 135.101 631.989 134.556 633.269 134.324C634.55 134.091 635.868 134.177 637.107 134.575C641.206 136.08 643.245 129.803 639.8 127.704C637.802 126.51 636.36 124.57 635.792 122.312C635.224 120.055 635.576 117.664 636.77 115.666C637.965 113.667 639.905 112.226 642.162 111.658C644.42 111.089 646.811 111.441 648.809 112.636C652.492 114.715 656.829 109.211 653.304 106.498C650.393 104.241 646.71 101.964 645.384 98.3004C644.75 96.5975 645.384 91.8453 648.077 92.1423C650.215 92.38 653.146 90.5979 652.037 88.004C647.938 78.5194 655.839 66.7776 666.194 67.0548C666.615 67.0376 667.027 66.9253 667.399 66.7263C667.77 66.5274 668.092 66.2468 668.339 65.9058C668.587 65.5648 668.754 65.1722 668.829 64.7574C668.903 64.3425 668.882 63.9162 668.768 63.5105C668.359 61.3371 668.648 59.0899 669.594 57.091C670.541 55.092 672.095 53.4438 674.035 52.3825C676.101 51.2535 678.434 50.7035 680.786 50.7906C683.139 50.8777 685.424 51.5988 687.401 52.8775C697.301 58.6197 698.806 71.015 697.678 81.3905C697.711 81.8338 697.868 82.2586 698.133 82.616C698.397 82.9734 698.757 83.2487 699.171 83.4102C699.585 83.5717 700.037 83.6128 700.473 83.5287C700.909 83.4446 701.313 83.2388 701.638 82.935C705.935 77.8929 712.035 74.7324 718.633 74.1293C725.23 73.5261 731.802 75.5282 736.942 79.7075L738.922 76.1037L731.992 75.3315C732.507 76.1632 733.022 77.0146 733.517 77.866C734.284 75.0688 736.031 72.6405 738.439 71.0234C740.847 69.4063 743.756 68.7081 746.635 69.056C749.515 69.404 752.174 70.7749 754.127 72.919C756.081 75.0631 757.199 77.8377 757.278 80.7371C757.308 81.1084 757.442 81.4638 757.664 81.7623C757.887 82.0609 758.19 82.2906 758.537 82.425C758.884 82.5594 759.263 82.5931 759.628 82.5222C759.994 82.4513 760.332 82.2787 760.604 82.0242C765.891 77.6108 772.251 74.6735 779.039 73.5099C779.339 73.4164 779.609 73.2469 779.824 73.0179C780.04 72.7889 780.192 72.5082 780.266 72.203C781.233 68.8023 783.18 65.7613 785.863 63.4586C788.546 61.156 791.847 59.6935 795.355 59.2533C798.973 58.9413 802.602 59.717 805.777 61.4808C808.952 63.2447 811.528 65.9165 813.175 69.1537C813.302 69.3575 813.473 69.5301 813.675 69.6582C813.878 69.7864 814.107 69.8669 814.345 69.8935C814.584 69.9202 814.825 69.8925 815.051 69.8123C815.277 69.7322 815.482 69.6018 815.65 69.4309C819.994 65.76 825.53 63.8042 831.216 63.9318C836.902 64.0595 842.345 66.2618 846.52 70.1239C846.784 70.3663 847.118 70.518 847.474 70.5572C847.83 70.5964 848.189 70.5209 848.5 70.3417C856.634 65.3176 866.072 62.8101 875.627 63.1343C875.889 63.1273 876.146 63.0599 876.378 62.9374C876.609 62.8148 876.81 62.6404 876.963 62.4276C877.116 62.2149 877.219 61.9697 877.262 61.711C877.305 61.4523 877.287 61.1872 877.211 60.9364C874.419 53.1349 882.3 47.0759 889.23 46.264C896.873 45.3532 905.368 47.7689 912.535 50.2242C919.703 52.6795 927.089 57.0752 931.544 63.6887C935.504 69.6289 937.603 77.5492 934.336 84.2814C931.069 91.0137 923.505 95.1521 916.357 92.7364C914.377 92.0631 913.308 94.7164 914.515 96.1025C925.544 108.201 920.099 130.972 904.892 136.872C904.462 137.011 904.074 137.257 903.767 137.589C903.46 137.921 903.243 138.326 903.137 138.765C903.032 139.205 903.042 139.664 903.165 140.099C903.289 140.534 903.522 140.93 903.843 141.248C910.12 147.624 918.674 156.039 917.941 165.841C917.755 167.76 917.122 169.609 916.091 171.239C915.06 172.869 913.661 174.233 912.006 175.224C910.351 176.214 908.487 176.801 906.564 176.94C904.64 177.078 902.711 176.762 900.932 176.018C889.17 171.108 893.527 154.376 896.319 145.189C898.197 139.358 900.486 133.667 903.17 128.16C903.538 127.438 903.663 126.615 903.526 125.816C903.389 125.017 902.998 124.283 902.41 123.725C901.823 123.166 901.07 122.812 900.265 122.716C899.46 122.619 898.645 122.786 897.942 123.19C895.322 124.673 892.388 125.514 889.38 125.645C886.372 125.775 883.375 125.192 880.636 123.942C879.981 123.606 879.242 123.467 878.509 123.543C877.776 123.619 877.081 123.906 876.508 124.37C875.936 124.833 875.51 125.453 875.283 126.154C875.056 126.855 875.038 127.607 875.231 128.318C876.289 131.8 876.322 135.513 875.325 139.013C874.328 142.513 872.342 145.651 869.607 148.052C866.872 150.452 863.503 152.014 859.904 152.549C856.304 153.084 852.627 152.571 849.312 151.069C848.716 150.781 848.057 150.647 847.395 150.679C846.734 150.711 846.091 150.909 845.526 151.253C844.961 151.598 844.491 152.079 844.159 152.652C843.828 153.225 843.646 153.873 843.629 154.535C843.929 164.872 841.899 175.145 837.689 184.592C837.426 185.099 837.28 185.658 837.261 186.228C837.242 186.799 837.35 187.366 837.577 187.889C837.805 188.413 838.146 188.879 838.576 189.254C839.007 189.629 839.515 189.903 840.065 190.057C845.522 192.232 850.272 195.875 853.788 200.582C857.303 205.29 859.448 210.878 859.984 216.729C860.33 222.778 858.962 228.802 856.038 234.109C853.113 239.415 848.75 243.789 843.451 246.727C842.935 247.039 842.511 247.482 842.221 248.01C841.931 248.539 841.786 249.134 841.8 249.737C841.814 250.34 841.987 250.928 842.301 251.442C842.615 251.957 843.06 252.379 843.589 252.667C850.717 256.865 852.915 268.131 844.203 271.953C842.673 272.738 840.914 272.951 839.241 272.556C837.568 272.16 836.091 271.181 835.075 269.795C834.086 268.475 833.569 266.861 833.609 265.213C833.648 263.564 834.242 261.977 835.293 260.706L830.184 256.865C828.378 259.66 825.977 262.023 823.154 263.786C820.33 265.548 817.153 266.667 813.848 267.062C813.191 267.097 812.562 267.342 812.055 267.762C811.548 268.182 811.189 268.753 811.032 269.392C810.874 270.031 810.926 270.704 811.18 271.312C811.434 271.919 811.877 272.428 812.443 272.765C818.849 277.574 823.597 284.261 826.025 291.895C828.452 299.529 828.439 307.73 825.986 315.356C820.699 330.999 804.205 341.315 787.949 340.463C787.392 340.497 786.859 340.707 786.43 341.065C786.002 341.423 785.698 341.908 785.566 342.451C785.433 342.993 785.477 343.564 785.692 344.079C785.907 344.595 786.282 345.028 786.761 345.315C791.006 347.318 794.351 350.834 796.138 355.175C797.926 359.515 798.028 364.367 796.424 368.779C794.461 373.057 790.944 376.428 786.586 378.208C782.228 379.988 777.357 380.043 772.96 378.362C770.821 377.471 767.713 379.689 769.455 382.025C777.931 393.225 782.513 406.888 782.504 420.934C782.535 421.75 782.883 422.521 783.475 423.083C784.067 423.646 784.856 423.954 785.672 423.943C789.355 424.062 793.473 424.102 796.76 426.022C798.899 427.27 801.156 430.517 799.81 433.091C796.978 438.418 785.118 430.596 782.167 428.616C776.237 424.593 771.251 419.33 767.554 413.192C765.752 410.202 763.495 406.42 763.792 402.816C763.784 402.143 763.966 401.482 764.316 400.908C764.666 400.334 765.171 399.87 765.772 399.569C766.386 399.272 767.653 398.876 768.129 399.569L773.277 395.272C768.115 389.656 764.388 382.875 762.416 375.506C760.444 368.138 760.284 360.401 761.951 352.958C762.077 352.425 762.08 351.871 761.961 351.337C761.841 350.803 761.601 350.304 761.26 349.876C760.918 349.449 760.484 349.105 759.989 348.87C759.495 348.635 758.953 348.517 758.406 348.522C752.816 349.079 747.213 347.604 742.621 344.368C738.028 341.132 734.755 336.351 733.398 330.9C732.586 327.494 727.834 328.108 726.943 331.058C725.308 336.377 722.534 341.276 718.814 345.414C715.093 349.551 710.516 352.828 705.4 355.017C704.835 355.212 704.338 355.563 703.965 356.03C703.593 356.497 703.361 357.06 703.297 357.654C703.232 358.248 703.338 358.847 703.602 359.383C703.866 359.919 704.276 360.369 704.786 360.68C706.177 361.705 707.223 363.129 707.786 364.763C708.348 366.397 708.4 368.164 707.934 369.828C708.489 369.63 708.449 369.709 707.934 370.066C707.636 370.288 707.326 370.493 707.004 370.679C706.553 370.968 706.083 371.226 705.598 371.452C704.753 371.818 703.859 372.058 702.945 372.164C698.43 372.62 694.549 369.115 692.054 365.749C685.975 357.571 682.292 343.968 686.51 334.187C687.995 330.721 682.906 327.831 681.302 331.316C678.906 336.583 671.402 339.058 666.63 335.276C661.858 331.494 662.947 322.979 667.957 319.91L663.996 315.079C660.004 318.819 655.21 321.596 649.98 323.199C644.749 324.801 639.222 325.187 633.82 324.326C628.68 323.411 623.797 321.401 619.502 318.432C615.208 315.463 611.602 311.605 608.931 307.119L605.663 311.614C613.861 314.505 615.247 326.821 609.01 332.207C606.337 334.503 609.901 338.147 612.693 336.741C618.811 333.533 627.999 329.316 634.355 334.266C638.731 337.672 638.651 343.968 636.869 348.72C631.068 364.323 611.128 362.046 597.921 360.145L599.367 361.947C599.09 354.047 596.106 346.481 590.915 340.518C585.724 334.556 578.641 330.559 570.854 329.197C570.592 329.137 570.321 329.137 570.06 329.197C569.798 329.257 569.554 329.375 569.345 329.543C569.135 329.71 568.966 329.923 568.85 330.165C568.735 330.406 568.675 330.671 568.676 330.939C568.676 332.543 568.676 334.127 568.775 335.731C568.79 336.2 568.99 336.644 569.331 336.967C569.672 337.289 570.127 337.464 570.596 337.454C575.527 336.959 577.645 332.088 576.794 327.553C576.597 326.29 576.113 325.088 575.379 324.04C574.646 322.992 573.682 322.126 572.561 321.509C571.441 320.891 570.195 320.539 568.917 320.478C567.639 320.417 566.365 320.65 565.191 321.158C558.716 323.633 555.825 331.058 557.389 337.474C559.27 345.394 566.022 350.562 572.141 355.136C579.111 360.324 588.536 367.907 584.991 377.808C584.18 380.065 587.704 381.312 588.833 379.312C591.724 374.145 598.377 373.372 603.485 375.352C609.841 377.788 612.693 384.084 612.059 390.639C610.376 408.241 591.704 414.954 577.368 419.647C576.939 419.784 576.553 420.03 576.248 420.361C575.942 420.692 575.727 421.096 575.623 421.534C575.52 421.972 575.531 422.43 575.657 422.862C575.782 423.295 576.017 423.688 576.339 424.003C580.501 427.143 583.598 431.486 585.213 436.443C586.828 441.401 586.882 446.735 585.368 451.724C583.649 456.567 580.472 460.759 576.274 463.723C572.076 466.688 567.063 468.278 561.924 468.277C561.404 468.302 560.897 468.446 560.441 468.697C559.986 468.948 559.594 469.301 559.295 469.727C558.997 470.153 558.801 470.642 558.721 471.156C558.641 471.67 558.68 472.196 558.835 472.693C560.235 480.003 559.653 487.554 557.149 494.563C554.646 501.572 550.312 507.783 544.598 512.552C538.743 517.468 531.426 520.308 523.787 520.63C516.323 520.868 507.947 518.254 503.848 511.641C499.888 505.344 499.749 496.553 505.412 491.266C505.821 490.812 506.089 490.249 506.185 489.646C506.282 489.043 506.202 488.425 505.955 487.867C505.708 487.308 505.305 486.833 504.794 486.498C504.283 486.163 503.687 485.983 503.076 485.979C498.442 486.316 494.621 482.93 492.859 478.811C490.483 473.307 491.492 466.931 492.443 461.169C494.608 448.457 496.773 435.751 498.937 423.052C499.023 422.651 499.004 422.234 498.882 421.842C498.76 421.45 498.54 421.095 498.241 420.813C497.943 420.531 497.577 420.33 497.179 420.23C496.781 420.129 496.364 420.133 495.967 420.241C492.207 420.832 488.361 420.021 485.159 417.962C481.958 415.903 479.624 412.74 478.602 409.073C477.877 405.285 478.56 401.362 480.521 398.041C482.482 394.72 485.588 392.229 489.255 391.035C488.522 390.104 487.77 389.193 487.017 388.262C481.354 398.975 464.167 400.876 456.346 391.51C453.732 388.381 451.277 381.609 456.524 379.629C456.939 379.423 457.396 379.314 457.86 379.312C458.324 379.31 458.782 379.414 459.199 379.617C459.616 379.82 459.981 380.116 460.265 380.482C460.55 380.848 460.747 381.274 460.841 381.728C460.836 382.68 460.636 383.62 460.255 384.491C459.874 385.363 459.318 386.148 458.623 386.797C454.287 391.708 445.198 393.45 438.822 392.955C431.911 392.509 425.188 390.514 419.152 387.117C413.116 383.72 407.922 379.009 403.953 373.333C396.548 362.165 396.033 347.592 400.647 335.137C403.18 328.115 407.558 321.905 413.319 317.158C416.309 314.742 420.15 312.089 424.091 311.792C424.886 311.614 425.718 311.7 426.461 312.035C427.203 312.371 427.817 312.939 428.209 313.653C428.486 314.247 428.922 316.089 428.051 316.445L431.853 318.425C428.783 304.426 444.129 293.813 456.049 291.437C469.256 289.095 482.86 291.878 494.086 299.219C500.582 303.357 506.048 308.924 510.065 315.495C510.439 316.064 511.018 316.469 511.681 316.623C512.345 316.778 513.042 316.672 513.63 316.326C519.726 312.623 526.507 310.187 533.567 309.167C540.627 308.146 547.82 308.561 554.716 310.386C556.795 310.941 558.082 308.98 557.785 307.178C557.315 303.929 557.633 300.614 558.711 297.512C559.79 294.411 561.598 291.614 563.983 289.358C564.355 288.948 564.584 288.428 564.635 287.877C564.686 287.326 564.556 286.773 564.266 286.301C563.976 285.83 563.54 285.466 563.025 285.264C562.509 285.061 561.942 285.032 561.409 285.18C554.063 287.16 543.093 290.467 536.658 284.507C532.955 281.081 530.718 273.339 536.024 270.27L532.262 267.537C531.397 269.92 529.753 271.941 527.598 273.274C525.442 274.607 522.9 275.174 520.382 274.883C517.579 274.396 515.013 273.006 513.075 270.923C512.442 270.309 512.006 270.052 512.263 269.28C512.659 268.072 514.917 266.825 515.828 266.151C517.926 264.607 516.58 260.488 513.847 261.657C510.861 262.912 507.551 263.177 504.404 262.41C501.256 261.644 498.438 259.887 496.363 257.399C495.215 258.607 494.067 259.795 492.938 261.003C494.146 262.053 495.868 263.498 495.017 265.26C494.088 266.562 492.714 267.478 491.156 267.834C489.813 268.308 488.381 268.468 486.967 268.303C485.553 268.139 484.195 267.653 482.998 266.884C478.661 264.072 475.81 257.36 479.216 252.806L475.256 249.934C473.861 252.457 471.748 254.508 469.185 255.827C466.621 257.146 463.724 257.672 460.861 257.34C460.444 257.246 460.01 257.262 459.601 257.385C459.192 257.509 458.822 257.736 458.527 258.045C458.232 258.354 458.022 258.734 457.917 259.149C457.813 259.563 457.817 259.997 457.93 260.409C458.857 264.033 458.817 267.837 457.813 271.44C456.808 275.044 454.876 278.32 452.208 280.942C449.681 283.261 446.453 284.669 443.034 284.945C439.616 285.222 436.204 284.349 433.338 282.467C427.774 279.022 424.665 271.992 428.566 266.131C431.872 261.201 439.614 257.795 444.822 261.835C445.772 260.567 446.703 259.28 447.634 258.013C444.764 256.175 442.742 253.272 442.012 249.943C441.282 246.614 441.905 243.132 443.743 240.262C445.581 237.392 448.484 235.37 451.813 234.64C455.142 233.91 458.624 234.533 461.494 236.371C461.813 236.541 462.167 236.637 462.528 236.651C462.89 236.665 463.25 236.598 463.581 236.453C463.913 236.308 464.207 236.09 464.442 235.815C464.678 235.54 464.848 235.216 464.94 234.866C466.388 230.739 468.855 227.045 472.112 224.126C475.37 221.208 479.312 219.16 483.572 218.172C487.833 217.185 492.274 217.29 496.483 218.477C500.693 219.665 504.534 221.897 507.65 224.966C507.945 225.263 508.315 225.475 508.72 225.582C509.125 225.689 509.551 225.685 509.955 225.572C510.358 225.459 510.724 225.241 511.015 224.939C511.306 224.638 511.512 224.264 511.61 223.857C514.342 214.927 526.263 211.422 533.648 216.709C533.648 215.362 533.648 214.036 533.549 212.749C532.01 213.478 530.336 213.88 528.634 213.927C526.931 213.975 525.237 213.667 523.66 213.025C522.082 212.382 520.656 211.419 519.471 210.195C518.286 208.971 517.369 207.515 516.778 205.917C514.323 198.195 522.104 190.651 529.609 191.423L528.757 186.136C522.065 189.067 513.253 186.374 510.164 179.444C509.503 177.723 509.188 175.888 509.239 174.045C509.289 172.202 509.703 170.388 510.458 168.706C511.212 167.023 512.292 165.507 513.635 164.244C514.978 162.981 516.558 161.996 518.283 161.346L515.075 156.158C506.383 164.91 502.422 177.246 493.413 185.701C491.642 187.541 489.516 189.003 487.165 190.001C484.814 190.998 482.285 191.509 479.731 191.502C475.672 191.304 471.236 189.364 469.494 185.463C467.256 180.374 470.504 175.028 473.989 171.464C475.839 169.564 477.929 167.913 480.206 166.554C481.384 165.771 482.663 165.152 484.008 164.712C484.641 164.484 485.317 164.396 485.988 164.455C486.602 164.455 486.305 164.455 486.423 164.455C486.542 164.455 486.324 165.148 486.186 165.088L488.166 164.712C487.89 164.489 487.631 164.244 487.394 163.979C486.938 163.049 486.087 162.277 485.671 161.267C484.76 159.036 484.446 156.607 484.76 154.218C485.414 148.753 488.898 144.317 492.839 140.694C495.355 138.462 498 136.38 500.759 134.457C503.462 132.311 506.39 130.465 509.491 128.952C510.882 128.231 512.403 127.798 513.965 127.679C515.527 127.56 517.096 127.757 518.58 128.259C521.391 129.447 523.886 132.219 523.055 135.387C522.95 135.828 522.963 136.289 523.092 136.724C523.222 137.159 523.463 137.552 523.791 137.864C524.12 138.177 524.524 138.398 524.965 138.505C525.406 138.613 525.867 138.603 526.302 138.476C535.371 136.674 547.885 134.734 552.795 145.07C553.814 146.855 554.099 148.967 553.589 150.959C553.079 152.951 551.814 154.666 550.063 155.742C546.994 157.604 542.657 157.722 540.42 154.594L539.133 155.624C540.932 157.121 542.099 159.243 542.4 161.564C542.638 163.682 542.558 165.821 542.816 167.94C542.816 168.494 543.747 168.494 543.707 167.94L543.588 167.761Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M842.836 414.657C843.931 415.066 844.882 415.789 845.568 416.736C845.928 417.197 846.228 417.703 846.459 418.241C846.665 418.76 846.824 419.297 846.935 419.845C847.02 420.502 847.02 421.168 846.935 421.825C846.935 421.528 846.935 422.34 846.935 422.023C846.935 422.181 846.935 422.32 846.935 422.478C846.935 422.637 846.776 423.092 846.677 423.389C846.578 423.686 846.677 423.389 846.677 423.389C846.669 423.468 846.669 423.548 846.677 423.627C846.624 423.752 846.557 423.871 846.479 423.983L846.242 424.399C846.242 424.518 846.242 424.399 846.242 424.399L846.083 424.617C845.744 425.062 845.311 425.427 844.816 425.686L844.4 425.904C844.242 425.904 844.4 425.904 844.4 425.904H844.202L843.252 426.181C843.252 426.181 842.856 426.181 843.113 426.181H842.658H841.509H841.113L840.182 425.963L839.727 425.805C839.549 425.805 839.727 425.805 839.727 425.805L839.47 425.686C839.181 425.571 838.903 425.432 838.638 425.27L838.282 425.052L838.064 424.894C837.819 424.699 837.587 424.487 837.371 424.26L837.054 423.924C837.272 424.181 837.054 423.924 837.054 423.785L836.836 423.448C836.836 423.349 836.579 422.934 836.658 423.112L836.539 422.815L836.42 422.379V422.142C836.42 421.884 836.42 422.419 836.42 422.142V421.607C836.411 421.429 836.411 421.25 836.42 421.072V420.835C836.42 420.835 836.42 421.171 836.42 420.835C836.476 420.478 836.562 420.127 836.678 419.785V419.548C836.678 419.29 836.5 419.924 836.678 419.548L836.915 419.053C836.915 418.874 837.133 418.696 837.252 418.518L837.371 418.32C837.569 418.023 837.371 418.419 837.371 418.32C837.614 418.005 837.878 417.707 838.163 417.429C838.262 417.429 838.697 416.993 838.381 417.231L838.836 416.914L839.371 416.578L839.569 416.459H839.767L840.044 416.34L840.638 416.162C840.836 416.162 841.311 416.162 840.876 416.162H841.489C841.905 416.162 842.341 416.162 842.737 416.162C843.16 416.088 843.548 415.88 843.842 415.567C844.136 415.254 844.32 414.854 844.367 414.427C844.414 414 844.321 413.57 844.102 413.201C843.883 412.831 843.55 412.543 843.153 412.38C841.204 412.061 839.204 412.397 837.466 413.336C835.729 414.274 834.351 415.763 833.549 417.568C832.676 419.19 832.396 421.067 832.757 422.874C833.119 424.681 834.099 426.306 835.529 427.468C836.822 428.466 838.35 429.115 839.966 429.351C841.583 429.586 843.232 429.402 844.756 428.814C846.265 428.191 847.529 427.091 848.355 425.683C849.181 424.274 849.523 422.634 849.33 421.013C849.226 419.258 848.542 417.587 847.384 416.265C846.226 414.942 844.661 414.042 842.935 413.706C842.789 413.687 842.642 413.723 842.521 413.806C842.4 413.889 842.314 414.013 842.28 414.156C842.245 414.299 842.265 414.449 842.335 414.578C842.404 414.707 842.519 414.806 842.658 414.855L842.836 414.657Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M895.629 416.578C895.015 414.815 894.124 413.053 892.084 412.796C890.045 412.538 887.867 414.459 886.322 415.885L890.065 417.865C890.338 416.827 890.393 415.744 890.225 414.685C890.056 413.625 889.669 412.613 889.088 411.711C888.507 410.809 887.744 410.039 886.849 409.448C885.953 408.858 884.944 408.46 883.887 408.281C879.313 407.35 875.273 410.934 873.986 415.092C873.436 417.332 873.549 419.684 874.312 421.86C875.075 424.036 876.455 425.944 878.283 427.349C882.798 431.111 888.679 431.844 894.322 432.458L892.342 428.161C891.448 429.433 890.866 430.898 890.644 432.437C890.422 433.976 890.566 435.546 891.063 437.019C891.561 438.492 892.398 439.828 893.508 440.917C894.617 442.006 895.968 442.819 897.45 443.289C904.737 445.883 912.103 441.447 916.875 436.2L912.915 434.042C912.468 435.592 912.408 437.229 912.739 438.808C913.069 440.387 913.781 441.862 914.811 443.103C915.842 444.345 917.161 445.316 918.652 445.931C920.144 446.547 921.763 446.788 923.369 446.635C930.894 445.744 934.854 437.626 933.27 430.794C931.448 422.577 923.944 417.845 916.558 415.132C909.172 412.419 900.4 410.419 893.411 414.954C891.094 416.459 893.411 420.102 895.648 418.597C900.519 415.389 906.479 416.419 911.727 418.023C916.974 419.627 923.013 421.983 926.518 426.755C929.686 431.052 930.755 437.289 926.221 441.091C925.318 441.964 924.155 442.52 922.908 442.673C921.661 442.827 920.398 442.57 919.31 441.942C917.33 440.635 915.806 437.982 917.112 435.745C918.221 433.765 915.766 431.23 913.885 432.656C910.242 435.428 906.321 438.992 901.43 438.774C897.47 438.616 893.886 434.992 896.322 431.171C896.531 430.777 896.634 430.335 896.622 429.889C896.609 429.443 896.48 429.008 896.249 428.627C896.017 428.245 895.69 427.931 895.3 427.714C894.911 427.497 894.471 427.385 894.025 427.389C888.441 427.23 880.164 426.042 878.501 419.468C878.231 418.364 878.304 417.204 878.711 416.142C879.118 415.081 879.839 414.169 880.778 413.528C881.314 413.265 881.911 413.15 882.507 413.197C883.103 413.244 883.675 413.451 884.163 413.795C884.651 414.14 885.037 414.609 885.282 415.155C885.526 415.7 885.618 416.301 885.55 416.894C885.469 417.355 885.536 417.83 885.742 418.25C885.947 418.67 886.28 419.015 886.693 419.235C887.106 419.454 887.578 419.538 888.041 419.473C888.504 419.408 888.936 419.199 889.273 418.874C889.912 417.976 890.679 417.175 891.55 416.498C892.619 415.884 893.054 416.498 893.906 417.429C894.019 417.657 894.218 417.832 894.459 417.913C894.701 417.995 894.965 417.977 895.193 417.865C895.421 417.752 895.596 417.553 895.677 417.311C895.759 417.07 895.741 416.806 895.629 416.578Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M873.33 196.809C874.085 195.498 874.333 193.955 874.026 192.473C873.72 190.991 872.88 189.674 871.666 188.77C870.339 187.743 868.698 187.206 867.02 187.249C865.343 187.293 863.732 187.914 862.459 189.008C855.034 195.047 859.469 204.848 863.984 211.066C865.37 213.046 866.795 214.808 867.944 216.808C868.999 218.788 869.899 220.847 870.637 222.966C872.042 226.471 874.32 229.48 878.339 229.837C880.198 229.956 882.055 229.574 883.716 228.731C885.377 227.888 886.782 226.615 887.784 225.045C889.889 221.415 890.594 217.14 889.764 213.026C889.017 208.676 887.19 204.584 884.45 201.124C881.71 197.665 878.145 194.949 874.082 193.225C873.78 193.075 873.45 192.99 873.113 192.974C872.776 192.958 872.44 193.013 872.125 193.134C871.811 193.255 871.524 193.44 871.285 193.677C871.046 193.914 870.858 194.199 870.734 194.513C870.61 194.826 870.553 195.162 870.566 195.499C870.579 195.836 870.661 196.167 870.808 196.47C870.956 196.773 871.164 197.043 871.421 197.261C871.678 197.48 871.977 197.643 872.3 197.74C874.96 198.651 877.395 200.118 879.443 202.044C881.491 203.969 883.106 206.309 884.18 208.907C886.16 213.6 887.388 221.798 882.2 225.005C881.665 225.39 881.057 225.662 880.414 225.807C879.771 225.951 879.105 225.965 878.456 225.847C877.808 225.728 877.19 225.481 876.639 225.118C876.088 224.756 875.616 224.287 875.25 223.738C873.607 221.283 873.072 218.134 871.646 215.541C868.577 209.937 862.558 204.967 862.221 198.195C862.092 196.696 862.414 195.192 863.144 193.877C863.874 192.561 864.98 191.493 866.32 190.809C869.27 189.582 873.825 193.106 872.26 196.255C872.195 196.375 872.18 196.517 872.219 196.649C872.258 196.781 872.347 196.892 872.468 196.957C872.589 197.023 872.731 197.038 872.863 196.999C872.995 196.96 873.106 196.87 873.171 196.75L873.33 196.809Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M892.581 237.361C891.93 235.78 890.714 234.497 889.169 233.765C887.623 233.033 885.861 232.903 884.225 233.401C882.446 233.976 880.958 235.215 880.069 236.86C879.18 238.505 878.96 240.429 879.453 242.232C879.842 244.079 880.877 245.726 882.373 246.876C883.869 248.027 885.726 248.606 887.611 248.509C889.555 248.379 891.402 247.609 892.863 246.319C894.324 245.03 895.318 243.294 895.689 241.381C896 239.081 895.435 236.749 894.105 234.846C893.423 233.854 892.572 232.99 891.591 232.292C891.053 231.791 890.383 231.455 889.659 231.325C888.936 231.195 888.19 231.276 887.512 231.559C887.081 231.837 886.774 232.27 886.656 232.768C886.538 233.267 886.617 233.792 886.878 234.233C887.274 235.064 888.324 235.361 889.076 235.777L889.531 236.054C890.007 236.331 889.215 235.777 889.65 236.054C889.955 236.316 890.246 236.594 890.521 236.886C890.917 237.282 890.323 236.549 890.64 237.005L890.898 237.361C891.072 237.625 891.224 237.903 891.353 238.193C891.155 237.757 891.353 238.292 891.353 238.351C891.353 238.41 891.452 238.688 891.512 238.846L891.63 239.361C891.63 239.579 891.63 239.579 891.63 239.361C891.639 239.473 891.639 239.586 891.63 239.698C891.64 239.869 891.64 240.041 891.63 240.212C891.63 240.212 891.63 240.866 891.63 240.371C891.598 240.708 891.525 241.041 891.412 241.361C891.391 241.47 891.358 241.576 891.313 241.678C891.492 241.222 891.313 241.678 891.313 241.796C891.242 241.939 891.162 242.078 891.076 242.212L890.898 242.489C891.036 242.311 891.056 242.291 890.898 242.489C890.689 242.748 890.464 242.993 890.224 243.222C890.224 243.222 889.749 243.598 890.125 243.321L889.71 243.598C889.432 243.777 889.135 243.935 888.838 244.093C889.215 243.915 888.957 244.093 888.838 244.093L888.205 244.311L887.729 244.43C887.215 244.569 888.145 244.43 887.611 244.43H886.64C886.106 244.43 887.036 244.43 886.522 244.43H886.046L885.571 244.291C886.027 244.43 885.413 244.291 885.314 244.173C885.215 244.054 884.581 243.658 884.957 243.955C884.72 243.757 884.482 243.559 884.264 243.341C884.047 243.123 883.928 242.866 884.264 243.341L883.987 242.965L883.75 242.549C883.75 242.549 883.433 241.836 883.631 242.331C883.507 242.041 883.402 241.743 883.314 241.44C883.314 241.282 883.314 241.123 883.215 240.985C883.116 240.846 883.215 240.628 883.215 240.985C883.195 240.675 883.195 240.364 883.215 240.054C883.205 239.902 883.205 239.75 883.215 239.599C883.215 240.133 883.215 239.46 883.215 239.361L883.334 238.906C883.334 238.807 883.571 238.391 883.334 238.807C883.472 238.529 883.611 238.252 883.769 237.995C883.552 238.371 883.769 237.995 883.769 237.995L883.967 237.757L884.304 237.46C883.987 237.757 884.443 237.46 884.522 237.302L884.918 237.064L885.175 236.945L886.185 236.668C885.789 236.668 886.185 236.668 886.324 236.668H886.938H887.848C888.444 236.653 889.035 236.78 889.572 237.038C890.109 237.297 890.577 237.679 890.937 238.153C891.452 238.846 892.798 238.411 892.422 237.5L892.581 237.361Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M891.588 264.785C890.281 259.518 885.648 254.053 879.708 256.667C872.876 259.716 873.253 268.211 874.361 274.369L876.876 271.715C869.431 268.884 860.798 273.26 857.768 280.408C854.323 288.487 859.848 296.347 867.451 299.159C870.511 300.362 873.856 300.64 877.073 299.961C880.289 299.282 883.236 297.674 885.549 295.338C889.494 290.836 892.046 285.284 892.895 279.358C893.451 276.408 893.723 273.411 893.707 270.408C893.72 269.332 893.52 268.264 893.119 267.265C892.718 266.266 892.124 265.356 891.37 264.587C891.301 264.517 891.214 264.468 891.119 264.442C891.024 264.417 890.925 264.418 890.83 264.444C890.735 264.47 890.649 264.521 890.581 264.592C890.512 264.662 890.463 264.749 890.44 264.844C890.001 266.204 889.663 267.594 889.43 269.003C889.43 270.983 889.43 273.082 889.291 275.141C888.965 279.888 887.685 284.522 885.529 288.764C884.586 290.791 883.142 292.546 881.334 293.862C879.526 295.178 877.413 296.013 875.193 296.288C868.995 296.803 861.115 292.843 860.699 285.932C860.224 278.329 869.233 273.299 875.846 275.794C877.51 276.408 878.619 274.527 878.361 273.141C877.569 268.805 876.262 263.102 880.341 259.954C884.42 256.805 888.776 261.577 890.242 265.181C890.294 265.36 890.415 265.51 890.579 265.599C890.742 265.688 890.934 265.709 891.113 265.656C891.291 265.604 891.442 265.482 891.531 265.319C891.62 265.156 891.641 264.964 891.588 264.785Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M900.003 471.901C897.683 467.757 894.095 464.467 889.766 462.515C885.114 460.684 879.995 460.406 875.172 461.723C871.074 462.812 872.678 468.079 876.242 468.455C885.805 469.505 891.053 457.11 886.142 449.843C880.657 441.625 869.47 441.922 862.124 447.229C858.077 450.12 854.811 453.971 852.619 458.436C851.174 461.743 851.491 466.198 855.352 467.584C855.907 467.852 856.522 467.971 857.137 467.93C857.752 467.889 858.346 467.689 858.861 467.35C859.375 467.011 859.793 466.544 860.074 465.995C860.354 465.446 860.487 464.834 860.461 464.218C860.302 460.258 856.382 458.773 852.976 459.347C843.075 460.991 835.155 470.436 833.175 479.94L834.739 478.989C820.879 476.158 805.81 485.643 803.692 499.939C801.474 514.987 812.582 529.145 825.928 534.788C834.7 538.209 844.191 539.373 853.53 538.174C858.437 537.633 863.299 536.753 868.084 535.54C872.611 534.55 877.058 533.226 881.39 531.58C885.093 530.056 888.34 527.422 888.894 523.244C889.052 522.323 889.021 521.379 888.805 520.47C888.589 519.56 888.192 518.704 887.638 517.952C887.083 517.199 886.383 516.567 885.578 516.091C884.773 515.616 883.881 515.308 882.954 515.185C876.163 514.393 870.955 522.313 869.905 528.135C869.36 531.38 869.492 534.702 870.292 537.894C871.093 541.085 872.545 544.076 874.557 546.68C876.569 549.283 879.097 551.442 881.984 553.021C884.87 554.601 888.052 555.566 891.33 555.856C907.745 557.836 923.585 547.599 932.911 534.709C942.238 521.818 944.97 505.186 938.357 490.513C935.29 483.606 930.291 477.733 923.961 473.604C919.585 470.792 908.735 466.713 907.25 474.99C907.07 476.682 907.544 478.379 908.575 479.734C909.605 481.088 911.115 481.998 912.794 482.276C914.477 482.46 916.179 482.223 917.747 481.587C919.316 480.951 920.703 479.936 921.783 478.633C923.608 476.337 924.759 473.579 925.109 470.666C925.459 467.754 924.993 464.802 923.763 462.139C922.721 459.316 920.828 456.887 918.344 455.188C915.861 453.489 912.911 452.604 909.903 452.654C906.643 452.98 903.546 454.239 900.982 456.279C898.419 458.319 896.498 461.055 895.448 464.159C894.323 467.296 894.365 470.733 895.567 473.841C896.478 476.198 900.181 475.148 899.349 472.693C895.963 462.594 909.467 451.348 917.566 460.179C919.069 461.852 920.124 463.88 920.629 466.072C921.135 468.265 921.076 470.55 920.457 472.713C919.785 474.927 918.28 476.794 916.259 477.92C914.893 478.613 912.299 479.029 911.744 477.009C911.289 475.425 912.932 475.168 914.121 475.207C919.269 475.405 924.536 480.158 927.763 483.781C931.571 488.113 934.287 493.293 935.684 498.889C938.713 510.651 935.288 523.125 928.258 532.828C921.229 542.53 909.408 550.985 896.815 551.718C890.953 552.309 885.095 550.558 880.519 546.847C876.975 543.598 874.695 539.2 874.083 534.432C873.69 532.208 873.863 529.922 874.587 527.784C875.31 525.645 876.56 523.723 878.222 522.195C879.509 521.185 883.152 520.036 882.182 522.967C881.212 525.897 876.242 526.452 873.806 527.165C859.946 531.263 844.66 534.649 830.482 530.095C819.018 526.392 808.068 515.165 808.127 502.552C808.127 489.484 821.453 479.187 834.125 481.583C834.458 481.656 834.807 481.598 835.098 481.421C835.389 481.244 835.601 480.962 835.69 480.633C836.397 477.037 837.884 473.639 840.046 470.68C842.208 467.721 844.993 465.272 848.204 463.505C850.047 462.385 852.104 461.663 854.243 461.387C855.042 461.255 855.861 461.335 856.619 461.62C857.376 461.905 858.046 462.385 858.56 463.01C859.807 464.871 858.441 467.406 856.104 466.456C850.798 464.278 856.461 457.921 858.837 455.724C863.827 451.15 871.45 447.427 877.945 451.209C879.069 451.76 879.99 452.653 880.576 453.758C881.163 454.864 881.385 456.127 881.212 457.367C881.063 458.592 880.455 459.715 879.51 460.508C878.566 461.302 877.355 461.708 876.123 461.644L877.192 468.396C880.709 467.366 884.447 467.366 887.964 468.396C891.705 469.2 895.14 471.055 897.864 473.742C898.953 474.91 900.814 473.326 900.003 472V471.901Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M826.524 400.361C827.874 400.183 829.122 399.548 830.059 398.56C830.997 397.572 831.566 396.293 831.672 394.935C831.737 393.454 831.284 391.996 830.392 390.811C829.5 389.626 828.224 388.788 826.782 388.441C823.277 387.49 819.832 389.074 816.98 390.975C814.039 392.796 811.333 394.97 808.921 397.45C806.806 399.689 805.556 402.609 805.396 405.685C805.237 408.762 806.177 411.795 808.05 414.241C809.979 416.578 812.679 418.148 815.665 418.667C818.65 419.187 821.722 418.621 824.326 417.073C825.784 416.196 827.04 415.022 828.013 413.626C828.985 412.231 829.652 410.645 829.97 408.974C830.517 405.57 829.896 402.08 828.207 399.074C827.138 396.955 823.673 399.292 825.514 401.272C828.623 404.559 827.495 410.618 824.445 413.548C822.766 415.111 820.596 416.043 818.307 416.184C816.017 416.325 813.749 415.666 811.892 414.32C810.167 412.936 808.944 411.024 808.411 408.878C807.878 406.732 808.064 404.47 808.941 402.44C810.16 400.158 811.871 398.176 813.951 396.638C816.08 394.86 818.374 393.289 820.802 391.945C823.237 390.678 826.742 389.847 828.999 392.084C829.542 392.686 829.914 393.423 830.075 394.218C830.237 395.012 830.182 395.836 829.918 396.602C829.653 397.368 829.187 398.05 828.569 398.575C827.952 399.1 827.204 399.45 826.406 399.589C825.91 399.688 826.029 400.539 826.544 400.46L826.524 400.361Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c(
                "g",
                {
                  staticStyle: { "mix-blend-mode": "multiply" },
                  attrs: { opacity: "0.45" }
                },
                [
                  _c("path", {
                    attrs: {
                      d:
                        "M277.453 497.074C265.573 485.194 239.832 491.134 235.872 512.915C234.011 520.32 231.753 527.745 230.644 535.151C231.021 535.705 231.357 536.26 231.753 536.794C231.171 537.569 230.641 538.383 230.169 539.23C229.386 546.508 230.677 553.86 233.892 560.436C230.677 553.86 229.386 546.508 230.169 539.23C229.68 540.084 229.25 540.97 228.882 541.883C227.289 546.209 227.319 550.966 228.969 555.271C230.619 559.576 233.775 563.135 237.852 565.288C235.001 572.059 232.565 579.287 233.416 586.692C234.228 593.741 237.832 600.553 244.663 603.364C250.465 605.76 257.811 604.77 261.454 599.226C262.686 597.341 263.381 595.156 263.465 592.906C263.549 590.656 263.018 588.426 261.93 586.455C263.964 585.462 265.664 583.897 266.821 581.952C267.978 580.007 268.542 577.766 268.444 575.505C268.252 573.364 267.458 571.321 266.155 569.611C264.852 567.901 263.092 566.595 261.078 565.842C266.231 559.672 269.593 552.207 270.8 544.259C274.662 545.122 278.684 544.949 282.457 543.756C286.23 542.563 289.62 540.394 292.284 537.468C293.103 536.533 293.845 535.533 294.502 534.478C294.641 527.365 293.182 520.311 290.231 513.837C287.28 507.363 282.914 501.635 277.453 497.074Z",
                      fill: "#00A53F"
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _c(
                "g",
                {
                  staticStyle: { "mix-blend-mode": "multiply" },
                  attrs: { opacity: "0.45" }
                },
                [
                  _c("path", {
                    attrs: {
                      d:
                        "M103.24 300.879C95.5464 305.148 88.7331 310.839 83.1621 317.65C88.4702 328.551 95.981 338.232 105.22 346.084C111.894 351.663 119.53 355.978 127.753 358.816C136.05 361.687 145.317 362.063 154.088 361.865C155.632 365.802 158.561 369.039 162.324 370.968C166.087 372.897 170.425 373.384 174.523 372.339C180.047 384.873 195.512 387.725 208.045 383.685C208.54 381.933 209.251 380.25 210.164 378.676C210.718 377.527 211.312 376.399 211.926 375.27C205.491 376.973 198.066 377.606 192.898 373.29C194.444 371.084 195.239 368.439 195.164 365.746C195.089 363.054 194.149 360.457 192.482 358.34C190.769 356.314 188.427 354.92 185.829 354.38C186.706 352.265 187.049 349.967 186.828 347.688C186.607 345.409 185.829 343.219 184.562 341.312C178.146 332.282 165.117 336.797 158.365 343.292C154.944 339.719 152.791 335.12 152.24 330.204C151.689 325.288 152.77 320.327 155.316 316.086C155.969 316.719 156.643 317.313 157.296 317.887C150.94 296.938 123.041 288.305 103.24 300.879Z",
                      fill: "#00A53F"
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _c(
                "g",
                {
                  staticStyle: { "mix-blend-mode": "multiply" },
                  attrs: { opacity: "0.45" }
                },
                [
                  _c("path", {
                    attrs: {
                      d:
                        "M234.78 238.031C216.959 234.071 195.178 238.031 191.218 257.832C187.258 240.012 175.377 224.171 157.557 220.211C136.39 212.746 108.966 210.766 88.5709 220.211C89.0229 220.533 89.4922 220.831 89.9767 221.102C86.7249 222.877 83.6942 225.031 80.9476 227.517C78.302 230.373 76.3387 233.792 75.2054 237.517C71.4036 248.011 70.9284 259.872 71.463 270.921C72.2234 288.036 76.4965 304.811 84.0167 320.205C89.5822 313.373 96.3958 307.661 104.095 303.374C123.895 290.8 151.795 299.414 158.25 320.363C162.918 324.176 168.378 326.901 174.231 328.339C180.085 329.778 186.185 329.894 192.089 328.679C198.801 327.149 204.984 323.859 210.002 319.147C215.02 314.435 218.693 308.471 220.642 301.869C221.018 300.622 221.335 299.335 221.592 298.048C227.315 297.335 232.621 293.751 236.76 289.909C242.438 284.561 246.662 277.856 249.036 270.425C250.728 265.38 251.753 260.134 252.085 254.822C250.546 250.963 248.208 247.472 245.226 244.578C242.244 241.685 238.684 239.454 234.78 238.031Z",
                      fill: "#00A53F"
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M160.663 212.78L138.519 242.959L116.337 212.78C113.327 208.683 111.512 203.832 111.093 198.765C110.675 193.699 111.669 188.615 113.965 184.079C116.261 179.544 119.769 175.733 124.101 173.071C128.432 170.409 133.416 169 138.5 169C143.584 169 148.568 170.409 152.899 173.071C157.231 175.733 160.739 179.544 163.035 184.079C165.331 188.615 166.325 193.699 165.907 198.765C165.488 203.832 163.673 208.683 160.663 212.78Z",
                  fill: "#FAB500"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M160.663 212.78L138.519 242.959L116.337 212.78C113.327 208.683 111.512 203.832 111.093 198.765C110.675 193.699 111.669 188.615 113.965 184.079C116.261 179.544 119.769 175.733 124.101 173.071C128.432 170.409 133.416 169 138.5 169C143.584 169 148.568 170.409 152.899 173.071C157.231 175.733 160.739 179.544 163.035 184.079C165.331 188.615 166.325 193.699 165.907 198.765C165.488 203.832 163.673 208.683 160.663 212.78V212.78Z",
                  stroke: "#2F6A69",
                  "stroke-width": "0.83",
                  "stroke-miterlimit": "10"
                }
              }),
              _vm._v(" "),
              _c(
                "g",
                {
                  staticStyle: { "mix-blend-mode": "multiply" },
                  attrs: { opacity: "0.2" }
                },
                [
                  _c("path", {
                    attrs: {
                      d:
                        "M148.493 252.235C148.493 253.691 144.03 254.855 138.518 254.855C133.006 254.855 128.523 253.691 128.523 252.235C128.523 250.78 133.006 249.654 138.518 249.654C144.03 249.654 148.493 250.78 148.493 252.235Z",
                      fill: "#00792D"
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M160.468 191.477H116.951C116.951 191.477 116.951 191.342 116.951 191.284C116.951 191.091 117.048 190.898 117.106 190.705C117.164 190.512 117.106 190.376 117.241 190.203L117.416 189.7C117.416 189.7 117.416 189.546 117.957 189.179L117.803 188.735C117.798 188.671 117.798 188.606 117.803 188.542C117.795 188.471 117.795 188.4 117.803 188.329C117.826 188.249 117.859 188.171 117.899 188.098H158.998C158.998 188.233 159.114 188.387 159.191 188.542C159.191 188.793 159.385 189.025 159.462 189.276C159.732 190.004 159.965 190.745 160.159 191.496C160.159 191.496 160.468 191.419 160.468 191.477Z",
                  fill: "#FD2A2A"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M157.274 184.273H120.143C121.033 182.972 122.058 181.768 123.2 180.681H154.159C155.284 181.773 156.296 182.977 157.178 184.273H157.274Z",
                  fill: "#FD2A2A"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M149.302 177.091H128.172C128.275 177.021 128.385 176.963 128.501 176.917H128.675L129.488 176.53L129.817 176.376L130.474 176.106C130.848 175.95 131.229 175.815 131.616 175.7C132.878 175.288 134.172 174.984 135.486 174.792V174.503V174.773C136.391 174.653 137.302 174.582 138.214 174.561H138.563C142.249 174.559 145.879 175.468 149.127 177.206L149.302 177.091Z",
                  fill: "#FD2A2A"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M161.125 196.613V197.501C161.134 197.681 161.134 197.861 161.125 198.041C161.125 198.235 161.125 198.447 161.125 198.659H116.427C116.427 198.273 116.427 197.887 116.427 197.501V197.385C116.427 197.192 116.427 196.999 116.427 196.825V196.709C116.418 196.671 116.418 196.631 116.427 196.593V196.439C116.418 196.265 116.418 196.091 116.427 195.917C116.418 195.769 116.418 195.621 116.427 195.473C116.427 195.473 116.427 195.28 116.427 195.184H161.105C161.105 195.184 161.105 195.608 161.105 195.821C161.105 196.033 161.105 196.226 161.105 196.439V196.709L161.125 196.613Z",
                  fill: "#FD2A2A"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M160.525 202.252C160.37 202.889 160.177 203.545 159.964 204.183V204.337C159.917 204.502 159.859 204.663 159.789 204.82C159.693 205.09 159.615 205.341 159.499 205.592C159.469 205.68 159.43 205.764 159.383 205.843H118.091C117.956 205.534 117.82 205.225 117.704 204.897L117.53 204.414C117.539 204.363 117.539 204.311 117.53 204.26C117.337 203.642 117.143 202.985 116.988 202.329H160.602L160.525 202.252Z",
                  fill: "#FD2A2A"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M157.39 209.455C156.537 210.757 155.545 211.962 154.429 213.047H123.025C121.902 211.963 120.903 210.758 120.045 209.455H157.39Z",
                  fill: "#FD2A2A"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M149.593 216.639C146.63 218.276 143.335 219.222 139.953 219.405C136.572 219.589 133.193 219.007 130.069 217.701L129.508 217.45C128.941 217.206 128.399 216.935 127.883 216.639H149.612H149.593Z",
                  fill: "#FD2A2A"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M159.269 187.884H118.209C118.383 187.479 118.577 187.092 118.77 186.706C118.84 186.567 118.918 186.432 119.002 186.301C119.046 186.2 119.098 186.103 119.157 186.011L119.312 185.47V185.663C119.563 185.219 119.834 184.794 120.105 184.37H157.237C157.835 185.252 158.372 186.175 158.843 187.131C158.979 187.401 159.114 187.691 159.23 187.961L159.269 187.884Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M154.256 180.681H123.297C124.589 179.433 126.032 178.35 127.592 177.456H127.689L128.289 177.128H149.438C151.238 178.096 152.898 179.305 154.372 180.72L154.256 180.681Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M161.047 195.068H116.369C116.36 195.024 116.36 194.978 116.369 194.933V194.759C116.369 194.528 116.369 194.276 116.369 194.025L116.176 194.18L116.485 193.369C116.476 193.279 116.476 193.188 116.485 193.098C116.476 193.028 116.476 192.957 116.485 192.886C116.485 192.654 116.485 192.423 116.621 192.21C116.661 191.982 116.713 191.757 116.776 191.534H160.293C160.301 191.624 160.301 191.715 160.293 191.805C160.293 192.21 160.467 192.616 160.544 193.021V193.446C160.544 193.659 160.544 193.871 160.641 194.083C160.738 194.296 160.641 194.566 160.641 194.817C160.788 194.881 160.925 194.965 161.047 195.068Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M161.069 198.659C160.987 199.863 160.806 201.058 160.527 202.232H116.913C116.624 201.06 116.443 199.864 116.371 198.659H161.069Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M159.326 205.862C158.796 207.118 158.149 208.321 157.391 209.454H120.027C119.284 208.312 118.636 207.111 118.092 205.862H159.326Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M154.411 213.047C152.974 214.441 151.361 215.642 149.612 216.619H127.882C126.123 215.649 124.503 214.448 123.064 213.047H154.45H154.411Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M138.371 174.445V195.378H116.274C116.274 195.378 116.274 195.185 116.274 195.088C116.264 195.043 116.264 194.997 116.274 194.953V194.779C116.274 194.547 116.274 194.296 116.274 194.045L116.08 194.2L116.39 193.389C116.38 193.299 116.38 193.208 116.39 193.118C116.381 193.048 116.381 192.976 116.39 192.906C116.39 192.674 116.39 192.442 116.525 192.23C116.565 192.002 116.617 191.777 116.68 191.554C116.68 191.554 116.68 191.419 116.68 191.361C116.68 191.168 116.777 190.975 116.835 190.782C116.893 190.589 116.835 190.453 116.97 190.28L117.144 189.778C117.144 189.778 117.144 189.623 117.144 189.546L117.396 188.87C117.391 188.806 117.391 188.741 117.396 188.677C117.389 188.606 117.389 188.535 117.396 188.464C117.42 188.384 117.452 188.306 117.493 188.233C117.667 187.827 117.86 187.441 118.054 187.055C118.124 186.915 118.201 186.78 118.286 186.649C118.33 186.549 118.382 186.452 118.441 186.359L118.595 185.819V186.012C118.847 185.568 119.118 185.143 119.389 184.718C120.279 183.418 121.304 182.214 122.446 181.126C123.739 179.878 125.181 178.795 126.742 177.901H126.838L127.438 177.573C127.541 177.504 127.652 177.445 127.767 177.399H127.941L128.754 177.013L129.083 176.859L129.741 176.588C130.114 176.433 130.495 176.298 130.882 176.183C132.144 175.77 133.439 175.467 134.752 175.275V174.985V175.256C135.937 174.897 137.146 174.626 138.371 174.445Z",
                  fill: "#194396"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M133.725 177.92L134.016 178.77L133.3 178.249V178.229V178.249L132.584 178.77L132.893 177.92L132.139 177.418H133.029L133.28 176.569L133.551 177.418H134.441L133.706 177.92H133.725Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M133.725 182.322L134.016 183.172L133.3 182.631L132.584 183.172L132.893 182.322L132.139 181.82H133.029L133.28 180.971L133.551 181.82H134.441L133.706 182.322H133.725Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M133.725 186.726L134.016 187.575L133.3 187.034L132.584 187.575L132.893 186.726L132.139 186.223H133.029L133.28 185.374L133.551 186.223H134.441L133.706 186.726H133.725Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M133.725 191.128L134.016 191.958L133.3 191.437L132.584 191.958L132.893 191.128L132.139 190.626H133.029L133.28 189.776L133.551 190.626H134.441L133.706 191.128H133.725Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M129.276 178.576V178.769L129.102 178.653L128.889 178.498L128.676 178.344L127.941 178.865V178.711L128.173 178.074L127.689 177.745H128.579V177.533V177.417H128.754L128.87 177.745H129.818L129.083 178.247V178.518V178.749L129.276 178.576Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M129.024 182.322L129.334 183.172L128.618 182.631L127.902 183.172L128.192 182.322L127.457 181.82H128.347L128.599 180.971L128.87 181.82H129.76L129.024 182.322Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M129.024 186.726L129.334 187.575L128.618 187.034L127.902 187.575L128.192 186.726L127.457 186.223H128.347L128.599 185.374L128.87 186.223H129.76L129.024 186.726Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M129.024 191.128L129.334 191.958L128.618 191.437L127.902 191.958L128.192 191.128L127.457 190.626H128.347L128.599 189.776L128.87 190.626H129.76L129.024 191.128Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M124.341 182.322L124.65 183.172L123.915 182.631L123.199 183.172L123.509 182.322L122.773 181.82H123.664L123.896 180.971L124.186 181.82H124.167H124.186H125.076L124.341 182.322H124.321H124.341Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M124.341 186.726L124.65 187.575L123.915 187.034L123.199 187.575L123.509 186.726L122.773 186.223H123.664L123.896 185.374L124.186 186.223H124.167H124.186H125.076L124.341 186.726H124.321H124.341Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M124.341 191.128L124.65 191.958L123.915 191.437L123.199 191.958L123.509 191.128L122.773 190.626H123.664L123.896 189.776L124.186 190.626H124.167H124.186H125.076L124.341 191.128H124.321H124.341Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M119.93 187.305L120.027 187.575L119.852 187.44L119.311 187.035L118.711 187.479L119.001 186.629C119.071 186.49 119.149 186.355 119.233 186.224V186.011L119.388 185.471V185.664V185.837L119.485 186.166H120.394L119.64 186.668L119.93 187.305Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M119.737 191.128L120.028 191.958L119.312 191.437L118.596 191.958L118.886 191.128H118.905L118.17 190.626H119.041L119.292 189.776L119.563 190.626H120.473L119.718 191.128H119.737Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M135.991 180.122L136.281 180.971L135.565 180.431L134.849 180.971L135.159 180.122L134.424 179.619H135.314L135.546 178.77L135.817 179.619H135.836H136.726L135.991 180.122H135.972H135.991Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M135.991 184.524L136.281 185.373L135.565 184.833L134.849 185.373L135.159 184.524V184.504L134.424 184.022H135.314L135.546 183.172L135.817 184.022H135.836H136.726L135.991 184.504H135.972L135.991 184.524Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M135.991 188.927L136.281 189.776L135.565 189.236L134.849 189.776L135.159 188.927L134.424 188.425H135.314L135.546 187.575L135.817 188.425H135.836H136.726L135.991 188.927H135.972H135.991Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M135.991 193.33L136.281 194.18L135.565 193.658V193.639V193.658L134.849 194.18L135.159 193.33L134.424 192.828H135.314L135.546 191.978L135.817 192.828H135.836H136.726L135.991 193.33H135.972H135.991Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M136.726 175.236L136.456 175.429L136.378 175.468L135.991 175.738L136.107 176.105H136.127L136.185 176.279L136.223 176.395L136.281 176.588L136.069 176.414H136.049L135.933 176.317L135.701 176.163L135.585 176.066H135.565L135.372 176.221L135.024 176.472H135.004L134.849 176.588L134.888 176.491L134.966 176.279L135.159 175.738L135.101 175.699L134.985 175.622L134.424 175.236H135.314L135.391 174.966L135.43 174.85V174.792H135.449L135.469 174.676L135.546 174.386L135.643 174.657L135.662 174.753L135.682 174.811L135.72 174.908L135.836 175.236H136.726Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M131.403 180.122L131.713 180.971L130.997 180.431H130.978L130.281 180.971L130.571 180.122L129.836 179.619H130.726L130.958 178.77L131.248 179.619H132.139L131.403 180.122Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M131.403 184.524L131.713 185.373L130.997 184.833H130.978L130.281 185.373L130.571 184.524V184.504L129.836 184.022H130.726L130.958 183.172L131.248 184.022H132.139L131.403 184.504V184.524Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M131.403 188.927L131.713 189.776L130.997 189.236H130.978L130.281 189.776L130.571 188.927L129.836 188.425H130.726L130.958 187.575L131.248 188.425H132.139L131.403 188.927Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M131.403 193.33L131.713 194.18L130.997 193.658V193.639L130.978 193.658L130.281 194.18L130.571 193.33L129.836 192.828H130.726L130.958 191.978L131.248 192.828H132.139L131.403 193.33Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M131.753 176.587L131.598 176.491L131.056 176.085L130.398 176.568V176.298V176.201V176.085C130.772 175.93 131.153 175.795 131.54 175.68L131.327 175.815L131.521 176.356L131.753 176.587Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M126.645 180.122L126.936 180.971L126.22 180.431L125.504 180.971L125.794 180.122H125.813L125.078 179.619H125.949L126.2 178.77L126.471 179.619H127.381L126.645 180.122H126.626H126.645Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M126.645 184.524L126.936 185.373L126.22 184.833L125.504 185.373L125.794 184.524L125.813 184.504L125.078 184.022H125.949L126.2 183.172L126.471 184.022H127.381L126.645 184.504H126.626L126.645 184.524Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M126.645 188.927L126.936 189.776L126.22 189.236L125.504 189.776L125.794 188.927H125.813L125.078 188.425H125.949L126.2 187.575L126.471 188.425H127.381L126.645 188.927H126.626H126.645Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M126.645 193.33L126.936 194.18L126.22 193.658V193.639V193.658L125.504 194.18L125.794 193.33H125.813L125.078 192.828H125.949L126.2 191.978L126.471 192.828H127.381L126.645 193.33H126.626H126.645Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M121.981 184.524L122.271 185.373L121.575 184.833H121.556L120.84 185.373L121.149 184.524V184.504L120.414 184.022H121.304L121.536 183.172L121.807 184.022H122.717L121.981 184.504V184.524Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M121.981 188.927L122.271 189.776L121.575 189.236H121.556L120.84 189.776L121.149 188.927L120.414 188.425H121.304L121.536 187.575L121.807 188.425H122.717L121.981 188.927Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M121.981 193.33L122.271 194.18L121.575 193.658V193.639L121.556 193.658L120.84 194.18L121.149 193.33L120.414 192.828H121.304L121.536 191.978L121.807 192.828H122.717L121.981 193.33Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M117.628 189.525V189.776L117.492 189.66C117.492 189.66 117.492 189.506 117.492 189.429L117.628 189.525Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M118.206 188.424L118.052 188.52C118.048 188.456 118.048 188.392 118.052 188.328L118.206 188.424Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M117.415 193.253L117.705 194.103L117.067 193.62L116.68 193.91L116.486 194.064L116.796 193.253C116.787 193.163 116.787 193.073 116.796 192.983C116.787 192.912 116.787 192.841 116.796 192.771L117.028 191.921L117.183 192.346L117.299 192.693H118.208L117.976 192.848L117.415 193.253Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M191.663 312.78L169.519 342.959L147.337 312.78C144.327 308.683 142.512 303.832 142.093 298.765C141.675 293.699 142.669 288.615 144.965 284.079C147.261 279.544 150.769 275.733 155.101 273.071C159.432 270.409 164.416 269 169.5 269C174.584 269 179.568 270.409 183.899 273.071C188.231 275.733 191.739 279.544 194.035 284.079C196.331 288.615 197.325 293.699 196.907 298.765C196.488 303.832 194.673 308.683 191.663 312.78Z",
                  fill: "#FAB500"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M191.663 312.78L169.519 342.959L147.337 312.78C144.327 308.683 142.512 303.832 142.093 298.765C141.675 293.699 142.669 288.615 144.965 284.079C147.261 279.544 150.769 275.733 155.101 273.071C159.432 270.409 164.416 269 169.5 269C174.584 269 179.568 270.409 183.899 273.071C188.231 275.733 191.739 279.544 194.035 284.079C196.331 288.615 197.325 293.699 196.907 298.765C196.488 303.832 194.673 308.683 191.663 312.78V312.78Z",
                  stroke: "#2F6A69",
                  "stroke-width": "0.83",
                  "stroke-miterlimit": "10"
                }
              }),
              _vm._v(" "),
              _c(
                "g",
                {
                  staticStyle: { "mix-blend-mode": "multiply" },
                  attrs: { opacity: "0.2" }
                },
                [
                  _c("path", {
                    attrs: {
                      d:
                        "M179.493 352.235C179.493 353.691 175.03 354.855 169.518 354.855C164.006 354.855 159.523 353.691 159.523 352.235C159.523 350.78 164.006 349.654 169.518 349.654C175.03 349.654 179.493 350.78 179.493 352.235Z",
                      fill: "#00792D"
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _c(
                "mask",
                {
                  attrs: {
                    id: "mask0",
                    "mask-type": "alpha",
                    maskUnits: "userSpaceOnUse",
                    x: "147",
                    y: "274",
                    width: "46",
                    height: "46"
                  }
                },
                [
                  _c("rect", {
                    attrs: {
                      x: "147.387",
                      y: "274.386",
                      width: "45.0524",
                      height: "45.0524",
                      rx: "22.5262",
                      fill: "#C4C4C4"
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _c("g", { attrs: { mask: "url(#mask0)" } }, [
                _c("path", {
                  attrs: {
                    d:
                      "M147.387 274.387V297.047V319.439H162.441V297.047V274.387H147.387Z",
                    fill: "#006847"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M162.387 274.386V297.047V319.438H177.441V297.047V274.386H162.387Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M177.385 274.386V297.047V319.438H192.439V297.047V274.386H177.385Z",
                    fill: "#CE1126"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.219 300.618V301.002L172.348 300.906L172.237 300.599L172.219 300.618Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.219 301.023V300.619L172.33 300.946L172.219 301.023ZM172.219 300.638V300.984H172.33L172.237 300.696L172.219 300.638Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.201 300.407C172.231 300.407 172.259 300.419 172.28 300.441C172.301 300.462 172.313 300.492 172.313 300.522C172.313 300.553 172.301 300.582 172.28 300.604C172.259 300.625 172.231 300.637 172.201 300.637C172.172 300.637 172.144 300.625 172.123 300.604C172.102 300.582 172.09 300.553 172.09 300.522C172.087 300.506 172.087 300.49 172.091 300.474C172.096 300.458 172.104 300.444 172.115 300.433C172.126 300.421 172.14 300.413 172.155 300.408C172.17 300.404 172.186 300.403 172.201 300.407Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.2 300.657C172.174 300.657 172.149 300.649 172.128 300.634C172.107 300.619 172.09 300.598 172.08 300.574C172.07 300.549 172.068 300.522 172.073 300.496C172.078 300.47 172.09 300.446 172.108 300.427C172.126 300.408 172.149 300.396 172.175 300.39C172.2 300.385 172.226 300.388 172.25 300.398C172.273 300.408 172.293 300.426 172.308 300.448C172.322 300.47 172.33 300.496 172.33 300.522C172.33 300.558 172.316 300.592 172.292 300.617C172.267 300.643 172.234 300.657 172.2 300.657ZM172.2 300.407C172.178 300.407 172.156 300.414 172.138 300.426C172.12 300.439 172.106 300.457 172.097 300.478C172.089 300.499 172.087 300.522 172.091 300.545C172.095 300.567 172.106 300.588 172.121 300.604C172.137 300.62 172.157 300.631 172.178 300.635C172.2 300.64 172.222 300.637 172.242 300.629C172.263 300.62 172.28 300.605 172.292 300.586C172.305 300.567 172.311 300.545 172.311 300.522C172.311 300.492 172.299 300.462 172.279 300.441C172.258 300.419 172.229 300.407 172.2 300.407Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.645 301.214L172.386 300.945L172.256 301.041L172.626 301.271L172.645 301.214Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.627 301.271L172.238 301.041L172.386 300.925L172.664 301.213L172.627 301.271ZM172.275 301.041L172.627 301.252L172.386 301.002L172.275 301.041Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.628 301.348C172.61 301.327 172.6 301.299 172.6 301.271C172.6 301.243 172.61 301.215 172.628 301.194C172.638 301.182 172.651 301.172 172.666 301.165C172.68 301.159 172.696 301.155 172.711 301.155C172.727 301.155 172.743 301.159 172.757 301.165C172.771 301.172 172.784 301.182 172.795 301.194C172.806 301.203 172.816 301.215 172.822 301.228C172.828 301.241 172.832 301.256 172.832 301.271C172.832 301.286 172.828 301.301 172.822 301.314C172.816 301.327 172.806 301.339 172.795 301.348C172.784 301.36 172.771 301.37 172.757 301.377C172.743 301.383 172.727 301.387 172.711 301.387C172.696 301.387 172.68 301.383 172.666 301.377C172.651 301.37 172.638 301.36 172.628 301.348Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.717 301.407H172.625C172.613 301.394 172.603 301.379 172.596 301.363C172.589 301.347 172.586 301.329 172.586 301.311C172.586 301.293 172.589 301.275 172.596 301.259C172.603 301.242 172.613 301.227 172.625 301.215H172.736C172.757 301.242 172.768 301.276 172.768 301.311C172.768 301.346 172.757 301.38 172.736 301.407H172.717ZM172.717 301.177C172.699 301.198 172.689 301.225 172.689 301.253C172.689 301.282 172.699 301.309 172.717 301.33C172.717 301.33 172.717 301.33 172.81 301.33C172.828 301.309 172.838 301.282 172.838 301.253C172.838 301.225 172.828 301.198 172.81 301.177C172.81 301.177 172.754 301.177 172.717 301.177Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M174.684 297.277L174.961 297.565V297.411L174.721 297.238L174.684 297.277Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M174.96 297.584L174.664 297.277L174.923 297.45L174.96 297.584ZM174.701 297.277L174.942 297.546V297.431L174.701 297.258V297.277Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M174.644 297.316C174.706 297.316 174.755 297.264 174.755 297.2C174.755 297.137 174.706 297.085 174.644 297.085C174.583 297.085 174.533 297.137 174.533 297.2C174.533 297.264 174.583 297.316 174.644 297.316Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M174.533 297.2C174.533 297.335 174.644 297.335 174.644 297.335C174.679 297.335 174.712 297.321 174.736 297.295C174.76 297.27 174.774 297.236 174.774 297.2C174.769 297.168 174.754 297.139 174.73 297.118C174.706 297.096 174.676 297.085 174.644 297.085C174.615 297.085 174.587 297.097 174.566 297.119C174.545 297.141 174.533 297.17 174.533 297.2Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M175.404 297.45L174.979 297.565V297.431H175.33L175.404 297.45Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M174.979 297.585V297.412H175.349L174.979 297.585ZM174.979 297.431V297.547L175.367 297.431H175.016H174.979Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M175.46 297.505C175.521 297.505 175.57 297.454 175.57 297.391C175.57 297.328 175.521 297.277 175.46 297.277C175.399 297.277 175.35 297.328 175.35 297.391C175.35 297.454 175.399 297.505 175.46 297.505Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M175.382 297.474C175.403 297.496 175.431 297.508 175.461 297.508C175.492 297.508 175.522 297.496 175.546 297.475C175.57 297.454 175.586 297.425 175.59 297.392C175.59 297.357 175.577 297.323 175.552 297.297C175.528 297.272 175.495 297.258 175.461 297.258C175.43 297.263 175.401 297.279 175.381 297.304C175.36 297.328 175.349 297.36 175.35 297.392C175.35 297.423 175.361 297.452 175.382 297.474Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.997 299.563L173.756 299.159L174.034 299.505L173.997 299.563Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.998 299.582L173.738 299.159L174.035 299.524L173.998 299.582ZM173.775 299.159L174.016 299.543L173.738 299.217L173.775 299.159Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.721 298.948C173.721 298.948 173.85 298.948 173.85 299.063C173.846 299.095 173.83 299.124 173.806 299.146C173.782 299.167 173.752 299.178 173.721 299.178C173.691 299.178 173.663 299.166 173.642 299.144C173.621 299.123 173.609 299.093 173.609 299.063C173.609 299.032 173.621 299.003 173.642 298.981C173.663 298.96 173.691 298.948 173.721 298.948Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.72 299.199C173.685 299.199 173.652 299.185 173.628 299.159C173.604 299.134 173.59 299.1 173.59 299.064C173.59 299.029 173.604 298.995 173.628 298.969C173.652 298.944 173.685 298.93 173.72 298.93C173.754 298.93 173.787 298.944 173.811 298.969C173.836 298.995 173.849 299.029 173.849 299.064C173.849 299.1 173.836 299.134 173.811 299.159C173.787 299.185 173.754 299.199 173.72 299.199ZM173.72 298.949C173.69 298.949 173.662 298.961 173.641 298.983C173.62 299.005 173.608 299.034 173.608 299.064C173.608 299.095 173.62 299.124 173.641 299.146C173.662 299.168 173.69 299.18 173.72 299.18C173.749 299.18 173.777 299.168 173.798 299.146C173.819 299.124 173.831 299.095 173.831 299.064C173.831 299.034 173.819 299.005 173.798 298.983C173.777 298.961 173.749 298.949 173.72 298.949Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M174.016 299.582H174.349L174.09 299.466L174.016 299.582Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M174.348 299.658H173.996L174.089 299.543L174.366 299.658H174.348ZM174.033 299.658H174.329L174.07 299.562L174.033 299.658Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M174.443 299.523C174.473 299.523 174.501 299.535 174.522 299.557C174.543 299.579 174.554 299.608 174.554 299.639C174.554 299.669 174.543 299.698 174.522 299.72C174.501 299.742 174.473 299.754 174.443 299.754C174.414 299.754 174.385 299.742 174.365 299.72C174.344 299.698 174.332 299.669 174.332 299.639C174.332 299.608 174.344 299.579 174.365 299.557C174.385 299.535 174.414 299.523 174.443 299.523Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M174.442 299.774C174.416 299.774 174.391 299.766 174.37 299.751C174.349 299.736 174.332 299.715 174.322 299.691C174.313 299.666 174.31 299.639 174.315 299.613C174.32 299.587 174.332 299.563 174.35 299.544C174.369 299.526 174.392 299.513 174.417 299.508C174.442 299.502 174.468 299.505 174.492 299.515C174.515 299.525 174.536 299.543 174.55 299.565C174.564 299.587 174.572 299.613 174.572 299.639C174.572 299.675 174.558 299.709 174.534 299.734C174.509 299.76 174.476 299.774 174.442 299.774ZM174.442 299.524C174.42 299.524 174.399 299.531 174.38 299.544C174.362 299.556 174.348 299.574 174.339 299.595C174.331 299.616 174.329 299.639 174.333 299.662C174.337 299.684 174.348 299.705 174.364 299.721C174.379 299.737 174.399 299.748 174.42 299.752C174.442 299.757 174.464 299.755 174.485 299.746C174.505 299.737 174.522 299.722 174.534 299.703C174.547 299.684 174.553 299.662 174.553 299.639C174.553 299.609 174.541 299.579 174.521 299.558C174.5 299.536 174.472 299.524 174.442 299.524Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.367 300.618C166.367 300.618 166.367 300.618 166.367 300.503C166.367 300.388 166.367 300.388 166.367 300.388C166.393 300.393 166.417 300.407 166.434 300.428C166.451 300.449 166.46 300.476 166.46 300.503C166.46 300.503 166.423 300.618 166.367 300.618ZM166.367 300.407V300.503C166.392 300.503 166.415 300.493 166.433 300.475C166.45 300.457 166.46 300.433 166.46 300.407C166.46 300.382 166.45 300.357 166.433 300.339C166.415 300.321 166.392 300.311 166.367 300.311V300.407Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.461 300.696V301.118H166.35V300.753L166.461 300.696Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.554 301.138H166.424V300.754L166.554 301.138ZM166.442 301.138V300.754V301.138Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.553 300.561C166.553 300.561 166.553 300.715 166.423 300.734C166.294 300.753 166.238 300.734 166.238 300.638C166.238 300.542 166.368 300.638 166.386 300.638C166.405 300.638 166.497 300.542 166.553 300.638V300.561Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.849 301.099C165.874 301.099 165.897 301.109 165.914 301.127C165.931 301.145 165.941 301.169 165.941 301.194C165.941 301.22 165.931 301.244 165.914 301.262C165.897 301.28 165.874 301.29 165.849 301.29C165.849 301.29 165.721 301.29 165.721 301.194C165.721 301.099 165.776 301.099 165.849 301.099Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.851 301.291C165.851 301.291 165.703 301.291 165.703 301.195C165.703 301.099 165.703 301.099 165.851 301.099C165.999 301.099 165.981 301.099 165.981 301.195C165.981 301.291 165.925 301.291 165.851 301.291ZM165.851 301.118H165.722C165.722 301.118 165.722 301.118 165.851 301.118C165.981 301.118 165.962 301.118 165.962 301.118C165.962 301.118 165.907 301.118 165.851 301.118Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.035 301.195V301.099H166.369V301.195H166.035ZM166.035 301.195H166.387H166.035Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.092 301.118C166.092 301.233 166.092 301.368 166.092 301.348C166.092 301.329 165.999 301.233 165.981 301.195C165.962 301.156 165.981 301.06 165.981 300.983C165.981 300.907 166.129 300.984 166.166 301.118H166.092Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.035 301.368C166.019 301.369 166.003 301.365 165.988 301.358C165.973 301.351 165.96 301.341 165.949 301.328C165.939 301.315 165.931 301.3 165.927 301.284C165.922 301.268 165.921 301.251 165.924 301.234C165.911 301.211 165.904 301.184 165.904 301.157C165.904 301.13 165.911 301.104 165.924 301.08C165.924 301.08 166.054 301.08 166.072 301.234C166.091 301.387 166.072 301.407 166.072 301.445L166.035 301.368ZM165.943 300.984C165.943 300.984 165.943 300.984 165.943 301.119C165.943 301.119 165.943 301.215 166.035 301.234C166.049 301.204 166.056 301.171 166.056 301.138C166.056 301.105 166.049 301.072 166.035 301.042C166.035 301.042 165.998 300.984 165.943 300.984Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.813 298.814C164.813 298.814 164.906 298.814 164.906 298.929C164.906 298.957 164.897 298.984 164.88 299.005C164.863 299.026 164.839 299.04 164.813 299.045C164.813 299.045 164.813 299.045 164.813 298.929C164.813 298.814 164.776 298.814 164.813 298.814Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.814 299.063C164.814 299.063 164.814 299.063 164.814 298.929C164.814 298.794 164.814 298.794 164.814 298.794C164.814 298.794 164.907 298.794 164.907 298.929C164.907 299.063 164.87 299.063 164.814 299.063ZM164.814 298.813C164.814 298.813 164.814 298.813 164.814 298.929C164.814 299.044 164.814 299.044 164.814 299.044C164.814 299.044 164.814 299.044 164.814 298.929C164.814 298.813 164.852 298.813 164.814 298.813Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.811 299.197V299.582L164.719 299.486V299.178L164.811 299.197Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.848 299.6L164.719 299.485V299.159H164.83L164.848 299.6ZM164.737 299.485V299.12V299.485Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.96 299.063C164.96 299.159 164.868 299.217 164.775 299.198C164.683 299.179 164.627 299.198 164.627 299.044C164.627 298.891 164.757 299.044 164.794 299.044C164.831 299.044 164.942 298.948 164.96 299.063Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.812 299.218C164.701 299.218 164.645 299.218 164.664 299.064C164.682 298.91 164.664 299.064 164.756 299.064H164.923C164.923 299.064 164.923 299.064 165.016 299.064C165.108 299.064 165.016 299.064 165.016 299.064C165.001 299.108 164.973 299.146 164.937 299.174C164.9 299.201 164.857 299.216 164.812 299.218ZM164.812 299.006C164.812 299.006 164.904 299.141 164.941 299.141C164.983 299.155 165.029 299.155 165.071 299.141H164.904L164.812 299.006Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.165 299.601C164.236 299.601 164.294 299.575 164.294 299.544C164.294 299.512 164.236 299.486 164.165 299.486C164.093 299.486 164.035 299.512 164.035 299.544C164.035 299.575 164.093 299.601 164.165 299.601Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.164 299.601C164.071 299.601 164.016 299.601 164.016 299.601C164.016 299.601 164.016 299.601 164.164 299.601C164.312 299.601 164.293 299.601 164.293 299.601C164.293 299.601 164.238 299.601 164.164 299.601ZM164.164 299.486H164.034C164.034 299.486 164.034 299.486 164.164 299.486C164.293 299.486 164.275 299.486 164.275 299.486C164.275 299.486 164.219 299.486 164.164 299.486Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.387 299.543H164.683L164.813 299.658H164.387V299.543Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.276 299.371C164.297 299.373 164.318 299.38 164.336 299.391C164.355 299.402 164.371 299.417 164.383 299.435C164.396 299.454 164.404 299.475 164.408 299.497C164.412 299.518 164.411 299.541 164.405 299.563C164.405 299.563 164.405 299.735 164.257 299.716C164.109 299.697 164.257 299.716 164.257 299.62C164.257 299.62 164.257 299.62 164.257 299.486C164.257 299.351 164.257 299.486 164.257 299.486L164.276 299.371Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.053 296.988C164.053 296.988 163.943 297.083 163.924 296.988C163.906 296.893 163.924 296.893 163.924 296.836C163.943 296.822 163.965 296.814 163.988 296.814C164.011 296.814 164.034 296.822 164.053 296.836C164.062 296.857 164.067 296.879 164.067 296.903C164.067 296.926 164.062 296.948 164.053 296.969V296.988Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M163.943 296.931V297.083C163.98 297.083 164.035 297.198 164.035 297.064V296.931C164.006 296.919 163.973 296.919 163.943 296.931Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M163.72 297.603L163.886 297.2L163.701 297.488L163.72 297.603Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M163.721 297.642V297.469L163.906 297.162L163.721 297.642ZM163.721 297.469V297.584L163.869 297.2L163.721 297.469Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M163.943 297.239H163.85C163.757 297.239 163.739 297.104 163.85 297.028C163.961 296.951 163.85 297.028 163.85 297.028L163.943 297.239ZM163.831 296.989C163.831 296.989 163.831 297.104 163.831 297.162H164.017L163.831 296.989Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M163.166 297.144C163.166 297.144 163.258 297.24 163.166 297.278C163.073 297.316 163.073 297.278 163.017 297.278C162.962 297.278 162.925 297.182 163.017 297.144C163.11 297.105 163.11 297.144 163.166 297.144Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M163.166 297.315C163.166 297.315 163.074 297.219 163.166 297.181C163.258 297.143 163.166 297.181 163.166 297.181C163.184 297.202 163.194 297.229 163.194 297.257C163.194 297.286 163.184 297.313 163.166 297.334V297.315ZM163.166 297.143V297.257C163.166 297.257 163.166 297.257 163.166 297.143Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M163.331 297.334L163.646 297.526V297.661L163.312 297.373L163.331 297.334Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M163.721 297.699L163.369 297.373L163.684 297.565L163.721 297.699ZM163.388 297.373L163.702 297.642V297.526L163.406 297.334L163.388 297.373Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M163.202 297.45C163.202 297.45 163.202 297.565 163.202 297.642C163.181 297.615 163.17 297.581 163.17 297.546C163.17 297.511 163.181 297.477 163.202 297.45ZM163.202 297.335C163.202 297.335 163.313 297.335 163.387 297.335C163.403 297.278 163.403 297.218 163.387 297.162C163.369 297.213 163.336 297.256 163.293 297.287C163.25 297.318 163.199 297.334 163.146 297.335H163.202Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.647 301.195L172.369 301.061L172.684 301.253L172.647 301.195Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.83 301.29C172.83 301.29 172.72 301.29 172.701 301.29V301.405L172.83 301.29Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M174.828 297.181C174.828 297.181 174.828 297.315 174.7 297.296C174.682 297.275 174.672 297.247 174.672 297.219C174.672 297.191 174.682 297.164 174.7 297.143V297.257H174.81L174.828 297.181Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M175.571 297.334C175.571 297.334 175.571 297.469 175.46 297.45C175.348 297.43 175.46 297.45 175.46 297.334H175.571V297.2V297.334Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.902 299.273L173.773 299.063L173.865 299.177L173.902 299.273Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.83 299.082C173.83 299.082 173.72 299.082 173.683 299.082C173.646 299.082 173.591 298.968 173.683 298.93V299.044H173.793C173.793 299.044 173.793 298.93 173.793 299.044L173.83 299.082Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M174.552 299.62C174.557 299.638 174.558 299.657 174.553 299.675C174.548 299.693 174.538 299.709 174.524 299.722C174.511 299.734 174.494 299.742 174.476 299.744C174.458 299.746 174.44 299.743 174.423 299.734C174.412 299.726 174.403 299.714 174.396 299.701C174.39 299.688 174.387 299.673 174.387 299.658C174.387 299.644 174.39 299.629 174.396 299.616C174.403 299.603 174.412 299.591 174.423 299.582V299.715H174.534L174.552 299.62Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.532 300.561C166.532 300.561 166.532 300.676 166.532 300.714C166.532 300.752 166.386 300.714 166.367 300.714H166.514V300.618L166.532 300.561Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.107 301.193C166.107 301.193 166.107 301.193 166.015 301.098C165.924 301.003 166.015 301.098 166.015 301.098V301.193H166.162V301.06L166.107 301.193Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.96 299.063C164.938 299.077 164.912 299.084 164.886 299.084C164.86 299.084 164.835 299.077 164.812 299.063C164.812 299.063 164.683 299.063 164.664 299.063H164.757H164.96Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.404 299.543C164.404 299.543 164.404 299.676 164.276 299.657C164.147 299.638 164.276 299.657 164.276 299.657H164.404V299.543Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M163.812 297.239C163.816 297.277 163.816 297.315 163.812 297.353V297.181V297.239Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M163.387 297.372L163.59 297.584L163.312 297.353L163.387 297.372Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M163.293 297.392C163.293 297.392 163.293 297.392 163.201 297.392V297.488H163.366L163.293 297.392Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M175.774 296.49C175.774 296.816 175.44 296.97 175.292 297.104C175.193 297.173 175.11 297.265 175.051 297.373V297.546V297.719C175.07 297.775 175.07 297.836 175.051 297.892C175.051 298.045 175.051 298.237 175.051 298.237L175.274 298.084H175.422C175.316 298.185 175.233 298.31 175.181 298.449C175.181 298.641 174.977 299.044 174.755 299.178C174.533 299.313 174.366 299.178 174.292 299.332L174.2 299.428V299.562L174.107 299.678C174.115 299.722 174.115 299.768 174.107 299.812C174.102 299.876 174.102 299.94 174.107 300.004H174.2H174.311V300.119C174.313 300.234 174.286 300.346 174.235 300.447C174.183 300.548 174.107 300.633 174.014 300.695C173.674 300.837 173.306 300.896 172.94 300.868H172.792L172.663 300.984L172.533 301.118C172.488 301.185 172.431 301.244 172.366 301.291L172.144 301.444H172.329L172.607 301.56C172.509 301.542 172.409 301.542 172.311 301.56C172.023 301.728 171.71 301.844 171.385 301.905C171.126 301.905 170.755 301.502 170.755 301.502L170.589 301.387H170.311H169.959C170.064 301.375 170.169 301.375 170.274 301.387H170.626C170.723 301.409 170.825 301.409 170.922 301.387L171.385 300.984L171.866 300.811H172.033H172.2V300.907C172.157 300.916 172.113 300.916 172.07 300.907H172.366H172.478C172.469 300.875 172.469 300.842 172.478 300.811C172.562 300.718 172.655 300.635 172.755 300.561H172.866C172.908 300.467 172.945 300.371 172.977 300.273V300.139L173.311 299.812L173.533 299.562L173.626 299.294C173.644 299.333 173.653 299.375 173.653 299.418C173.653 299.462 173.644 299.504 173.626 299.543C173.641 299.619 173.641 299.698 173.626 299.774C173.738 299.695 173.856 299.625 173.977 299.562H174.163C174.234 299.525 174.297 299.473 174.348 299.409C174.348 299.313 174.348 299.274 174.348 299.236C174.348 299.198 174.348 299.006 174.348 299.006V298.41L174.533 297.969L174.811 297.7C174.807 297.732 174.807 297.764 174.811 297.796V297.911C174.867 297.824 174.936 297.746 175.014 297.681C175.012 297.623 175.012 297.565 175.014 297.508C175.02 297.418 175.02 297.328 175.014 297.239V297.008V296.816L174.885 296.451V295.971L174.774 295.818C174.774 295.818 174.866 295.818 174.996 295.991C175.07 296.121 175.12 296.264 175.144 296.413L175.403 295.549C175.46 295.631 175.504 295.721 175.533 295.818C175.546 295.913 175.546 296.01 175.533 296.106L175.644 295.875C175.7 295.944 175.741 296.024 175.767 296.109C175.792 296.195 175.801 296.285 175.792 296.375L175.774 296.49ZM170.33 302.021C170.33 302.021 170.33 301.886 170.033 301.752C169.888 301.674 169.732 301.622 169.57 301.598V301.694L169.978 301.886L170.181 302.059H170.33V302.021Z",
                    fill: "#9CA168"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.184 301.137C172.287 301.024 172.406 300.927 172.536 300.849C172.622 300.837 172.709 300.837 172.795 300.849C172.99 300.835 173.177 300.761 173.332 300.638C173.532 300.52 173.703 300.355 173.832 300.158C173.893 300.146 173.956 300.146 174.017 300.158L173.74 300.484C173.606 300.637 173.45 300.767 173.277 300.868C173.085 300.962 172.877 301.014 172.666 301.022C172.538 301.035 172.419 301.096 172.332 301.195L172.166 301.368L172.184 301.137ZM173.166 300.081C172.978 300.244 172.827 300.447 172.721 300.676L173.166 300.273C173.313 300.153 173.467 300.044 173.629 299.947C173.629 299.947 173.629 299.793 173.777 299.735L173.888 299.639C173.888 299.639 173.74 299.524 173.166 300.081ZM172.462 300.791C172.55 300.755 172.623 300.687 172.666 300.599C172.66 300.523 172.66 300.446 172.666 300.369L173.129 299.889C173.191 299.829 173.235 299.752 173.255 299.666C173.275 299.581 173.269 299.491 173.24 299.409C173.258 299.444 173.267 299.484 173.267 299.524C173.267 299.564 173.258 299.604 173.24 299.639C173.24 299.754 172.703 300.062 172.647 300.235C172.634 300.33 172.634 300.427 172.647 300.523C172.628 300.631 172.568 300.728 172.48 300.791H172.462ZM172.24 301.675C172.129 301.604 171.999 301.57 171.869 301.579C171.481 301.579 171.147 301.848 170.888 301.848C170.629 301.848 170.536 301.732 170.332 301.579C170.096 301.488 169.844 301.449 169.592 301.464C169.764 301.443 169.938 301.443 170.11 301.464C170.407 301.464 170.555 301.867 170.888 301.848C171.221 301.766 171.548 301.663 171.869 301.54C171.991 301.507 172.118 301.507 172.24 301.54V301.675ZM170.295 301.483C170.484 301.501 170.673 301.454 170.832 301.348C171.073 301.176 171.351 300.926 171.518 300.926C171.622 300.91 171.728 300.91 171.832 300.926C171.717 300.899 171.596 300.899 171.481 300.926C171.313 300.916 171.146 300.956 170.999 301.041C170.869 301.041 170.795 301.291 170.629 301.387C170.527 301.457 170.414 301.509 170.295 301.54V301.483ZM170.295 301.905L170.055 301.732C169.949 301.678 169.837 301.64 169.721 301.617L170.036 301.732C170.116 301.782 170.185 301.847 170.24 301.924C170.26 301.933 170.282 301.938 170.305 301.938C170.327 301.938 170.349 301.933 170.369 301.924C170.369 301.924 170.481 301.924 170.462 301.924C170.444 301.924 170.462 301.924 170.369 301.924L170.295 301.905ZM170.518 301.598C170.621 301.621 170.729 301.621 170.832 301.598C171.258 301.598 171.518 301.291 171.795 301.176C171.862 301.143 171.935 301.126 172.008 301.126C172.082 301.126 172.155 301.143 172.221 301.176C172.125 301.118 172.017 301.085 171.906 301.08C171.52 301.126 171.148 301.257 170.814 301.464C170.721 301.516 170.621 301.554 170.518 301.579V301.598ZM175.036 298.257C174.871 298.502 174.723 298.759 174.591 299.025C174.506 299.111 174.413 299.188 174.314 299.255L174.073 299.601C174.073 299.601 174.073 299.601 173.98 299.601C173.888 299.601 173.98 299.601 173.98 299.601C173.98 299.601 173.98 299.601 174.129 299.486C174.165 299.396 174.222 299.317 174.295 299.255C174.406 299.14 174.61 299.025 174.721 298.909C174.832 298.794 175.036 298.276 175.128 298.161C175.226 298.069 175.339 297.998 175.462 297.949C175.462 297.949 175.295 297.949 175.036 298.18V298.257ZM174.314 299.178C174.311 299.138 174.319 299.098 174.335 299.061C174.351 299.024 174.375 298.992 174.406 298.967C174.517 298.833 174.554 298.852 174.629 298.66C174.703 298.468 174.758 298.276 174.832 298.084C174.874 297.94 174.937 297.804 175.017 297.68C174.925 297.708 174.846 297.769 174.795 297.853C174.625 298.07 174.493 298.318 174.406 298.583C174.347 298.776 174.316 298.976 174.314 299.178ZM174.166 299.37C174.166 299.37 174.166 299.37 174.166 299.102C174.126 298.847 174.126 298.588 174.166 298.333C174.29 298.128 174.432 297.935 174.591 297.757C174.462 297.802 174.342 297.874 174.24 297.969C174.151 298.03 174.078 298.113 174.026 298.21C173.975 298.306 173.946 298.415 173.943 298.525C173.943 298.679 174.036 298.871 174.054 299.044V299.37H174.166ZM175.036 297.68C175.065 297.537 175.102 297.396 175.147 297.258C175.196 297.127 175.272 297.009 175.369 296.912C175.485 296.817 175.575 296.691 175.628 296.547C175.642 296.336 175.642 296.125 175.628 295.914L175.536 296.029C175.536 296.125 175.536 296.432 175.536 296.567C175.453 296.755 175.354 296.935 175.24 297.104C175.223 296.945 175.223 296.784 175.24 296.624C175.264 296.466 175.308 296.311 175.369 296.163C175.386 295.972 175.386 295.779 175.369 295.587C175.291 295.671 175.228 295.768 175.184 295.875C175.122 296.08 175.091 296.294 175.091 296.509C175.077 296.675 175.077 296.842 175.091 297.008C175.109 297.103 175.109 297.201 175.091 297.296C175.086 297.354 175.086 297.412 175.091 297.469C175.101 297.539 175.101 297.61 175.091 297.68H175.036ZM174.74 295.856C174.802 295.945 174.835 296.053 174.832 296.163C174.795 296.347 174.795 296.537 174.832 296.72C174.832 296.874 174.999 296.893 175.017 296.989C175.024 297.085 175.024 297.181 175.017 297.277C175.039 297.124 175.039 296.969 175.017 296.816C175.017 296.72 175.017 296.816 174.925 296.663C174.832 296.509 174.925 296.279 174.925 296.106C174.903 296.003 174.843 295.914 174.758 295.856H174.74Z",
                    fill: "#717732"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.238 302.02C168.238 302.02 168.238 301.924 168.497 301.809C168.684 301.7 168.883 301.616 169.09 301.559V301.713H168.868L168.701 301.828L168.497 301.943L168.238 302.02Z",
                    fill: "#9CA168"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.812 301.31C168.643 301.327 168.475 301.359 168.312 301.406C168.312 301.406 168.312 301.406 168.219 301.406C168.171 301.367 168.128 301.321 168.09 301.272V301.483L167.682 301.099V301.348V301.464L167.275 301.06V301.368H167.164L166.867 301.156L166.96 301.348H166.59L166.497 301.445H166.645V301.541C166.645 301.541 166.867 301.387 166.997 301.445C167.127 301.502 166.812 301.617 166.849 301.713C166.886 301.809 167.108 301.713 167.164 301.713C167.219 301.713 167.386 301.464 167.46 301.541C167.534 301.617 167.256 301.752 167.312 301.867C167.367 301.982 167.534 301.867 167.627 301.867C167.719 301.867 167.886 301.521 167.923 301.579C167.96 301.637 167.775 301.809 167.83 301.886C167.886 301.963 168.015 301.886 168.108 301.886C168.201 301.886 168.219 301.675 168.33 301.617C168.441 301.56 168.441 301.617 168.478 301.617C168.515 301.617 168.608 301.521 168.608 301.521L168.886 301.406H169.238V301.291C169.152 301.275 169.064 301.275 168.978 301.291L168.812 301.31ZM166.59 301.31V301.214L166.405 301.06C166.358 301.005 166.301 300.959 166.238 300.926L166.053 300.811V300.58H165.942L165.812 300.081V299.985L165.701 300.292L165.571 300.1V299.678L165.479 299.774L165.293 299.39C165.284 299.466 165.284 299.544 165.293 299.62C165.199 299.569 165.112 299.504 165.034 299.428C164.943 299.364 164.867 299.278 164.812 299.178L164.719 298.986L164.812 298.794V298.583H164.627V298.18V298.026L164.405 298.353V298.218V297.911L164.312 298.084C164.282 298.01 164.245 297.939 164.201 297.873C164.217 297.745 164.217 297.616 164.201 297.489C164.201 297.316 164.09 297.239 164.201 297.085C164.312 296.932 164.201 296.932 164.201 296.874C164.201 296.816 164.108 296.874 164.201 296.874C164.294 296.874 164.516 296.605 164.442 296.509C164.368 296.413 164.127 296.663 164.182 296.509C164.238 296.355 164.497 296.336 164.516 296.106C164.534 295.875 164.275 296.202 164.257 296.106C164.238 296.01 164.405 295.875 164.405 295.779C164.405 295.683 164.405 295.683 164.405 295.626C164.405 295.568 164.201 295.837 164.201 295.837H164.034V296.087V296.298L163.831 296.183V296.432V296.701H163.627L163.738 296.912L163.886 297.066L163.979 297.2V297.296V297.431V297.585V298.065C163.979 298.065 163.868 298.065 163.849 298.065C163.831 298.065 163.96 298.237 163.942 298.276C163.923 298.314 163.683 298.276 163.683 298.276C163.683 298.276 163.682 298.449 163.831 298.487C163.979 298.526 164.257 298.583 164.201 298.66C164.145 298.737 163.831 298.468 163.849 298.66C163.843 298.725 163.861 298.791 163.898 298.844C163.936 298.897 163.991 298.934 164.053 298.948C164.053 298.948 164.46 298.948 164.442 298.948C164.423 298.948 164.182 298.948 164.145 299.044C164.108 299.14 164.331 299.178 164.368 299.178C164.447 299.161 164.529 299.161 164.608 299.178L164.96 299.524L165.33 299.793C165.33 299.793 165.145 299.793 165.127 299.793C165.108 299.793 165.627 300.043 165.479 300.1C165.331 300.158 165.164 299.947 165.127 300.1C165.09 300.254 165.219 300.35 165.293 300.407C165.368 300.465 165.849 300.407 165.756 300.523C165.664 300.638 165.33 300.523 165.33 300.523C165.33 300.523 165.553 300.849 165.664 300.849C165.775 300.849 165.905 300.638 165.96 300.753C166.016 300.868 165.867 300.888 165.96 300.926C166.053 300.964 166.145 300.811 166.275 300.83C166.437 300.864 166.589 300.936 166.719 301.041L166.96 301.272L166.59 301.31Z",
                    fill: "#9CA168"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.386 301.849C168.386 301.849 168.386 301.849 168.479 301.849L168.757 301.656C168.855 301.601 168.961 301.562 169.072 301.541C168.955 301.571 168.843 301.616 168.738 301.676L168.479 301.849C168.479 301.849 168.479 301.849 168.349 301.849C168.22 301.849 168.238 301.849 168.238 301.849C168.238 301.849 168.238 301.849 168.386 301.849ZM169.072 301.503C169.035 301.515 168.997 301.515 168.96 301.503C168.894 301.481 168.823 301.481 168.757 301.503C168.697 301.503 168.637 301.516 168.583 301.543C168.528 301.57 168.48 301.608 168.442 301.656L168.312 301.752C168.312 301.752 168.312 301.752 168.479 301.752C168.519 301.714 168.565 301.684 168.616 301.664C168.667 301.644 168.721 301.635 168.775 301.637C168.775 301.637 168.905 301.637 168.942 301.637H169.072V301.503ZM164.979 299.774L164.813 299.659C164.664 299.568 164.521 299.465 164.387 299.352L164.627 299.582L164.942 299.813L164.979 299.774ZM167.868 301.887L167.979 301.695C168.024 301.627 168.08 301.568 168.146 301.522V301.407C168.14 301.369 168.14 301.33 168.146 301.292C168.135 301.329 168.135 301.369 168.146 301.407H168.238H168.349H168.257C168.164 301.407 168.109 301.196 168.053 301.196C167.998 301.196 168.053 301.368 168.053 301.368C168.053 301.368 167.887 301.004 167.664 300.984C167.442 300.965 167.479 300.984 167.461 300.984C167.442 300.984 167.664 301.253 167.59 301.272C167.516 301.292 167.312 300.927 167.146 300.927C166.979 300.927 166.979 300.927 166.998 301.023C167.016 301.119 167.164 301.023 167.127 301.196C167.09 301.368 166.924 301.023 166.794 301.042C166.664 301.061 166.627 301.042 166.609 301.042C166.59 301.042 166.609 301.138 166.609 301.157H166.424C166.355 301.221 166.293 301.292 166.238 301.368C166.299 301.285 166.383 301.225 166.479 301.196H166.924C166.887 301.155 166.856 301.11 166.831 301.061L166.979 301.176L167.127 301.292H167.275C167.29 301.329 167.29 301.37 167.275 301.407L167.127 301.541L167.294 301.426L167.405 301.311H167.424C167.424 301.311 167.424 301.311 167.424 301.176L167.294 300.965L167.461 301.157C167.461 301.272 167.461 301.311 167.572 301.33H167.683C167.683 301.33 167.683 301.33 167.683 301.464C167.646 301.532 167.615 301.602 167.59 301.676C167.625 301.617 167.669 301.565 167.72 301.522C167.72 301.522 167.812 301.368 167.831 301.368H167.961V301.234C167.954 301.157 167.954 301.08 167.961 301.004C167.983 301.081 168.021 301.153 168.072 301.215C168.072 301.311 168.164 301.368 168.183 301.368H168.312C168.312 301.368 168.312 301.368 168.312 301.522V301.695L167.868 301.887ZM166.127 300.831H166.257C166.183 300.786 166.125 300.719 166.09 300.639C166.09 300.504 166.09 300.274 166.09 300.274C166.09 300.274 165.998 300.447 165.942 300.408C165.887 300.37 165.942 300.043 165.942 299.909C165.942 299.774 165.739 299.659 165.702 299.717C165.664 299.774 165.702 300.082 165.59 300.005C165.479 299.928 165.59 299.678 165.59 299.563C165.59 299.448 165.479 299.352 165.424 299.39C165.368 299.429 165.424 299.64 165.424 299.64C165.424 299.64 165.424 299.486 165.313 299.467C165.202 299.448 165.313 299.467 165.313 299.467V299.333C165.313 299.333 165.313 299.429 165.313 299.486C165.302 299.537 165.302 299.589 165.313 299.64V299.736C165.313 299.736 165.313 299.736 165.22 299.736H165.09H165.239C165.239 299.736 165.35 299.736 165.368 299.736L165.479 299.909C165.484 299.845 165.484 299.781 165.479 299.717C165.49 299.64 165.49 299.563 165.479 299.486C165.486 299.563 165.486 299.64 165.479 299.717C165.487 299.8 165.487 299.883 165.479 299.967C165.479 299.967 165.572 299.967 165.479 300.063H165.257H164.998C165.077 300.08 165.159 300.08 165.239 300.063H165.535L165.683 300.216C165.701 300.14 165.701 300.061 165.683 299.986C165.694 299.896 165.694 299.806 165.683 299.717C165.693 299.793 165.693 299.871 165.683 299.947C165.689 300.056 165.689 300.165 165.683 300.274H165.516H165.239C165.337 300.291 165.437 300.291 165.535 300.274C165.664 300.274 165.683 300.274 165.72 300.274H165.831C165.831 300.274 165.831 300.274 165.739 300.274H165.627H165.813H165.942V300.159V300.005V300.139C165.947 300.184 165.947 300.229 165.942 300.274H166.053L166.127 300.831ZM163.609 297.854C163.614 297.752 163.614 297.649 163.609 297.547C163.601 297.393 163.563 297.243 163.498 297.105V296.99H163.405C163.375 297 163.343 297 163.313 296.99H163.405V296.836L163.257 296.74C163.183 296.699 163.114 296.647 163.054 296.587L163.276 296.721H163.405H163.535L163.665 296.625H163.535H163.405V296.433L163.313 296.337C163.27 296.257 163.233 296.173 163.202 296.087C163.238 296.145 163.281 296.196 163.331 296.241C163.373 296.274 163.411 296.313 163.442 296.356H163.572C163.651 296.305 163.725 296.247 163.794 296.183L163.572 296.299H163.442C163.436 296.254 163.436 296.209 163.442 296.164C163.453 296.12 163.453 296.074 163.442 296.03V295.818V295.915V296.011C163.442 296.011 163.702 295.78 163.739 295.742C163.776 295.703 163.739 295.588 163.739 295.626C163.739 295.665 163.739 295.78 163.572 295.761C163.405 295.742 163.572 295.646 163.479 295.665C163.387 295.684 163.35 295.78 163.35 295.857C163.35 295.934 163.35 296.087 163.35 296.126C163.35 296.164 163.35 295.972 163.165 296.011C162.98 296.049 163.054 296.164 163.054 296.222C163.054 296.279 163.276 296.51 163.22 296.548C163.165 296.587 162.998 296.337 162.905 296.548C162.813 296.759 163.183 296.875 163.22 296.913C163.257 296.952 163.22 296.913 163.22 297.048C163.22 297.182 163.368 297.144 163.405 297.201C163.492 297.348 163.548 297.511 163.572 297.681V297.931L163.609 297.854ZM164.553 299.275C164.532 299.234 164.521 299.188 164.521 299.141C164.521 299.094 164.532 299.048 164.553 299.006C164.553 298.833 164.702 298.526 164.665 298.488C164.628 298.449 164.498 298.661 164.461 298.622C164.424 298.584 164.461 298.257 164.461 298.123C164.461 297.989 164.461 297.931 164.294 297.931C164.128 297.931 164.146 298.296 164.109 298.238C164.072 298.181 164.109 298.008 164.109 297.931C164.109 297.854 164.109 297.816 164.016 297.835C163.924 297.854 164.016 298.008 163.905 298.008C163.794 298.008 163.794 297.816 163.72 297.835C163.646 297.854 163.905 298.219 163.905 298.219V298.104V297.989C163.915 298.039 163.915 298.091 163.905 298.142C163.898 298.193 163.898 298.245 163.905 298.296H163.72H163.517H163.702H163.924L164.016 298.43V298.257C164.038 298.158 164.069 298.062 164.109 297.969C164.109 297.969 164.109 298.181 164.109 298.277C164.102 298.366 164.102 298.456 164.109 298.545H163.887H163.609L163.887 298.661H164.128L164.239 298.814V298.699V298.545C164.246 298.609 164.246 298.674 164.239 298.737C164.247 298.775 164.247 298.815 164.239 298.853H163.905H164.109H164.257V298.968L164.368 299.064L164.553 299.275Z",
                    fill: "#717732"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.868 302.425H168.757H168.664V302.252L169.127 301.811V301.369H169.405V301.983H169.497L169.997 302.291V302.425H169.812L169.479 302.175L169.275 302.022L169.016 302.367H168.868V302.425Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.277 301.233V301.329C169.277 301.329 169.277 301.752 169.277 301.809C169.277 301.867 169.017 301.963 168.869 302.078C168.721 302.193 168.74 302.29 168.74 302.29H168.61C168.567 302.28 168.523 302.28 168.48 302.29C168.533 302.119 168.629 301.967 168.758 301.848C168.98 301.656 169.092 301.637 169.11 301.598C169.119 301.445 169.119 301.291 169.11 301.137L169.277 301.233Z",
                    fill: "#016848"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.793 302.559H169.682C169.571 302.559 169.497 302.559 169.405 302.463L169.238 302.29L169.127 302.386C169.159 302.452 169.203 302.51 169.257 302.559C169.257 302.559 169.479 302.559 169.534 302.693H169.664L169.793 302.559Z",
                    fill: "#016848"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.442 301.234H169.59C169.598 301.381 169.598 301.528 169.59 301.675C169.576 301.773 169.537 301.865 169.479 301.944L169.165 302.251C169.089 302.32 169.02 302.397 168.961 302.482C169.018 302.361 169.108 302.261 169.22 302.194C169.38 302.103 169.499 301.951 169.553 301.771C169.564 301.624 169.564 301.477 169.553 301.33L169.442 301.234Z",
                    fill: "#CD202A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.331 302.347C170.283 302.329 170.231 302.329 170.183 302.347C170.072 302.347 170.072 302.347 170.072 302.347L169.905 302.193C169.808 302.16 169.715 302.115 169.628 302.059C169.557 302.019 169.499 301.959 169.461 301.886V301.713C169.515 301.791 169.577 301.861 169.646 301.924C169.78 301.987 169.909 302.057 170.035 302.136L170.257 302.366L170.331 302.347Z",
                    fill: "#CD202A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.329 300.369C171.329 300.369 171.052 300.253 171.07 300.138C171.089 300.023 171.737 299.869 171.737 299.869V299.677C171.657 299.664 171.576 299.664 171.496 299.677C171.27 299.76 171.032 299.806 170.793 299.812C170.688 299.829 170.582 299.829 170.478 299.812L168.126 299.658H168.015C167.719 299.658 167.515 299.159 167.515 299.159H167.385C167.385 299.159 167.385 299.389 167.385 299.409C166.992 299.287 166.613 299.119 166.256 298.909V299.12C166.256 299.12 166.848 299.447 166.83 299.581C166.811 299.716 166.645 299.697 166.645 299.697V299.831C166.645 299.831 167.626 299.831 167.645 300.196C167.663 300.561 167.404 300.369 167.404 300.369V300.484C167.629 300.488 167.853 300.52 168.071 300.58C168.219 300.58 168.293 300.791 168.478 300.887C169.005 300.973 169.543 300.973 170.07 300.887C170.293 300.887 170.422 300.561 170.774 300.465C170.923 300.406 171.078 300.367 171.237 300.349L171.329 300.369Z",
                    fill: "#30C2DC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.274 301.079C169.004 301.121 168.729 301.121 168.459 301.079C168.378 301.033 168.303 300.975 168.237 300.907L168.07 300.772C167.849 300.742 167.625 300.742 167.404 300.772L167.292 300.657C167.292 300.657 167.515 300.657 167.515 300.503C167.515 300.35 166.996 300.196 166.552 300.177L166.459 299.985C166.459 299.985 166.626 299.985 166.626 299.889C166.626 299.793 166.348 299.601 166.07 299.447V299.178C166.418 299.38 166.784 299.547 167.163 299.678C167.163 299.678 167.163 299.524 167.163 299.447H167.348C167.348 299.447 167.552 299.908 167.829 299.927H167.941L170.311 300.081H170.607C170.839 300.077 171.07 300.038 171.292 299.966C171.378 299.95 171.466 299.95 171.551 299.966V300.177C171.325 300.227 171.106 300.311 170.903 300.427C170.903 300.427 171.051 300.58 171.162 300.638V300.791C171.004 300.809 170.848 300.848 170.699 300.907C170.542 300.958 170.397 301.043 170.274 301.156C170.193 301.232 170.098 301.29 169.996 301.329L169.274 301.079ZM167.422 300.561C167.648 300.558 167.872 300.59 168.089 300.657C168.158 300.697 168.221 300.749 168.274 300.811C168.337 300.877 168.413 300.929 168.496 300.964C168.753 301.016 169.017 301.016 169.274 300.964H170.07C170.164 300.921 170.252 300.862 170.329 300.791C170.46 300.674 170.611 300.583 170.774 300.523L171.218 300.407C171.218 300.407 170.94 300.292 170.959 300.177C170.977 300.062 171.459 299.927 171.625 299.889V299.754H171.403C171.176 299.833 170.939 299.878 170.699 299.889C170.595 299.906 170.489 299.906 170.385 299.889L168.033 299.735H167.922C167.626 299.735 167.459 299.332 167.404 299.236H167.422C167.422 299.236 167.422 299.486 167.422 299.505C167.039 299.386 166.672 299.219 166.33 299.005V299.198C166.459 299.198 166.922 299.524 166.904 299.658C166.891 299.699 166.867 299.734 166.833 299.758C166.8 299.783 166.759 299.795 166.718 299.793V299.889C167.015 299.889 167.7 299.985 167.718 300.254C167.737 300.523 167.57 300.446 167.496 300.465L167.422 300.561Z",
                    fill: "#0872A7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.44 299.717C166.473 299.717 166.505 299.727 166.533 299.746C166.56 299.765 166.581 299.792 166.594 299.824C166.607 299.855 166.61 299.89 166.603 299.923C166.597 299.957 166.581 299.988 166.558 300.012C166.534 300.036 166.505 300.053 166.472 300.059C166.44 300.066 166.407 300.062 166.376 300.049C166.346 300.036 166.32 300.014 166.302 299.986C166.283 299.957 166.273 299.924 166.273 299.89C166.273 299.844 166.291 299.8 166.322 299.767C166.353 299.735 166.396 299.717 166.44 299.717Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.44 300.101C166.386 300.101 166.334 300.078 166.296 300.039C166.258 299.999 166.236 299.946 166.236 299.89C166.236 299.834 166.258 299.78 166.296 299.74C166.334 299.701 166.386 299.678 166.44 299.678C166.494 299.678 166.546 299.701 166.584 299.74C166.622 299.78 166.644 299.834 166.644 299.89C166.644 299.946 166.622 299.999 166.584 300.039C166.546 300.078 166.494 300.101 166.44 300.101ZM166.44 299.755C166.406 299.755 166.373 299.769 166.348 299.795C166.324 299.82 166.31 299.854 166.31 299.89C166.31 299.925 166.324 299.959 166.348 299.985C166.373 300.01 166.406 300.024 166.44 300.024C166.474 300.024 166.507 300.01 166.532 299.985C166.556 299.959 166.57 299.925 166.57 299.89C166.57 299.854 166.556 299.82 166.532 299.795C166.507 299.769 166.474 299.755 166.44 299.755Z",
                    fill: "#0872A7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 299.236C167.515 299.236 167.589 299.159 167.589 299.063C167.589 298.968 167.515 298.891 167.422 298.891C167.33 298.891 167.256 298.968 167.256 299.063C167.256 299.159 167.33 299.236 167.422 299.236Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 299.294C167.364 299.294 167.308 299.27 167.266 299.226C167.225 299.183 167.201 299.125 167.201 299.063C167.201 299.034 167.207 299.005 167.218 298.978C167.23 298.951 167.246 298.927 167.267 298.907C167.288 298.887 167.313 298.872 167.34 298.862C167.367 298.853 167.395 298.849 167.423 298.852C167.477 298.852 167.529 298.874 167.567 298.914C167.606 298.954 167.627 299.007 167.627 299.063C167.63 299.093 167.626 299.122 167.617 299.15C167.608 299.178 167.593 299.204 167.574 299.225C167.555 299.247 167.532 299.264 167.506 299.276C167.48 299.288 167.452 299.294 167.423 299.294ZM167.423 298.948C167.392 298.948 167.362 298.959 167.338 298.981C167.314 299.002 167.298 299.031 167.294 299.063C167.294 299.099 167.307 299.133 167.332 299.158C167.356 299.184 167.389 299.198 167.423 299.198C167.454 299.193 167.483 299.177 167.503 299.152C167.524 299.128 167.535 299.096 167.534 299.063C167.534 299.033 167.523 299.004 167.502 298.982C167.481 298.96 167.453 298.948 167.423 298.948Z",
                    fill: "#0872A7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.459 300.196C171.483 300.196 171.507 300.201 171.53 300.211C171.552 300.221 171.573 300.235 171.59 300.253C171.607 300.27 171.621 300.292 171.63 300.315C171.639 300.338 171.644 300.363 171.644 300.388C171.639 300.436 171.618 300.48 171.584 300.512C171.549 300.544 171.505 300.561 171.459 300.561C171.415 300.561 171.372 300.543 171.341 300.511C171.31 300.478 171.292 300.434 171.292 300.388C171.289 300.364 171.292 300.34 171.299 300.316C171.306 300.293 171.318 300.272 171.334 300.254C171.35 300.235 171.369 300.221 171.39 300.211C171.412 300.201 171.435 300.196 171.459 300.196Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.46 300.601C171.406 300.601 171.355 300.579 171.316 300.539C171.278 300.499 171.257 300.446 171.257 300.39C171.254 300.36 171.257 300.331 171.267 300.303C171.276 300.275 171.29 300.249 171.309 300.228C171.329 300.206 171.352 300.189 171.378 300.177C171.404 300.165 171.432 300.159 171.46 300.159C171.519 300.159 171.576 300.183 171.618 300.227C171.659 300.27 171.683 300.328 171.683 300.39C171.683 300.419 171.677 300.448 171.666 300.475C171.654 300.502 171.638 300.526 171.617 300.546C171.596 300.566 171.571 300.581 171.544 300.591C171.517 300.6 171.489 300.604 171.46 300.601ZM171.46 300.255C171.435 300.255 171.41 300.263 171.388 300.278C171.367 300.293 171.35 300.314 171.341 300.338C171.331 300.363 171.328 300.39 171.333 300.416C171.338 300.442 171.351 300.466 171.369 300.485C171.387 300.503 171.41 300.516 171.435 300.521C171.46 300.527 171.486 300.524 171.51 300.514C171.534 300.504 171.554 300.486 171.568 300.464C171.582 300.442 171.59 300.416 171.59 300.39C171.59 300.354 171.576 300.32 171.552 300.295C171.528 300.269 171.495 300.255 171.46 300.255Z",
                    fill: "#0872A7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.682 298.814C165.682 298.949 165.848 299.198 165.996 299.217C166.145 299.237 166.237 299.217 166.274 299.217C166.289 299.184 166.297 299.148 166.297 299.112C166.297 299.075 166.289 299.039 166.274 299.006C166.182 298.872 165.774 298.756 165.719 298.891L165.682 298.814Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.163 299.006C166.163 299.006 166.033 298.852 165.959 298.852C165.885 298.852 165.792 298.852 165.811 298.852C165.83 298.852 166.033 298.967 166.033 298.987C166.033 299.006 166.033 298.987 166.033 298.987H166.144C166.144 298.987 166.144 298.987 166.144 298.891L166.163 299.006Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.515 300.523C167.515 300.638 167.515 300.695 167.349 300.753C167.182 300.811 166.997 300.753 166.96 300.753C166.923 300.753 166.96 300.503 167.182 300.465C167.244 300.452 167.308 300.458 167.367 300.482C167.427 300.506 167.478 300.547 167.515 300.599V300.523Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.275 300.6C167.275 300.6 167.275 300.6 167.367 300.6C167.46 300.6 167.367 300.6 167.367 300.485C167.359 300.453 167.339 300.425 167.311 300.407C167.284 300.389 167.251 300.383 167.219 300.389C167.219 300.389 166.979 300.562 166.997 300.6C167.016 300.639 166.997 300.6 167.09 300.6C167.182 300.6 167.09 300.6 167.219 300.6H167.275Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.681 299.927C171.792 300.061 171.977 299.927 172.014 299.927C172.051 299.927 172.218 299.792 172.163 299.696C172.125 299.676 172.084 299.666 172.042 299.666C172 299.666 171.959 299.676 171.922 299.696C171.825 299.713 171.738 299.768 171.681 299.85C171.667 299.883 171.66 299.919 171.66 299.956C171.66 299.992 171.667 300.028 171.681 300.061V299.927Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.718 299.831C171.718 299.788 171.733 299.747 171.76 299.715C171.787 299.683 171.825 299.662 171.866 299.658C171.866 299.658 171.866 299.658 171.996 299.658V299.773C171.996 299.773 171.996 299.773 171.829 299.773C171.662 299.773 171.718 299.869 171.718 299.869V299.831Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.46 299.523H168.941L169.219 300.349L169.552 300.848H169.682H169.941V300.733L169.849 299.927L169.478 299.543L169.46 299.523Z",
                    fill: "#F9AA51"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.626 300.868H169.515L169.182 300.388L168.904 299.543H169.441L169.812 299.927L169.904 300.714V300.849H169.626V300.868ZM169.515 300.868H169.626H169.867V300.753V299.985L169.515 299.601H169.052L169.312 300.407L169.515 300.868Z",
                    fill: "#953220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.554 299.581V299.485H168.868C168.973 299.599 169.061 299.728 169.128 299.869C169.128 300.023 169.276 300.292 169.35 300.445C169.427 300.586 169.514 300.721 169.609 300.849H169.276H169.128L168.665 300.1L168.535 299.62L168.554 299.581Z",
                    fill: "#F9AA51"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.276 300.887H169.128L168.665 300.138L168.535 299.658V299.562H168.887C168.991 299.683 169.078 299.819 169.146 299.965C169.157 300.035 169.157 300.106 169.146 300.176C169.146 300.292 169.146 300.426 169.294 300.522C169.442 300.618 169.554 300.925 169.554 300.944H169.276V300.887ZM169.146 300.791H169.276H169.572C169.479 300.672 169.399 300.543 169.331 300.407C169.308 300.305 169.29 300.203 169.276 300.099C169.279 300.035 169.279 299.971 169.276 299.907C169.213 299.768 169.132 299.639 169.035 299.523H168.739L168.85 299.984L169.146 300.791Z",
                    fill: "#953220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.366 299.483H168.57C168.701 299.608 168.807 299.758 168.884 299.925C168.925 300.1 168.975 300.273 169.033 300.443C169.101 300.595 169.188 300.737 169.292 300.866C169.126 300.883 168.958 300.883 168.792 300.866C168.625 300.866 168.551 300.866 168.514 300.866C168.477 300.82 168.434 300.781 168.384 300.75H168.199V300.482V299.906V299.617H168.366V299.483Z",
                    fill: "#F9AA51"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.106 300.886H168.68C168.587 300.886 168.531 300.886 168.494 300.886L168.365 300.79H168.18V300.521V299.945V299.619H168.346H168.569C168.703 299.748 168.81 299.905 168.883 300.08C168.896 300.156 168.896 300.234 168.883 300.31C168.906 300.409 168.937 300.505 168.976 300.598C169.047 300.743 169.134 300.878 169.235 301.002L169.106 300.886ZM168.217 300.637H168.383C168.439 300.665 168.49 300.704 168.532 300.752C168.532 300.752 168.532 300.752 168.698 300.752H169.254C169.159 300.634 169.078 300.505 169.013 300.368C168.973 300.269 168.942 300.166 168.92 300.061C168.933 299.991 168.933 299.919 168.92 299.849C168.854 299.681 168.753 299.53 168.624 299.408H168.42H168.272V299.676V300.253L168.217 300.637Z",
                    fill: "#953220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.256 299.638L169.96 299.504H169.404V299.811C169.444 300.037 169.512 300.257 169.608 300.464C169.676 300.606 169.757 300.741 169.849 300.867H170.219H170.423V300.618V299.926V299.83L170.256 299.638Z",
                    fill: "#F9AA51"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.924 300.868C169.864 300.791 169.815 300.708 169.776 300.618L169.683 300.445C169.585 300.239 169.516 300.019 169.479 299.792C169.479 299.658 169.479 299.485 169.479 299.485H170.035L170.331 299.6H170.498V299.696V300.349V300.599H170.294C170.184 300.707 170.059 300.797 169.924 300.868ZM169.424 299.504C169.424 299.504 169.424 299.658 169.424 299.773C169.461 299.994 169.529 300.207 169.628 300.407C169.665 300.46 169.696 300.518 169.72 300.58C169.753 300.667 169.804 300.745 169.868 300.81C169.977 300.792 170.082 300.76 170.183 300.714H170.387V300.503V299.831V299.735H170.257L169.961 299.6L169.424 299.504Z",
                    fill: "#953220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.275 299.639C168.275 299.639 168.275 299.639 168.367 299.639C168.46 299.639 168.46 299.639 168.46 299.504C168.46 299.37 168.46 299.331 168.275 299.312C168.09 299.293 168.071 299.466 168.071 299.562C168.071 299.658 168.071 299.715 168.071 299.754C168.041 299.841 168.041 299.936 168.071 300.023C168.09 300.138 168.142 300.245 168.219 300.33C168.219 300.33 168.071 300.445 168.071 300.56C168.076 300.613 168.099 300.662 168.137 300.697C168.175 300.733 168.224 300.753 168.275 300.752C168.386 300.752 168.515 300.752 168.515 300.599C168.515 300.558 168.5 300.519 168.472 300.49C168.444 300.461 168.407 300.445 168.367 300.445H168.275",
                    fill: "#F9AA51"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.35 299.677C170.35 299.677 170.257 299.677 170.257 299.562C170.257 299.446 170.368 299.427 170.442 299.427C170.496 299.436 170.546 299.463 170.583 299.505C170.62 299.547 170.642 299.601 170.646 299.658C170.645 299.698 170.637 299.737 170.621 299.773C170.605 299.81 170.582 299.842 170.553 299.869C170.553 299.869 170.553 299.869 170.553 300.061C170.551 300.158 170.518 300.253 170.461 300.33C170.501 300.351 170.535 300.385 170.558 300.425C170.581 300.466 170.592 300.513 170.59 300.56C170.593 300.587 170.59 300.614 170.582 300.64C170.574 300.665 170.561 300.689 170.543 300.709C170.526 300.728 170.504 300.744 170.481 300.755C170.457 300.766 170.431 300.772 170.405 300.771C170.313 300.771 170.183 300.771 170.183 300.618C170.18 300.599 170.182 300.579 170.187 300.56C170.192 300.542 170.201 300.525 170.214 300.51C170.226 300.495 170.241 300.484 170.258 300.476C170.275 300.468 170.294 300.464 170.313 300.464C170.339 300.469 170.362 300.483 170.379 300.504C170.396 300.525 170.406 300.552 170.405 300.579",
                    fill: "#F9AA51"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.385 300.868C170.274 300.868 170.145 300.868 170.145 300.696C170.145 300.523 170.145 300.504 170.293 300.504C170.327 300.512 170.358 300.531 170.382 300.558C170.405 300.586 170.419 300.621 170.422 300.657V300.561C170.422 300.561 170.311 300.561 170.311 300.696C170.311 300.83 170.441 300.83 170.515 300.83C170.589 300.83 170.663 300.83 170.663 300.638C170.665 300.596 170.656 300.553 170.636 300.516C170.617 300.479 170.587 300.448 170.552 300.427C170.611 300.358 170.644 300.269 170.645 300.177C170.645 300.043 170.645 300.004 170.645 300.004C170.672 299.981 170.694 299.951 170.71 299.918C170.726 299.885 170.735 299.849 170.737 299.812C170.731 299.762 170.71 299.714 170.677 299.676C170.643 299.639 170.6 299.612 170.552 299.601C170.552 299.601 170.385 299.601 170.385 299.716C170.385 299.831 170.385 299.812 170.385 299.812V299.908C170.385 299.908 170.274 299.908 170.274 299.774C170.274 299.639 170.385 299.62 170.478 299.62C170.537 299.629 170.591 299.659 170.632 299.704C170.672 299.75 170.696 299.808 170.7 299.87C170.717 299.939 170.717 300.012 170.7 300.081C170.72 300.143 170.72 300.211 170.7 300.273C170.699 300.371 170.666 300.466 170.608 300.542C170.65 300.562 170.685 300.595 170.708 300.636C170.731 300.677 170.741 300.725 170.737 300.772C170.729 300.811 170.711 300.846 170.685 300.874C170.659 300.903 170.626 300.923 170.59 300.933C170.553 300.943 170.515 300.942 170.479 300.931C170.443 300.919 170.41 300.898 170.385 300.868Z",
                    fill: "#953220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.479 300.56C168.479 300.56 168.479 300.656 168.479 300.675C168.718 300.752 168.969 300.785 169.219 300.771C169.459 300.802 169.701 300.802 169.941 300.771C169.941 300.771 169.941 300.618 170.089 300.579V300.695C170.029 300.714 169.965 300.714 169.904 300.695C169.904 300.695 168.83 300.695 168.664 300.695C168.497 300.695 168.516 300.695 168.479 300.695V300.503V300.56Z",
                    fill: "#953220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.09 299.562H170.182C170.111 299.603 170.058 299.672 170.034 299.754C170.034 299.927 170.034 299.965 170.034 299.984C169.874 299.994 169.713 299.994 169.553 299.984V299.811L170.201 299.523L170.09 299.562Z",
                    fill: "#953220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.458 299.505C171.415 299.482 171.377 299.449 171.347 299.409C171.347 299.409 171.347 299.274 171.347 299.255C171.347 299.236 171.347 299.255 171.347 299.255C171.337 299.312 171.337 299.371 171.347 299.428L171.458 299.505Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.293 299.254V299.369H172.404C172.404 299.369 172.274 299.369 172.237 299.369L172.145 299.235L172.293 299.254Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.551 299.35C172.509 299.364 172.464 299.364 172.422 299.35C172.422 299.35 172.312 299.35 172.33 299.255C172.349 299.159 172.33 299.255 172.33 299.255C172.379 299.265 172.429 299.265 172.477 299.255L172.551 299.35Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.329 298.18C172.329 298.18 172.329 298.18 172.219 298.18C172.109 298.18 172.219 298.294 172.219 298.294V298.18H172.329Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.922 298.333C171.891 298.327 171.86 298.327 171.83 298.333V298.466C171.83 298.466 171.83 298.466 171.83 298.371V298.257L171.922 298.333Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.126 298.852L170.885 299.102C171.172 299.279 171.496 299.384 171.829 299.409C172.169 299.378 172.488 299.229 172.737 298.987C172.781 298.837 172.781 298.676 172.737 298.526C172.621 298.379 172.467 298.272 172.292 298.219C172.106 298.29 171.941 298.409 171.811 298.564C171.644 298.737 171.663 298.891 171.422 298.871L171.126 298.852Z",
                    fill: "#8CBEBF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.85 299.429C171.523 299.4 171.206 299.295 170.924 299.121L171.183 298.833H171.461C171.609 298.833 171.646 298.833 171.72 298.68L171.831 298.526C171.973 298.377 172.143 298.259 172.331 298.18C172.442 298.18 172.738 298.411 172.794 298.507C172.839 298.663 172.839 298.83 172.794 298.987C172.536 299.225 172.212 299.373 171.868 299.409L171.85 299.429ZM170.961 299.102C171.242 299.26 171.55 299.358 171.868 299.39C172.198 299.356 172.509 299.215 172.757 298.987C172.792 298.842 172.792 298.69 172.757 298.545C172.646 298.404 172.498 298.297 172.331 298.238C172.152 298.313 171.994 298.432 171.868 298.584C171.816 298.621 171.777 298.675 171.757 298.737C171.73 298.792 171.687 298.837 171.633 298.865C171.58 298.893 171.52 298.902 171.461 298.891H171.127L170.961 299.102Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.126 298.948C171.126 298.948 171.7 299.044 171.848 298.948C171.996 298.852 172.2 298.506 172.311 298.449C172.366 298.435 172.423 298.435 172.477 298.449L172.607 298.545L172.755 298.66V298.948V299.102L172.589 299.255L172.255 299.409L171.94 299.505H171.681L171.144 299.351L170.996 299.236L171.126 299.102V298.948Z",
                    fill: "#0C8489"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.976 298.622H172.068C172.068 298.622 172.068 298.755 171.976 298.755C171.885 298.755 171.976 298.66 171.976 298.622Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.199 298.756C172.199 298.756 172.199 298.756 172.291 298.756C172.314 298.76 172.335 298.771 172.352 298.788C172.368 298.805 172.379 298.827 172.383 298.851L172.291 298.947C172.291 298.947 172.199 298.947 172.199 298.813V298.756Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.83 299.005C171.83 299.005 171.83 299.005 171.922 299.005C171.951 299.005 171.979 299.018 172 299.039C172.02 299.06 172.032 299.089 172.032 299.12C172.032 299.15 172.02 299.179 172 299.2C171.979 299.222 171.951 299.234 171.922 299.234C171.922 299.234 171.83 299.139 171.83 299.082V299.005Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.348 299.063C171.348 299.032 171.359 299.003 171.38 298.981C171.401 298.96 171.429 298.948 171.459 298.948C171.488 298.948 171.517 298.96 171.537 298.981C171.558 299.003 171.57 299.032 171.57 299.063C171.57 299.063 171.57 299.197 171.459 299.197C171.428 299.193 171.399 299.176 171.379 299.152C171.358 299.127 171.347 299.095 171.348 299.063Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.2 298.756C172.2 298.756 172.2 298.756 172.291 298.756V298.909C172.273 298.913 172.254 298.911 172.236 298.903C172.219 298.896 172.204 298.883 172.194 298.866C172.184 298.849 172.179 298.83 172.18 298.81C172.181 298.79 172.188 298.772 172.2 298.756Z",
                    fill: "#8CBEBF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.83 299.005C171.83 299.005 171.83 299.005 171.94 299.005C172.05 299.005 171.94 299.005 171.94 299.005V299.101C171.94 299.101 171.94 299.101 171.94 299.005H171.83Z",
                    fill: "#8CBEBF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.348 299.044C171.348 299.013 171.359 298.984 171.38 298.962C171.401 298.941 171.429 298.929 171.459 298.929H171.588C171.582 298.967 171.564 299.002 171.537 299.029C171.511 299.057 171.477 299.075 171.44 299.082C171.44 299.082 171.348 299.082 171.348 298.967V299.044Z",
                    fill: "#8CBEBF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.568 298.947C171.526 298.933 171.481 298.933 171.439 298.947C171.439 298.947 171.439 299.042 171.439 299.061L171.531 298.966L171.568 298.947Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.94 298.852C171.9 298.882 171.869 298.921 171.848 298.966C171.848 298.966 171.848 298.966 171.848 298.966C171.848 298.966 171.848 298.966 171.848 298.871L171.94 298.852Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.773 298.775C172.784 298.822 172.782 298.871 172.765 298.916C172.748 298.96 172.719 298.999 172.68 299.025C172.42 299.22 172.112 299.334 171.791 299.351C171.52 299.316 171.257 299.232 171.014 299.102L171.291 299.217L171.625 299.313H171.995L172.31 299.198L172.588 299.063L172.717 298.948V298.756L172.773 298.775Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.664 296.663C165.664 296.663 165.756 296.663 165.664 296.796C165.572 296.929 165.664 296.891 165.664 296.796C165.664 296.701 165.664 296.796 165.664 296.701C165.664 296.688 165.664 296.675 165.664 296.663Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.182 297.834C165.218 297.84 165.255 297.84 165.292 297.834C165.309 297.844 165.328 297.849 165.347 297.849C165.366 297.849 165.385 297.844 165.402 297.834H165.292H165.182Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.57 298.179C165.57 298.179 165.681 298.179 165.699 298.179C165.709 298.161 165.714 298.142 165.714 298.122C165.714 298.102 165.709 298.082 165.699 298.065C165.699 298.065 165.699 298.065 165.699 298.065H165.607L165.57 298.179Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.293 297.911C166.308 297.751 166.288 297.59 166.233 297.44C166.179 297.29 166.091 297.156 165.978 297.047C165.571 296.682 165.311 296.778 165.182 296.893C165.052 297.008 164.923 297.469 165.349 297.853C165.478 297.965 165.63 298.046 165.793 298.089C165.957 298.132 166.128 298.137 166.293 298.103V297.911Z",
                    fill: "#8CBEBF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.088 298.18C165.812 298.189 165.542 298.094 165.329 297.911C165.241 297.839 165.17 297.749 165.119 297.646C165.067 297.544 165.038 297.431 165.033 297.315C165.025 297.252 165.03 297.187 165.048 297.126C165.066 297.064 165.095 297.007 165.135 296.959C165.176 296.91 165.225 296.87 165.281 296.842C165.336 296.814 165.397 296.799 165.459 296.797C165.657 296.821 165.84 296.916 165.977 297.066C166.097 297.175 166.189 297.312 166.247 297.466C166.305 297.619 166.327 297.785 166.311 297.949V298.18H166.088ZM165.459 296.854C165.368 296.826 165.272 296.826 165.181 296.854C165.102 296.958 165.063 297.088 165.07 297.219C165.076 297.327 165.104 297.433 165.151 297.529C165.199 297.624 165.266 297.709 165.348 297.776C165.556 297.955 165.818 298.05 166.088 298.045H166.274V297.872C166.291 297.716 166.271 297.557 166.216 297.41C166.161 297.263 166.073 297.131 165.959 297.027C165.822 296.897 165.644 296.822 165.459 296.816V296.854Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.07 297.373C165.07 297.373 165.07 297.085 165.2 297.009C165.333 296.94 165.487 296.928 165.628 296.975C165.77 297.021 165.888 297.123 165.959 297.258C166.038 297.381 166.093 297.519 166.118 297.665C166.144 297.81 166.14 297.959 166.107 298.103H165.885L165.552 297.95L165.255 297.738L165.07 297.373Z",
                    fill: "#0C8489"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.238 297.987C166.172 298.012 166.1 298.012 166.034 297.987C165.816 297.957 165.609 297.866 165.436 297.724C165.263 297.582 165.131 297.394 165.053 297.181V297.353V297.488L165.201 297.699L165.368 297.853L165.59 297.968H165.756H165.96H166.09L166.182 297.814L166.238 297.987Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.922 297.489H166.069C166.069 297.489 165.922 297.527 165.922 297.489Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.57 297.45H165.662C165.662 297.45 165.662 297.564 165.57 297.564C165.478 297.564 165.57 297.469 165.57 297.412V297.45Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.312 297.526V297.412C165.341 297.412 165.369 297.424 165.39 297.446C165.41 297.467 165.422 297.496 165.422 297.526C165.422 297.552 165.412 297.576 165.395 297.594C165.378 297.612 165.354 297.622 165.33 297.622C165.306 297.622 165.282 297.612 165.265 297.594C165.248 297.576 165.238 297.552 165.238 297.526H165.312Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.366 297.181H165.458C165.453 297.208 165.44 297.232 165.42 297.25C165.399 297.267 165.374 297.276 165.348 297.276C165.348 297.276 165.348 297.276 165.348 297.162L165.366 297.181Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.663 297.142C165.663 297.142 165.663 297.142 165.755 297.142C165.846 297.142 165.755 297.142 165.755 297.142C165.738 297.152 165.719 297.157 165.7 297.157C165.68 297.157 165.661 297.152 165.645 297.142C165.645 297.142 165.645 297.142 165.645 297.009L165.663 297.142Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.571 297.834C165.571 297.834 165.571 297.834 165.461 297.834C165.35 297.834 165.571 297.872 165.571 297.834Z",
                    fill: "#8CBEBF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.976 297.277V297.372V297.467C165.966 297.43 165.966 297.39 165.976 297.353V297.277Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.422 297.028C165.428 297.059 165.428 297.091 165.422 297.123V297.028Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.941 297.623C165.946 297.66 165.946 297.699 165.941 297.737C165.941 297.737 165.941 297.737 165.941 297.737C165.941 297.737 165.941 297.737 165.941 297.642V297.547V297.623Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.442 296.797C165.442 296.797 165.183 296.797 165.127 297.027C165.116 297.155 165.116 297.284 165.127 297.411V297.181V297.027L165.22 296.893H165.331H165.442V296.797Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.274 297.853C166.297 297.758 166.297 297.659 166.274 297.565C166.206 297.392 166.126 297.226 166.033 297.066L166.163 297.2V297.373V297.527V297.661V297.853H166.274Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M166.533 297.489L166.643 297.584V297.489H166.533Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.145 298.583C166.145 298.583 166.145 298.583 166.255 298.468C166.365 298.354 166.346 298.468 166.365 298.468C166.383 298.468 166.365 298.468 166.365 298.468H166.218L166.145 298.583Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.813 298.831H166.904C166.904 298.831 166.904 298.831 166.904 298.736C166.904 298.64 166.904 298.736 166.813 298.736C166.807 298.774 166.807 298.812 166.813 298.85V298.831Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.737 298.773C166.732 298.735 166.732 298.697 166.737 298.659H166.627L166.737 298.773Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.83 298.18C167.709 298.005 167.555 297.858 167.376 297.749C167.197 297.64 166.999 297.571 166.793 297.547C166.713 297.536 166.632 297.542 166.555 297.566C166.477 297.59 166.406 297.631 166.345 297.685C166.284 297.739 166.234 297.806 166.2 297.882C166.165 297.957 166.146 298.039 166.145 298.123C166.145 298.257 166.348 298.564 167.015 298.622C167.681 298.68 167.793 298.295 167.83 298.276C167.867 298.257 167.83 298.276 167.83 298.276V298.18Z",
                    fill: "#8CBEBF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.015 298.717H167.144C167.278 298.729 167.412 298.704 167.533 298.643C167.654 298.582 167.756 298.488 167.829 298.372V298.237C167.708 298.061 167.554 297.912 167.376 297.8C167.197 297.688 166.999 297.614 166.793 297.584C166.694 297.575 166.596 297.591 166.505 297.631C166.415 297.672 166.335 297.735 166.274 297.815C166.223 297.863 166.184 297.923 166.158 297.989C166.132 298.056 166.121 298.127 166.126 298.199C166.144 298.372 166.348 298.717 167.015 298.717Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.834C167.512 297.906 167.593 297.99 167.663 298.084C167.663 298.18 167.663 298.256 167.663 298.276C167.663 298.295 167.255 297.93 166.959 297.853C166.663 297.776 166.404 297.853 166.348 298.007C166.312 298.083 166.302 298.17 166.318 298.254C166.335 298.337 166.378 298.412 166.441 298.468C166.692 298.562 166.953 298.627 167.218 298.66H167.515L167.7 298.545V298.449V298.314L167.552 298.141L167.274 297.93L167.422 297.834Z",
                    fill: "#0C8489"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.458 298.064H166.55C166.55 298.064 166.55 298.064 166.44 298.064C166.329 298.064 166.44 298.064 166.44 297.969L166.458 298.064Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.848 298.294C166.848 298.269 166.857 298.245 166.875 298.227C166.892 298.209 166.915 298.199 166.939 298.199L167.031 298.294C167.031 298.294 167.031 298.389 166.921 298.389C166.811 298.389 166.921 298.389 166.921 298.294H166.848Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.553 298.372H166.644C166.644 298.372 166.644 298.372 166.553 298.372C166.461 298.372 166.553 298.429 166.553 298.372Z",
                    fill: "#8CBEBF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 298.372C167.422 298.372 167.422 298.372 167.514 298.372C167.522 298.389 167.526 298.409 167.526 298.429C167.526 298.448 167.522 298.468 167.514 298.486L167.422 298.372Z",
                    fill: "#8CBEBF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.793 298.179C166.793 298.179 166.922 298.179 166.94 298.179C166.958 298.179 166.94 298.179 166.94 298.179V298.065L166.793 298.179Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.496 298.294C166.496 298.294 166.588 298.294 166.606 298.294C166.625 298.294 166.606 298.294 166.606 298.294V298.199L166.496 298.294Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.607 297.757C166.607 297.757 166.718 297.757 166.736 297.757C166.754 297.757 166.736 297.757 166.736 297.757V297.643L166.607 297.757Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.7 298.468C167.515 298.597 167.291 298.652 167.07 298.621C166.895 298.629 166.721 298.595 166.56 298.522C166.4 298.448 166.257 298.338 166.145 298.199V298.295L166.237 298.429L166.552 298.602H166.885H167.163H167.422L167.626 298.487L167.7 298.468Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.775 298.18L167.59 297.988C167.43 297.85 167.263 297.722 167.09 297.604L167.405 297.757L167.627 297.949L167.775 298.122V298.18Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M167.773 297.853H167.902V297.757L167.773 297.853Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.107 297.661H168.254V297.776H168.162C168.166 297.738 168.166 297.699 168.162 297.661H168.107Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.219 297.643L168.329 297.757C168.329 297.757 168.329 297.757 168.237 297.757C168.228 297.719 168.222 297.681 168.219 297.643Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.773 297.776C168.784 297.813 168.784 297.853 168.773 297.89V297.738V297.776Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M168.922 299.256H169.014V299.37L168.922 299.256Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.682 298.507C167.682 298.295 167.978 297.815 168.293 297.835C168.504 297.855 168.711 297.914 168.904 298.007C169.089 298.007 169.144 298.18 169.256 298.199C169.354 298.216 169.454 298.216 169.552 298.199H169.959L169.644 298.679L169.533 298.795C169.443 298.942 169.305 299.051 169.144 299.102C168.823 299.193 168.484 299.193 168.163 299.102C168.039 299.075 167.926 299.009 167.84 298.913C167.753 298.816 167.698 298.695 167.682 298.564V298.507Z",
                    fill: "#8CBEBF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.773 299.14C168.564 299.162 168.353 299.162 168.144 299.14C168.017 299.112 167.902 299.044 167.815 298.943C167.729 298.843 167.675 298.717 167.662 298.583C167.662 298.372 167.94 297.892 168.292 297.892C168.509 297.914 168.722 297.972 168.921 298.065L169.106 298.18C169.161 298.198 169.219 298.198 169.273 298.18H169.551H169.995L169.662 298.699L169.551 298.795C169.464 298.949 169.326 299.065 169.162 299.121C169.034 299.149 168.903 299.155 168.773 299.14ZM168.292 297.854C167.977 297.854 167.718 298.315 167.718 298.507C167.718 298.699 167.94 298.967 168.162 299.025C168.365 299.047 168.57 299.047 168.773 299.025C168.896 299.048 169.021 299.048 169.143 299.025C169.297 298.97 169.428 298.862 169.514 298.718L169.625 298.603L169.921 298.18H169.551H169.273C169.218 298.19 169.162 298.19 169.106 298.18L168.921 298.065C168.725 297.956 168.512 297.884 168.292 297.854Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.681 298.507C167.665 298.444 167.665 298.378 167.681 298.315C167.742 298.203 167.817 298.1 167.903 298.007C167.984 297.916 168.097 297.86 168.218 297.854H168.495L168.829 297.988L169.014 298.103H169.181H169.477H169.847L169.551 298.545L169.44 298.641C169.353 298.784 169.223 298.892 169.069 298.948C168.947 298.968 168.822 298.968 168.699 298.948C168.496 298.973 168.291 298.973 168.088 298.948C167.967 298.919 167.857 298.852 167.773 298.756C167.685 298.672 167.632 298.554 167.625 298.43C167.633 298.569 167.693 298.7 167.792 298.795C167.875 298.89 167.985 298.957 168.106 298.987C168.316 299.011 168.527 299.011 168.736 298.987C168.886 298.996 169.037 298.966 169.173 298.899C169.309 298.832 169.426 298.73 169.514 298.603L169.625 298.487L169.958 297.969H169.514H169.273C169.225 297.986 169.173 297.986 169.125 297.969L168.921 297.854L168.569 297.719H168.292C168.214 297.691 168.129 297.691 168.051 297.719C167.937 297.79 167.841 297.889 167.773 298.007C167.715 298.107 167.677 298.218 167.662 298.334L167.681 298.507Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.645 298.563H169.534C169.149 298.334 168.738 298.153 168.312 298.025C168.034 298.025 167.775 298.179 167.756 298.467C167.738 298.755 167.756 298.774 167.886 298.851C168.015 298.928 168.478 299.062 168.478 299.062H168.812H169.089L169.33 298.928L169.46 298.832V298.716L169.571 298.582L169.645 298.563Z",
                    fill: "#0C8489"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.217 298.411V298.506H168.125C168.125 298.506 168.125 298.506 168.217 298.506C168.309 298.506 168.217 298.506 168.217 298.506V298.411Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.848 298.314C168.848 298.314 168.848 298.314 168.94 298.314C168.94 298.314 168.848 298.352 168.848 298.314Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.959 298.639L169.051 298.544H169.143V298.658C169.143 298.658 169.032 298.658 169.032 298.563L168.959 298.639Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.699 298.87C168.699 298.845 168.709 298.82 168.726 298.803C168.743 298.785 168.767 298.775 168.791 298.775C168.815 298.775 168.839 298.785 168.856 298.803C168.873 298.82 168.883 298.845 168.883 298.87H168.791C168.791 298.87 168.699 298.908 168.699 298.87Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.995 298.276H168.848C168.848 298.276 168.995 298.181 168.995 298.276Z",
                    fill: "#8CBEBF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.717 298.506V298.601H168.625C168.625 298.601 168.625 298.601 168.717 298.601C168.809 298.601 168.717 298.601 168.717 298.601V298.506Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.756 298.18C168.804 298.165 168.855 298.165 168.903 298.18C168.909 298.195 168.913 298.211 168.913 298.227C168.913 298.244 168.909 298.26 168.903 298.275L168.793 298.122L168.756 298.18Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.459 298.332L168.606 298.447L168.514 298.275L168.459 298.332Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.403 298.429H168.568H168.477L168.385 298.333L168.403 298.429Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.258 298.025H168.423C168.423 298.025 168.423 298.12 168.423 298.139C168.423 298.158 168.423 298.139 168.423 298.139L168.331 298.044L168.258 298.025Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.959 298.18C168.021 298.206 168.077 298.245 168.124 298.294L167.959 298.18Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.533 298.717C169.443 298.819 169.337 298.903 169.219 298.967C169.024 299.017 168.821 299.017 168.626 298.967C168.427 298.967 168.231 298.921 168.052 298.832C167.92 298.766 167.806 298.667 167.719 298.544L167.867 298.755L168.071 298.851H168.348H168.608H168.811H169.052H169.2H169.311L169.422 298.679L169.533 298.717Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.274 298.18C169.274 298.18 169.274 298.18 169.052 298.18C168.842 298.021 168.59 297.934 168.33 297.93C168.23 297.929 168.131 297.954 168.043 298.005C167.955 298.056 167.882 298.129 167.83 298.218L167.997 297.988L168.163 297.892H168.404H168.571H168.719H168.886L169.034 297.988L169.2 298.084L169.274 298.18Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.774 298.333H169.422V298.199H169.718H169.866L169.774 298.333Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.367 299.87C169.396 299.882 169.429 299.882 169.459 299.87H169.885L169.978 299.755V299.486V299.371L170.237 299.217H170.478H170.626H170.829H170.978V299.121V298.968V298.757L170.811 298.526L170.533 298.411H170.311L170.07 298.507L169.626 298.622C169.482 298.686 169.36 298.793 169.274 298.929C169.194 299.089 169.156 299.268 169.163 299.448C169.163 299.698 169.163 300.043 169.163 300.043L169.367 299.87Z",
                    fill: "#0C8489"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.496 299.965C169.496 299.965 169.403 299.965 169.385 299.869V299.254C169.373 299.08 169.412 298.906 169.496 298.755C169.581 298.619 169.704 298.512 169.848 298.448L170.292 298.332L170.551 298.236H170.792L171.07 298.351L171.236 298.601V298.812V298.966V299.081H171.07H170.866H170.718H170.496L170.236 299.235V299.504L170.125 299.638H169.736L169.496 299.965ZM169.403 299.869H169.811L169.903 299.753V299.484V299.388L170.181 299.216H170.422H170.57H170.773H170.903V299.12V298.985V298.774L170.736 298.563L170.477 298.467H170.255H170.014L169.57 298.582C169.433 298.649 169.317 298.756 169.237 298.889C169.159 299.029 169.12 299.189 169.125 299.35C169.209 299.528 169.302 299.701 169.403 299.869Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.533 299.12C169.547 299.128 169.563 299.133 169.579 299.133C169.595 299.133 169.611 299.128 169.625 299.12C169.625 299.12 169.717 299.12 169.717 299.12H169.533Z",
                    fill: "#8CBEBF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.902 299.448H169.773C169.79 299.458 169.809 299.463 169.829 299.463C169.848 299.463 169.867 299.458 169.884 299.448H169.902Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.997 298.755C170.984 298.736 170.977 298.712 170.977 298.688C170.977 298.665 170.984 298.641 170.997 298.622C170.997 298.622 170.997 298.755 171.089 298.736C171.124 298.751 171.164 298.751 171.199 298.736L170.997 298.755Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.217 298.986C170.217 298.986 170.217 298.986 170.217 299.081H170.088L170.217 298.986Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.459 299.928C169.459 299.928 169.885 299.928 169.922 299.928C169.959 299.928 169.922 299.64 170.144 299.448C170.313 299.312 170.523 299.244 170.737 299.256C170.866 299.256 171.162 299.14 171.218 298.871C171.273 298.603 171.033 298.699 170.94 298.545C170.848 298.391 170.662 298.545 170.644 298.545C170.53 298.504 170.406 298.504 170.292 298.545C170.292 298.545 170.292 298.699 170.2 298.737C170.107 298.776 169.885 298.737 169.866 298.737C169.848 298.737 169.866 298.891 169.866 298.91C169.866 298.929 169.774 298.91 169.774 298.91V298.679L170.144 298.449L170.551 298.219H170.829L171.107 298.353C171.167 298.391 171.215 298.445 171.248 298.509C171.28 298.573 171.296 298.645 171.292 298.718C171.303 298.769 171.303 298.821 171.292 298.871C171.26 298.993 171.189 299.101 171.092 299.177C170.995 299.253 170.877 299.294 170.755 299.294C170.55 299.316 170.353 299.389 170.181 299.505C170.085 299.654 170.027 299.826 170.014 300.005C169.836 300.024 169.656 300.024 169.477 300.005L169.459 299.928Z",
                    fill: "#04534E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.643 299.061C169.627 298.999 169.627 298.933 169.643 298.871C169.643 298.871 169.643 298.985 169.643 299.004V299.061Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.902 299.003C169.902 299.003 169.902 299.003 169.902 298.908L170.031 298.775V298.908C170.042 298.939 170.042 298.973 170.031 299.003H169.902Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.793 299.446L169.885 299.313C169.882 299.344 169.882 299.376 169.885 299.408L169.793 299.446Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.366 298.793C170.36 298.825 170.36 298.857 170.366 298.889V299.003C170.366 299.003 170.366 299.003 170.366 298.908V298.793Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.422 298.601C170.427 298.57 170.427 298.538 170.422 298.506H170.33V298.601H170.422Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.977 298.601H170.885C170.885 298.601 170.885 298.601 170.885 298.697C170.885 298.792 170.885 298.697 170.885 298.697V298.582L170.977 298.601Z",
                    fill: "#231F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M167.46 297.334H166.941V298.083H167.46V297.334Z",
                    fill: "#F15770"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.421 297.833C167.452 297.754 167.452 297.666 167.421 297.587C167.39 297.508 167.33 297.445 167.255 297.411C167.219 297.392 167.179 297.382 167.139 297.381C167.099 297.38 167.059 297.388 167.022 297.404C166.985 297.421 166.952 297.445 166.925 297.476C166.898 297.507 166.878 297.544 166.866 297.584C166.847 297.62 166.837 297.66 166.834 297.7C166.832 297.741 166.838 297.782 166.852 297.82C166.866 297.858 166.888 297.893 166.916 297.922C166.944 297.95 166.977 297.973 167.014 297.987C167.05 298.006 167.09 298.017 167.13 298.02C167.171 298.023 167.212 298.016 167.25 298.002C167.288 297.988 167.323 297.965 167.352 297.936C167.382 297.907 167.405 297.872 167.421 297.833Z",
                    fill: "#F15770"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.421 297.814C167.447 297.737 167.444 297.654 167.413 297.579C167.382 297.505 167.326 297.445 167.255 297.411C167.219 297.392 167.179 297.382 167.139 297.381C167.099 297.38 167.059 297.388 167.022 297.404C166.985 297.42 166.952 297.445 166.925 297.476C166.898 297.507 166.878 297.544 166.866 297.584C166.847 297.62 166.837 297.66 166.834 297.7C166.832 297.741 166.838 297.782 166.852 297.82C166.866 297.858 166.888 297.893 166.916 297.921C166.944 297.95 166.977 297.973 167.014 297.987C167.051 298.006 167.092 298.016 167.133 298.017C167.175 298.019 167.216 298.011 167.255 297.994C167.293 297.978 167.328 297.954 167.356 297.923C167.385 297.892 167.407 297.855 167.421 297.814Z",
                    fill: "#F15871"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.815C167.448 297.738 167.445 297.654 167.414 297.58C167.383 297.505 167.327 297.445 167.256 297.411C167.219 297.396 167.18 297.388 167.141 297.388C167.101 297.389 167.063 297.397 167.026 297.413C166.99 297.429 166.957 297.453 166.93 297.482C166.903 297.511 166.881 297.546 166.867 297.584C166.849 297.622 166.839 297.663 166.838 297.704C166.837 297.746 166.844 297.788 166.86 297.826C166.876 297.864 166.9 297.899 166.93 297.926C166.96 297.954 166.995 297.975 167.034 297.988C167.07 298.006 167.109 298.016 167.149 298.018C167.189 298.019 167.23 298.011 167.266 297.994C167.303 297.978 167.337 297.953 167.363 297.922C167.39 297.891 167.411 297.855 167.422 297.815Z",
                    fill: "#F15972"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.815C167.448 297.738 167.445 297.654 167.414 297.58C167.383 297.505 167.327 297.445 167.256 297.411C167.182 297.385 167.101 297.388 167.029 297.42C166.957 297.452 166.899 297.51 166.867 297.584C166.849 297.621 166.839 297.662 166.838 297.704C166.837 297.746 166.844 297.787 166.86 297.826C166.876 297.864 166.9 297.898 166.93 297.926C166.96 297.954 166.995 297.975 167.034 297.987C167.07 298.006 167.109 298.016 167.149 298.017C167.189 298.018 167.23 298.011 167.266 297.994C167.303 297.978 167.337 297.953 167.363 297.922C167.39 297.891 167.411 297.854 167.422 297.815Z",
                    fill: "#F15A73"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.815C167.448 297.738 167.445 297.654 167.414 297.58C167.383 297.505 167.327 297.445 167.256 297.411C167.182 297.385 167.101 297.388 167.029 297.42C166.957 297.452 166.899 297.51 166.867 297.584C166.849 297.621 166.839 297.662 166.838 297.704C166.837 297.746 166.844 297.787 166.86 297.826C166.876 297.864 166.9 297.898 166.93 297.926C166.96 297.954 166.995 297.975 167.034 297.987C167.07 298.003 167.109 298.011 167.148 298.01C167.188 298.01 167.227 298.002 167.263 297.986C167.299 297.97 167.332 297.946 167.359 297.917C167.387 297.887 167.408 297.853 167.422 297.815Z",
                    fill: "#F15B73"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.815C167.454 297.741 167.456 297.657 167.428 297.581C167.4 297.506 167.345 297.445 167.274 297.411C167.2 297.385 167.12 297.388 167.048 297.42C166.976 297.452 166.918 297.51 166.886 297.584C166.871 297.622 166.863 297.662 166.863 297.703C166.864 297.744 166.872 297.784 166.887 297.822C166.903 297.86 166.925 297.894 166.954 297.922C166.982 297.95 167.015 297.973 167.052 297.987C167.087 298.003 167.125 298.01 167.163 298.01C167.201 298.009 167.239 298.001 167.274 297.984C167.308 297.968 167.339 297.945 167.365 297.916C167.391 297.886 167.41 297.852 167.422 297.815Z",
                    fill: "#F15C74"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.815C167.455 297.741 167.457 297.657 167.429 297.581C167.401 297.506 167.346 297.445 167.275 297.411C167.201 297.385 167.12 297.388 167.049 297.42C166.977 297.452 166.919 297.51 166.886 297.584C166.861 297.661 166.864 297.745 166.895 297.819C166.925 297.894 166.982 297.954 167.053 297.987C167.124 298.013 167.202 298.009 167.271 297.977C167.34 297.945 167.394 297.887 167.423 297.815Z",
                    fill: "#F25D75"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.815C167.455 297.741 167.457 297.657 167.429 297.581C167.401 297.506 167.346 297.445 167.275 297.411C167.201 297.385 167.12 297.388 167.049 297.42C166.977 297.452 166.919 297.51 166.886 297.584C166.861 297.661 166.864 297.745 166.895 297.819C166.925 297.894 166.982 297.954 167.053 297.987C167.124 298.013 167.202 298.009 167.271 297.977C167.34 297.945 167.394 297.887 167.423 297.815Z",
                    fill: "#F25E76"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.814C167.439 297.779 167.447 297.741 167.447 297.702C167.448 297.664 167.442 297.626 167.428 297.59C167.414 297.554 167.393 297.521 167.367 297.494C167.341 297.467 167.31 297.445 167.275 297.43C167.204 297.398 167.123 297.396 167.05 297.424C166.978 297.453 166.919 297.51 166.886 297.584C166.861 297.661 166.864 297.744 166.895 297.819C166.925 297.893 166.982 297.953 167.053 297.987C167.124 298.013 167.202 298.009 167.271 297.977C167.34 297.945 167.394 297.887 167.423 297.814Z",
                    fill: "#F25F77"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.814C167.439 297.779 167.447 297.741 167.447 297.702C167.448 297.664 167.442 297.626 167.428 297.59C167.414 297.554 167.393 297.521 167.367 297.494C167.341 297.467 167.31 297.445 167.275 297.43C167.204 297.398 167.123 297.396 167.05 297.424C166.978 297.453 166.919 297.51 166.886 297.584C166.861 297.661 166.864 297.744 166.895 297.819C166.925 297.893 166.982 297.953 167.053 297.987C167.124 298.013 167.202 298.009 167.271 297.977C167.34 297.945 167.394 297.887 167.423 297.814Z",
                    fill: "#F26078"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.814C167.437 297.779 167.446 297.741 167.446 297.702C167.447 297.664 167.44 297.625 167.427 297.589C167.413 297.554 167.392 297.521 167.366 297.494C167.34 297.466 167.308 297.445 167.274 297.43C167.24 297.415 167.203 297.407 167.166 297.406C167.129 297.406 167.093 297.413 167.058 297.427C167.024 297.441 166.992 297.463 166.966 297.489C166.939 297.516 166.918 297.548 166.904 297.584C166.889 297.619 166.881 297.657 166.881 297.695C166.88 297.734 166.887 297.772 166.901 297.807C166.915 297.843 166.935 297.876 166.961 297.903C166.987 297.931 167.018 297.952 167.052 297.968C167.085 297.986 167.122 297.997 167.16 298C167.198 298.002 167.236 297.996 167.272 297.981C167.307 297.966 167.339 297.944 167.365 297.915C167.391 297.886 167.41 297.852 167.422 297.814Z",
                    fill: "#F26179"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.815C167.448 297.744 167.447 297.665 167.42 297.594C167.392 297.523 167.34 297.465 167.274 297.431C167.24 297.416 167.203 297.407 167.166 297.406C167.129 297.406 167.092 297.413 167.057 297.427C167.023 297.441 166.992 297.463 166.965 297.49C166.939 297.517 166.918 297.549 166.904 297.585C166.889 297.62 166.881 297.658 166.881 297.697C166.88 297.735 166.887 297.773 166.901 297.809C166.929 297.881 166.983 297.939 167.052 297.969C167.121 298 167.198 298.001 167.268 297.972C167.337 297.943 167.393 297.887 167.422 297.815Z",
                    fill: "#F26279"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.815C167.448 297.744 167.447 297.665 167.42 297.594C167.392 297.523 167.34 297.465 167.274 297.431C167.24 297.416 167.203 297.407 167.166 297.406C167.129 297.406 167.092 297.413 167.057 297.427C167.023 297.441 166.992 297.463 166.965 297.49C166.939 297.517 166.918 297.549 166.904 297.585C166.889 297.62 166.881 297.658 166.881 297.697C166.88 297.735 166.887 297.773 166.901 297.809C166.929 297.881 166.983 297.939 167.052 297.969C167.121 298 167.198 298.001 167.268 297.972C167.337 297.943 167.393 297.887 167.422 297.815Z",
                    fill: "#F2637A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.815C167.449 297.744 167.448 297.665 167.421 297.594C167.393 297.523 167.341 297.465 167.275 297.431C167.241 297.416 167.204 297.407 167.167 297.406C167.13 297.406 167.093 297.413 167.058 297.427C167.024 297.441 166.992 297.463 166.966 297.49C166.939 297.517 166.919 297.549 166.904 297.585C166.886 297.62 166.876 297.658 166.873 297.698C166.871 297.737 166.877 297.776 166.892 297.813C166.906 297.85 166.927 297.883 166.955 297.91C166.983 297.937 167.016 297.957 167.053 297.969C167.087 297.985 167.123 297.993 167.16 297.994C167.198 297.995 167.235 297.988 167.269 297.974C167.304 297.959 167.335 297.938 167.362 297.911C167.388 297.884 167.409 297.851 167.423 297.815Z",
                    fill: "#F2647B"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.424 297.815C167.448 297.741 167.445 297.66 167.414 297.588C167.383 297.517 167.327 297.461 167.257 297.431C167.224 297.415 167.189 297.407 167.153 297.406C167.117 297.406 167.081 297.413 167.048 297.427C167.015 297.442 166.986 297.463 166.961 297.49C166.936 297.517 166.917 297.549 166.905 297.584C166.89 297.619 166.882 297.658 166.881 297.696C166.88 297.735 166.887 297.773 166.901 297.809C166.915 297.845 166.935 297.877 166.961 297.905C166.988 297.932 167.019 297.954 167.053 297.968C167.087 297.984 167.124 297.993 167.161 297.993C167.198 297.994 167.235 297.987 167.27 297.973C167.304 297.958 167.336 297.937 167.362 297.91C167.389 297.883 167.409 297.85 167.424 297.815Z",
                    fill: "#F2657C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.815C167.447 297.741 167.443 297.66 167.412 297.589C167.381 297.518 167.325 297.461 167.255 297.431C167.187 297.403 167.11 297.405 167.042 297.435C166.975 297.466 166.921 297.523 166.894 297.594C166.867 297.666 166.869 297.745 166.898 297.815C166.928 297.886 166.983 297.941 167.052 297.969C167.086 297.985 167.122 297.993 167.159 297.994C167.197 297.995 167.234 297.988 167.268 297.973C167.303 297.959 167.334 297.938 167.361 297.911C167.387 297.883 167.408 297.851 167.422 297.815Z",
                    fill: "#F2667D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.815C167.441 297.781 167.452 297.742 167.454 297.703C167.456 297.663 167.45 297.624 167.436 297.587C167.422 297.551 167.4 297.518 167.372 297.491C167.344 297.464 167.311 297.443 167.275 297.431C167.206 297.403 167.129 297.405 167.062 297.435C166.994 297.466 166.941 297.523 166.914 297.594C166.887 297.666 166.888 297.745 166.918 297.815C166.947 297.886 167.002 297.941 167.071 297.969C167.104 297.984 167.139 297.993 167.175 297.993C167.211 297.994 167.247 297.987 167.28 297.972C167.313 297.958 167.342 297.936 167.367 297.909C167.392 297.882 167.411 297.85 167.423 297.815Z",
                    fill: "#F2677E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.815C167.438 297.779 167.446 297.741 167.447 297.703C167.448 297.664 167.441 297.626 167.427 297.59C167.414 297.554 167.393 297.522 167.367 297.494C167.341 297.467 167.309 297.445 167.275 297.431C167.208 297.405 167.135 297.406 167.07 297.435C167.004 297.463 166.952 297.517 166.923 297.584C166.897 297.656 166.898 297.735 166.925 297.806C166.953 297.877 167.005 297.935 167.071 297.968C167.138 297.994 167.211 297.993 167.277 297.964C167.342 297.935 167.394 297.882 167.423 297.815Z",
                    fill: "#F2687F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.815C167.438 297.779 167.446 297.741 167.447 297.703C167.448 297.664 167.441 297.626 167.427 297.59C167.414 297.554 167.393 297.522 167.367 297.494C167.341 297.467 167.309 297.445 167.275 297.431C167.208 297.405 167.135 297.406 167.07 297.435C167.004 297.463 166.952 297.517 166.923 297.584C166.897 297.656 166.898 297.735 166.925 297.806C166.953 297.877 167.005 297.935 167.071 297.968C167.138 297.994 167.211 297.993 167.277 297.964C167.342 297.935 167.394 297.882 167.423 297.815Z",
                    fill: "#F3697F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.814C167.439 297.748 167.432 297.679 167.403 297.618C167.374 297.557 167.326 297.509 167.266 297.481C167.207 297.454 167.14 297.449 167.077 297.467C167.014 297.486 166.96 297.527 166.923 297.583C166.897 297.655 166.898 297.734 166.925 297.805C166.953 297.876 167.005 297.934 167.071 297.968C167.138 297.993 167.211 297.992 167.277 297.963C167.342 297.935 167.394 297.881 167.423 297.814Z",
                    fill: "#F36A80"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.815C167.438 297.781 167.446 297.744 167.446 297.707C167.447 297.67 167.44 297.633 167.426 297.599C167.412 297.565 167.392 297.534 167.366 297.508C167.34 297.482 167.309 297.463 167.275 297.45C167.211 297.423 167.139 297.422 167.074 297.446C167.009 297.471 166.955 297.521 166.923 297.585C166.897 297.656 166.898 297.735 166.925 297.806C166.953 297.877 167.005 297.935 167.071 297.969C167.138 297.995 167.211 297.993 167.277 297.964C167.342 297.936 167.394 297.882 167.423 297.815Z",
                    fill: "#F36B81"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.815C167.438 297.781 167.446 297.744 167.447 297.707C167.447 297.67 167.44 297.633 167.427 297.599C167.413 297.565 167.392 297.534 167.366 297.508C167.34 297.482 167.309 297.463 167.275 297.45C167.244 297.436 167.21 297.429 167.175 297.429C167.141 297.428 167.107 297.435 167.075 297.449C167.043 297.462 167.014 297.482 166.99 297.507C166.966 297.532 166.946 297.561 166.933 297.594C166.919 297.627 166.912 297.662 166.912 297.698C166.912 297.733 166.918 297.769 166.931 297.802C166.944 297.835 166.963 297.865 166.987 297.89C167.011 297.915 167.04 297.936 167.072 297.949C167.103 297.965 167.137 297.975 167.172 297.976C167.207 297.978 167.242 297.973 167.275 297.96C167.308 297.948 167.338 297.928 167.364 297.903C167.389 297.878 167.409 297.848 167.423 297.815Z",
                    fill: "#F36C82"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.814C167.448 297.745 167.446 297.668 167.419 297.601C167.391 297.533 167.34 297.478 167.275 297.449C167.243 297.433 167.209 297.425 167.175 297.425C167.14 297.424 167.106 297.432 167.074 297.446C167.042 297.461 167.014 297.482 166.991 297.509C166.968 297.536 166.951 297.568 166.941 297.602C166.916 297.666 166.915 297.738 166.939 297.802C166.964 297.867 167.011 297.919 167.071 297.948C167.102 297.964 167.137 297.973 167.172 297.975C167.207 297.977 167.242 297.971 167.275 297.959C167.307 297.946 167.338 297.927 167.363 297.902C167.388 297.877 167.409 297.847 167.423 297.814Z",
                    fill: "#F36D83"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.814C167.448 297.745 167.446 297.668 167.419 297.601C167.391 297.533 167.34 297.478 167.275 297.449C167.243 297.433 167.209 297.425 167.175 297.425C167.14 297.424 167.106 297.432 167.074 297.446C167.042 297.461 167.014 297.482 166.991 297.509C166.968 297.536 166.951 297.568 166.941 297.602C166.916 297.666 166.915 297.738 166.939 297.802C166.964 297.867 167.011 297.919 167.071 297.948C167.102 297.964 167.137 297.973 167.172 297.975C167.207 297.977 167.242 297.971 167.275 297.959C167.307 297.946 167.338 297.927 167.363 297.902C167.388 297.877 167.409 297.847 167.423 297.814Z",
                    fill: "#F36E84"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.814C167.448 297.745 167.446 297.668 167.419 297.601C167.391 297.533 167.34 297.478 167.275 297.449C167.243 297.433 167.209 297.425 167.175 297.425C167.14 297.424 167.106 297.432 167.074 297.446C167.042 297.461 167.014 297.482 166.991 297.509C166.968 297.536 166.951 297.568 166.941 297.602C166.916 297.666 166.915 297.738 166.939 297.802C166.964 297.867 167.011 297.919 167.071 297.948C167.102 297.964 167.137 297.973 167.172 297.975C167.207 297.977 167.242 297.971 167.275 297.959C167.307 297.946 167.338 297.927 167.363 297.902C167.388 297.877 167.409 297.847 167.423 297.814Z",
                    fill: "#F36F85"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.814C167.448 297.745 167.446 297.668 167.419 297.601C167.391 297.533 167.34 297.478 167.275 297.449C167.243 297.433 167.209 297.425 167.175 297.425C167.14 297.424 167.106 297.432 167.074 297.446C167.042 297.461 167.014 297.482 166.991 297.509C166.968 297.536 166.951 297.568 166.941 297.602C166.916 297.666 166.915 297.738 166.939 297.802C166.964 297.867 167.011 297.919 167.071 297.948C167.102 297.964 167.137 297.973 167.172 297.975C167.207 297.977 167.242 297.971 167.275 297.959C167.307 297.946 167.338 297.927 167.363 297.902C167.388 297.877 167.409 297.847 167.423 297.814Z",
                    fill: "#F37085"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.814C167.443 297.745 167.44 297.67 167.413 297.604C167.386 297.537 167.337 297.482 167.275 297.449C167.211 297.424 167.14 297.426 167.078 297.455C167.015 297.484 166.966 297.537 166.941 297.603C166.916 297.667 166.915 297.738 166.939 297.803C166.964 297.867 167.011 297.919 167.071 297.948C167.102 297.964 167.137 297.974 167.172 297.975C167.207 297.977 167.242 297.972 167.275 297.959C167.307 297.947 167.338 297.927 167.363 297.902C167.388 297.877 167.409 297.847 167.423 297.814Z",
                    fill: "#F37186"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.795C167.447 297.731 167.448 297.659 167.424 297.595C167.4 297.531 167.352 297.478 167.292 297.449C167.228 297.424 167.158 297.426 167.095 297.455C167.033 297.484 166.984 297.537 166.959 297.603C166.934 297.667 166.933 297.738 166.957 297.803C166.981 297.867 167.028 297.919 167.089 297.948C167.12 297.964 167.154 297.972 167.189 297.972C167.223 297.973 167.258 297.965 167.289 297.951C167.321 297.936 167.349 297.915 167.372 297.888C167.395 297.861 167.412 297.829 167.422 297.795Z",
                    fill: "#F37287"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.795C167.447 297.731 167.448 297.659 167.424 297.595C167.4 297.531 167.352 297.478 167.292 297.449C167.228 297.424 167.158 297.426 167.095 297.455C167.033 297.484 166.984 297.537 166.959 297.603C166.934 297.667 166.933 297.738 166.957 297.802C166.981 297.867 167.028 297.919 167.089 297.948C167.152 297.973 167.223 297.971 167.286 297.943C167.348 297.914 167.397 297.861 167.422 297.795Z",
                    fill: "#F37388"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.795C167.448 297.731 167.449 297.66 167.425 297.595C167.401 297.531 167.354 297.479 167.293 297.449C167.229 297.429 167.16 297.433 167.099 297.462C167.038 297.49 166.988 297.54 166.96 297.603C166.936 297.669 166.938 297.743 166.966 297.807C166.993 297.872 167.045 297.923 167.108 297.949C167.139 297.961 167.171 297.966 167.203 297.965C167.236 297.964 167.268 297.956 167.297 297.942C167.327 297.927 167.353 297.907 167.375 297.882C167.396 297.856 167.413 297.827 167.423 297.795Z",
                    fill: "#F37489"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.795C167.438 297.765 167.447 297.732 167.448 297.699C167.45 297.665 167.444 297.631 167.432 297.6C167.419 297.569 167.401 297.541 167.377 297.519C167.353 297.496 167.324 297.479 167.293 297.468C167.232 297.442 167.163 297.442 167.101 297.467C167.039 297.492 166.988 297.54 166.96 297.603C166.936 297.669 166.938 297.743 166.966 297.807C166.993 297.872 167.045 297.923 167.108 297.949C167.139 297.961 167.171 297.966 167.204 297.965C167.236 297.964 167.268 297.956 167.297 297.941C167.327 297.927 167.353 297.907 167.375 297.882C167.396 297.856 167.413 297.827 167.423 297.795Z",
                    fill: "#F4758A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.795C167.437 297.765 167.446 297.732 167.447 297.699C167.449 297.665 167.443 297.631 167.431 297.6C167.419 297.569 167.4 297.541 167.376 297.519C167.352 297.496 167.324 297.479 167.293 297.468C167.231 297.442 167.162 297.442 167.1 297.467C167.038 297.492 166.988 297.54 166.96 297.603C166.94 297.669 166.944 297.741 166.971 297.804C166.998 297.868 167.047 297.919 167.108 297.949C167.169 297.968 167.235 297.963 167.294 297.935C167.352 297.906 167.398 297.856 167.422 297.795Z",
                    fill: "#F4768B"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.424 297.795C167.439 297.765 167.448 297.732 167.449 297.699C167.451 297.665 167.445 297.631 167.433 297.6C167.421 297.569 167.402 297.541 167.378 297.519C167.354 297.496 167.326 297.479 167.295 297.468C167.233 297.442 167.164 297.442 167.102 297.467C167.04 297.492 166.99 297.54 166.961 297.603C166.95 297.634 166.944 297.668 166.945 297.702C166.947 297.735 166.954 297.768 166.968 297.799C166.982 297.829 167.002 297.857 167.026 297.879C167.05 297.902 167.079 297.919 167.11 297.929C167.168 297.955 167.235 297.955 167.294 297.93C167.353 297.905 167.4 297.856 167.424 297.795Z",
                    fill: "#F4778B"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.424 297.795C167.436 297.765 167.442 297.732 167.442 297.7C167.443 297.667 167.436 297.634 167.424 297.604C167.412 297.574 167.395 297.546 167.372 297.523C167.35 297.5 167.323 297.481 167.294 297.469C167.265 297.456 167.234 297.449 167.202 297.449C167.171 297.449 167.139 297.456 167.11 297.468C167.081 297.481 167.054 297.499 167.032 297.522C167.009 297.545 166.992 297.573 166.979 297.603C166.967 297.633 166.961 297.666 166.961 297.698C166.961 297.731 166.967 297.764 166.979 297.794C166.991 297.824 167.009 297.852 167.031 297.875C167.053 297.898 167.08 297.917 167.109 297.929C167.168 297.955 167.234 297.955 167.293 297.93C167.352 297.905 167.399 297.856 167.424 297.795Z",
                    fill: "#F4788C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.794C167.443 297.733 167.441 297.666 167.417 297.606C167.393 297.546 167.349 297.497 167.293 297.468C167.264 297.452 167.233 297.443 167.2 297.442C167.168 297.44 167.136 297.446 167.106 297.459C167.076 297.472 167.049 297.491 167.027 297.516C167.005 297.541 166.988 297.57 166.978 297.602C166.963 297.632 166.955 297.665 166.953 297.699C166.952 297.732 166.958 297.766 166.97 297.797C166.982 297.828 167.001 297.856 167.025 297.879C167.049 297.901 167.077 297.918 167.108 297.929C167.167 297.954 167.233 297.954 167.292 297.929C167.351 297.904 167.398 297.855 167.423 297.794Z",
                    fill: "#F4798D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.794C167.439 297.733 167.435 297.667 167.412 297.608C167.389 297.549 167.347 297.5 167.293 297.468C167.264 297.452 167.233 297.443 167.2 297.442C167.168 297.44 167.136 297.446 167.106 297.459C167.076 297.472 167.049 297.491 167.027 297.516C167.005 297.541 166.988 297.57 166.978 297.602C166.963 297.632 166.955 297.665 166.953 297.699C166.952 297.732 166.958 297.766 166.97 297.797C166.982 297.828 167.001 297.856 167.025 297.879C167.049 297.901 167.077 297.918 167.108 297.929C167.167 297.954 167.233 297.954 167.292 297.929C167.351 297.904 167.398 297.855 167.423 297.794Z",
                    fill: "#F47A8E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.794C167.439 297.733 167.435 297.667 167.412 297.608C167.389 297.549 167.347 297.5 167.293 297.468C167.264 297.452 167.233 297.443 167.2 297.442C167.168 297.44 167.136 297.446 167.106 297.459C167.076 297.472 167.049 297.491 167.027 297.516C167.005 297.541 166.988 297.57 166.978 297.602C166.963 297.632 166.955 297.665 166.953 297.699C166.952 297.732 166.958 297.766 166.97 297.797C166.982 297.828 167.001 297.856 167.025 297.879C167.049 297.901 167.077 297.918 167.108 297.929C167.167 297.954 167.233 297.954 167.292 297.929C167.351 297.904 167.398 297.855 167.423 297.794Z",
                    fill: "#F47B8F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.795C167.439 297.733 167.435 297.668 167.412 297.609C167.389 297.55 167.347 297.5 167.293 297.469C167.264 297.456 167.233 297.449 167.201 297.449C167.17 297.449 167.138 297.456 167.109 297.468C167.08 297.481 167.053 297.499 167.031 297.522C167.008 297.545 166.991 297.573 166.978 297.603C166.963 297.633 166.955 297.666 166.953 297.699C166.952 297.733 166.958 297.766 166.97 297.798C166.982 297.829 167.001 297.857 167.025 297.879C167.049 297.902 167.077 297.919 167.108 297.929C167.167 297.955 167.233 297.955 167.292 297.93C167.351 297.905 167.398 297.856 167.423 297.795Z",
                    fill: "#F47C90"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.796C167.448 297.737 167.45 297.67 167.43 297.609C167.409 297.548 167.366 297.498 167.311 297.469C167.252 297.448 167.187 297.451 167.129 297.475C167.071 297.5 167.024 297.546 166.996 297.604C166.981 297.633 166.972 297.666 166.971 297.7C166.969 297.734 166.975 297.767 166.987 297.798C167 297.829 167.019 297.857 167.042 297.88C167.066 297.903 167.095 297.92 167.126 297.93C167.153 297.946 167.184 297.955 167.215 297.956C167.246 297.958 167.277 297.952 167.306 297.939C167.334 297.926 167.36 297.906 167.38 297.881C167.4 297.856 167.414 297.827 167.422 297.796Z",
                    fill: "#F47D91"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.796C167.448 297.737 167.45 297.67 167.43 297.609C167.409 297.548 167.366 297.498 167.311 297.469C167.252 297.448 167.187 297.451 167.129 297.475C167.071 297.5 167.024 297.546 166.996 297.604C166.981 297.633 166.972 297.666 166.971 297.7C166.969 297.734 166.975 297.767 166.987 297.798C167 297.829 167.019 297.857 167.042 297.88C167.066 297.903 167.095 297.92 167.126 297.93C167.153 297.946 167.184 297.955 167.215 297.956C167.246 297.958 167.277 297.952 167.306 297.939C167.334 297.926 167.36 297.906 167.38 297.881C167.4 297.856 167.414 297.827 167.422 297.796Z",
                    fill: "#F47E91"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.795C167.435 297.764 167.441 297.732 167.441 297.699C167.442 297.666 167.435 297.634 167.423 297.604C167.411 297.573 167.394 297.546 167.371 297.523C167.349 297.499 167.322 297.481 167.293 297.468C167.237 297.453 167.176 297.457 167.122 297.482C167.069 297.506 167.024 297.549 166.997 297.603C166.972 297.664 166.972 297.733 166.997 297.794C167.021 297.855 167.068 297.904 167.127 297.929C167.183 297.949 167.245 297.946 167.3 297.921C167.355 297.896 167.398 297.851 167.423 297.795Z",
                    fill: "#F47F92"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.796C167.437 297.767 167.446 297.736 167.447 297.703C167.449 297.671 167.443 297.639 167.43 297.609C167.418 297.579 167.399 297.553 167.375 297.532C167.351 297.511 167.323 297.496 167.292 297.489C167.266 297.476 167.237 297.468 167.207 297.467C167.178 297.466 167.149 297.471 167.121 297.482C167.093 297.493 167.068 297.509 167.047 297.53C167.025 297.551 167.008 297.576 166.996 297.604C166.976 297.665 166.978 297.732 167.002 297.792C167.026 297.852 167.07 297.901 167.126 297.93C167.182 297.95 167.244 297.947 167.299 297.922C167.354 297.897 167.397 297.852 167.422 297.796Z",
                    fill: "#F48093"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.796C167.437 297.767 167.446 297.736 167.447 297.703C167.449 297.671 167.443 297.639 167.43 297.609C167.418 297.579 167.399 297.553 167.375 297.532C167.351 297.511 167.323 297.496 167.292 297.489C167.266 297.476 167.237 297.468 167.207 297.467C167.178 297.466 167.149 297.471 167.121 297.482C167.093 297.493 167.068 297.509 167.047 297.53C167.025 297.551 167.008 297.576 166.996 297.604C166.976 297.665 166.978 297.732 167.002 297.792C167.026 297.852 167.07 297.901 167.126 297.93C167.182 297.95 167.244 297.947 167.299 297.922C167.354 297.897 167.397 297.852 167.422 297.796Z",
                    fill: "#F58194"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.796C167.438 297.767 167.447 297.736 167.448 297.703C167.45 297.671 167.444 297.639 167.431 297.609C167.419 297.579 167.4 297.553 167.376 297.532C167.352 297.511 167.324 297.496 167.293 297.489C167.266 297.476 167.238 297.468 167.208 297.467C167.179 297.466 167.149 297.471 167.122 297.482C167.094 297.493 167.069 297.509 167.048 297.53C167.026 297.551 167.009 297.576 166.997 297.604C166.978 297.662 166.981 297.726 167.005 297.783C167.029 297.84 167.072 297.886 167.127 297.911C167.153 297.924 167.182 297.931 167.212 297.932C167.241 297.933 167.27 297.928 167.298 297.918C167.326 297.907 167.351 297.891 167.372 297.87C167.394 297.849 167.411 297.824 167.423 297.796Z",
                    fill: "#F58295"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.795C167.434 297.766 167.44 297.735 167.439 297.703C167.439 297.672 167.433 297.641 167.421 297.612C167.409 297.583 167.391 297.558 167.369 297.536C167.347 297.515 167.321 297.498 167.292 297.488C167.267 297.475 167.239 297.468 167.211 297.467C167.183 297.466 167.155 297.471 167.129 297.482C167.103 297.493 167.079 297.509 167.059 297.53C167.04 297.551 167.024 297.576 167.014 297.603C166.999 297.63 166.99 297.66 166.987 297.692C166.984 297.723 166.989 297.755 166.999 297.784C167.01 297.813 167.027 297.84 167.049 297.862C167.07 297.884 167.097 297.9 167.125 297.91C167.152 297.923 167.181 297.93 167.21 297.931C167.24 297.932 167.269 297.927 167.297 297.917C167.324 297.906 167.35 297.89 167.371 297.869C167.393 297.848 167.41 297.823 167.422 297.795Z",
                    fill: "#F58396"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.795C167.437 297.736 167.432 297.674 167.409 297.618C167.385 297.562 167.344 297.516 167.292 297.488C167.267 297.475 167.239 297.468 167.211 297.467C167.183 297.466 167.155 297.471 167.129 297.482C167.103 297.493 167.079 297.509 167.059 297.53C167.04 297.551 167.024 297.576 167.014 297.603C166.999 297.63 166.99 297.66 166.987 297.692C166.984 297.723 166.989 297.755 166.999 297.784C167.01 297.813 167.027 297.84 167.049 297.862C167.07 297.884 167.097 297.9 167.125 297.91C167.152 297.923 167.181 297.93 167.21 297.931C167.24 297.932 167.269 297.927 167.297 297.917C167.324 297.906 167.35 297.89 167.371 297.869C167.393 297.848 167.41 297.823 167.422 297.795Z",
                    fill: "#F58497"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.795C167.437 297.736 167.432 297.674 167.409 297.618C167.385 297.562 167.344 297.516 167.292 297.488C167.267 297.475 167.239 297.468 167.211 297.467C167.183 297.466 167.155 297.471 167.129 297.482C167.103 297.493 167.079 297.509 167.059 297.53C167.04 297.551 167.024 297.576 167.014 297.603C166.999 297.63 166.99 297.66 166.987 297.692C166.984 297.723 166.989 297.755 166.999 297.784C167.01 297.813 167.027 297.84 167.049 297.862C167.07 297.884 167.097 297.9 167.125 297.91C167.152 297.923 167.181 297.93 167.21 297.931C167.24 297.932 167.269 297.927 167.297 297.917C167.324 297.906 167.35 297.89 167.371 297.869C167.393 297.848 167.41 297.823 167.422 297.795Z",
                    fill: "#F58597"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.424 297.795C167.439 297.736 167.435 297.674 167.411 297.618C167.388 297.562 167.347 297.516 167.295 297.488C167.243 297.474 167.188 297.48 167.14 297.505C167.092 297.53 167.054 297.572 167.034 297.624C167.014 297.675 167.012 297.733 167.029 297.785C167.047 297.838 167.082 297.882 167.128 297.91C167.155 297.923 167.184 297.93 167.213 297.931C167.243 297.933 167.272 297.928 167.299 297.917C167.327 297.906 167.352 297.89 167.374 297.869C167.395 297.848 167.412 297.823 167.424 297.795Z",
                    fill: "#F58698"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.796C167.438 297.737 167.434 297.675 167.41 297.619C167.387 297.563 167.346 297.517 167.294 297.489C167.267 297.477 167.238 297.47 167.209 297.471C167.18 297.471 167.152 297.478 167.125 297.491C167.099 297.503 167.076 297.522 167.057 297.545C167.038 297.567 167.024 297.594 167.016 297.623C167.004 297.649 166.997 297.678 166.996 297.707C166.995 297.736 167 297.765 167.011 297.792C167.021 297.819 167.037 297.844 167.057 297.864C167.077 297.885 167.101 297.901 167.127 297.911C167.154 297.924 167.183 297.931 167.212 297.932C167.241 297.933 167.271 297.929 167.298 297.918C167.326 297.907 167.351 297.891 167.373 297.87C167.394 297.849 167.411 297.824 167.423 297.796Z",
                    fill: "#F58799"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.795C167.435 297.767 167.442 297.737 167.443 297.707C167.444 297.676 167.439 297.646 167.429 297.617C167.418 297.589 167.403 297.563 167.382 297.54C167.362 297.518 167.338 297.5 167.311 297.488C167.257 297.469 167.198 297.472 167.146 297.497C167.095 297.522 167.054 297.567 167.033 297.622C167.021 297.648 167.015 297.677 167.014 297.706C167.013 297.735 167.018 297.764 167.028 297.791C167.039 297.818 167.054 297.843 167.074 297.863C167.094 297.884 167.118 297.9 167.145 297.91C167.17 297.923 167.197 297.93 167.226 297.931C167.254 297.931 167.282 297.926 167.308 297.916C167.334 297.905 167.357 297.888 167.377 297.868C167.397 297.847 167.412 297.822 167.422 297.795Z",
                    fill: "#F5889A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.421 297.795C167.434 297.767 167.441 297.737 167.442 297.707C167.443 297.676 167.438 297.646 167.428 297.617C167.417 297.589 167.402 297.563 167.382 297.54C167.361 297.518 167.337 297.5 167.31 297.488C167.258 297.474 167.203 297.48 167.155 297.505C167.108 297.53 167.07 297.572 167.05 297.624C167.029 297.675 167.028 297.733 167.045 297.785C167.062 297.838 167.097 297.882 167.144 297.91C167.169 297.923 167.197 297.93 167.225 297.931C167.253 297.932 167.281 297.926 167.307 297.916C167.333 297.905 167.357 297.888 167.376 297.868C167.396 297.847 167.411 297.822 167.421 297.795Z",
                    fill: "#F5899B"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.795C167.435 297.767 167.442 297.737 167.443 297.707C167.444 297.676 167.439 297.646 167.429 297.617C167.419 297.589 167.403 297.563 167.383 297.54C167.363 297.518 167.338 297.5 167.311 297.488C167.257 297.469 167.198 297.472 167.147 297.497C167.095 297.522 167.054 297.567 167.034 297.622C167.014 297.676 167.015 297.735 167.035 297.788C167.056 297.842 167.095 297.885 167.145 297.91C167.197 297.93 167.254 297.93 167.305 297.908C167.357 297.887 167.398 297.847 167.423 297.795Z",
                    fill: "#F58A9C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.795C167.434 297.769 167.441 297.74 167.442 297.711C167.443 297.682 167.438 297.653 167.428 297.626C167.417 297.599 167.401 297.575 167.381 297.554C167.361 297.534 167.338 297.518 167.311 297.507C167.286 297.495 167.258 297.488 167.23 297.487C167.202 297.486 167.174 297.491 167.148 297.502C167.122 297.513 167.098 297.529 167.079 297.55C167.059 297.57 167.044 297.595 167.033 297.622C167.018 297.676 167.02 297.734 167.041 297.787C167.061 297.839 167.097 297.883 167.145 297.91C167.196 297.931 167.254 297.93 167.305 297.909C167.356 297.887 167.398 297.847 167.422 297.795Z",
                    fill: "#F58B9D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.795C167.434 297.769 167.441 297.74 167.442 297.711C167.443 297.682 167.438 297.653 167.428 297.626C167.417 297.599 167.401 297.575 167.381 297.554C167.361 297.534 167.338 297.518 167.311 297.507C167.286 297.495 167.258 297.488 167.23 297.487C167.202 297.486 167.174 297.491 167.148 297.502C167.122 297.513 167.098 297.529 167.079 297.55C167.059 297.57 167.044 297.595 167.033 297.622C167.018 297.676 167.02 297.734 167.041 297.787C167.061 297.839 167.097 297.883 167.145 297.91C167.196 297.931 167.254 297.93 167.305 297.909C167.356 297.887 167.398 297.847 167.422 297.795Z",
                    fill: "#F58C9D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.776C167.442 297.725 167.44 297.669 167.42 297.619C167.399 297.568 167.36 297.529 167.312 297.507C167.287 297.495 167.259 297.488 167.231 297.487C167.203 297.486 167.175 297.491 167.149 297.502C167.123 297.513 167.099 297.529 167.079 297.55C167.06 297.57 167.044 297.595 167.034 297.622C167.02 297.674 167.023 297.728 167.043 297.777C167.064 297.827 167.1 297.867 167.145 297.891C167.171 297.904 167.198 297.911 167.226 297.912C167.254 297.913 167.282 297.908 167.308 297.897C167.335 297.886 167.358 297.87 167.378 297.849C167.398 297.828 167.413 297.803 167.423 297.776Z",
                    fill: "#F68D9E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.776C167.442 297.725 167.44 297.669 167.42 297.619C167.399 297.568 167.36 297.529 167.312 297.507C167.287 297.495 167.259 297.488 167.231 297.487C167.203 297.486 167.175 297.491 167.149 297.502C167.123 297.513 167.099 297.529 167.079 297.55C167.06 297.57 167.044 297.595 167.034 297.622C167.02 297.674 167.023 297.728 167.043 297.777C167.064 297.827 167.1 297.867 167.145 297.891C167.171 297.904 167.198 297.911 167.226 297.912C167.254 297.913 167.282 297.908 167.308 297.897C167.335 297.886 167.358 297.87 167.378 297.849C167.398 297.828 167.413 297.803 167.423 297.776Z",
                    fill: "#F68E9F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.777C167.437 297.725 167.433 297.67 167.413 297.621C167.393 297.572 167.357 297.532 167.311 297.508C167.287 297.495 167.261 297.488 167.234 297.488C167.207 297.487 167.181 297.492 167.156 297.503C167.131 297.514 167.109 297.53 167.091 297.551C167.073 297.572 167.06 297.596 167.052 297.623C167.044 297.671 167.052 297.72 167.075 297.762C167.097 297.805 167.133 297.838 167.177 297.856C167.22 297.874 167.268 297.876 167.313 297.861C167.358 297.847 167.396 297.817 167.422 297.777Z",
                    fill: "#F68FA0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.777C167.437 297.725 167.434 297.67 167.414 297.621C167.393 297.572 167.357 297.532 167.312 297.508C167.288 297.495 167.261 297.488 167.235 297.488C167.208 297.487 167.181 297.492 167.156 297.503C167.132 297.514 167.11 297.53 167.092 297.551C167.074 297.572 167.06 297.596 167.052 297.623C167.041 297.648 167.034 297.675 167.033 297.703C167.033 297.731 167.038 297.758 167.048 297.784C167.059 297.809 167.075 297.832 167.094 297.851C167.114 297.87 167.138 297.884 167.164 297.892C167.188 297.904 167.214 297.911 167.241 297.912C167.268 297.912 167.294 297.907 167.319 297.896C167.344 297.885 167.366 297.869 167.384 297.848C167.402 297.828 167.415 297.803 167.423 297.777Z",
                    fill: "#F690A1"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.777C167.437 297.725 167.434 297.67 167.413 297.621C167.393 297.572 167.357 297.532 167.311 297.508C167.287 297.495 167.261 297.488 167.234 297.488C167.207 297.487 167.181 297.492 167.156 297.503C167.131 297.514 167.109 297.53 167.091 297.551C167.073 297.572 167.06 297.596 167.052 297.623C167.034 297.674 167.035 297.73 167.056 297.78C167.076 297.831 167.115 297.87 167.163 297.892C167.212 297.911 167.267 297.91 167.315 297.888C167.364 297.867 167.402 297.827 167.422 297.777Z",
                    fill: "#F691A2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.777C167.437 297.725 167.434 297.67 167.413 297.621C167.393 297.572 167.357 297.532 167.311 297.508C167.287 297.495 167.261 297.488 167.234 297.488C167.207 297.487 167.181 297.492 167.156 297.503C167.131 297.514 167.109 297.53 167.091 297.551C167.073 297.572 167.06 297.596 167.052 297.623C167.034 297.674 167.035 297.73 167.056 297.78C167.076 297.831 167.115 297.87 167.163 297.892C167.212 297.911 167.267 297.91 167.315 297.888C167.364 297.867 167.402 297.827 167.422 297.777Z",
                    fill: "#F692A3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.776C167.443 297.727 167.445 297.673 167.427 297.623C167.41 297.573 167.376 297.532 167.331 297.507C167.282 297.488 167.227 297.489 167.179 297.511C167.131 297.532 167.092 297.572 167.072 297.622C167.053 297.673 167.054 297.73 167.075 297.78C167.096 297.83 167.134 297.87 167.183 297.891C167.206 297.9 167.23 297.904 167.255 297.904C167.28 297.903 167.304 297.897 167.326 297.886C167.349 297.875 167.369 297.86 167.386 297.841C167.402 297.822 167.415 297.8 167.423 297.776Z",
                    fill: "#F693A3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.776C167.443 297.727 167.445 297.673 167.427 297.623C167.41 297.573 167.376 297.532 167.331 297.507C167.282 297.488 167.227 297.489 167.179 297.511C167.131 297.532 167.092 297.572 167.072 297.622C167.053 297.673 167.054 297.73 167.075 297.78C167.096 297.83 167.134 297.87 167.183 297.891C167.206 297.9 167.23 297.904 167.255 297.904C167.28 297.903 167.304 297.897 167.326 297.886C167.349 297.875 167.369 297.86 167.386 297.841C167.402 297.822 167.415 297.8 167.423 297.776Z",
                    fill: "#F694A4"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.776C167.443 297.727 167.445 297.673 167.427 297.623C167.41 297.573 167.376 297.532 167.331 297.507C167.282 297.488 167.227 297.489 167.179 297.511C167.131 297.532 167.092 297.572 167.072 297.622C167.053 297.673 167.054 297.73 167.075 297.78C167.096 297.83 167.134 297.87 167.183 297.891C167.206 297.9 167.23 297.904 167.255 297.904C167.28 297.903 167.304 297.897 167.326 297.886C167.349 297.875 167.369 297.86 167.386 297.841C167.402 297.822 167.415 297.8 167.423 297.776Z",
                    fill: "#F695A5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.776C167.443 297.728 167.443 297.673 167.424 297.625C167.405 297.576 167.368 297.537 167.321 297.517C167.275 297.496 167.222 297.496 167.175 297.516C167.128 297.536 167.091 297.574 167.071 297.622C167.057 297.674 167.06 297.728 167.08 297.777C167.101 297.826 167.137 297.867 167.182 297.891C167.205 297.9 167.23 297.905 167.255 297.904C167.279 297.903 167.304 297.897 167.326 297.886C167.349 297.875 167.369 297.86 167.385 297.841C167.402 297.822 167.415 297.8 167.423 297.776Z",
                    fill: "#F696A6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.776C167.443 297.728 167.443 297.673 167.424 297.625C167.405 297.576 167.368 297.537 167.321 297.517C167.275 297.496 167.222 297.496 167.175 297.516C167.128 297.536 167.091 297.574 167.071 297.622C167.057 297.674 167.06 297.728 167.08 297.777C167.101 297.826 167.137 297.867 167.182 297.891C167.205 297.9 167.23 297.905 167.255 297.904C167.279 297.903 167.304 297.897 167.326 297.886C167.349 297.875 167.369 297.86 167.385 297.841C167.402 297.822 167.415 297.8 167.423 297.776Z",
                    fill: "#F697A7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.776C167.442 297.73 167.442 297.678 167.425 297.631C167.408 297.585 167.374 297.547 167.33 297.526C167.294 297.495 167.248 297.478 167.2 297.478C167.153 297.478 167.107 297.495 167.071 297.526C167.062 297.55 167.058 297.576 167.059 297.601C167.06 297.627 167.065 297.652 167.076 297.675C167.086 297.698 167.101 297.719 167.119 297.737C167.137 297.754 167.159 297.767 167.182 297.776C167.197 297.793 167.216 297.806 167.237 297.815C167.258 297.824 167.28 297.829 167.302 297.829C167.325 297.829 167.347 297.824 167.368 297.815C167.388 297.806 167.407 297.793 167.423 297.776Z",
                    fill: "#F698A8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.776C167.442 297.73 167.442 297.678 167.425 297.631C167.408 297.585 167.374 297.547 167.33 297.526C167.294 297.495 167.248 297.478 167.2 297.478C167.153 297.478 167.107 297.495 167.071 297.526C167.062 297.55 167.058 297.576 167.059 297.601C167.06 297.627 167.065 297.652 167.076 297.675C167.086 297.698 167.101 297.719 167.119 297.737C167.137 297.754 167.159 297.767 167.182 297.776C167.197 297.793 167.216 297.806 167.237 297.815C167.258 297.824 167.28 297.829 167.302 297.829C167.325 297.829 167.347 297.824 167.368 297.815C167.388 297.806 167.407 297.793 167.423 297.776Z",
                    fill: "#F799A9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.776C167.432 297.752 167.436 297.727 167.435 297.701C167.434 297.676 167.428 297.65 167.418 297.627C167.408 297.604 167.393 297.583 167.375 297.566C167.356 297.549 167.335 297.535 167.312 297.527C167.281 297.498 167.242 297.483 167.201 297.483C167.16 297.483 167.12 297.498 167.089 297.527C167.079 297.57 167.084 297.617 167.103 297.657C167.122 297.698 167.154 297.73 167.194 297.749C167.234 297.767 167.278 297.77 167.32 297.758C167.362 297.745 167.398 297.718 167.423 297.68V297.776Z",
                    fill: "#F79AA9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.776C167.432 297.752 167.436 297.727 167.435 297.701C167.434 297.676 167.428 297.65 167.418 297.627C167.408 297.604 167.393 297.583 167.375 297.566C167.356 297.549 167.335 297.535 167.312 297.527C167.281 297.498 167.242 297.483 167.201 297.483C167.16 297.483 167.12 297.498 167.089 297.527C167.079 297.57 167.084 297.617 167.103 297.657C167.122 297.698 167.154 297.73 167.194 297.749C167.234 297.767 167.278 297.77 167.32 297.758C167.362 297.745 167.398 297.718 167.423 297.68V297.776Z",
                    fill: "#F79BAA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.776C167.432 297.752 167.436 297.727 167.435 297.701C167.434 297.676 167.428 297.65 167.418 297.627C167.408 297.604 167.393 297.583 167.375 297.566C167.356 297.549 167.335 297.535 167.312 297.527C167.281 297.498 167.242 297.483 167.201 297.483C167.16 297.483 167.12 297.498 167.089 297.527C167.079 297.57 167.084 297.617 167.103 297.657C167.122 297.698 167.154 297.73 167.194 297.749C167.234 297.767 167.278 297.77 167.32 297.758C167.362 297.745 167.398 297.718 167.423 297.68V297.776Z",
                    fill: "#F79CAB"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.776C167.432 297.752 167.436 297.727 167.435 297.701C167.434 297.676 167.428 297.65 167.418 297.627C167.408 297.604 167.393 297.583 167.375 297.566C167.356 297.549 167.335 297.535 167.312 297.527C167.281 297.498 167.242 297.483 167.201 297.483C167.16 297.483 167.12 297.498 167.089 297.527C167.079 297.57 167.084 297.617 167.103 297.657C167.122 297.698 167.154 297.73 167.194 297.749C167.234 297.767 167.278 297.77 167.32 297.758C167.362 297.745 167.398 297.718 167.423 297.68V297.776Z",
                    fill: "#F79DAC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.777C167.452 297.742 167.467 297.698 167.467 297.652C167.467 297.606 167.452 297.562 167.423 297.527C167.391 297.502 167.352 297.489 167.312 297.489C167.272 297.489 167.233 297.502 167.201 297.527C167.172 297.562 167.156 297.606 167.156 297.652C167.156 297.698 167.172 297.742 167.201 297.777C167.231 297.805 167.271 297.821 167.312 297.821C167.353 297.821 167.392 297.805 167.423 297.777Z",
                    fill: "#F79EAD"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.777C167.452 297.742 167.467 297.698 167.467 297.652C167.467 297.606 167.452 297.562 167.423 297.527C167.391 297.502 167.352 297.489 167.312 297.489C167.272 297.489 167.233 297.502 167.201 297.527C167.172 297.562 167.156 297.606 167.156 297.652C167.156 297.698 167.172 297.742 167.201 297.777C167.231 297.805 167.271 297.821 167.312 297.821C167.353 297.821 167.392 297.805 167.423 297.777Z",
                    fill: "#F79FAE"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.777C167.452 297.742 167.467 297.698 167.467 297.652C167.467 297.606 167.452 297.562 167.423 297.527C167.391 297.502 167.352 297.489 167.312 297.489C167.272 297.489 167.233 297.502 167.201 297.527C167.172 297.562 167.156 297.606 167.156 297.652C167.156 297.698 167.172 297.742 167.201 297.777C167.231 297.805 167.271 297.821 167.312 297.821C167.353 297.821 167.392 297.805 167.423 297.777Z",
                    fill: "#F7A0AF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.777C167.451 297.745 167.466 297.704 167.466 297.661C167.466 297.619 167.451 297.578 167.423 297.546C167.403 297.537 167.38 297.532 167.358 297.532C167.335 297.532 167.313 297.536 167.292 297.545C167.272 297.554 167.253 297.567 167.237 297.584C167.221 297.601 167.209 297.62 167.201 297.642C167.177 297.675 167.164 297.716 167.164 297.757C167.164 297.799 167.177 297.839 167.201 297.873C167.243 297.887 167.289 297.885 167.329 297.867C167.37 297.85 167.403 297.817 167.423 297.777Z",
                    fill: "#F7A1AF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.777C167.451 297.745 167.466 297.704 167.466 297.661C167.466 297.619 167.451 297.578 167.423 297.546C167.403 297.537 167.38 297.532 167.358 297.532C167.335 297.532 167.313 297.536 167.292 297.545C167.272 297.554 167.253 297.567 167.237 297.584C167.221 297.601 167.209 297.62 167.201 297.642C167.177 297.675 167.164 297.716 167.164 297.757C167.164 297.799 167.177 297.839 167.201 297.873C167.243 297.887 167.289 297.885 167.329 297.867C167.37 297.85 167.403 297.817 167.423 297.777Z",
                    fill: "#F7A2B0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.777C167.45 297.745 167.465 297.704 167.465 297.661C167.465 297.619 167.45 297.578 167.423 297.546C167.402 297.537 167.38 297.532 167.358 297.532C167.335 297.532 167.313 297.536 167.292 297.545C167.271 297.554 167.253 297.567 167.237 297.584C167.221 297.601 167.209 297.62 167.201 297.642C167.178 297.672 167.166 297.71 167.166 297.748C167.166 297.786 167.178 297.823 167.201 297.853C167.24 297.873 167.285 297.877 167.327 297.862C167.369 297.848 167.403 297.817 167.423 297.777Z",
                    fill: "#F7A3B1"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.777C167.45 297.745 167.465 297.704 167.465 297.661C167.465 297.619 167.45 297.578 167.423 297.546C167.402 297.537 167.38 297.532 167.357 297.532C167.335 297.532 167.313 297.536 167.292 297.545C167.271 297.554 167.252 297.567 167.236 297.584C167.221 297.601 167.209 297.62 167.2 297.642C167.181 297.674 167.17 297.71 167.17 297.748C167.17 297.785 167.181 297.822 167.2 297.853C167.24 297.873 167.285 297.877 167.327 297.862C167.368 297.848 167.403 297.817 167.423 297.777Z",
                    fill: "#F7A4B2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.776C167.449 297.744 167.464 297.703 167.464 297.661C167.464 297.618 167.449 297.577 167.422 297.546C167.403 297.536 167.382 297.532 167.361 297.532C167.339 297.532 167.318 297.536 167.299 297.545C167.28 297.555 167.262 297.568 167.249 297.584C167.235 297.601 167.224 297.621 167.218 297.642C167.192 297.67 167.178 297.708 167.178 297.747C167.178 297.787 167.192 297.824 167.218 297.853C167.256 297.867 167.296 297.868 167.334 297.854C167.371 297.839 167.402 297.812 167.422 297.776Z",
                    fill: "#F8A5B3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.776C167.446 297.743 167.459 297.702 167.459 297.661C167.459 297.619 167.446 297.579 167.422 297.546C167.403 297.536 167.382 297.532 167.361 297.532C167.339 297.532 167.318 297.536 167.299 297.545C167.28 297.555 167.263 297.568 167.249 297.584C167.235 297.601 167.224 297.621 167.218 297.642C167.192 297.67 167.178 297.708 167.178 297.747C167.178 297.787 167.192 297.824 167.218 297.853C167.256 297.867 167.297 297.868 167.334 297.854C167.371 297.839 167.403 297.812 167.422 297.776Z",
                    fill: "#F8A6B4"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.757C167.442 297.726 167.453 297.689 167.453 297.651C167.453 297.614 167.442 297.577 167.422 297.546C167.403 297.536 167.382 297.532 167.361 297.532C167.339 297.532 167.318 297.536 167.299 297.545C167.28 297.555 167.262 297.568 167.249 297.584C167.235 297.601 167.224 297.621 167.218 297.642C167.192 297.67 167.178 297.708 167.178 297.747C167.178 297.787 167.192 297.824 167.218 297.853C167.258 297.866 167.3 297.863 167.338 297.846C167.376 297.828 167.406 297.796 167.422 297.757Z",
                    fill: "#F8A7B5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.757C167.442 297.726 167.453 297.689 167.453 297.651C167.453 297.614 167.442 297.577 167.422 297.546C167.403 297.536 167.382 297.532 167.361 297.532C167.339 297.532 167.318 297.536 167.299 297.545C167.28 297.555 167.262 297.568 167.249 297.584C167.235 297.601 167.224 297.621 167.218 297.642C167.192 297.67 167.178 297.708 167.178 297.747C167.178 297.787 167.192 297.824 167.218 297.853C167.258 297.866 167.3 297.863 167.338 297.846C167.376 297.828 167.406 297.796 167.422 297.757Z",
                    fill: "#F8A8B5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.757C167.448 297.728 167.462 297.69 167.462 297.651C167.462 297.612 167.448 297.574 167.422 297.546C167.401 297.528 167.377 297.517 167.351 297.511C167.325 297.505 167.299 297.506 167.273 297.513C167.248 297.521 167.224 297.534 167.205 297.552C167.185 297.571 167.17 297.594 167.161 297.619C167.152 297.645 167.148 297.673 167.151 297.7C167.154 297.727 167.164 297.753 167.178 297.776C167.193 297.799 167.212 297.817 167.235 297.831C167.258 297.844 167.284 297.852 167.311 297.853C167.336 297.85 167.36 297.839 167.38 297.822C167.4 297.805 167.414 297.782 167.422 297.757Z",
                    fill: "#F8A9B6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.757C167.448 297.728 167.463 297.69 167.463 297.651C167.463 297.612 167.448 297.574 167.422 297.545C167.383 297.536 167.342 297.54 167.305 297.558C167.268 297.575 167.238 297.604 167.219 297.641C167.21 297.661 167.205 297.683 167.205 297.705C167.205 297.727 167.21 297.749 167.218 297.769C167.227 297.789 167.24 297.807 167.256 297.821C167.272 297.836 167.291 297.846 167.311 297.853C167.337 297.85 167.361 297.839 167.381 297.822C167.401 297.805 167.415 297.782 167.422 297.757Z",
                    fill: "#F8AAB7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.757C167.448 297.728 167.463 297.69 167.463 297.651C167.463 297.612 167.448 297.574 167.422 297.545C167.383 297.536 167.342 297.54 167.305 297.558C167.268 297.575 167.238 297.604 167.219 297.641C167.21 297.661 167.205 297.683 167.205 297.705C167.205 297.727 167.21 297.749 167.218 297.769C167.227 297.789 167.24 297.807 167.256 297.821C167.272 297.836 167.291 297.846 167.311 297.853C167.337 297.85 167.361 297.839 167.381 297.822C167.401 297.805 167.415 297.782 167.422 297.757Z",
                    fill: "#F8ACB8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.757C167.434 297.745 167.444 297.73 167.451 297.713C167.458 297.697 167.461 297.679 167.461 297.661C167.461 297.643 167.458 297.625 167.451 297.609C167.444 297.592 167.434 297.578 167.422 297.565C167.395 297.538 167.358 297.523 167.32 297.523C167.282 297.523 167.246 297.538 167.219 297.565C167.21 297.585 167.205 297.607 167.205 297.629C167.205 297.651 167.21 297.672 167.218 297.693C167.227 297.713 167.24 297.73 167.256 297.745C167.272 297.759 167.291 297.77 167.311 297.776C167.349 297.785 167.389 297.778 167.422 297.757Z",
                    fill: "#F8ADB9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.421 297.757C167.433 297.745 167.443 297.73 167.45 297.713C167.457 297.697 167.46 297.679 167.46 297.661C167.46 297.643 167.457 297.625 167.45 297.609C167.443 297.592 167.433 297.578 167.421 297.565C167.394 297.538 167.357 297.523 167.319 297.523C167.281 297.523 167.245 297.538 167.217 297.565C167.209 297.606 167.213 297.649 167.229 297.687C167.246 297.725 167.274 297.756 167.31 297.776C167.348 297.783 167.387 297.777 167.421 297.757Z",
                    fill: "#F8AEBA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.424 297.757C167.436 297.745 167.446 297.73 167.452 297.713C167.459 297.697 167.463 297.679 167.463 297.661C167.463 297.643 167.459 297.625 167.452 297.609C167.446 297.592 167.436 297.578 167.424 297.565C167.396 297.538 167.36 297.523 167.322 297.523C167.284 297.523 167.247 297.538 167.22 297.565C167.208 297.603 167.211 297.645 167.229 297.681C167.246 297.716 167.276 297.744 167.313 297.757C167.33 297.766 167.349 297.77 167.368 297.77C167.387 297.77 167.406 297.766 167.424 297.757Z",
                    fill: "#F8AFBA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.424 297.757C167.436 297.745 167.446 297.73 167.452 297.713C167.459 297.697 167.463 297.679 167.463 297.661C167.463 297.643 167.459 297.625 167.452 297.609C167.446 297.592 167.436 297.578 167.424 297.565C167.396 297.538 167.36 297.523 167.322 297.523C167.284 297.523 167.247 297.538 167.22 297.565C167.208 297.603 167.211 297.645 167.229 297.681C167.246 297.716 167.276 297.744 167.313 297.757C167.33 297.766 167.349 297.77 167.368 297.77C167.387 297.77 167.406 297.766 167.424 297.757Z",
                    fill: "#F8B0BB"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.424 297.757C167.445 297.729 167.456 297.696 167.456 297.661C167.456 297.626 167.445 297.592 167.424 297.565C167.393 297.562 167.361 297.569 167.334 297.586C167.307 297.602 167.286 297.627 167.274 297.657C167.261 297.687 167.258 297.72 167.265 297.752C167.272 297.784 167.289 297.812 167.313 297.834C167.336 297.832 167.359 297.825 167.379 297.811C167.398 297.798 167.414 297.779 167.424 297.757Z",
                    fill: "#F8B1BC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.424 297.757C167.445 297.729 167.456 297.696 167.456 297.661C167.456 297.626 167.445 297.592 167.424 297.565C167.393 297.562 167.361 297.569 167.334 297.586C167.307 297.602 167.286 297.627 167.274 297.657C167.261 297.687 167.258 297.72 167.265 297.752C167.272 297.784 167.289 297.812 167.313 297.834C167.336 297.832 167.359 297.825 167.379 297.811C167.398 297.798 167.414 297.779 167.424 297.757Z",
                    fill: "#F9B2BD"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.757C167.439 297.728 167.447 297.695 167.447 297.661C167.447 297.628 167.439 297.594 167.423 297.565C167.411 297.553 167.396 297.542 167.38 297.535C167.364 297.529 167.347 297.525 167.33 297.525C167.313 297.525 167.296 297.529 167.28 297.535C167.264 297.542 167.25 297.553 167.238 297.565C167.222 297.584 167.211 297.605 167.206 297.629C167.2 297.652 167.2 297.677 167.205 297.7C167.21 297.724 167.221 297.746 167.236 297.765C167.251 297.783 167.269 297.798 167.291 297.807C167.312 297.817 167.336 297.821 167.359 297.819C167.382 297.818 167.405 297.811 167.425 297.798C167.445 297.786 167.462 297.769 167.474 297.748C167.487 297.728 167.495 297.705 167.497 297.681L167.423 297.757Z",
                    fill: "#F9B3BE"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.423 297.757C167.439 297.728 167.447 297.695 167.447 297.661C167.447 297.627 167.439 297.594 167.423 297.565C167.423 297.565 167.256 297.565 167.238 297.565C167.222 297.583 167.211 297.605 167.206 297.629C167.2 297.652 167.2 297.677 167.205 297.7C167.21 297.724 167.221 297.746 167.236 297.764C167.251 297.783 167.269 297.798 167.291 297.807C167.312 297.817 167.336 297.821 167.359 297.819C167.382 297.818 167.405 297.81 167.425 297.798C167.445 297.786 167.462 297.769 167.474 297.748C167.487 297.728 167.495 297.704 167.497 297.68L167.423 297.757Z",
                    fill: "#F9B4BF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.312 297.757C167.333 297.73 167.344 297.696 167.344 297.661C167.344 297.626 167.333 297.592 167.312 297.565C167.312 297.565 167.145 297.565 167.127 297.565C167.114 297.578 167.105 297.593 167.098 297.609C167.091 297.626 167.088 297.643 167.088 297.661C167.088 297.679 167.091 297.697 167.098 297.713C167.105 297.73 167.114 297.745 167.127 297.757C167.137 297.773 167.151 297.786 167.167 297.795C167.183 297.804 167.201 297.809 167.219 297.809C167.238 297.809 167.256 297.804 167.272 297.795C167.288 297.786 167.302 297.773 167.312 297.757Z",
                    fill: "#F9B5C0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.31 297.757C167.323 297.744 167.333 297.729 167.339 297.713C167.346 297.696 167.349 297.679 167.349 297.661C167.349 297.643 167.346 297.625 167.339 297.609C167.333 297.592 167.323 297.577 167.31 297.565C167.285 297.55 167.256 297.542 167.227 297.542C167.198 297.542 167.169 297.55 167.144 297.565C167.123 297.592 167.111 297.626 167.111 297.661C167.111 297.696 167.123 297.729 167.144 297.757C167.144 297.757 167.292 297.834 167.31 297.757Z",
                    fill: "#F9B6C0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.31 297.757C167.323 297.744 167.333 297.729 167.339 297.713C167.346 297.696 167.349 297.679 167.349 297.661C167.349 297.643 167.346 297.625 167.339 297.609C167.333 297.592 167.323 297.577 167.31 297.565C167.285 297.55 167.256 297.542 167.227 297.542C167.198 297.542 167.169 297.55 167.144 297.565C167.123 297.592 167.111 297.626 167.111 297.661C167.111 297.696 167.123 297.729 167.144 297.757C167.144 297.757 167.292 297.834 167.31 297.757Z",
                    fill: "#F9B7C1"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.31 297.757C167.322 297.746 167.332 297.733 167.338 297.718C167.345 297.703 167.348 297.687 167.348 297.67C167.348 297.654 167.345 297.638 167.338 297.623C167.332 297.608 167.322 297.595 167.31 297.584C167.287 297.564 167.258 297.552 167.227 297.552C167.197 297.552 167.167 297.564 167.144 297.584C167.123 297.611 167.111 297.645 167.111 297.68C167.111 297.715 167.123 297.749 167.144 297.776C167.17 297.791 167.2 297.797 167.23 297.793C167.26 297.79 167.288 297.777 167.31 297.757Z",
                    fill: "#F9B8C2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.313 297.757C167.324 297.746 167.334 297.733 167.34 297.718C167.347 297.703 167.35 297.687 167.35 297.67C167.35 297.654 167.347 297.638 167.34 297.623C167.334 297.608 167.324 297.595 167.313 297.584C167.289 297.564 167.26 297.552 167.229 297.552C167.199 297.552 167.169 297.564 167.146 297.584C167.13 297.613 167.121 297.646 167.121 297.68C167.121 297.714 167.13 297.747 167.146 297.776C167.172 297.791 167.202 297.797 167.232 297.793C167.262 297.79 167.29 297.777 167.313 297.757Z",
                    fill: "#F9B9C3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.311 297.757C167.311 297.757 167.311 297.603 167.311 297.584C167.288 297.564 167.259 297.552 167.228 297.552C167.198 297.552 167.168 297.564 167.145 297.584C167.128 297.609 167.119 297.639 167.119 297.67C167.119 297.701 167.128 297.731 167.145 297.757C167.155 297.769 167.168 297.779 167.182 297.786C167.197 297.792 167.212 297.796 167.228 297.796C167.244 297.796 167.259 297.792 167.274 297.786C167.288 297.779 167.301 297.769 167.311 297.757Z",
                    fill: "#F9BAC4"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.311 297.757C167.311 297.757 167.311 297.603 167.311 297.584C167.288 297.564 167.259 297.552 167.228 297.552C167.198 297.552 167.168 297.564 167.145 297.584C167.128 297.609 167.119 297.639 167.119 297.67C167.119 297.701 167.128 297.731 167.145 297.757C167.155 297.769 167.168 297.779 167.182 297.786C167.197 297.792 167.212 297.796 167.228 297.796C167.244 297.796 167.259 297.792 167.274 297.786C167.288 297.779 167.301 297.769 167.311 297.757Z",
                    fill: "#F9BBC5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.31 297.755C167.31 297.755 167.31 297.603 167.31 297.584C167.301 297.572 167.29 297.562 167.277 297.556C167.264 297.549 167.25 297.546 167.236 297.546C167.222 297.546 167.208 297.549 167.195 297.556C167.182 297.562 167.171 297.572 167.163 297.584C167.145 297.605 167.135 297.632 167.135 297.66C167.135 297.688 167.145 297.715 167.163 297.736C167.182 297.754 167.207 297.766 167.233 297.77C167.26 297.773 167.286 297.768 167.31 297.755Z",
                    fill: "#F9BCC6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.31 297.756C167.31 297.756 167.31 297.603 167.31 297.584C167.289 297.566 167.263 297.555 167.236 297.555C167.209 297.555 167.183 297.566 167.163 297.584C167.145 297.605 167.135 297.632 167.135 297.661C167.135 297.689 167.145 297.716 167.163 297.737C167.182 297.755 167.207 297.767 167.233 297.77C167.26 297.774 167.286 297.769 167.31 297.756Z",
                    fill: "#F9BDC6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.31 297.756C167.326 297.73 167.335 297.701 167.335 297.67C167.335 297.639 167.326 297.61 167.31 297.584C167.289 297.566 167.263 297.555 167.236 297.555C167.209 297.555 167.183 297.566 167.163 297.584C167.145 297.605 167.135 297.632 167.135 297.661C167.135 297.689 167.145 297.716 167.163 297.737C167.183 297.753 167.208 297.763 167.234 297.767C167.26 297.77 167.286 297.766 167.31 297.756Z",
                    fill: "#FABEC7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.31 297.756C167.326 297.73 167.335 297.701 167.335 297.67C167.335 297.639 167.326 297.61 167.31 297.584C167.289 297.566 167.263 297.555 167.236 297.555C167.209 297.555 167.183 297.566 167.163 297.584C167.145 297.605 167.135 297.632 167.135 297.661C167.135 297.689 167.145 297.716 167.163 297.737C167.183 297.753 167.208 297.763 167.234 297.767C167.26 297.77 167.286 297.766 167.31 297.756Z",
                    fill: "#FABFC8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.31 297.756C167.326 297.73 167.335 297.701 167.335 297.67C167.335 297.639 167.326 297.61 167.31 297.584C167.289 297.566 167.263 297.555 167.236 297.555C167.209 297.555 167.183 297.566 167.163 297.584C167.145 297.605 167.135 297.632 167.135 297.661C167.135 297.689 167.145 297.716 167.163 297.737C167.183 297.753 167.208 297.763 167.234 297.767C167.26 297.77 167.286 297.766 167.31 297.756Z",
                    fill: "#FAC0C9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.293 297.754C167.312 297.73 167.323 297.7 167.323 297.669C167.323 297.637 167.312 297.607 167.293 297.583C167.271 297.567 167.246 297.559 167.22 297.559C167.193 297.559 167.168 297.567 167.146 297.583C167.131 297.605 167.123 297.632 167.123 297.659C167.123 297.686 167.131 297.713 167.146 297.735C167.146 297.735 167.275 297.811 167.293 297.754Z",
                    fill: "#FAC1CA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.291 297.735C167.291 297.735 167.291 297.621 167.291 297.583C167.27 297.567 167.244 297.559 167.218 297.559C167.191 297.559 167.166 297.567 167.144 297.583C167.129 297.605 167.121 297.632 167.121 297.659C167.121 297.686 167.129 297.713 167.144 297.735C167.144 297.735 167.273 297.811 167.291 297.735Z",
                    fill: "#FAC2CB"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.291 297.736C167.308 297.719 167.317 297.695 167.317 297.67C167.317 297.645 167.308 297.621 167.291 297.603C167.271 297.584 167.245 297.574 167.218 297.574C167.191 297.574 167.164 297.584 167.144 297.603C167.129 297.625 167.121 297.652 167.121 297.679C167.121 297.706 167.129 297.733 167.144 297.755C167.168 297.768 167.194 297.773 167.221 297.77C167.247 297.767 167.272 297.755 167.291 297.736Z",
                    fill: "#FAC3CC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.291 297.737C167.308 297.719 167.317 297.695 167.317 297.67C167.317 297.645 167.308 297.621 167.291 297.604C167.291 297.604 167.181 297.604 167.144 297.604C167.129 297.626 167.121 297.652 167.121 297.68C167.121 297.707 167.129 297.733 167.144 297.756C167.168 297.769 167.194 297.774 167.221 297.77C167.247 297.767 167.272 297.755 167.291 297.737Z",
                    fill: "#FAC4CC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.293 297.737C167.309 297.719 167.319 297.695 167.319 297.67C167.319 297.645 167.309 297.621 167.293 297.604C167.293 297.604 167.182 297.604 167.146 297.604C167.132 297.623 167.125 297.646 167.125 297.67C167.125 297.694 167.132 297.717 167.146 297.737C167.146 297.737 167.274 297.794 167.293 297.737Z",
                    fill: "#FAC5CD"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.293 297.737C167.309 297.719 167.319 297.695 167.319 297.67C167.319 297.645 167.309 297.621 167.293 297.604C167.271 297.588 167.245 297.58 167.219 297.58C167.193 297.58 167.167 297.588 167.146 297.604C167.132 297.623 167.125 297.646 167.125 297.67C167.125 297.694 167.132 297.717 167.146 297.737C167.146 297.737 167.274 297.794 167.293 297.737Z",
                    fill: "#FAC6CE"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.293 297.738C167.293 297.712 167.283 297.688 167.265 297.67C167.248 297.652 167.225 297.642 167.2 297.642C167.175 297.642 167.152 297.652 167.135 297.67C167.117 297.688 167.107 297.712 167.107 297.738V297.872C167.125 297.898 167.151 297.915 167.18 297.92C167.21 297.926 167.24 297.919 167.265 297.901C167.289 297.883 167.306 297.856 167.311 297.825C167.316 297.795 167.31 297.763 167.293 297.738Z",
                    fill: "#FAC7CF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.293 297.736C167.306 297.723 167.315 297.706 167.318 297.687C167.322 297.669 167.32 297.65 167.313 297.632C167.307 297.615 167.295 297.6 167.28 297.589C167.265 297.579 167.247 297.573 167.228 297.573C167.21 297.573 167.192 297.579 167.177 297.589C167.162 297.6 167.15 297.615 167.144 297.632C167.137 297.65 167.135 297.669 167.139 297.687C167.142 297.706 167.151 297.723 167.164 297.736C167.181 297.754 167.204 297.763 167.228 297.763C167.253 297.763 167.276 297.754 167.293 297.736Z",
                    fill: "#FAC8D0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.293 297.736C167.306 297.723 167.315 297.706 167.318 297.687C167.322 297.669 167.32 297.65 167.313 297.632C167.307 297.615 167.295 297.6 167.28 297.589C167.265 297.579 167.247 297.573 167.228 297.573C167.21 297.573 167.192 297.579 167.177 297.589C167.162 297.6 167.15 297.615 167.144 297.632C167.137 297.65 167.135 297.669 167.139 297.687C167.142 297.706 167.151 297.723 167.164 297.736C167.181 297.754 167.204 297.763 167.228 297.763C167.253 297.763 167.276 297.754 167.293 297.736Z",
                    fill: "#FAC9D1"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.293 297.737C167.306 297.717 167.314 297.694 167.314 297.67C167.314 297.646 167.306 297.623 167.293 297.604C167.269 297.604 167.245 297.614 167.228 297.631C167.211 297.649 167.201 297.673 167.201 297.699C167.201 297.724 167.211 297.748 167.228 297.766C167.245 297.784 167.269 297.794 167.293 297.794C167.298 297.775 167.298 297.756 167.293 297.737Z",
                    fill: "#FBCAD2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.293 297.737C167.306 297.717 167.314 297.694 167.314 297.67C167.314 297.646 167.306 297.623 167.293 297.604C167.269 297.604 167.245 297.614 167.228 297.631C167.211 297.649 167.201 297.673 167.201 297.699C167.201 297.724 167.211 297.748 167.228 297.766C167.245 297.784 167.269 297.794 167.293 297.794C167.298 297.775 167.298 297.756 167.293 297.737Z",
                    fill: "#FBCBD2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.274 297.736C167.287 297.717 167.295 297.694 167.295 297.67C167.295 297.646 167.287 297.623 167.274 297.603C167.255 297.589 167.233 297.582 167.21 297.582C167.187 297.582 167.164 297.589 167.145 297.603C167.129 297.621 167.119 297.645 167.119 297.67C167.119 297.695 167.129 297.719 167.145 297.736H167.274Z",
                    fill: "#FBCCD3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.274 297.736C167.287 297.717 167.295 297.694 167.295 297.67C167.295 297.646 167.287 297.623 167.274 297.603C167.255 297.589 167.233 297.582 167.21 297.582C167.187 297.582 167.164 297.589 167.145 297.603C167.129 297.621 167.119 297.645 167.119 297.67C167.119 297.695 167.129 297.719 167.145 297.736H167.274Z",
                    fill: "#FBCDD4"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.256 297.737V297.623C167.256 297.623 167.256 297.623 167.164 297.623V297.718C167.164 297.718 167.256 297.775 167.256 297.737Z",
                    fill: "#FCD7DD"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.256 297.738V297.871C167.256 297.871 167.238 297.776 167.256 297.738Z",
                    fill: "#FCD9DE"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.255 297.719C167.255 297.719 167.239 297.752 167.255 297.719V297.719Z",
                    fill: "#FCE0E4"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.255 297.719C167.255 297.719 167.239 297.752 167.255 297.719V297.719Z",
                    fill: "#FCE1E5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.238 297.719C167.238 297.719 167.221 297.736 167.238 297.719V297.719Z",
                    fill: "#FDE7EA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.238 297.719C167.238 297.719 167.221 297.736 167.238 297.719V297.719Z",
                    fill: "#FDE8EB"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.238 297.719C167.238 297.719 167.221 297.736 167.238 297.719V297.719Z",
                    fill: "#FDE9EC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.238 297.719C167.238 297.719 167.221 297.736 167.238 297.719V297.719Z",
                    fill: "#FDEAED"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M167.197 297.7H167.182V297.716L167.197 297.7Z",
                    fill: "#FEF9FA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M167.197 297.7H167.182L167.197 297.716V297.7Z",
                    fill: "#FFFAFB"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M167.197 297.7H167.182L167.197 297.716V297.7Z",
                    fill: "#FFFBFC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.424 297.047L167.275 297.412H167.387V297.105L167.424 297.047Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.164 297.431L167.312 297.047V297.373L167.164 297.431ZM167.331 297.066L167.201 297.393H167.294V297.085L167.331 297.066Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 296.911H167.33C167.33 296.911 167.33 297.007 167.33 297.026V296.931V296.835L167.422 296.911Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 297.102C167.396 297.097 167.372 297.083 167.356 297.062C167.339 297.041 167.33 297.015 167.33 296.987C167.334 296.961 167.348 296.936 167.368 296.919C167.388 296.901 167.414 296.892 167.44 296.892C167.45 296.91 167.455 296.929 167.455 296.949C167.455 296.969 167.45 296.989 167.44 297.007C167.446 297.023 167.447 297.04 167.444 297.057C167.44 297.073 167.433 297.089 167.422 297.102ZM167.422 296.911C167.422 296.911 167.422 296.911 167.33 296.911V297.007V296.911H167.422Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.33 297.795L172.979 298.179H173.127L173.349 297.872L173.33 297.795Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.145 298.179H172.979L173.349 297.814L173.145 298.179ZM173.016 298.179H173.127L173.367 297.872L173.016 298.179Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.497 297.66C173.473 297.64 173.444 297.629 173.413 297.629C173.383 297.629 173.353 297.64 173.33 297.66C173.318 297.669 173.309 297.681 173.303 297.694C173.296 297.708 173.293 297.722 173.293 297.737C173.293 297.752 173.296 297.767 173.303 297.78C173.309 297.794 173.318 297.805 173.33 297.814C173.355 297.831 173.384 297.841 173.413 297.841C173.443 297.841 173.472 297.831 173.497 297.814C173.515 297.793 173.525 297.766 173.525 297.737C173.525 297.709 173.515 297.682 173.497 297.66Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.422 297.891C173.422 297.891 173.422 297.891 173.422 297.795C173.439 297.784 173.458 297.779 173.477 297.779C173.497 297.779 173.516 297.784 173.533 297.795C173.541 297.832 173.541 297.872 173.533 297.91C173.514 297.916 173.494 297.917 173.475 297.913C173.456 297.91 173.438 297.902 173.422 297.891ZM173.422 297.66H173.311C173.325 297.669 173.341 297.673 173.357 297.673C173.373 297.673 173.389 297.669 173.403 297.66C173.403 297.66 173.403 297.66 173.403 297.66H173.422Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.683 295.894L164.868 296.297V296.182L164.664 295.875L164.683 295.894Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.867 296.259L164.682 295.817L164.904 296.143L164.867 296.259ZM164.7 295.836L164.867 296.22V296.124L164.682 295.836H164.7Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.608 295.702C164.589 295.726 164.578 295.757 164.578 295.788C164.578 295.82 164.589 295.85 164.608 295.875C164.629 295.894 164.655 295.904 164.682 295.904C164.71 295.904 164.736 295.894 164.757 295.875C164.769 295.865 164.779 295.852 164.786 295.838C164.794 295.824 164.799 295.808 164.8 295.792C164.802 295.776 164.801 295.76 164.796 295.744C164.792 295.729 164.785 295.714 164.775 295.702C164.765 295.689 164.753 295.679 164.74 295.671C164.726 295.663 164.711 295.658 164.696 295.657C164.68 295.655 164.664 295.656 164.649 295.661C164.635 295.665 164.621 295.673 164.608 295.683V295.702Z",
                    fill: "#FCCA3E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.701 295.912C164.684 295.92 164.665 295.924 164.646 295.924C164.627 295.924 164.608 295.92 164.591 295.912C164.571 295.888 164.561 295.857 164.561 295.826C164.561 295.795 164.571 295.764 164.591 295.74C164.591 295.74 164.591 295.74 164.682 295.74C164.694 295.751 164.703 295.764 164.71 295.779C164.716 295.794 164.72 295.81 164.72 295.826C164.72 295.842 164.716 295.858 164.71 295.873C164.703 295.888 164.694 295.901 164.682 295.912H164.701ZM164.701 295.702V295.835V295.702C164.701 295.702 164.719 295.702 164.682 295.702H164.701Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.513 297.698C173.49 297.678 173.461 297.667 173.43 297.667C173.4 297.667 173.371 297.678 173.348 297.698V297.832V297.717L173.513 297.698Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.31 297.928H173.182L173.384 297.738L173.31 297.928Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.664 295.683C164.664 295.683 164.664 295.797 164.664 295.836C164.664 295.874 164.756 295.836 164.793 295.836C164.829 295.836 164.793 295.836 164.793 295.836H164.682V295.721L164.664 295.683Z",
                    fill: "#AA8C30"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M165.405 296.258H164.775V297.084H165.405V296.258Z",
                    fill: "#F15770"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.07 296.355C165.031 296.36 164.994 296.373 164.959 296.393C164.925 296.413 164.895 296.439 164.871 296.472C164.847 296.504 164.829 296.541 164.819 296.58C164.809 296.619 164.806 296.66 164.811 296.701C164.813 296.74 164.823 296.779 164.841 296.815C164.858 296.85 164.882 296.881 164.912 296.907C164.941 296.932 164.976 296.95 165.013 296.961C165.049 296.972 165.088 296.975 165.126 296.97C165.164 296.968 165.201 296.957 165.234 296.939C165.267 296.921 165.297 296.896 165.319 296.864C165.342 296.833 165.359 296.797 165.367 296.759C165.375 296.721 165.375 296.681 165.367 296.643C165.367 296.604 165.359 296.565 165.344 296.528C165.329 296.492 165.307 296.459 165.279 296.432C165.251 296.405 165.218 296.385 165.182 296.371C165.147 296.358 165.108 296.352 165.07 296.355Z",
                    fill: "#F15770"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.07 296.354C165.031 296.359 164.994 296.372 164.959 296.392C164.925 296.412 164.895 296.439 164.871 296.471C164.847 296.503 164.829 296.54 164.819 296.579C164.809 296.619 164.806 296.66 164.811 296.7C164.82 296.778 164.858 296.85 164.917 296.9C164.975 296.95 165.05 296.974 165.126 296.969C165.164 296.967 165.201 296.957 165.234 296.939C165.267 296.92 165.297 296.895 165.319 296.864C165.342 296.833 165.359 296.797 165.367 296.758C165.375 296.72 165.375 296.681 165.367 296.643C165.362 296.564 165.329 296.491 165.274 296.438C165.219 296.384 165.146 296.354 165.07 296.354Z",
                    fill: "#F15871"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.354C164.997 296.372 164.93 296.416 164.883 296.479C164.835 296.542 164.811 296.62 164.813 296.7C164.822 296.778 164.86 296.85 164.918 296.9C164.977 296.95 165.052 296.974 165.127 296.969C165.164 296.964 165.199 296.952 165.231 296.933C165.263 296.914 165.291 296.888 165.314 296.858C165.336 296.828 165.353 296.793 165.362 296.756C165.371 296.719 165.373 296.68 165.368 296.643C165.363 296.564 165.33 296.491 165.275 296.438C165.22 296.384 165.147 296.354 165.072 296.354Z",
                    fill: "#F15972"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.354C164.997 296.372 164.93 296.416 164.883 296.479C164.835 296.542 164.811 296.62 164.813 296.7C164.822 296.778 164.86 296.85 164.918 296.9C164.977 296.95 165.052 296.974 165.127 296.969C165.164 296.964 165.199 296.952 165.231 296.933C165.263 296.914 165.291 296.888 165.314 296.858C165.336 296.828 165.353 296.793 165.362 296.756C165.371 296.719 165.373 296.68 165.368 296.643C165.363 296.564 165.33 296.491 165.275 296.438C165.22 296.384 165.147 296.354 165.072 296.354Z",
                    fill: "#F15A73"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.354C164.996 296.369 164.929 296.412 164.884 296.477C164.839 296.541 164.82 296.621 164.831 296.7C164.833 296.738 164.843 296.775 164.859 296.809C164.875 296.843 164.898 296.873 164.925 296.898C164.953 296.923 164.985 296.942 165.02 296.955C165.054 296.967 165.091 296.972 165.127 296.969C165.206 296.969 165.281 296.937 165.337 296.879C165.392 296.821 165.424 296.743 165.424 296.662C165.424 296.58 165.392 296.502 165.337 296.444C165.281 296.387 165.206 296.354 165.127 296.354H165.072Z",
                    fill: "#F15B73"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.354C165 296.368 164.935 296.41 164.891 296.47C164.847 296.53 164.825 296.605 164.831 296.681C164.831 296.72 164.839 296.76 164.854 296.796C164.869 296.832 164.891 296.865 164.919 296.892C164.947 296.919 164.979 296.939 165.015 296.953C165.051 296.966 165.089 296.972 165.127 296.969C165.199 296.955 165.263 296.914 165.308 296.854C165.352 296.793 165.374 296.718 165.368 296.643C165.363 296.564 165.33 296.491 165.275 296.438C165.22 296.384 165.147 296.354 165.072 296.354Z",
                    fill: "#F15C74"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.354C165 296.368 164.935 296.41 164.891 296.47C164.847 296.53 164.825 296.605 164.831 296.681C164.831 296.72 164.839 296.76 164.854 296.796C164.869 296.832 164.891 296.865 164.919 296.892C164.947 296.919 164.979 296.939 165.015 296.953C165.051 296.966 165.089 296.972 165.127 296.969C165.199 296.955 165.263 296.914 165.308 296.854C165.352 296.793 165.374 296.718 165.368 296.643C165.363 296.564 165.33 296.491 165.275 296.438C165.22 296.384 165.147 296.354 165.072 296.354Z",
                    fill: "#F25D75"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.354C165 296.368 164.935 296.41 164.891 296.47C164.847 296.53 164.825 296.605 164.831 296.681C164.836 296.759 164.869 296.832 164.924 296.886C164.979 296.939 165.052 296.969 165.127 296.969C165.199 296.955 165.263 296.914 165.308 296.854C165.352 296.793 165.374 296.718 165.368 296.643C165.363 296.564 165.33 296.491 165.275 296.438C165.22 296.384 165.147 296.354 165.072 296.354Z",
                    fill: "#F25E76"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.07 296.374C165.035 296.376 165 296.386 164.968 296.403C164.936 296.42 164.908 296.444 164.885 296.473C164.862 296.501 164.846 296.535 164.836 296.571C164.827 296.607 164.824 296.644 164.83 296.681C164.819 296.724 164.817 296.768 164.826 296.812C164.834 296.855 164.852 296.895 164.878 296.93C164.904 296.965 164.937 296.994 164.975 297.013C165.014 297.033 165.056 297.043 165.098 297.043C165.141 297.043 165.183 297.033 165.221 297.013C165.259 296.994 165.292 296.965 165.318 296.93C165.344 296.895 165.362 296.855 165.37 296.812C165.379 296.768 165.378 296.724 165.367 296.681C165.369 296.64 165.364 296.599 165.35 296.56C165.336 296.522 165.314 296.487 165.286 296.457C165.258 296.428 165.224 296.406 165.187 296.391C165.15 296.377 165.11 296.371 165.07 296.374Z",
                    fill: "#F25F77"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.07 296.374C165.035 296.376 165 296.386 164.968 296.403C164.936 296.42 164.908 296.444 164.885 296.473C164.862 296.501 164.846 296.535 164.836 296.571C164.827 296.607 164.824 296.644 164.83 296.681C164.819 296.724 164.817 296.768 164.826 296.812C164.834 296.855 164.852 296.895 164.878 296.93C164.904 296.965 164.937 296.994 164.975 297.013C165.014 297.033 165.056 297.043 165.098 297.043C165.141 297.043 165.183 297.033 165.221 297.013C165.259 296.994 165.292 296.965 165.318 296.93C165.344 296.895 165.362 296.855 165.37 296.812C165.379 296.768 165.378 296.724 165.367 296.681C165.369 296.64 165.364 296.599 165.35 296.56C165.336 296.522 165.314 296.487 165.286 296.457C165.258 296.428 165.224 296.406 165.187 296.391C165.15 296.377 165.11 296.371 165.07 296.374Z",
                    fill: "#F26078"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.374C164.997 296.374 164.926 296.404 164.874 296.458C164.822 296.512 164.793 296.586 164.793 296.662C164.793 296.738 164.822 296.812 164.874 296.866C164.926 296.92 164.997 296.95 165.071 296.95C165.145 296.95 165.215 296.92 165.267 296.866C165.319 296.812 165.349 296.738 165.349 296.662C165.349 296.586 165.319 296.512 165.267 296.458C165.215 296.404 165.145 296.374 165.071 296.374Z",
                    fill: "#F26179"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.374C164.997 296.374 164.926 296.404 164.874 296.458C164.822 296.512 164.793 296.586 164.793 296.662C164.793 296.738 164.822 296.812 164.874 296.866C164.926 296.92 164.997 296.95 165.071 296.95C165.105 296.945 165.138 296.934 165.168 296.916C165.197 296.897 165.223 296.873 165.244 296.845C165.265 296.816 165.28 296.784 165.288 296.749C165.297 296.714 165.298 296.678 165.293 296.643C165.295 296.61 165.292 296.577 165.282 296.546C165.272 296.514 165.256 296.485 165.236 296.46C165.215 296.435 165.19 296.415 165.162 296.4C165.133 296.385 165.102 296.376 165.071 296.374Z",
                    fill: "#F26279"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.374C164.997 296.374 164.926 296.404 164.874 296.458C164.822 296.512 164.793 296.586 164.793 296.662C164.793 296.738 164.822 296.812 164.874 296.866C164.926 296.92 164.997 296.95 165.071 296.95C165.105 296.945 165.138 296.934 165.168 296.916C165.197 296.897 165.223 296.873 165.244 296.845C165.265 296.816 165.28 296.784 165.288 296.749C165.297 296.714 165.298 296.678 165.293 296.643C165.295 296.61 165.292 296.577 165.282 296.546C165.272 296.514 165.256 296.485 165.236 296.46C165.215 296.435 165.19 296.415 165.162 296.4C165.133 296.385 165.102 296.376 165.071 296.374Z",
                    fill: "#F2637A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.374C165.001 296.384 164.937 296.421 164.892 296.478C164.847 296.535 164.826 296.608 164.831 296.681C164.831 296.752 164.858 296.821 164.907 296.871C164.955 296.922 165.021 296.95 165.09 296.95C165.159 296.95 165.225 296.922 165.273 296.871C165.322 296.821 165.349 296.752 165.349 296.681C165.355 296.641 165.352 296.6 165.34 296.562C165.329 296.523 165.309 296.488 165.282 296.458C165.255 296.428 165.223 296.406 165.186 296.391C165.15 296.376 165.111 296.371 165.072 296.374Z",
                    fill: "#F2647B"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.374C165.001 296.384 164.937 296.421 164.892 296.478C164.847 296.535 164.826 296.608 164.831 296.681C164.831 296.752 164.858 296.821 164.907 296.871C164.955 296.922 165.021 296.95 165.09 296.95C165.159 296.95 165.225 296.922 165.273 296.871C165.322 296.821 165.349 296.752 165.349 296.681C165.355 296.641 165.352 296.6 165.34 296.562C165.329 296.523 165.309 296.488 165.282 296.458C165.255 296.428 165.223 296.406 165.186 296.391C165.15 296.376 165.111 296.371 165.072 296.374Z",
                    fill: "#F2657C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.374C165.001 296.384 164.937 296.421 164.892 296.478C164.847 296.535 164.826 296.608 164.831 296.681C164.831 296.752 164.858 296.821 164.907 296.871C164.955 296.922 165.021 296.95 165.09 296.95C165.159 296.95 165.225 296.922 165.273 296.871C165.322 296.821 165.349 296.752 165.349 296.681C165.352 296.642 165.347 296.602 165.334 296.565C165.321 296.528 165.301 296.494 165.275 296.465C165.249 296.436 165.217 296.413 165.182 296.398C165.147 296.382 165.11 296.374 165.072 296.374Z",
                    fill: "#F2667D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.374C165.037 296.379 165.004 296.39 164.974 296.408C164.944 296.427 164.918 296.451 164.898 296.479C164.877 296.508 164.862 296.54 164.853 296.575C164.845 296.61 164.843 296.646 164.849 296.681C164.845 296.719 164.851 296.757 164.864 296.793C164.877 296.828 164.897 296.86 164.924 296.886C164.951 296.912 164.983 296.931 165.018 296.942C165.053 296.953 165.09 296.956 165.126 296.95C165.193 296.936 165.253 296.897 165.294 296.84C165.335 296.784 165.355 296.713 165.349 296.643C165.34 296.571 165.308 296.505 165.257 296.456C165.206 296.407 165.14 296.378 165.071 296.374Z",
                    fill: "#F2677E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.374C165.037 296.379 165.004 296.39 164.974 296.408C164.945 296.427 164.919 296.451 164.898 296.479C164.877 296.508 164.862 296.54 164.854 296.575C164.845 296.61 164.844 296.646 164.849 296.681C164.839 296.721 164.837 296.763 164.845 296.804C164.852 296.844 164.869 296.882 164.893 296.915C164.917 296.948 164.948 296.975 164.984 296.993C165.02 297.012 165.059 297.021 165.099 297.021C165.139 297.021 165.178 297.012 165.214 296.993C165.25 296.975 165.281 296.948 165.305 296.915C165.329 296.882 165.346 296.844 165.354 296.804C165.361 296.763 165.36 296.721 165.349 296.681C165.349 296.603 165.321 296.528 165.269 296.47C165.217 296.413 165.147 296.379 165.071 296.374Z",
                    fill: "#F2687F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.393C165.037 296.392 165.002 296.399 164.971 296.414C164.94 296.429 164.912 296.452 164.891 296.48C164.869 296.508 164.854 296.54 164.847 296.575C164.84 296.61 164.84 296.647 164.849 296.681C164.854 296.754 164.885 296.823 164.937 296.873C164.988 296.923 165.056 296.95 165.127 296.95C165.194 296.936 165.253 296.897 165.294 296.841C165.335 296.784 165.355 296.714 165.349 296.643C165.346 296.608 165.337 296.573 165.322 296.541C165.307 296.51 165.286 296.482 165.26 296.458C165.234 296.435 165.204 296.417 165.172 296.406C165.139 296.395 165.105 296.391 165.071 296.393Z",
                    fill: "#F3697F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.393C165.037 296.396 165.005 296.405 164.975 296.421C164.946 296.437 164.919 296.459 164.898 296.487C164.878 296.514 164.862 296.545 164.854 296.579C164.845 296.612 164.843 296.647 164.849 296.681C164.853 296.754 164.885 296.823 164.936 296.873C164.988 296.923 165.056 296.95 165.126 296.95C165.193 296.936 165.253 296.897 165.294 296.841C165.335 296.784 165.355 296.714 165.349 296.643C165.346 296.608 165.337 296.573 165.322 296.541C165.307 296.51 165.286 296.482 165.26 296.458C165.234 296.435 165.204 296.417 165.172 296.406C165.139 296.395 165.105 296.391 165.071 296.393Z",
                    fill: "#F36A80"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.393C165.038 296.396 165.005 296.405 164.976 296.421C164.946 296.437 164.92 296.459 164.899 296.487C164.878 296.514 164.863 296.545 164.854 296.579C164.846 296.612 164.844 296.647 164.849 296.681C164.839 296.721 164.837 296.763 164.845 296.804C164.852 296.844 164.869 296.883 164.893 296.916C164.917 296.948 164.948 296.975 164.984 296.994C165.02 297.012 165.059 297.021 165.099 297.021C165.139 297.021 165.178 297.012 165.214 296.994C165.25 296.975 165.281 296.948 165.305 296.916C165.329 296.883 165.346 296.844 165.354 296.804C165.361 296.763 165.36 296.721 165.349 296.681C165.352 296.643 165.347 296.604 165.334 296.568C165.321 296.532 165.3 296.499 165.274 296.471C165.247 296.444 165.216 296.423 165.181 296.409C165.146 296.396 165.108 296.391 165.071 296.393Z",
                    fill: "#F36B81"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.393C165.003 296.393 164.937 296.421 164.888 296.471C164.84 296.522 164.813 296.59 164.812 296.661C164.813 296.733 164.84 296.801 164.888 296.852C164.937 296.902 165.003 296.93 165.072 296.93C165.105 296.929 165.137 296.919 165.166 296.903C165.195 296.887 165.22 296.864 165.239 296.836C165.259 296.809 165.272 296.777 165.278 296.744C165.285 296.71 165.284 296.675 165.275 296.642C165.276 296.582 165.256 296.524 165.218 296.478C165.181 296.432 165.129 296.402 165.072 296.393Z",
                    fill: "#F36C82"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.073 296.393C165.007 296.403 164.948 296.438 164.906 296.492C164.865 296.545 164.845 296.613 164.85 296.681C164.853 296.717 164.862 296.751 164.877 296.783C164.892 296.815 164.914 296.843 164.939 296.866C164.965 296.889 164.995 296.907 165.028 296.918C165.06 296.929 165.094 296.934 165.128 296.931C165.161 296.929 165.193 296.92 165.222 296.904C165.251 296.888 165.277 296.865 165.296 296.837C165.316 296.81 165.329 296.778 165.335 296.744C165.341 296.711 165.34 296.676 165.332 296.643C165.332 296.609 165.325 296.574 165.312 296.543C165.299 296.511 165.279 296.483 165.255 296.459C165.231 296.436 165.202 296.418 165.171 296.407C165.139 296.395 165.106 296.391 165.073 296.393Z",
                    fill: "#F36D83"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.073 296.393C165.007 296.402 164.948 296.437 164.906 296.491C164.865 296.544 164.845 296.612 164.85 296.681C164.853 296.716 164.862 296.751 164.877 296.782C164.892 296.814 164.914 296.842 164.939 296.865C164.965 296.889 164.995 296.906 165.028 296.917C165.06 296.929 165.094 296.933 165.128 296.93C165.197 296.93 165.263 296.902 165.312 296.852C165.36 296.801 165.388 296.733 165.388 296.661C165.388 296.59 165.36 296.522 165.312 296.471C165.263 296.421 165.197 296.393 165.128 296.393H165.073Z",
                    fill: "#F36E84"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.393C165.008 296.406 164.951 296.442 164.911 296.495C164.87 296.548 164.848 296.613 164.85 296.681C164.852 296.716 164.861 296.751 164.876 296.782C164.892 296.814 164.913 296.842 164.939 296.865C164.964 296.889 164.994 296.906 165.027 296.917C165.059 296.929 165.093 296.933 165.127 296.93C165.196 296.93 165.262 296.902 165.311 296.852C165.359 296.801 165.387 296.733 165.387 296.661C165.387 296.59 165.359 296.522 165.311 296.471C165.262 296.421 165.196 296.393 165.127 296.393H165.072Z",
                    fill: "#F36F85"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.393C165.008 296.406 164.951 296.442 164.911 296.495C164.87 296.548 164.848 296.613 164.85 296.681C164.852 296.716 164.861 296.751 164.876 296.782C164.892 296.814 164.913 296.842 164.939 296.865C164.964 296.889 164.994 296.906 165.027 296.917C165.059 296.929 165.093 296.933 165.127 296.93C165.159 296.926 165.19 296.914 165.217 296.897C165.245 296.88 165.269 296.858 165.288 296.831C165.307 296.804 165.32 296.773 165.328 296.741C165.335 296.709 165.336 296.675 165.331 296.642C165.326 296.574 165.297 296.511 165.249 296.464C165.201 296.418 165.138 296.392 165.072 296.393Z",
                    fill: "#F37085"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.393C165.008 296.406 164.951 296.442 164.911 296.495C164.87 296.548 164.848 296.613 164.85 296.681C164.852 296.716 164.861 296.751 164.876 296.782C164.892 296.814 164.913 296.842 164.939 296.865C164.964 296.889 164.994 296.906 165.027 296.917C165.059 296.929 165.093 296.933 165.127 296.93C165.159 296.926 165.19 296.914 165.217 296.897C165.245 296.88 165.269 296.858 165.288 296.831C165.307 296.804 165.32 296.773 165.328 296.741C165.335 296.709 165.336 296.675 165.331 296.642C165.326 296.574 165.297 296.511 165.249 296.464C165.201 296.418 165.138 296.392 165.072 296.393Z",
                    fill: "#F37186"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.393C165.019 296.393 164.968 296.409 164.925 296.44C164.882 296.47 164.849 296.513 164.83 296.564C164.811 296.614 164.807 296.669 164.819 296.721C164.831 296.774 164.857 296.822 164.895 296.859C164.933 296.895 164.981 296.919 165.033 296.927C165.084 296.935 165.137 296.927 165.184 296.904C165.231 296.881 165.27 296.843 165.296 296.796C165.322 296.75 165.334 296.696 165.33 296.642C165.326 296.574 165.296 296.511 165.248 296.464C165.2 296.418 165.137 296.392 165.071 296.393Z",
                    fill: "#F37287"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.412C165.041 296.414 165.011 296.423 164.984 296.438C164.956 296.454 164.932 296.474 164.913 296.5C164.894 296.525 164.88 296.554 164.872 296.586C164.864 296.617 164.863 296.649 164.868 296.681C164.868 296.716 164.875 296.75 164.888 296.781C164.902 296.813 164.921 296.841 164.945 296.865C164.97 296.888 164.999 296.906 165.03 296.918C165.061 296.929 165.095 296.933 165.128 296.931C165.19 296.917 165.245 296.88 165.282 296.827C165.32 296.774 165.337 296.708 165.331 296.643C165.329 296.61 165.321 296.578 165.306 296.548C165.292 296.519 165.272 296.493 165.248 296.472C165.224 296.45 165.196 296.434 165.166 296.424C165.136 296.414 165.104 296.41 165.072 296.412Z",
                    fill: "#F37388"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.412C165.041 296.414 165.011 296.423 164.984 296.438C164.956 296.454 164.932 296.474 164.913 296.5C164.894 296.525 164.88 296.554 164.872 296.586C164.864 296.617 164.863 296.649 164.868 296.681C164.868 296.716 164.875 296.75 164.888 296.781C164.902 296.813 164.921 296.841 164.945 296.865C164.97 296.888 164.999 296.906 165.03 296.918C165.061 296.929 165.095 296.933 165.128 296.931C165.188 296.914 165.241 296.876 165.278 296.823C165.315 296.771 165.334 296.708 165.331 296.643C165.329 296.61 165.321 296.578 165.306 296.548C165.292 296.519 165.272 296.493 165.248 296.472C165.224 296.45 165.196 296.434 165.166 296.424C165.136 296.414 165.104 296.41 165.072 296.412Z",
                    fill: "#F37489"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.412C165.041 296.414 165.011 296.423 164.983 296.438C164.956 296.454 164.932 296.474 164.913 296.5C164.894 296.525 164.88 296.554 164.872 296.586C164.864 296.617 164.863 296.649 164.868 296.681C164.871 296.714 164.879 296.746 164.894 296.775C164.908 296.805 164.928 296.831 164.952 296.852C164.976 296.874 165.004 296.89 165.034 296.9C165.064 296.91 165.096 296.914 165.128 296.912C165.239 296.912 165.331 296.777 165.331 296.643C165.329 296.61 165.32 296.578 165.306 296.548C165.292 296.519 165.272 296.493 165.248 296.472C165.224 296.45 165.196 296.434 165.166 296.424C165.136 296.414 165.104 296.41 165.072 296.412Z",
                    fill: "#F4758A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.413C165.041 296.416 165.011 296.425 164.983 296.44C164.956 296.455 164.932 296.476 164.913 296.501C164.894 296.526 164.88 296.556 164.872 296.587C164.864 296.618 164.863 296.651 164.868 296.682C164.868 296.714 164.875 296.746 164.887 296.775C164.899 296.804 164.917 296.831 164.94 296.852C164.963 296.874 164.989 296.891 165.018 296.901C165.048 296.911 165.078 296.915 165.109 296.913C165.173 296.913 165.234 296.886 165.279 296.84C165.324 296.793 165.35 296.729 165.35 296.663C165.35 296.597 165.324 296.533 165.279 296.487C165.234 296.44 165.173 296.413 165.109 296.413H165.072Z",
                    fill: "#F4768B"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.412C165.041 296.414 165.011 296.423 164.984 296.438C164.956 296.454 164.932 296.474 164.913 296.5C164.894 296.525 164.88 296.554 164.872 296.586C164.864 296.617 164.863 296.649 164.868 296.681C164.868 296.713 164.875 296.745 164.887 296.774C164.899 296.803 164.917 296.83 164.94 296.851C164.963 296.873 164.989 296.89 165.018 296.9C165.048 296.91 165.079 296.914 165.109 296.912C165.14 296.909 165.17 296.9 165.198 296.885C165.225 296.87 165.249 296.849 165.269 296.824C165.288 296.799 165.302 296.77 165.309 296.738C165.317 296.707 165.318 296.675 165.313 296.643C165.313 296.611 165.307 296.579 165.294 296.55C165.282 296.521 165.264 296.494 165.241 296.473C165.219 296.451 165.192 296.434 165.163 296.424C165.134 296.414 165.103 296.41 165.072 296.412Z",
                    fill: "#F4778B"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.412C165.041 296.414 165.011 296.423 164.984 296.438C164.956 296.454 164.932 296.474 164.913 296.5C164.894 296.525 164.88 296.554 164.872 296.586C164.864 296.617 164.863 296.649 164.868 296.681C164.868 296.816 164.998 296.931 165.109 296.912C165.14 296.909 165.17 296.9 165.198 296.885C165.225 296.87 165.249 296.849 165.269 296.824C165.288 296.799 165.302 296.77 165.309 296.738C165.317 296.707 165.318 296.675 165.313 296.643C165.313 296.611 165.307 296.579 165.294 296.55C165.282 296.521 165.264 296.494 165.241 296.473C165.219 296.451 165.192 296.434 165.163 296.424C165.134 296.414 165.103 296.41 165.072 296.412Z",
                    fill: "#F4788C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.412C165.011 296.422 164.956 296.455 164.919 296.505C164.881 296.555 164.863 296.618 164.868 296.681C164.868 296.816 164.998 296.931 165.109 296.912C165.14 296.909 165.17 296.9 165.198 296.885C165.225 296.87 165.249 296.849 165.268 296.824C165.287 296.799 165.301 296.77 165.309 296.738C165.317 296.707 165.318 296.675 165.313 296.643C165.313 296.611 165.306 296.579 165.294 296.55C165.282 296.521 165.264 296.494 165.241 296.473C165.218 296.451 165.192 296.434 165.163 296.424C165.133 296.414 165.103 296.41 165.072 296.412Z",
                    fill: "#F4798D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.413C165.011 296.423 164.956 296.456 164.919 296.506C164.881 296.556 164.863 296.619 164.868 296.682C164.868 296.817 164.998 296.932 165.109 296.913C165.173 296.913 165.234 296.886 165.279 296.84C165.324 296.793 165.35 296.729 165.35 296.663C165.35 296.597 165.324 296.533 165.279 296.487C165.234 296.44 165.173 296.413 165.109 296.413H165.072Z",
                    fill: "#F47A8E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.413C165.012 296.427 164.96 296.461 164.923 296.51C164.885 296.559 164.866 296.62 164.867 296.682C164.867 296.817 164.997 296.932 165.108 296.913C165.139 296.911 165.169 296.902 165.197 296.887C165.224 296.871 165.248 296.851 165.267 296.825C165.287 296.8 165.3 296.771 165.308 296.739C165.316 296.708 165.317 296.676 165.312 296.644C165.307 296.581 165.28 296.522 165.235 296.48C165.19 296.437 165.132 296.413 165.071 296.413Z",
                    fill: "#F47B8F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.413C165.012 296.427 164.96 296.461 164.923 296.51C164.885 296.559 164.866 296.62 164.867 296.682C164.876 296.744 164.904 296.8 164.948 296.842C164.992 296.884 165.048 296.909 165.108 296.913C165.139 296.911 165.169 296.902 165.197 296.886C165.224 296.871 165.248 296.851 165.267 296.825C165.287 296.8 165.3 296.771 165.308 296.739C165.316 296.708 165.317 296.676 165.312 296.644C165.307 296.581 165.28 296.522 165.235 296.48C165.19 296.437 165.132 296.413 165.071 296.413Z",
                    fill: "#F47C90"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.432C165.043 296.434 165.015 296.442 164.99 296.456C164.965 296.471 164.943 296.49 164.925 296.514C164.908 296.537 164.895 296.564 164.888 296.593C164.882 296.622 164.881 296.652 164.886 296.681C164.886 296.742 164.91 296.801 164.951 296.844C164.993 296.887 165.05 296.912 165.109 296.912C165.139 296.91 165.17 296.901 165.197 296.885C165.225 296.87 165.249 296.85 165.268 296.824C165.287 296.799 165.301 296.77 165.309 296.738C165.316 296.707 165.317 296.675 165.312 296.643C165.31 296.613 165.302 296.583 165.288 296.556C165.275 296.529 165.257 296.505 165.234 296.485C165.212 296.466 165.186 296.451 165.158 296.442C165.13 296.432 165.101 296.429 165.071 296.432Z",
                    fill: "#F47D91"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.432C165.043 296.434 165.015 296.442 164.99 296.456C164.965 296.471 164.943 296.49 164.925 296.514C164.908 296.537 164.895 296.564 164.888 296.593C164.882 296.622 164.881 296.652 164.886 296.681C164.886 296.742 164.91 296.801 164.951 296.844C164.993 296.887 165.05 296.912 165.109 296.912C165.139 296.91 165.17 296.901 165.197 296.885C165.225 296.87 165.249 296.85 165.268 296.824C165.287 296.799 165.301 296.77 165.309 296.738C165.316 296.707 165.317 296.675 165.312 296.643C165.31 296.613 165.302 296.583 165.288 296.556C165.275 296.529 165.257 296.505 165.234 296.485C165.212 296.466 165.186 296.451 165.158 296.442C165.13 296.432 165.101 296.429 165.071 296.432Z",
                    fill: "#F47E91"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.432C165.043 296.434 165.015 296.442 164.99 296.456C164.965 296.471 164.942 296.49 164.925 296.514C164.908 296.537 164.895 296.564 164.888 296.593C164.882 296.622 164.881 296.652 164.886 296.681C164.886 296.742 164.91 296.801 164.951 296.844C164.993 296.887 165.05 296.912 165.108 296.912C165.169 296.902 165.224 296.869 165.262 296.819C165.299 296.769 165.317 296.706 165.312 296.643C165.31 296.613 165.302 296.583 165.288 296.556C165.275 296.529 165.257 296.505 165.234 296.485C165.212 296.466 165.186 296.451 165.158 296.442C165.13 296.432 165.101 296.429 165.071 296.432Z",
                    fill: "#F47F92"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.432C165.043 296.434 165.015 296.442 164.99 296.456C164.965 296.471 164.943 296.49 164.925 296.514C164.908 296.537 164.895 296.564 164.888 296.593C164.882 296.622 164.881 296.652 164.886 296.681C164.886 296.711 164.892 296.74 164.903 296.767C164.915 296.794 164.931 296.818 164.952 296.838C164.973 296.858 164.998 296.873 165.025 296.882C165.052 296.892 165.08 296.895 165.109 296.893C165.138 296.89 165.166 296.882 165.192 296.868C165.218 296.854 165.242 296.835 165.26 296.812C165.279 296.789 165.294 296.762 165.303 296.733C165.311 296.704 165.315 296.673 165.312 296.643C165.31 296.613 165.302 296.583 165.288 296.556C165.275 296.529 165.257 296.505 165.234 296.485C165.212 296.466 165.186 296.451 165.158 296.442C165.13 296.432 165.101 296.429 165.072 296.432Z",
                    fill: "#F48093"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.432C165.043 296.434 165.015 296.442 164.99 296.456C164.965 296.471 164.943 296.49 164.925 296.514C164.908 296.537 164.895 296.564 164.888 296.593C164.882 296.622 164.881 296.652 164.886 296.681C164.886 296.816 164.997 296.912 165.109 296.893C165.138 296.89 165.166 296.882 165.192 296.868C165.218 296.854 165.242 296.835 165.26 296.812C165.279 296.789 165.294 296.762 165.303 296.733C165.311 296.704 165.315 296.673 165.312 296.643C165.31 296.613 165.302 296.583 165.288 296.556C165.275 296.529 165.257 296.505 165.234 296.485C165.212 296.466 165.186 296.451 165.158 296.442C165.13 296.432 165.101 296.429 165.072 296.432Z",
                    fill: "#F58194"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.432C165.043 296.434 165.015 296.442 164.99 296.456C164.965 296.471 164.943 296.49 164.925 296.514C164.908 296.537 164.895 296.564 164.888 296.593C164.882 296.622 164.881 296.652 164.886 296.681C164.886 296.816 164.997 296.912 165.109 296.893C165.138 296.89 165.166 296.882 165.192 296.868C165.218 296.854 165.242 296.835 165.26 296.812C165.279 296.789 165.294 296.762 165.303 296.733C165.311 296.704 165.315 296.673 165.312 296.643C165.31 296.613 165.302 296.583 165.288 296.556C165.275 296.529 165.257 296.505 165.234 296.485C165.212 296.466 165.186 296.451 165.158 296.442C165.13 296.432 165.101 296.429 165.072 296.432Z",
                    fill: "#F58295"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.432C165.015 296.441 164.965 296.472 164.931 296.519C164.896 296.565 164.88 296.623 164.886 296.681C164.886 296.816 164.997 296.912 165.108 296.893C165.138 296.894 165.168 296.888 165.195 296.875C165.222 296.862 165.245 296.842 165.263 296.818C165.282 296.793 165.294 296.765 165.299 296.734C165.304 296.704 165.302 296.672 165.293 296.643C165.293 296.614 165.288 296.584 165.276 296.557C165.265 296.53 165.248 296.506 165.227 296.486C165.206 296.466 165.182 296.451 165.155 296.442C165.128 296.432 165.099 296.429 165.071 296.432Z",
                    fill: "#F58396"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.432C165.018 296.445 164.97 296.477 164.937 296.522C164.903 296.568 164.885 296.624 164.887 296.681C164.887 296.816 164.998 296.912 165.109 296.893C165.138 296.89 165.165 296.882 165.191 296.868C165.216 296.854 165.238 296.834 165.255 296.811C165.273 296.787 165.285 296.76 165.292 296.731C165.299 296.702 165.299 296.672 165.294 296.643C165.294 296.614 165.288 296.584 165.277 296.557C165.266 296.53 165.249 296.506 165.228 296.486C165.207 296.466 165.182 296.451 165.156 296.442C165.129 296.432 165.1 296.429 165.072 296.432Z",
                    fill: "#F58497"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.432C165.018 296.445 164.97 296.477 164.937 296.523C164.903 296.568 164.885 296.624 164.887 296.682C164.887 296.816 164.998 296.912 165.109 296.893C165.138 296.891 165.165 296.882 165.191 296.868C165.216 296.854 165.238 296.834 165.255 296.811C165.273 296.787 165.285 296.76 165.292 296.731C165.299 296.702 165.299 296.672 165.294 296.643C165.289 296.585 165.264 296.532 165.223 296.492C165.182 296.453 165.128 296.432 165.072 296.432Z",
                    fill: "#F58597"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.432C165.018 296.445 164.97 296.477 164.937 296.523C164.903 296.568 164.885 296.624 164.887 296.682C164.891 296.739 164.917 296.793 164.958 296.832C164.999 296.871 165.053 296.893 165.109 296.893C165.138 296.891 165.165 296.882 165.191 296.868C165.216 296.854 165.238 296.834 165.255 296.811C165.273 296.787 165.285 296.76 165.292 296.731C165.299 296.702 165.299 296.672 165.294 296.643C165.289 296.585 165.264 296.532 165.223 296.492C165.182 296.453 165.128 296.432 165.072 296.432Z",
                    fill: "#F58698"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.432C165.018 296.445 164.97 296.477 164.937 296.523C164.903 296.568 164.885 296.624 164.887 296.682C164.891 296.739 164.917 296.793 164.958 296.832C164.999 296.871 165.053 296.893 165.109 296.893C165.138 296.891 165.165 296.882 165.191 296.868C165.216 296.854 165.238 296.834 165.255 296.811C165.273 296.787 165.285 296.76 165.292 296.731C165.299 296.702 165.299 296.672 165.294 296.643C165.286 296.587 165.259 296.535 165.219 296.497C165.178 296.459 165.127 296.436 165.072 296.432Z",
                    fill: "#F58799"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.451C165.045 296.454 165.019 296.461 164.996 296.475C164.973 296.488 164.953 296.506 164.937 296.528C164.922 296.549 164.911 296.574 164.905 296.601C164.899 296.628 164.899 296.655 164.904 296.682C164.904 296.738 164.926 296.792 164.964 296.831C165.002 296.871 165.054 296.893 165.108 296.893C165.164 296.884 165.214 296.853 165.248 296.806C165.282 296.76 165.299 296.702 165.293 296.643C165.291 296.616 165.283 296.589 165.271 296.564C165.258 296.539 165.241 296.517 165.221 296.499C165.2 296.482 165.176 296.468 165.15 296.46C165.125 296.452 165.098 296.449 165.071 296.451Z",
                    fill: "#F5889A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.451C165.045 296.454 165.019 296.461 164.996 296.475C164.973 296.488 164.953 296.506 164.937 296.528C164.922 296.549 164.911 296.574 164.905 296.601C164.899 296.628 164.899 296.655 164.904 296.682C164.904 296.738 164.926 296.792 164.964 296.831C165.002 296.871 165.054 296.893 165.108 296.893C165.162 296.88 165.21 296.848 165.243 296.802C165.277 296.757 165.295 296.701 165.293 296.643C165.291 296.616 165.283 296.589 165.271 296.564C165.258 296.539 165.241 296.517 165.221 296.499C165.2 296.482 165.176 296.468 165.15 296.46C165.125 296.452 165.098 296.449 165.071 296.451Z",
                    fill: "#F5899B"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.451C165.045 296.454 165.019 296.461 164.996 296.475C164.973 296.488 164.953 296.506 164.937 296.528C164.922 296.549 164.911 296.574 164.905 296.601C164.899 296.628 164.899 296.655 164.904 296.682C164.904 296.709 164.909 296.735 164.92 296.76C164.93 296.785 164.946 296.807 164.965 296.825C164.984 296.843 165.007 296.857 165.031 296.865C165.056 296.874 165.082 296.877 165.108 296.874C165.135 296.871 165.161 296.864 165.185 296.851C165.208 296.838 165.23 296.82 165.247 296.799C165.264 296.777 165.277 296.753 165.285 296.726C165.293 296.699 165.296 296.671 165.293 296.643C165.291 296.616 165.283 296.589 165.271 296.564C165.258 296.539 165.241 296.517 165.22 296.499C165.2 296.482 165.176 296.468 165.15 296.46C165.125 296.452 165.098 296.449 165.071 296.451Z",
                    fill: "#F58A9C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.451C165.045 296.454 165.019 296.461 164.996 296.475C164.973 296.488 164.953 296.506 164.937 296.528C164.922 296.549 164.911 296.574 164.905 296.601C164.899 296.628 164.899 296.655 164.904 296.682C164.904 296.709 164.909 296.735 164.92 296.76C164.93 296.785 164.946 296.807 164.965 296.825C164.984 296.843 165.007 296.857 165.031 296.865C165.056 296.874 165.082 296.877 165.108 296.874C165.135 296.871 165.161 296.864 165.185 296.851C165.208 296.838 165.23 296.82 165.247 296.799C165.264 296.777 165.277 296.753 165.285 296.726C165.293 296.699 165.296 296.671 165.293 296.643C165.291 296.616 165.283 296.589 165.271 296.564C165.258 296.539 165.241 296.517 165.22 296.499C165.2 296.482 165.176 296.468 165.15 296.46C165.125 296.452 165.098 296.449 165.071 296.451Z",
                    fill: "#F58B9D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.451C165.045 296.454 165.019 296.461 164.996 296.475C164.973 296.488 164.953 296.506 164.937 296.528C164.922 296.549 164.911 296.574 164.905 296.601C164.899 296.628 164.899 296.655 164.904 296.682C164.904 296.709 164.909 296.735 164.92 296.76C164.93 296.785 164.946 296.807 164.965 296.825C164.984 296.843 165.007 296.857 165.031 296.865C165.056 296.874 165.082 296.877 165.108 296.874C165.135 296.871 165.161 296.864 165.185 296.851C165.208 296.838 165.23 296.82 165.247 296.799C165.264 296.777 165.277 296.753 165.285 296.726C165.293 296.699 165.296 296.671 165.293 296.643C165.291 296.616 165.283 296.589 165.271 296.564C165.258 296.539 165.241 296.517 165.22 296.499C165.2 296.482 165.176 296.468 165.15 296.46C165.125 296.452 165.098 296.449 165.071 296.451Z",
                    fill: "#F58C9D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.07 296.45C165.019 296.46 164.974 296.489 164.943 296.532C164.912 296.574 164.898 296.628 164.904 296.681C164.904 296.796 165.015 296.892 165.107 296.873C165.134 296.871 165.16 296.863 165.184 296.85C165.208 296.837 165.229 296.819 165.246 296.798C165.263 296.776 165.276 296.752 165.284 296.725C165.292 296.698 165.295 296.67 165.292 296.643C165.284 296.588 165.256 296.539 165.216 296.504C165.175 296.469 165.123 296.45 165.07 296.45Z",
                    fill: "#F68D9E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.451C165.022 296.465 164.979 296.494 164.949 296.536C164.918 296.578 164.903 296.63 164.904 296.682C164.904 296.797 165.015 296.893 165.108 296.874C165.134 296.872 165.16 296.864 165.183 296.851C165.206 296.838 165.226 296.819 165.241 296.798C165.257 296.776 165.268 296.751 165.274 296.724C165.28 296.698 165.28 296.67 165.275 296.643C165.275 296.617 165.269 296.59 165.259 296.565C165.248 296.541 165.233 296.519 165.214 296.5C165.195 296.482 165.172 296.469 165.147 296.46C165.123 296.452 165.097 296.449 165.071 296.451Z",
                    fill: "#F68E9F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.45C165.022 296.464 164.979 296.493 164.949 296.535C164.918 296.577 164.903 296.629 164.904 296.681C164.913 296.732 164.937 296.779 164.974 296.814C165.011 296.848 165.058 296.869 165.108 296.873C165.162 296.873 165.214 296.851 165.252 296.811C165.29 296.771 165.312 296.718 165.312 296.662C165.312 296.606 165.29 296.552 165.252 296.512C165.214 296.473 165.162 296.45 165.108 296.45H165.071Z",
                    fill: "#F68FA0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.45C165.022 296.464 164.979 296.493 164.949 296.535C164.918 296.577 164.903 296.629 164.904 296.681C164.913 296.732 164.937 296.779 164.974 296.814C165.011 296.848 165.058 296.869 165.108 296.873C165.162 296.873 165.214 296.851 165.252 296.811C165.29 296.771 165.312 296.718 165.312 296.662C165.312 296.606 165.29 296.552 165.252 296.512C165.214 296.473 165.162 296.45 165.108 296.45H165.071Z",
                    fill: "#F690A1"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.45C165.022 296.464 164.979 296.493 164.949 296.535C164.918 296.577 164.903 296.629 164.904 296.681C164.913 296.732 164.937 296.779 164.974 296.814C165.011 296.848 165.058 296.869 165.108 296.873C165.162 296.873 165.214 296.851 165.252 296.811C165.29 296.771 165.312 296.718 165.312 296.662C165.312 296.606 165.29 296.552 165.252 296.512C165.214 296.473 165.162 296.45 165.108 296.45H165.071Z",
                    fill: "#F691A2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.07 296.471C165.046 296.473 165.022 296.48 165 296.492C164.979 296.504 164.96 296.521 164.944 296.54C164.929 296.56 164.917 296.582 164.91 296.607C164.903 296.631 164.901 296.657 164.903 296.682C164.912 296.733 164.936 296.78 164.973 296.815C165.01 296.849 165.057 296.87 165.107 296.874C165.133 296.872 165.159 296.864 165.182 296.851C165.205 296.838 165.225 296.819 165.241 296.798C165.256 296.776 165.268 296.751 165.273 296.724C165.279 296.698 165.279 296.67 165.274 296.643C165.274 296.617 165.269 296.591 165.259 296.567C165.248 296.543 165.232 296.522 165.213 296.505C165.193 296.489 165.17 296.477 165.145 296.471C165.121 296.465 165.095 296.465 165.07 296.471Z",
                    fill: "#F692A3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.07 296.471C165.047 296.473 165.024 296.48 165.003 296.492C164.982 296.504 164.964 296.521 164.95 296.541C164.936 296.561 164.926 296.584 164.921 296.608C164.917 296.633 164.917 296.658 164.922 296.682C164.922 296.707 164.927 296.732 164.936 296.755C164.946 296.779 164.959 296.8 164.977 296.818C164.994 296.835 165.014 296.85 165.037 296.859C165.059 296.869 165.083 296.874 165.107 296.874C165.134 296.872 165.159 296.864 165.182 296.851C165.205 296.838 165.225 296.819 165.241 296.798C165.257 296.776 165.268 296.751 165.274 296.724C165.279 296.698 165.279 296.67 165.274 296.643C165.275 296.617 165.27 296.591 165.259 296.567C165.248 296.543 165.233 296.522 165.213 296.505C165.193 296.489 165.17 296.477 165.146 296.471C165.121 296.465 165.095 296.465 165.07 296.471Z",
                    fill: "#F693A3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.07 296.471C165.047 296.473 165.024 296.48 165.003 296.492C164.982 296.504 164.964 296.521 164.95 296.541C164.936 296.561 164.926 296.584 164.921 296.608C164.917 296.633 164.917 296.658 164.922 296.682C164.922 296.706 164.927 296.73 164.937 296.753C164.946 296.775 164.96 296.795 164.977 296.811C164.995 296.828 165.016 296.84 165.038 296.847C165.06 296.855 165.084 296.857 165.107 296.855C165.219 296.855 165.274 296.759 165.274 296.643C165.275 296.617 165.27 296.591 165.259 296.567C165.249 296.543 165.233 296.522 165.213 296.505C165.193 296.489 165.17 296.477 165.146 296.471C165.121 296.465 165.095 296.465 165.07 296.471Z",
                    fill: "#F694A4"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.07 296.469C165.047 296.471 165.024 296.479 165.003 296.491C164.982 296.503 164.964 296.52 164.95 296.54C164.936 296.56 164.926 296.583 164.921 296.607C164.917 296.631 164.917 296.656 164.922 296.681C164.922 296.705 164.927 296.729 164.937 296.751C164.946 296.774 164.96 296.794 164.977 296.81C164.995 296.826 165.016 296.839 165.038 296.846C165.06 296.854 165.084 296.856 165.107 296.853C165.132 296.853 165.156 296.848 165.178 296.839C165.201 296.829 165.221 296.815 165.238 296.797C165.256 296.779 165.269 296.758 165.279 296.735C165.288 296.711 165.293 296.687 165.293 296.661C165.293 296.636 165.288 296.611 165.279 296.588C165.269 296.565 165.256 296.543 165.238 296.526C165.221 296.508 165.201 296.494 165.178 296.484C165.156 296.474 165.132 296.469 165.107 296.469H165.07Z",
                    fill: "#F695A5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.07 296.469C165.047 296.471 165.024 296.479 165.003 296.491C164.982 296.503 164.964 296.52 164.95 296.54C164.936 296.56 164.926 296.583 164.921 296.607C164.917 296.631 164.917 296.656 164.922 296.681C164.922 296.705 164.927 296.729 164.937 296.751C164.946 296.774 164.96 296.794 164.977 296.81C164.995 296.826 165.016 296.839 165.038 296.846C165.06 296.854 165.084 296.856 165.107 296.853C165.132 296.853 165.156 296.848 165.178 296.839C165.201 296.829 165.221 296.815 165.238 296.797C165.256 296.779 165.269 296.758 165.279 296.735C165.288 296.711 165.293 296.687 165.293 296.661C165.293 296.636 165.288 296.611 165.279 296.588C165.269 296.565 165.256 296.543 165.238 296.526C165.221 296.508 165.201 296.494 165.178 296.484C165.156 296.474 165.132 296.469 165.107 296.469H165.07Z",
                    fill: "#F696A6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.07 296.469C165.047 296.471 165.024 296.479 165.003 296.491C164.982 296.503 164.964 296.52 164.95 296.54C164.936 296.56 164.926 296.583 164.921 296.607C164.917 296.631 164.917 296.656 164.922 296.681C164.922 296.705 164.927 296.729 164.937 296.751C164.946 296.774 164.96 296.794 164.977 296.81C164.995 296.826 165.016 296.839 165.038 296.846C165.06 296.854 165.084 296.856 165.107 296.853C165.132 296.851 165.155 296.844 165.177 296.832C165.199 296.82 165.218 296.803 165.233 296.784C165.249 296.764 165.26 296.742 165.267 296.717C165.274 296.693 165.277 296.667 165.274 296.642C165.265 296.593 165.24 296.549 165.203 296.517C165.165 296.485 165.119 296.468 165.07 296.469Z",
                    fill: "#F697A7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.07 296.469C165.047 296.471 165.024 296.479 165.003 296.491C164.982 296.503 164.964 296.52 164.95 296.54C164.936 296.56 164.926 296.583 164.921 296.607C164.917 296.631 164.917 296.656 164.922 296.681C164.922 296.796 165.015 296.873 165.107 296.853C165.132 296.851 165.155 296.844 165.177 296.832C165.199 296.82 165.218 296.803 165.233 296.784C165.249 296.764 165.26 296.742 165.267 296.717C165.274 296.693 165.277 296.667 165.274 296.642C165.262 296.595 165.236 296.552 165.2 296.521C165.163 296.49 165.118 296.472 165.07 296.469Z",
                    fill: "#F698A8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.469C165.028 296.482 164.99 296.51 164.963 296.548C164.936 296.587 164.922 296.633 164.924 296.681C164.932 296.727 164.955 296.768 164.988 296.8C165.022 296.831 165.064 296.85 165.109 296.853C165.133 296.851 165.156 296.844 165.177 296.832C165.198 296.819 165.216 296.803 165.23 296.783C165.244 296.763 165.254 296.74 165.258 296.716C165.263 296.691 165.263 296.666 165.257 296.642C165.253 296.595 165.231 296.551 165.197 296.519C165.163 296.487 165.118 296.469 165.072 296.469Z",
                    fill: "#F799A9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.469C165.028 296.482 164.99 296.51 164.963 296.548C164.936 296.587 164.922 296.633 164.924 296.681C164.932 296.727 164.955 296.768 164.988 296.8C165.022 296.831 165.064 296.85 165.109 296.853C165.133 296.851 165.156 296.844 165.177 296.832C165.198 296.819 165.216 296.803 165.23 296.783C165.244 296.763 165.254 296.74 165.258 296.716C165.263 296.691 165.263 296.666 165.257 296.642C165.253 296.595 165.231 296.551 165.197 296.519C165.163 296.487 165.118 296.469 165.072 296.469Z",
                    fill: "#F79AA9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.469C165.028 296.482 164.99 296.51 164.963 296.548C164.936 296.587 164.922 296.633 164.924 296.681C164.932 296.727 164.955 296.768 164.988 296.8C165.022 296.831 165.064 296.85 165.109 296.853C165.133 296.851 165.156 296.844 165.177 296.832C165.198 296.819 165.216 296.803 165.23 296.783C165.244 296.763 165.254 296.74 165.258 296.716C165.263 296.691 165.263 296.666 165.257 296.642C165.253 296.595 165.231 296.551 165.197 296.519C165.163 296.487 165.118 296.469 165.072 296.469Z",
                    fill: "#F79BAA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.49C165.049 296.492 165.028 296.499 165.009 296.51C164.989 296.521 164.972 296.536 164.958 296.554C164.945 296.572 164.934 296.592 164.928 296.614C164.922 296.636 164.92 296.659 164.923 296.682C164.931 296.728 164.954 296.77 164.987 296.801C165.021 296.832 165.063 296.851 165.108 296.855C165.132 296.853 165.155 296.845 165.176 296.833C165.197 296.821 165.215 296.804 165.229 296.784C165.243 296.764 165.252 296.741 165.257 296.717C165.262 296.693 165.262 296.668 165.256 296.643C165.257 296.62 165.252 296.596 165.243 296.574C165.233 296.552 165.219 296.533 165.201 296.519C165.183 296.504 165.162 296.493 165.139 296.488C165.117 296.483 165.093 296.484 165.071 296.49Z",
                    fill: "#F79CAB"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.49C165.03 296.499 164.992 296.523 164.964 296.558C164.937 296.593 164.923 296.637 164.924 296.682C164.932 296.728 164.954 296.77 164.988 296.801C165.022 296.832 165.064 296.851 165.109 296.855C165.133 296.853 165.156 296.845 165.177 296.833C165.198 296.821 165.216 296.804 165.23 296.784C165.244 296.764 165.253 296.741 165.258 296.717C165.263 296.693 165.263 296.668 165.257 296.643C165.258 296.62 165.253 296.596 165.244 296.574C165.234 296.552 165.22 296.533 165.202 296.519C165.184 296.504 165.163 296.493 165.14 296.488C165.118 296.483 165.094 296.484 165.072 296.49Z",
                    fill: "#F79DAC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.49C165.051 296.492 165.03 296.499 165.011 296.51C164.993 296.521 164.977 296.536 164.964 296.555C164.952 296.573 164.944 296.594 164.94 296.616C164.936 296.638 164.937 296.66 164.942 296.682C164.942 296.728 164.96 296.772 164.991 296.804C165.022 296.836 165.065 296.855 165.109 296.855C165.153 296.842 165.191 296.814 165.218 296.776C165.245 296.737 165.259 296.691 165.257 296.643C165.258 296.62 165.253 296.596 165.244 296.574C165.234 296.552 165.22 296.533 165.202 296.519C165.184 296.504 165.163 296.493 165.14 296.488C165.118 296.483 165.094 296.484 165.072 296.49Z",
                    fill: "#F79EAD"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.49C165.051 296.492 165.03 296.499 165.011 296.51C164.993 296.521 164.977 296.537 164.964 296.555C164.952 296.573 164.944 296.594 164.94 296.616C164.936 296.638 164.937 296.66 164.942 296.682C164.942 296.704 164.947 296.726 164.955 296.746C164.964 296.766 164.976 296.783 164.992 296.798C165.008 296.813 165.026 296.823 165.047 296.83C165.067 296.836 165.088 296.838 165.109 296.836C165.131 296.833 165.152 296.826 165.172 296.815C165.191 296.804 165.208 296.79 165.222 296.772C165.236 296.754 165.246 296.733 165.252 296.711C165.258 296.689 165.26 296.666 165.257 296.644C165.255 296.621 165.248 296.599 165.238 296.579C165.227 296.559 165.213 296.541 165.196 296.527C165.178 296.512 165.158 296.502 165.137 296.495C165.116 296.489 165.094 296.487 165.072 296.49Z",
                    fill: "#F79FAE"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.49C165.051 296.492 165.03 296.499 165.011 296.51C164.993 296.521 164.977 296.537 164.964 296.555C164.952 296.573 164.944 296.594 164.94 296.616C164.936 296.638 164.937 296.66 164.942 296.682C164.942 296.704 164.947 296.726 164.955 296.746C164.964 296.766 164.976 296.783 164.992 296.798C165.008 296.813 165.026 296.823 165.047 296.83C165.067 296.836 165.088 296.838 165.109 296.836C165.131 296.833 165.152 296.826 165.172 296.815C165.191 296.804 165.208 296.79 165.222 296.772C165.236 296.754 165.246 296.733 165.252 296.711C165.258 296.689 165.26 296.666 165.257 296.644C165.255 296.621 165.248 296.599 165.238 296.579C165.227 296.559 165.213 296.541 165.196 296.527C165.178 296.512 165.158 296.502 165.137 296.495C165.116 296.489 165.094 296.487 165.072 296.49Z",
                    fill: "#F7A0AF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.49C165.051 296.492 165.03 296.499 165.011 296.51C164.993 296.521 164.977 296.537 164.964 296.555C164.952 296.573 164.944 296.594 164.94 296.616C164.936 296.638 164.937 296.66 164.942 296.682C164.942 296.704 164.947 296.726 164.955 296.746C164.964 296.766 164.976 296.783 164.992 296.798C165.008 296.813 165.026 296.823 165.047 296.83C165.067 296.836 165.088 296.838 165.109 296.836C165.131 296.833 165.152 296.826 165.172 296.815C165.191 296.804 165.208 296.79 165.222 296.772C165.236 296.754 165.246 296.733 165.252 296.711C165.258 296.689 165.26 296.666 165.257 296.644C165.248 296.6 165.225 296.56 165.191 296.532C165.158 296.504 165.115 296.489 165.072 296.49Z",
                    fill: "#F7A1AF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.49C165.03 296.499 164.994 296.524 164.97 296.56C164.946 296.595 164.935 296.639 164.941 296.682C164.941 296.704 164.945 296.726 164.954 296.746C164.962 296.766 164.975 296.783 164.991 296.798C165.006 296.813 165.025 296.823 165.045 296.83C165.065 296.836 165.087 296.838 165.108 296.836C165.13 296.833 165.151 296.826 165.17 296.815C165.19 296.804 165.207 296.79 165.22 296.772C165.234 296.754 165.244 296.733 165.251 296.711C165.257 296.689 165.258 296.666 165.256 296.644C165.247 296.6 165.224 296.56 165.19 296.532C165.156 296.504 165.114 296.489 165.071 296.49Z",
                    fill: "#F7A2B0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.49C165.032 296.503 164.998 296.528 164.975 296.563C164.951 296.598 164.94 296.64 164.942 296.682C164.946 296.724 164.966 296.764 164.996 296.792C165.027 296.82 165.067 296.836 165.108 296.836C165.13 296.833 165.151 296.826 165.171 296.815C165.19 296.804 165.207 296.79 165.221 296.772C165.235 296.754 165.245 296.733 165.251 296.711C165.257 296.689 165.259 296.666 165.256 296.644C165.248 296.6 165.225 296.56 165.191 296.532C165.157 296.504 165.115 296.489 165.071 296.49Z",
                    fill: "#F7A3B1"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.489C165.032 296.502 164.998 296.527 164.975 296.562C164.951 296.597 164.94 296.639 164.942 296.681C164.946 296.724 164.966 296.763 164.996 296.791C165.027 296.819 165.067 296.835 165.108 296.835C165.13 296.833 165.15 296.826 165.169 296.815C165.188 296.803 165.204 296.788 165.216 296.77C165.228 296.752 165.237 296.731 165.24 296.709C165.244 296.687 165.243 296.664 165.238 296.643C165.238 296.621 165.234 296.599 165.225 296.579C165.216 296.559 165.204 296.541 165.188 296.527C165.172 296.512 165.154 296.501 165.134 296.495C165.113 296.488 165.092 296.486 165.071 296.489Z",
                    fill: "#F7A4B2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.49C165.032 296.503 164.998 296.528 164.975 296.563C164.951 296.598 164.94 296.64 164.942 296.682C164.946 296.724 164.966 296.764 164.996 296.792C165.027 296.82 165.067 296.836 165.108 296.835C165.13 296.833 165.15 296.827 165.169 296.815C165.188 296.804 165.204 296.789 165.216 296.771C165.228 296.752 165.237 296.732 165.24 296.71C165.244 296.688 165.243 296.665 165.238 296.644C165.233 296.601 165.214 296.562 165.183 296.534C165.152 296.505 165.112 296.49 165.071 296.49Z",
                    fill: "#F8A5B3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.071 296.49C165.032 296.503 164.998 296.528 164.975 296.563C164.951 296.598 164.94 296.64 164.942 296.682C164.946 296.724 164.966 296.764 164.996 296.792C165.027 296.82 165.067 296.836 165.108 296.835C165.149 296.826 165.185 296.801 165.209 296.766C165.233 296.73 165.243 296.687 165.238 296.644C165.233 296.601 165.214 296.562 165.183 296.534C165.152 296.505 165.112 296.49 165.071 296.49Z",
                    fill: "#F8A6B4"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.508C165.053 296.511 165.034 296.517 165.017 296.527C165 296.537 164.985 296.55 164.973 296.567C164.961 296.583 164.952 296.601 164.947 296.621C164.941 296.64 164.94 296.661 164.943 296.681C164.947 296.724 164.967 296.763 164.998 296.791C165.028 296.819 165.068 296.835 165.109 296.835C165.15 296.825 165.186 296.801 165.21 296.765C165.234 296.729 165.245 296.686 165.239 296.643C165.24 296.621 165.236 296.6 165.227 296.581C165.218 296.561 165.205 296.544 165.189 296.531C165.173 296.518 165.154 296.509 165.133 296.505C165.113 296.501 165.092 296.502 165.072 296.508Z",
                    fill: "#F8A7B5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.508C165.053 296.511 165.034 296.517 165.017 296.527C165 296.537 164.985 296.55 164.973 296.567C164.961 296.583 164.952 296.601 164.947 296.621C164.941 296.64 164.94 296.661 164.943 296.681C164.947 296.724 164.967 296.763 164.998 296.791C165.028 296.819 165.068 296.835 165.109 296.835C165.15 296.825 165.186 296.801 165.21 296.765C165.234 296.729 165.245 296.686 165.239 296.643C165.24 296.621 165.236 296.6 165.227 296.581C165.218 296.561 165.205 296.544 165.189 296.531C165.173 296.518 165.154 296.509 165.133 296.505C165.113 296.501 165.092 296.502 165.072 296.508Z",
                    fill: "#F8A8B5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.072 296.508C165.053 296.51 165.034 296.517 165.018 296.527C165.001 296.537 164.987 296.551 164.977 296.567C164.966 296.584 164.959 296.603 164.956 296.622C164.954 296.642 164.955 296.662 164.961 296.681C164.961 296.701 164.964 296.72 164.972 296.737C164.98 296.755 164.991 296.771 165.005 296.784C165.019 296.796 165.036 296.806 165.054 296.811C165.071 296.817 165.09 296.818 165.109 296.816C165.128 296.813 165.147 296.807 165.164 296.797C165.181 296.787 165.196 296.773 165.209 296.757C165.221 296.741 165.23 296.723 165.235 296.703C165.24 296.683 165.241 296.663 165.238 296.643C165.239 296.621 165.235 296.6 165.227 296.581C165.218 296.561 165.205 296.544 165.189 296.531C165.172 296.518 165.153 296.509 165.133 296.505C165.112 296.501 165.092 296.502 165.072 296.508Z",
                    fill: "#F8A9B6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.509C165.069 296.508 165.049 296.512 165.03 296.521C165.011 296.53 164.995 296.544 164.982 296.561C164.97 296.578 164.961 296.598 164.957 296.619C164.953 296.64 164.955 296.661 164.961 296.682C164.96 296.701 164.964 296.721 164.972 296.738C164.979 296.756 164.991 296.772 165.005 296.784C165.019 296.797 165.035 296.807 165.053 296.812C165.071 296.818 165.09 296.819 165.109 296.816C165.128 296.814 165.147 296.808 165.164 296.798C165.181 296.788 165.196 296.774 165.208 296.758C165.22 296.742 165.229 296.724 165.234 296.704C165.24 296.684 165.241 296.664 165.238 296.644C165.238 296.624 165.235 296.605 165.227 296.587C165.219 296.569 165.208 296.554 165.194 296.541C165.18 296.528 165.163 296.519 165.145 296.513C165.127 296.508 165.109 296.506 165.09 296.509Z",
                    fill: "#F8AAB7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.508C165.069 296.507 165.049 296.512 165.03 296.521C165.011 296.53 164.995 296.543 164.982 296.56C164.97 296.577 164.961 296.597 164.957 296.618C164.953 296.639 164.955 296.661 164.961 296.681C164.96 296.701 164.964 296.72 164.972 296.738C164.979 296.755 164.991 296.771 165.005 296.784C165.019 296.797 165.035 296.806 165.053 296.812C165.071 296.817 165.09 296.818 165.109 296.816C165.128 296.813 165.147 296.807 165.164 296.797C165.181 296.787 165.196 296.773 165.208 296.757C165.22 296.741 165.229 296.723 165.234 296.703C165.24 296.684 165.241 296.663 165.238 296.643C165.234 296.606 165.216 296.571 165.189 296.546C165.162 296.522 165.126 296.508 165.09 296.508Z",
                    fill: "#F8ACB8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.508C165.069 296.507 165.049 296.512 165.03 296.521C165.011 296.53 164.995 296.543 164.982 296.56C164.97 296.577 164.961 296.597 164.957 296.618C164.953 296.639 164.955 296.661 164.961 296.681C164.96 296.701 164.964 296.72 164.972 296.738C164.979 296.755 164.991 296.771 165.005 296.784C165.019 296.797 165.035 296.806 165.053 296.812C165.071 296.817 165.09 296.818 165.109 296.816C165.128 296.813 165.147 296.807 165.164 296.797C165.181 296.787 165.196 296.773 165.208 296.757C165.22 296.741 165.229 296.723 165.234 296.703C165.24 296.684 165.241 296.663 165.238 296.643C165.234 296.606 165.216 296.571 165.189 296.546C165.162 296.522 165.126 296.508 165.09 296.508Z",
                    fill: "#F8ADB9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.508C164.998 296.508 164.942 296.508 164.961 296.681C164.965 296.718 164.983 296.753 165.01 296.778C165.037 296.802 165.072 296.816 165.109 296.816C165.128 296.813 165.147 296.807 165.164 296.797C165.181 296.787 165.196 296.773 165.208 296.757C165.22 296.741 165.229 296.723 165.234 296.703C165.24 296.683 165.241 296.663 165.238 296.643C165.234 296.605 165.216 296.571 165.189 296.546C165.162 296.521 165.126 296.508 165.09 296.508Z",
                    fill: "#F8AEBA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.089 296.508C165.051 296.517 165.018 296.539 164.994 296.571C164.97 296.602 164.958 296.641 164.959 296.681C164.964 296.718 164.981 296.753 165.008 296.778C165.036 296.802 165.071 296.816 165.107 296.816C165.127 296.813 165.146 296.807 165.163 296.797C165.18 296.787 165.195 296.773 165.207 296.757C165.219 296.741 165.228 296.723 165.233 296.703C165.238 296.683 165.239 296.663 165.237 296.643C165.232 296.605 165.215 296.571 165.187 296.546C165.16 296.521 165.125 296.508 165.089 296.508Z",
                    fill: "#F8AFBA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.089 296.508C165.053 296.52 165.021 296.543 164.998 296.574C164.975 296.605 164.961 296.642 164.959 296.681C164.964 296.718 164.981 296.753 165.008 296.778C165.036 296.802 165.071 296.816 165.107 296.816C165.126 296.814 165.145 296.807 165.161 296.797C165.177 296.787 165.191 296.773 165.202 296.756C165.213 296.74 165.22 296.721 165.222 296.701C165.225 296.682 165.224 296.662 165.218 296.643C165.218 296.607 165.205 296.573 165.18 296.548C165.156 296.522 165.123 296.508 165.089 296.508Z",
                    fill: "#F8B0BB"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.089 296.508C165.053 296.52 165.021 296.543 164.998 296.574C164.975 296.605 164.961 296.642 164.959 296.681C164.964 296.718 164.981 296.753 165.008 296.778C165.036 296.802 165.071 296.816 165.107 296.816C165.126 296.814 165.145 296.807 165.161 296.797C165.177 296.787 165.191 296.773 165.202 296.756C165.213 296.74 165.22 296.721 165.222 296.701C165.225 296.682 165.224 296.662 165.218 296.643C165.214 296.608 165.199 296.577 165.176 296.552C165.152 296.528 165.122 296.512 165.089 296.508Z",
                    fill: "#F8B1BC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.089 296.528C165.053 296.532 165.02 296.551 164.996 296.579C164.972 296.607 164.959 296.644 164.959 296.681C164.964 296.719 164.981 296.753 165.008 296.778C165.036 296.802 165.071 296.816 165.107 296.816C165.126 296.814 165.145 296.807 165.161 296.797C165.177 296.787 165.191 296.773 165.202 296.757C165.213 296.74 165.22 296.721 165.222 296.702C165.225 296.682 165.224 296.662 165.218 296.643C165.218 296.626 165.215 296.609 165.208 296.594C165.202 296.578 165.192 296.565 165.179 296.554C165.167 296.543 165.153 296.535 165.137 296.53C165.121 296.526 165.105 296.525 165.089 296.528Z",
                    fill: "#F9B2BD"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.089 296.528C165.053 296.532 165.02 296.551 164.996 296.579C164.972 296.607 164.959 296.644 164.959 296.681C164.964 296.719 164.981 296.753 165.008 296.778C165.036 296.802 165.071 296.816 165.107 296.816C165.126 296.814 165.145 296.807 165.161 296.797C165.177 296.787 165.191 296.773 165.202 296.757C165.213 296.74 165.22 296.721 165.222 296.702C165.225 296.682 165.224 296.662 165.218 296.643C165.218 296.626 165.215 296.609 165.208 296.594C165.202 296.578 165.192 296.565 165.179 296.554C165.167 296.543 165.153 296.535 165.137 296.53C165.121 296.526 165.105 296.525 165.089 296.528Z",
                    fill: "#F9B3BE"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.089 296.528C165.053 296.532 165.02 296.551 164.996 296.579C164.972 296.607 164.959 296.644 164.959 296.681C164.959 296.681 164.959 296.816 165.107 296.796C165.255 296.777 165.218 296.796 165.218 296.643C165.219 296.626 165.215 296.609 165.208 296.594C165.202 296.578 165.192 296.565 165.18 296.554C165.167 296.543 165.153 296.535 165.137 296.53C165.121 296.526 165.105 296.525 165.089 296.528Z",
                    fill: "#F9B4BF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.528C165.072 296.527 165.054 296.53 165.037 296.538C165.02 296.546 165.006 296.558 164.995 296.574C164.984 296.589 164.977 296.607 164.974 296.625C164.971 296.644 164.973 296.663 164.979 296.681C164.979 296.698 164.982 296.715 164.989 296.73C164.996 296.746 165.006 296.759 165.018 296.77C165.03 296.781 165.045 296.789 165.061 296.794C165.076 296.798 165.093 296.799 165.109 296.796C165.109 296.796 165.22 296.797 165.22 296.643C165.22 296.626 165.217 296.609 165.21 296.594C165.203 296.578 165.193 296.565 165.181 296.554C165.169 296.543 165.154 296.535 165.138 296.53C165.123 296.526 165.106 296.525 165.09 296.528Z",
                    fill: "#F9B5C0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.527C165.072 296.526 165.054 296.53 165.037 296.538C165.02 296.546 165.006 296.558 164.995 296.573C164.984 296.588 164.977 296.606 164.974 296.625C164.971 296.644 164.973 296.663 164.979 296.681C164.979 296.698 164.982 296.715 164.989 296.73C164.996 296.745 165.006 296.759 165.018 296.77C165.03 296.781 165.045 296.789 165.061 296.794C165.076 296.798 165.093 296.799 165.109 296.796C165.109 296.796 165.22 296.796 165.22 296.643C165.22 296.489 165.146 296.527 165.09 296.527Z",
                    fill: "#F9B6C0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.528C165.072 296.527 165.054 296.531 165.037 296.539C165.02 296.547 165.006 296.559 164.995 296.574C164.984 296.589 164.977 296.607 164.974 296.626C164.971 296.645 164.973 296.664 164.979 296.682C164.979 296.699 164.982 296.716 164.989 296.731C164.996 296.746 165.006 296.76 165.018 296.771C165.03 296.782 165.045 296.79 165.061 296.795C165.076 296.799 165.093 296.8 165.109 296.797C165.109 296.797 165.22 296.797 165.22 296.644C165.21 296.614 165.193 296.588 165.17 296.567C165.148 296.547 165.12 296.534 165.09 296.528Z",
                    fill: "#F9B7C1"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.528C165.072 296.527 165.054 296.531 165.037 296.539C165.02 296.547 165.006 296.559 164.995 296.574C164.984 296.589 164.977 296.607 164.974 296.626C164.971 296.645 164.973 296.664 164.979 296.682C164.979 296.682 164.979 296.797 165.109 296.797C165.238 296.797 165.22 296.797 165.22 296.644C165.21 296.614 165.193 296.588 165.17 296.567C165.148 296.547 165.12 296.534 165.09 296.528Z",
                    fill: "#F9B8C2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.528C165.057 296.537 165.028 296.557 165.008 296.585C164.988 296.613 164.978 296.647 164.979 296.682C164.979 296.682 164.979 296.797 165.108 296.797C165.238 296.797 165.219 296.797 165.219 296.663C165.215 296.628 165.201 296.596 165.177 296.572C165.154 296.548 165.123 296.532 165.09 296.528Z",
                    fill: "#F9B9C3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.528C165.057 296.537 165.028 296.557 165.008 296.585C164.988 296.613 164.978 296.647 164.979 296.682C164.983 296.714 164.999 296.743 165.023 296.765C165.046 296.786 165.077 296.797 165.108 296.797C165.108 296.797 165.219 296.797 165.219 296.663C165.215 296.628 165.201 296.596 165.177 296.572C165.154 296.548 165.123 296.532 165.09 296.528Z",
                    fill: "#F9BAC4"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.528C165.057 296.537 165.028 296.557 165.008 296.585C164.988 296.613 164.978 296.647 164.979 296.682C164.983 296.714 164.999 296.743 165.023 296.765C165.046 296.786 165.077 296.797 165.108 296.797C165.108 296.797 165.219 296.797 165.201 296.663C165.201 296.63 165.19 296.598 165.17 296.574C165.149 296.549 165.121 296.533 165.09 296.528Z",
                    fill: "#F9BBC5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.546C165.09 296.546 164.979 296.546 164.979 296.68C164.983 296.712 164.999 296.742 165.023 296.763C165.046 296.784 165.077 296.796 165.108 296.795C165.108 296.795 165.219 296.795 165.201 296.661C165.182 296.527 165.145 296.527 165.09 296.546Z",
                    fill: "#F9BCC6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.546C165.09 296.546 164.979 296.546 164.979 296.68C164.988 296.71 165.005 296.736 165.028 296.756C165.051 296.777 165.079 296.79 165.108 296.795C165.108 296.795 165.219 296.795 165.201 296.661C165.182 296.527 165.145 296.527 165.09 296.546Z",
                    fill: "#F9BDC6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.546C165.09 296.546 164.979 296.546 164.979 296.68C164.988 296.71 165.005 296.736 165.028 296.756C165.051 296.777 165.079 296.79 165.108 296.795C165.108 296.795 165.219 296.795 165.201 296.661C165.182 296.527 165.145 296.527 165.09 296.546Z",
                    fill: "#FABEC7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.546C165.09 296.546 164.979 296.546 164.979 296.681C164.979 296.815 164.979 296.796 165.108 296.681C165.134 296.676 165.158 296.662 165.175 296.641C165.192 296.62 165.201 296.593 165.201 296.565C165.201 296.565 165.145 296.527 165.09 296.546Z",
                    fill: "#FABFC8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.547C165.074 296.546 165.058 296.549 165.044 296.556C165.029 296.563 165.017 296.574 165.007 296.587C164.998 296.6 164.992 296.616 164.991 296.633C164.989 296.649 164.992 296.666 164.998 296.681C165.014 296.693 165.033 296.7 165.053 296.7C165.073 296.7 165.092 296.693 165.108 296.681C165.134 296.676 165.158 296.662 165.175 296.641C165.191 296.62 165.2 296.594 165.2 296.567C165.185 296.553 165.167 296.545 165.147 296.541C165.128 296.538 165.108 296.54 165.09 296.547Z",
                    fill: "#FAC0C9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.547C165.074 296.546 165.058 296.549 165.044 296.556C165.029 296.563 165.017 296.574 165.007 296.587C164.998 296.6 164.992 296.616 164.991 296.633C164.989 296.649 164.992 296.666 164.998 296.681C165.014 296.693 165.033 296.7 165.053 296.7C165.073 296.7 165.092 296.693 165.108 296.681C165.134 296.676 165.158 296.662 165.175 296.641C165.191 296.62 165.2 296.594 165.2 296.567C165.185 296.553 165.167 296.545 165.147 296.541C165.128 296.538 165.108 296.54 165.09 296.547Z",
                    fill: "#FAC1CA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.547C165.074 296.546 165.058 296.549 165.044 296.555C165.029 296.562 165.017 296.573 165.007 296.587C164.998 296.6 164.992 296.616 164.991 296.632C164.989 296.649 164.992 296.665 164.998 296.68C165.007 296.701 165.021 296.718 165.039 296.73C165.057 296.742 165.078 296.749 165.099 296.749C165.12 296.749 165.141 296.742 165.159 296.73C165.177 296.718 165.191 296.701 165.2 296.68C165.203 296.664 165.202 296.647 165.197 296.631C165.193 296.615 165.186 296.6 165.175 296.587C165.165 296.574 165.151 296.564 165.137 296.557C165.122 296.55 165.106 296.547 165.09 296.547Z",
                    fill: "#FAC2CB"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.547C165.074 296.546 165.058 296.549 165.044 296.555C165.029 296.562 165.017 296.573 165.007 296.587C164.998 296.6 164.992 296.616 164.991 296.632C164.989 296.649 164.992 296.665 164.998 296.68C165.007 296.701 165.021 296.718 165.039 296.73C165.057 296.742 165.078 296.749 165.099 296.749C165.121 296.749 165.141 296.742 165.159 296.73C165.177 296.718 165.191 296.701 165.2 296.68C165.2 296.68 165.145 296.547 165.09 296.547Z",
                    fill: "#FAC3CC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.547C165.063 296.555 165.039 296.573 165.022 296.597C165.005 296.621 164.997 296.65 164.998 296.68C165.007 296.7 165.021 296.718 165.039 296.73C165.057 296.742 165.078 296.748 165.099 296.748C165.121 296.748 165.142 296.742 165.159 296.73C165.177 296.718 165.192 296.7 165.2 296.68C165.2 296.68 165.145 296.547 165.09 296.547Z",
                    fill: "#FAC4CC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.547C165.063 296.555 165.039 296.573 165.022 296.597C165.005 296.621 164.997 296.65 164.998 296.68C165.007 296.7 165.021 296.718 165.039 296.73C165.057 296.742 165.078 296.748 165.099 296.748C165.121 296.748 165.142 296.742 165.159 296.73C165.177 296.718 165.192 296.7 165.2 296.68C165.2 296.68 165.145 296.547 165.09 296.547Z",
                    fill: "#FAC5CD"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.547C165.063 296.555 165.039 296.573 165.022 296.597C165.005 296.621 164.997 296.65 164.998 296.68C165.015 296.69 165.034 296.695 165.053 296.695C165.073 296.695 165.092 296.69 165.108 296.68C165.108 296.68 165.2 296.68 165.108 296.566C165.103 296.559 165.097 296.552 165.09 296.547Z",
                    fill: "#FAC6CE"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.089 296.566C165.072 296.559 165.054 296.555 165.035 296.557C165.017 296.559 164.999 296.565 164.984 296.575C164.968 296.586 164.956 296.6 164.947 296.617C164.938 296.634 164.934 296.653 164.934 296.672C164.934 296.691 164.938 296.71 164.947 296.727C164.956 296.743 164.968 296.758 164.984 296.768C164.999 296.779 165.017 296.785 165.035 296.787C165.054 296.788 165.072 296.785 165.089 296.777C165.089 296.777 165.182 296.777 165.089 296.662C164.997 296.547 165.145 296.547 165.089 296.566Z",
                    fill: "#FAC7CF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.089 296.566C165.072 296.559 165.054 296.555 165.035 296.557C165.017 296.559 164.999 296.565 164.984 296.575C164.968 296.586 164.956 296.6 164.947 296.617C164.938 296.634 164.934 296.653 164.934 296.672C164.934 296.691 164.938 296.71 164.947 296.727C164.956 296.743 164.968 296.758 164.984 296.768C164.999 296.779 165.017 296.785 165.035 296.787C165.054 296.788 165.072 296.785 165.089 296.777C165.089 296.777 165.182 296.777 165.089 296.662C164.997 296.547 165.145 296.547 165.089 296.566Z",
                    fill: "#FAC8D0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.566C165.064 296.571 165.04 296.585 165.024 296.606C165.007 296.627 164.998 296.653 164.998 296.68C164.998 296.68 164.998 296.68 165.108 296.68V296.585L165.09 296.566Z",
                    fill: "#FAC9D1"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.566C165.064 296.571 165.04 296.585 165.024 296.606C165.007 296.627 164.998 296.653 164.998 296.68C164.998 296.68 164.998 296.68 165.108 296.68V296.585C165.103 296.578 165.097 296.572 165.09 296.566Z",
                    fill: "#FBCAD2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.566C165.064 296.571 165.04 296.585 165.024 296.606C165.007 296.627 164.998 296.653 164.998 296.68C165.015 296.689 165.034 296.693 165.053 296.693C165.072 296.693 165.091 296.689 165.108 296.68C165.108 296.68 165.108 296.68 165.108 296.585C165.103 296.578 165.097 296.572 165.09 296.566Z",
                    fill: "#FBCBD2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.566C165.09 296.566 165.09 296.566 165.09 296.68H165.182C165.182 296.68 165.182 296.68 165.182 296.585C165.169 296.574 165.154 296.566 165.138 296.562C165.122 296.559 165.105 296.56 165.09 296.566Z",
                    fill: "#FBCED5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.091 296.566C165.079 296.582 165.072 296.602 165.072 296.623C165.072 296.643 165.079 296.663 165.091 296.68H165.182C165.182 296.68 165.182 296.68 165.182 296.585C165.182 296.489 165.127 296.566 165.091 296.566Z",
                    fill: "#FBCFD6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.091 296.566C165.079 296.582 165.072 296.602 165.072 296.623C165.072 296.643 165.079 296.663 165.091 296.68H165.182C165.182 296.68 165.182 296.68 165.182 296.585C165.182 296.489 165.127 296.566 165.091 296.566Z",
                    fill: "#FBD0D7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.585V296.756C165.09 296.756 165.09 296.756 165.09 296.661C165.09 296.566 165.127 296.566 165.09 296.585Z",
                    fill: "#FBD1D8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.585V296.756C165.09 296.756 165.09 296.756 165.09 296.661C165.09 296.566 165.127 296.566 165.09 296.585Z",
                    fill: "#FBD2D8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.585C165.09 296.585 165.09 296.68 165.182 296.585C165.274 296.49 165.182 296.585 165.182 296.585H165.09Z",
                    fill: "#FBD3D9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.585C165.09 296.585 165.09 296.68 165.182 296.585C165.274 296.49 165.182 296.585 165.182 296.585H165.09Z",
                    fill: "#FBD4DA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.623C165.09 296.623 165.107 296.606 165.09 296.623V296.623Z",
                    fill: "#FDE6EA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.644V296.661V296.678L165.106 296.661L165.09 296.644Z",
                    fill: "#FEF9FA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.09 296.644V296.661V296.678L165.106 296.661L165.09 296.644Z",
                    fill: "#FFFAFB"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M165.09 296.663V296.679L165.106 296.663H165.09Z",
                    fill: "#FFFBFC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.683 296.585C164.683 296.585 164.683 296.585 164.794 296.585V296.469H164.702C164.702 296.469 164.553 296.604 164.572 296.623C164.572 296.623 164.572 296.623 164.572 296.719L164.683 296.585Z",
                    fill: "#E92736"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.793 296.259C164.793 296.259 164.793 296.259 164.793 296.355H164.885C164.885 296.355 164.885 296.355 164.885 296.259V296.163C164.885 296.163 164.682 296.163 164.682 296.278C164.682 296.278 164.682 296.278 164.682 296.394L164.793 296.259Z",
                    fill: "#E92736"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.218 296.257C165.228 296.207 165.228 296.155 165.218 296.105C165.218 296.105 165.016 296.105 165.034 296.105V296.257H165.236H165.218Z",
                    fill: "#E92736"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.976 297.352C166.981 297.315 166.981 297.276 166.976 297.238H166.811L166.976 297.352Z",
                    fill: "#E92736"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.201 297.277C167.201 297.277 167.201 297.277 167.201 297.372H167.422C167.422 297.372 167.256 297.277 167.256 297.372C167.256 297.467 167.256 297.372 167.256 297.372L167.201 297.277Z",
                    fill: "#E92736"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.421 297.524V297.429C167.421 297.429 167.293 297.296 167.293 297.315C167.293 297.334 167.293 297.315 167.293 297.315L167.421 297.524Z",
                    fill: "#E92736"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.829 297.987C172.823 298.019 172.823 298.051 172.829 298.082V297.987C172.829 297.987 172.7 297.892 172.682 297.987C172.664 298.082 172.682 297.987 172.682 297.987H172.829Z",
                    fill: "#E92736"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M172.979 298.025H173.089L172.979 297.892V298.025Z",
                    fill: "#E92736"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.07 298.332H173.181V298.179H173.089L173.07 298.332Z",
                    fill: "#E92736"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.791 296.393C164.801 296.41 164.806 296.43 164.806 296.45C164.806 296.47 164.801 296.49 164.791 296.507H164.699L164.791 296.393Z",
                    fill: "#F7E204"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.83 296.258C164.83 296.258 164.83 296.258 164.922 296.258C165.014 296.258 164.922 296.144 164.922 296.125L164.83 296.258Z",
                    fill: "#F7E204"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.053 296.258C165.06 296.227 165.06 296.195 165.053 296.163V296.258Z",
                    fill: "#F7E204"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M173.145 298.065H172.479V298.717H173.145V298.065Z",
                    fill: "#F15770"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.507C173.107 298.391 173.163 298.257 173.107 298.18C173.052 298.103 172.904 298.18 172.774 298.18C172.645 298.18 172.571 298.449 172.626 298.526C172.682 298.603 172.793 298.622 172.978 298.507Z",
                    fill: "#F15770"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.507C173.107 298.391 173.163 298.257 173.107 298.18C173.052 298.103 172.904 298.18 172.774 298.18C172.645 298.18 172.589 298.449 172.644 298.526C172.7 298.603 172.793 298.622 172.978 298.507Z",
                    fill: "#F15871"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.507C173.089 298.391 173.163 298.257 173.107 298.18C173.052 298.103 172.904 298.18 172.774 298.18C172.645 298.18 172.589 298.449 172.644 298.526C172.7 298.603 172.793 298.622 172.978 298.507Z",
                    fill: "#F15972"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.507C173.106 298.391 173.18 298.257 173.125 298.18C173.069 298.103 172.921 298.18 172.792 298.18C172.662 298.18 172.607 298.449 172.662 298.526C172.718 298.603 172.792 298.622 172.977 298.507Z",
                    fill: "#F15A73"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.507C173.106 298.391 173.162 298.257 173.107 298.18C173.051 298.103 172.921 298.18 172.792 298.18C172.662 298.18 172.607 298.449 172.662 298.526C172.718 298.603 172.792 298.622 172.977 298.507Z",
                    fill: "#F15B73"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.506C173.106 298.391 173.162 298.256 173.107 298.179C173.051 298.103 172.921 298.179 172.792 298.275C172.662 298.371 172.607 298.525 172.662 298.583C172.718 298.64 172.792 298.621 172.977 298.506Z",
                    fill: "#F15C74"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.506C173.106 298.391 173.162 298.256 173.107 298.179C173.051 298.103 172.921 298.179 172.792 298.275C172.662 298.371 172.607 298.525 172.662 298.583C172.718 298.64 172.792 298.621 172.977 298.506Z",
                    fill: "#F25D75"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.506C173.106 298.391 173.162 298.256 173.107 298.179C173.051 298.103 172.921 298.179 172.792 298.275C172.662 298.371 172.607 298.525 172.662 298.583C172.718 298.64 172.792 298.621 172.977 298.506Z",
                    fill: "#F25E76"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.506C173.106 298.391 173.162 298.256 173.107 298.179C173.051 298.103 172.921 298.179 172.792 298.275C172.662 298.371 172.607 298.525 172.662 298.583C172.718 298.64 172.792 298.621 172.977 298.506Z",
                    fill: "#F25F77"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.506C173.106 298.391 173.162 298.256 173.107 298.179C173.051 298.103 172.921 298.179 172.792 298.275C172.662 298.371 172.607 298.525 172.662 298.583C172.718 298.64 172.792 298.621 172.977 298.506Z",
                    fill: "#F26078"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.506C173.106 298.391 173.162 298.257 173.107 298.199C173.051 298.141 172.921 298.199 172.792 298.199C172.662 298.199 172.607 298.449 172.662 298.506C172.718 298.564 172.792 298.621 172.977 298.506Z",
                    fill: "#F26179"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.506C173.106 298.391 173.162 298.257 173.107 298.199C173.051 298.141 172.921 298.199 172.792 298.199C172.662 298.199 172.607 298.449 172.662 298.506C172.718 298.564 172.792 298.621 172.977 298.506Z",
                    fill: "#F26279"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.506C173.107 298.391 173.162 298.257 173.107 298.199C173.051 298.141 172.921 298.199 172.792 298.199C172.662 298.199 172.625 298.449 172.662 298.506C172.699 298.564 172.792 298.621 172.977 298.506Z",
                    fill: "#F2637A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.506C173.107 298.391 173.162 298.257 173.107 298.199C173.051 298.141 172.921 298.199 172.792 298.199C172.662 298.199 172.625 298.449 172.662 298.506C172.699 298.564 172.792 298.602 172.977 298.506Z",
                    fill: "#F2647B"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.979 298.506C173.108 298.391 173.145 298.257 173.108 298.199C173.071 298.141 172.904 298.199 172.793 298.199C172.682 298.199 172.627 298.449 172.664 298.506C172.701 298.564 172.793 298.602 172.979 298.506Z",
                    fill: "#F2657C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.506C173.089 298.391 173.145 298.257 173.108 298.199C173.071 298.141 172.904 298.199 172.793 298.199C172.682 298.199 172.626 298.449 172.682 298.506C172.738 298.564 172.793 298.602 172.978 298.506Z",
                    fill: "#F2667D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.506C173.089 298.391 173.145 298.257 173.108 298.199C173.071 298.141 172.904 298.199 172.793 298.199C172.682 298.199 172.626 298.429 172.682 298.506C172.738 298.583 172.793 298.602 172.978 298.506Z",
                    fill: "#F2677E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.506C173.089 298.391 173.145 298.257 173.089 298.199C173.034 298.141 172.904 298.199 172.793 298.199C172.682 298.199 172.626 298.429 172.682 298.506C172.738 298.583 172.793 298.602 172.978 298.506Z",
                    fill: "#F2687F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.506C173.089 298.391 173.145 298.257 173.089 298.199C173.034 298.141 172.904 298.199 172.793 298.199C172.682 298.199 172.626 298.429 172.682 298.506C172.738 298.583 172.793 298.602 172.978 298.506Z",
                    fill: "#F3697F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.506C173.089 298.391 173.145 298.257 173.089 298.199C173.034 298.141 172.904 298.199 172.793 298.199C172.682 298.199 172.626 298.429 172.682 298.506C172.738 298.583 172.793 298.602 172.978 298.506Z",
                    fill: "#F36A80"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.506C173.089 298.391 173.145 298.257 173.089 298.199C173.034 298.141 172.904 298.199 172.793 298.199C172.682 298.199 172.626 298.429 172.682 298.487C172.738 298.545 172.793 298.602 172.978 298.506Z",
                    fill: "#F36B81"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.506C173.089 298.391 173.145 298.257 173.089 298.199C173.034 298.141 172.904 298.199 172.793 298.199C172.682 298.199 172.626 298.429 172.682 298.487C172.738 298.545 172.793 298.602 172.978 298.506Z",
                    fill: "#F36C82"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.506C173.089 298.391 173.145 298.257 173.089 298.199C173.034 298.141 172.904 298.199 172.793 298.199C172.682 298.199 172.626 298.429 172.682 298.487C172.738 298.545 172.793 298.602 172.978 298.506Z",
                    fill: "#F36D83"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.487C173.089 298.391 173.145 298.275 173.089 298.199C173.034 298.122 172.904 298.199 172.793 298.199C172.682 298.199 172.645 298.429 172.682 298.487C172.719 298.544 172.793 298.602 172.978 298.487Z",
                    fill: "#F36E84"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.487C173.089 298.391 173.145 298.275 173.089 298.199C173.034 298.122 172.904 298.199 172.793 298.199C172.682 298.199 172.645 298.429 172.682 298.487C172.719 298.544 172.793 298.602 172.978 298.487Z",
                    fill: "#F36F85"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.486C173.089 298.39 173.126 298.275 173.089 298.218C173.052 298.16 172.904 298.218 172.793 298.218C172.682 298.218 172.645 298.448 172.682 298.506C172.719 298.563 172.793 298.602 172.978 298.486Z",
                    fill: "#F37085"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.486C173.089 298.39 173.126 298.275 173.089 298.218C173.052 298.16 172.904 298.218 172.793 298.218C172.682 298.218 172.645 298.448 172.682 298.506C172.719 298.563 172.793 298.582 172.978 298.486Z",
                    fill: "#F37186"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.486C173.089 298.39 173.126 298.275 173.089 298.218C173.052 298.16 172.904 298.218 172.793 298.218C172.682 298.218 172.645 298.448 172.682 298.506C172.719 298.563 172.793 298.582 172.978 298.486Z",
                    fill: "#F37287"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.486C173.088 298.39 173.125 298.275 173.088 298.218C173.051 298.16 172.903 298.218 172.81 298.218C172.717 298.218 172.643 298.448 172.699 298.506C172.754 298.563 172.791 298.582 172.977 298.486Z",
                    fill: "#F37388"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.486C173.069 298.39 173.125 298.275 173.088 298.218C173.051 298.16 172.902 298.218 172.81 298.218C172.717 298.218 172.643 298.448 172.699 298.506C172.754 298.563 172.791 298.582 172.977 298.486Z",
                    fill: "#F37489"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.486C173.069 298.39 173.125 298.275 173.088 298.218C173.051 298.16 172.902 298.218 172.81 298.218C172.717 298.218 172.643 298.448 172.699 298.506C172.754 298.563 172.791 298.582 172.977 298.486Z",
                    fill: "#F4758A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.486C173.069 298.39 173.125 298.275 173.069 298.217C173.014 298.16 172.903 298.217 172.81 298.217C172.717 298.217 172.643 298.429 172.699 298.486C172.754 298.544 172.791 298.582 172.977 298.486Z",
                    fill: "#F4768B"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.486C173.069 298.39 173.125 298.275 173.069 298.217C173.014 298.16 172.903 298.217 172.81 298.217C172.717 298.217 172.643 298.429 172.699 298.486C172.754 298.544 172.791 298.582 172.977 298.486Z",
                    fill: "#F4778B"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 298.486C173.069 298.39 173.125 298.275 173.069 298.217C173.014 298.16 172.903 298.217 172.81 298.217C172.717 298.217 172.643 298.429 172.699 298.486C172.754 298.544 172.791 298.582 172.977 298.486Z",
                    fill: "#F4788C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.486C173.089 298.39 173.145 298.275 173.089 298.217C173.033 298.16 172.922 298.217 172.83 298.217C172.737 298.217 172.682 298.429 172.719 298.486C172.756 298.544 172.793 298.582 172.978 298.486Z",
                    fill: "#F4798D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.486C173.089 298.39 173.145 298.275 173.089 298.217C173.033 298.16 172.922 298.217 172.83 298.217C172.737 298.217 172.682 298.429 172.719 298.486C172.756 298.544 172.793 298.582 172.978 298.486Z",
                    fill: "#F47A8E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.486C173.089 298.39 173.126 298.275 173.089 298.217C173.052 298.16 172.922 298.217 172.83 298.217C172.737 298.217 172.682 298.429 172.719 298.467C172.756 298.506 172.793 298.582 172.978 298.486Z",
                    fill: "#F47B8F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.486C173.089 298.39 173.126 298.275 173.089 298.217C173.052 298.16 172.922 298.217 172.83 298.217C172.737 298.217 172.682 298.429 172.719 298.467C172.756 298.506 172.793 298.582 172.978 298.486Z",
                    fill: "#F47C90"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.486C173.089 298.39 173.126 298.275 173.089 298.217C173.052 298.16 172.922 298.217 172.83 298.217C172.737 298.217 172.682 298.429 172.719 298.467C172.756 298.506 172.793 298.582 172.978 298.486Z",
                    fill: "#F47D91"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.486C173.089 298.39 173.126 298.275 173.089 298.218C173.052 298.16 172.922 298.218 172.83 298.218C172.737 298.218 172.682 298.41 172.719 298.467C172.756 298.525 172.793 298.582 172.978 298.486Z",
                    fill: "#F47E91"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.486C173.089 298.39 173.126 298.275 173.089 298.236C173.052 298.198 172.922 298.236 172.83 298.236C172.737 298.236 172.682 298.429 172.719 298.486C172.756 298.544 172.793 298.563 172.978 298.486Z",
                    fill: "#F47F92"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.486C173.089 298.39 173.126 298.275 173.089 298.236C173.052 298.198 172.922 298.236 172.83 298.236C172.737 298.236 172.681 298.429 172.737 298.486C172.793 298.544 172.793 298.563 172.978 298.486Z",
                    fill: "#F48093"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.486C173.07 298.39 173.126 298.275 173.089 298.236C173.052 298.198 172.922 298.236 172.83 298.236C172.737 298.236 172.681 298.429 172.737 298.486C172.793 298.544 172.793 298.563 172.978 298.486Z",
                    fill: "#F58194"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.486C173.07 298.39 173.126 298.275 173.089 298.236C173.052 298.198 172.922 298.236 172.83 298.236C172.737 298.236 172.681 298.429 172.737 298.486C172.793 298.544 172.793 298.563 172.978 298.486Z",
                    fill: "#F58295"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.979 298.486C173.072 298.39 173.128 298.275 173.072 298.236C173.016 298.198 172.924 298.236 172.831 298.236C172.739 298.236 172.702 298.429 172.739 298.486C172.776 298.544 172.794 298.563 172.979 298.486Z",
                    fill: "#F58396"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.979 298.486C173.072 298.39 173.128 298.275 173.072 298.236C173.016 298.198 172.924 298.236 172.831 298.236C172.739 298.236 172.702 298.429 172.739 298.486C172.776 298.544 172.794 298.563 172.979 298.486Z",
                    fill: "#F58497"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.979 298.486C173.072 298.39 173.109 298.294 173.072 298.236C173.035 298.179 172.924 298.236 172.831 298.236C172.739 298.236 172.702 298.428 172.739 298.486C172.776 298.544 172.794 298.563 172.979 298.486Z",
                    fill: "#F58597"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.979 298.486C173.072 298.39 173.109 298.294 173.072 298.236C173.035 298.179 172.924 298.236 172.831 298.236C172.739 298.236 172.702 298.428 172.739 298.486C172.776 298.544 172.794 298.563 172.979 298.486Z",
                    fill: "#F58698"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.979 298.486C173.072 298.39 173.109 298.294 173.072 298.236C173.035 298.179 172.924 298.236 172.831 298.236C172.739 298.236 172.702 298.428 172.739 298.486C172.776 298.544 172.794 298.563 172.979 298.486Z",
                    fill: "#F58799"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.979 298.467C173.072 298.467 173.109 298.294 173.072 298.236C173.035 298.179 172.924 298.236 172.831 298.236C172.739 298.236 172.702 298.428 172.739 298.486C172.776 298.544 172.794 298.563 172.979 298.467Z",
                    fill: "#F5889A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.979 298.467C173.072 298.467 173.109 298.294 173.072 298.236C173.035 298.179 172.924 298.236 172.831 298.236C172.739 298.236 172.702 298.428 172.739 298.486C172.776 298.544 172.794 298.563 172.979 298.467Z",
                    fill: "#F5899B"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.979 298.467C173.072 298.467 173.109 298.294 173.072 298.236C173.035 298.179 172.924 298.236 172.831 298.236C172.739 298.236 172.702 298.428 172.739 298.467C172.776 298.505 172.794 298.563 172.979 298.467Z",
                    fill: "#F58A9C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.979 298.467C173.072 298.467 173.109 298.294 173.072 298.236C173.035 298.179 172.924 298.236 172.831 298.236C172.739 298.236 172.702 298.428 172.739 298.467C172.776 298.505 172.794 298.563 172.979 298.467Z",
                    fill: "#F58B9D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.979 298.467C173.072 298.467 173.109 298.294 173.072 298.236C173.035 298.179 172.924 298.236 172.831 298.236C172.739 298.236 172.702 298.428 172.739 298.467C172.776 298.505 172.794 298.544 172.979 298.467Z",
                    fill: "#F58C9D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.979 298.467C173.072 298.467 173.109 298.294 173.072 298.236C173.035 298.179 172.924 298.236 172.831 298.236C172.739 298.236 172.702 298.428 172.739 298.467C172.776 298.505 172.794 298.544 172.979 298.467Z",
                    fill: "#F68D9E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.467C172.978 298.467 173.108 298.294 173.071 298.236C173.034 298.179 172.923 298.236 172.83 298.236C172.738 298.236 172.719 298.428 172.83 298.467C172.941 298.505 172.793 298.544 172.978 298.467Z",
                    fill: "#F68E9F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.468C172.978 298.468 173.108 298.295 173.071 298.257C173.034 298.219 172.923 298.257 172.83 298.257C172.738 298.257 172.719 298.43 172.83 298.468C172.941 298.507 172.793 298.545 172.978 298.468Z",
                    fill: "#F68FA0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.468C172.978 298.468 173.09 298.295 172.978 298.257C172.867 298.219 172.849 298.257 172.756 298.257C172.664 298.257 172.645 298.43 172.756 298.468C172.867 298.507 172.793 298.545 172.978 298.468Z",
                    fill: "#F690A1"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.468C172.978 298.468 173.089 298.295 172.978 298.257C172.867 298.219 172.848 298.257 172.774 298.257C172.7 298.257 172.645 298.43 172.682 298.468C172.719 298.507 172.793 298.545 172.978 298.468Z",
                    fill: "#F691A2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.468C172.978 298.468 173.089 298.295 172.978 298.257C172.867 298.219 172.848 298.257 172.774 298.257C172.7 298.257 172.645 298.43 172.682 298.468C172.719 298.507 172.793 298.545 172.978 298.468Z",
                    fill: "#F692A3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.468C172.978 298.468 173.089 298.295 172.978 298.257C172.867 298.219 172.848 298.257 172.774 298.257C172.7 298.257 172.645 298.43 172.682 298.468C172.719 298.507 172.793 298.545 172.978 298.468Z",
                    fill: "#F693A3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.468C172.978 298.468 173.089 298.295 172.978 298.257C172.867 298.219 172.848 298.257 172.774 298.257C172.7 298.257 172.645 298.43 172.682 298.468C172.719 298.507 172.793 298.545 172.978 298.468Z",
                    fill: "#F694A4"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.468C172.978 298.468 173.089 298.295 172.978 298.257C172.867 298.219 172.848 298.257 172.774 298.257C172.7 298.257 172.645 298.411 172.682 298.468C172.719 298.526 172.793 298.545 172.978 298.468Z",
                    fill: "#F695A5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.978 298.468C172.978 298.468 173.089 298.295 172.978 298.257C172.867 298.219 172.848 298.257 172.774 298.257C172.7 298.257 172.645 298.411 172.682 298.468C172.719 298.526 172.793 298.545 172.978 298.468Z",
                    fill: "#F696A6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.866 298.468C172.959 298.468 172.996 298.295 172.959 298.257C172.921 298.219 172.829 298.257 172.755 298.257C172.681 298.257 172.625 298.411 172.662 298.468C172.699 298.526 172.792 298.545 172.866 298.468Z",
                    fill: "#F697A7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.866 298.468C172.959 298.468 172.996 298.295 172.959 298.257C172.921 298.219 172.829 298.257 172.755 298.257C172.681 298.257 172.625 298.411 172.662 298.468C172.699 298.526 172.792 298.545 172.866 298.468Z",
                    fill: "#F698A8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.468C172.959 298.468 172.996 298.295 172.959 298.257C172.922 298.219 172.83 298.257 172.756 298.257C172.681 298.257 172.644 298.411 172.663 298.468C172.681 298.526 172.793 298.526 172.867 298.468Z",
                    fill: "#F799A9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.468C172.959 298.468 172.996 298.295 172.959 298.257C172.922 298.219 172.83 298.257 172.756 298.257C172.681 298.257 172.644 298.411 172.663 298.449C172.681 298.488 172.793 298.526 172.867 298.468Z",
                    fill: "#F79AA9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.468C172.959 298.468 172.978 298.295 172.959 298.257C172.941 298.219 172.83 298.257 172.756 298.257C172.682 298.257 172.645 298.411 172.756 298.449C172.867 298.488 172.793 298.526 172.867 298.468Z",
                    fill: "#F79BAA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.468C172.867 298.468 172.978 298.315 172.959 298.257C172.941 298.199 172.83 298.257 172.756 298.257C172.682 298.257 172.645 298.411 172.756 298.449C172.867 298.488 172.793 298.526 172.867 298.468Z",
                    fill: "#F79CAB"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.468C172.867 298.468 172.978 298.315 172.867 298.257C172.756 298.199 172.756 298.257 172.681 298.257C172.607 298.257 172.57 298.411 172.681 298.449C172.793 298.488 172.793 298.526 172.867 298.468Z",
                    fill: "#F79DAC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.467C172.867 298.467 172.978 298.313 172.867 298.275C172.756 298.236 172.756 298.275 172.681 298.275C172.607 298.275 172.57 298.429 172.681 298.467C172.793 298.505 172.793 298.525 172.867 298.467Z",
                    fill: "#F79EAD"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.467C172.867 298.467 172.978 298.313 172.867 298.275C172.756 298.236 172.756 298.275 172.681 298.275C172.607 298.275 172.57 298.429 172.681 298.467C172.793 298.505 172.793 298.525 172.867 298.467Z",
                    fill: "#F79FAE"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.467C172.867 298.467 172.978 298.313 172.867 298.275C172.756 298.236 172.756 298.275 172.681 298.275C172.607 298.275 172.57 298.429 172.681 298.467C172.793 298.505 172.793 298.525 172.867 298.467Z",
                    fill: "#F7A0AF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.467C172.867 298.467 172.978 298.313 172.867 298.275C172.756 298.236 172.756 298.275 172.681 298.275C172.607 298.275 172.57 298.429 172.681 298.467C172.793 298.505 172.793 298.525 172.867 298.467Z",
                    fill: "#F7A1AF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.448C172.867 298.448 172.978 298.313 172.867 298.275C172.756 298.236 172.756 298.275 172.681 298.275C172.607 298.275 172.57 298.428 172.681 298.467C172.793 298.505 172.793 298.525 172.867 298.448Z",
                    fill: "#F7A2B0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.448C172.867 298.448 172.978 298.313 172.867 298.275C172.756 298.236 172.756 298.275 172.681 298.275C172.607 298.275 172.57 298.428 172.681 298.467C172.793 298.505 172.793 298.525 172.867 298.448Z",
                    fill: "#F7A3B1"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.448C172.867 298.448 172.978 298.313 172.867 298.275C172.756 298.236 172.756 298.275 172.682 298.275C172.608 298.275 172.589 298.428 172.682 298.467C172.774 298.505 172.793 298.525 172.867 298.448Z",
                    fill: "#F7A4B2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.448C172.867 298.448 172.978 298.313 172.867 298.275C172.756 298.236 172.756 298.275 172.682 298.275C172.608 298.275 172.589 298.428 172.682 298.467C172.774 298.505 172.793 298.525 172.867 298.448Z",
                    fill: "#F8A5B3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.448C172.867 298.448 172.96 298.313 172.867 298.275C172.774 298.236 172.756 298.275 172.682 298.275C172.608 298.275 172.589 298.428 172.682 298.467C172.774 298.505 172.793 298.525 172.867 298.448Z",
                    fill: "#F8A6B4"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.448C172.867 298.448 172.96 298.313 172.867 298.275C172.774 298.236 172.756 298.275 172.682 298.275C172.608 298.275 172.589 298.428 172.682 298.467C172.712 298.479 172.744 298.484 172.777 298.48C172.809 298.477 172.84 298.466 172.867 298.448Z",
                    fill: "#F8A7B5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.448C172.867 298.448 172.96 298.313 172.867 298.275C172.774 298.236 172.756 298.275 172.682 298.275C172.608 298.275 172.589 298.428 172.682 298.467C172.774 298.505 172.793 298.505 172.867 298.448Z",
                    fill: "#F8A8B5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.448C172.867 298.448 172.96 298.313 172.867 298.275C172.774 298.236 172.756 298.275 172.682 298.275C172.608 298.275 172.589 298.409 172.682 298.429C172.774 298.448 172.793 298.505 172.867 298.448Z",
                    fill: "#F8A9B6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.867 298.448C172.867 298.448 172.96 298.313 172.867 298.275C172.774 298.236 172.756 298.275 172.682 298.275C172.608 298.275 172.589 298.409 172.682 298.429C172.774 298.448 172.793 298.505 172.867 298.448Z",
                    fill: "#F8AAB7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.866 298.448C172.866 298.448 172.959 298.313 172.866 298.275C172.773 298.236 172.773 298.275 172.699 298.275C172.625 298.275 172.607 298.409 172.699 298.429C172.792 298.448 172.792 298.505 172.866 298.448Z",
                    fill: "#F8ACB8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.866 298.448C172.866 298.448 172.959 298.313 172.866 298.275C172.773 298.236 172.773 298.275 172.699 298.275C172.625 298.275 172.607 298.39 172.699 298.429C172.792 298.467 172.792 298.505 172.866 298.448Z",
                    fill: "#F8ADB9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.866 298.448C172.866 298.448 172.959 298.314 172.866 298.295C172.773 298.276 172.773 298.295 172.699 298.295C172.625 298.295 172.607 298.41 172.699 298.448C172.792 298.487 172.792 298.506 172.866 298.448Z",
                    fill: "#F8AEBA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.866 298.447C172.866 298.447 172.958 298.314 172.866 298.295C172.774 298.276 172.774 298.295 172.701 298.295C172.627 298.295 172.701 298.409 172.701 298.447C172.701 298.485 172.792 298.504 172.866 298.447Z",
                    fill: "#F8AFBA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.866 298.447C172.866 298.447 172.958 298.314 172.866 298.295C172.774 298.276 172.774 298.295 172.701 298.295C172.627 298.295 172.701 298.409 172.701 298.447C172.701 298.485 172.792 298.504 172.866 298.447Z",
                    fill: "#F8B0BB"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.865 298.447C172.865 298.447 172.865 298.314 172.865 298.295C172.865 298.276 172.773 298.295 172.718 298.295C172.663 298.295 172.626 298.409 172.718 298.447C172.81 298.485 172.792 298.504 172.865 298.447Z",
                    fill: "#F8B1BC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.865 298.447C172.865 298.447 172.865 298.314 172.865 298.295C172.865 298.276 172.773 298.295 172.718 298.295C172.663 298.295 172.626 298.409 172.718 298.447C172.81 298.485 172.792 298.504 172.865 298.447Z",
                    fill: "#F9B2BD"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.865 298.447C172.865 298.447 172.865 298.314 172.865 298.295C172.865 298.276 172.773 298.295 172.718 298.295C172.663 298.295 172.626 298.409 172.718 298.447C172.81 298.485 172.792 298.504 172.865 298.447Z",
                    fill: "#F9B3BE"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.865 298.447C172.865 298.447 172.865 298.332 172.865 298.294C172.865 298.256 172.773 298.294 172.718 298.294C172.663 298.294 172.626 298.409 172.718 298.447C172.74 298.46 172.766 298.467 172.792 298.467C172.817 298.467 172.843 298.46 172.865 298.447Z",
                    fill: "#F9B4BF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.865 298.447C172.865 298.447 172.865 298.332 172.865 298.294C172.865 298.256 172.773 298.294 172.718 298.294C172.663 298.294 172.626 298.408 172.718 298.447C172.81 298.485 172.792 298.485 172.865 298.447Z",
                    fill: "#F9B5C0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.865 298.447C172.865 298.447 172.865 298.332 172.865 298.294C172.865 298.256 172.773 298.294 172.718 298.294C172.663 298.294 172.626 298.408 172.718 298.447C172.81 298.485 172.792 298.485 172.865 298.447Z",
                    fill: "#F9B6C0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.848 298.446C172.848 298.446 172.94 298.331 172.848 298.293C172.826 298.278 172.801 298.27 172.774 298.27C172.748 298.27 172.723 298.278 172.701 298.293C172.701 298.293 172.609 298.408 172.701 298.446C172.793 298.484 172.793 298.484 172.848 298.446Z",
                    fill: "#F9B7C1"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.848 298.446C172.848 298.446 172.94 298.331 172.848 298.293C172.826 298.278 172.801 298.27 172.774 298.27C172.748 298.27 172.723 298.278 172.701 298.293C172.701 298.293 172.609 298.408 172.701 298.446C172.793 298.484 172.793 298.484 172.848 298.446Z",
                    fill: "#F9B8C2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.848 298.448C172.848 298.448 172.941 298.333 172.848 298.294C172.756 298.256 172.848 298.294 172.719 298.294C172.589 298.294 172.626 298.41 172.719 298.429C172.811 298.448 172.793 298.486 172.848 298.448Z",
                    fill: "#F9B9C3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.847 298.448C172.847 298.448 172.94 298.333 172.847 298.294C172.755 298.256 172.847 298.294 172.718 298.294C172.588 298.294 172.718 298.41 172.718 298.429C172.718 298.448 172.792 298.486 172.847 298.448Z",
                    fill: "#F9BAC4"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.847 298.448C172.847 298.448 172.94 298.333 172.847 298.294C172.755 298.256 172.847 298.294 172.718 298.294C172.588 298.294 172.718 298.41 172.718 298.429C172.718 298.448 172.792 298.486 172.847 298.448Z",
                    fill: "#F9BBC5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.427C172.859 298.408 172.866 298.385 172.866 298.361C172.866 298.337 172.859 298.314 172.846 298.294C172.846 298.294 172.846 298.294 172.717 298.294C172.589 298.294 172.717 298.408 172.717 298.427C172.717 298.447 172.791 298.485 172.846 298.427Z",
                    fill: "#F9BCC6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.427C172.859 298.408 172.866 298.385 172.866 298.361C172.866 298.337 172.859 298.314 172.846 298.294C172.846 298.294 172.846 298.294 172.717 298.294C172.589 298.294 172.717 298.408 172.717 298.427C172.717 298.447 172.791 298.485 172.846 298.427Z",
                    fill: "#F9BDC6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.427C172.846 298.427 172.846 298.332 172.846 298.313C172.846 298.294 172.846 298.313 172.717 298.313C172.589 298.313 172.717 298.428 172.717 298.447C172.717 298.466 172.809 298.485 172.846 298.427Z",
                    fill: "#FABEC7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.428C172.846 298.428 172.846 298.332 172.846 298.313C172.846 298.294 172.846 298.313 172.717 298.313C172.589 298.313 172.717 298.428 172.717 298.447C172.737 298.462 172.761 298.468 172.785 298.465C172.809 298.461 172.831 298.448 172.846 298.428Z",
                    fill: "#FABFC8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.428C172.846 298.428 172.846 298.332 172.846 298.313C172.846 298.294 172.846 298.313 172.717 298.313C172.589 298.313 172.717 298.428 172.717 298.447C172.737 298.462 172.761 298.468 172.785 298.465C172.809 298.461 172.831 298.448 172.846 298.428Z",
                    fill: "#FAC0C9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.428C172.846 298.428 172.846 298.332 172.846 298.313C172.846 298.294 172.846 298.313 172.717 298.313C172.589 298.313 172.717 298.428 172.717 298.447C172.737 298.462 172.761 298.468 172.785 298.465C172.809 298.461 172.831 298.448 172.846 298.428Z",
                    fill: "#FAC1CA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.427C172.846 298.427 172.846 298.332 172.846 298.313C172.846 298.294 172.846 298.313 172.717 298.313C172.589 298.313 172.717 298.428 172.717 298.447C172.738 298.455 172.761 298.458 172.784 298.455C172.807 298.452 172.828 298.442 172.846 298.427Z",
                    fill: "#FAC2CB"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.427C172.846 298.427 172.846 298.332 172.846 298.313C172.846 298.294 172.846 298.313 172.717 298.313C172.589 298.313 172.717 298.428 172.717 298.447C172.738 298.455 172.761 298.458 172.784 298.455C172.807 298.452 172.828 298.442 172.846 298.427Z",
                    fill: "#FAC3CC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.427C172.846 298.427 172.846 298.332 172.846 298.313C172.846 298.294 172.846 298.313 172.717 298.313C172.589 298.313 172.717 298.313 172.717 298.427C172.717 298.542 172.809 298.466 172.846 298.427Z",
                    fill: "#FAC4CC"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.427C172.846 298.427 172.846 298.332 172.846 298.313C172.846 298.294 172.846 298.313 172.717 298.313C172.589 298.313 172.717 298.313 172.717 298.427C172.717 298.542 172.809 298.466 172.846 298.427Z",
                    fill: "#FAC5CD"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.427C172.846 298.427 172.846 298.332 172.846 298.313C172.846 298.294 172.846 298.313 172.736 298.313C172.626 298.313 172.736 298.313 172.736 298.427C172.736 298.542 172.81 298.466 172.846 298.427Z",
                    fill: "#FAC6CE"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.427C172.846 298.427 172.846 298.332 172.846 298.313C172.846 298.294 172.846 298.313 172.736 298.313C172.626 298.313 172.736 298.313 172.736 298.427C172.736 298.542 172.81 298.466 172.846 298.427Z",
                    fill: "#FAC7CF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.427C172.846 298.427 172.846 298.332 172.846 298.313C172.846 298.294 172.846 298.313 172.736 298.313C172.626 298.313 172.736 298.313 172.736 298.427C172.736 298.542 172.81 298.466 172.846 298.427Z",
                    fill: "#FAC8D0"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.427C172.846 298.427 172.846 298.332 172.846 298.313C172.846 298.294 172.846 298.313 172.736 298.313C172.626 298.313 172.736 298.313 172.736 298.408C172.736 298.504 172.81 298.466 172.846 298.427Z",
                    fill: "#FAC9D1"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.427C172.846 298.427 172.846 298.332 172.846 298.313C172.846 298.294 172.846 298.313 172.736 298.313C172.626 298.313 172.736 298.313 172.736 298.408C172.736 298.504 172.81 298.466 172.846 298.427Z",
                    fill: "#FBCAD2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.428C172.846 298.428 172.846 298.428 172.846 298.313C172.846 298.199 172.846 298.313 172.736 298.313C172.626 298.313 172.736 298.313 172.736 298.409L172.846 298.428Z",
                    fill: "#FBCBD2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.428C172.846 298.428 172.846 298.428 172.846 298.313C172.846 298.199 172.846 298.313 172.736 298.313C172.626 298.313 172.736 298.313 172.736 298.409L172.846 298.428Z",
                    fill: "#FBCCD3"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.428C172.846 298.428 172.846 298.428 172.846 298.332C172.846 298.237 172.846 298.332 172.736 298.332C172.626 298.332 172.736 298.332 172.736 298.428H172.846Z",
                    fill: "#FBCDD4"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.428C172.846 298.428 172.846 298.428 172.846 298.332C172.846 298.237 172.846 298.332 172.736 298.332C172.626 298.332 172.736 298.332 172.736 298.428H172.846Z",
                    fill: "#FBCED5"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.846 298.428C172.846 298.428 172.846 298.428 172.846 298.332C172.846 298.237 172.846 298.332 172.754 298.332C172.746 298.347 172.742 298.363 172.742 298.38C172.742 298.397 172.746 298.413 172.754 298.428H172.846Z",
                    fill: "#FBCFD6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.848 298.428C172.848 298.428 172.848 298.428 172.848 298.332C172.848 298.237 172.848 298.332 172.756 298.332C172.748 298.364 172.748 298.397 172.756 298.428C172.756 298.428 172.811 298.447 172.848 298.428Z",
                    fill: "#FBD0D7"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.847 298.428C172.854 298.414 172.857 298.397 172.857 298.381C172.857 298.364 172.854 298.348 172.847 298.333C172.847 298.333 172.847 298.333 172.756 298.333C172.664 298.333 172.756 298.333 172.756 298.428H172.847Z",
                    fill: "#FBD1D8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.847 298.428C172.854 298.414 172.857 298.397 172.857 298.381C172.857 298.364 172.854 298.348 172.847 298.333C172.847 298.333 172.847 298.333 172.756 298.333C172.664 298.333 172.756 298.333 172.756 298.428H172.847Z",
                    fill: "#FBD2D8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.848 298.428C172.848 298.428 172.848 298.428 172.848 298.332C172.848 298.237 172.848 298.332 172.848 298.332C172.848 298.332 172.848 298.332 172.848 298.428C172.848 298.523 172.812 298.447 172.848 298.428Z",
                    fill: "#FBD3D9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.848 298.428C172.848 298.428 172.848 298.428 172.848 298.333C172.848 298.333 172.848 298.333 172.848 298.428C172.848 298.524 172.812 298.447 172.848 298.428Z",
                    fill: "#FBD4DA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.848 298.428C172.848 298.428 172.848 298.428 172.848 298.333C172.848 298.333 172.848 298.333 172.848 298.428C172.848 298.524 172.812 298.447 172.848 298.428Z",
                    fill: "#FBD5DB"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.83 298.41C172.83 298.41 172.813 298.427 172.83 298.41V298.41Z",
                    fill: "#FCDDE2"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.809 298.389L172.825 298.372L172.809 298.389H172.793H172.809Z",
                    fill: "#FEF7F8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.809 298.389L172.825 298.372L172.809 298.389H172.793H172.809Z",
                    fill: "#FEF8F9"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M172.811 298.388L172.826 298.372L172.811 298.388Z",
                    fill: "#FEF9FA"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.551 293.053C166.379 293.074 166.205 293.074 166.033 293.053C165.811 293.053 165.866 292.439 165.848 292.419C165.829 292.4 165.718 292.266 165.736 292.151C165.755 292.035 166.162 291.69 166.218 291.67C166.273 291.651 166.329 291.67 166.329 291.67L166.459 291.574C166.459 291.574 166.31 291.67 166.31 291.747C166.31 291.824 166.31 291.863 166.31 291.939C166.261 291.999 166.218 292.063 166.181 292.131C166.181 292.131 166.181 292.227 166.181 292.247C166.278 292.27 166.38 292.27 166.477 292.247C166.588 292.247 166.625 292.112 166.644 292.112C166.662 292.112 166.644 292.266 166.459 292.323C166.273 292.381 166.255 292.439 166.181 292.323C166.107 292.208 166.181 292.496 166.329 292.515C166.439 292.536 166.552 292.536 166.662 292.515L166.533 292.957L166.551 293.053Z",
                    fill: "#A8AC71"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.348 294.34C165.392 294.364 165.428 294.4 165.455 294.444C165.481 294.488 165.495 294.538 165.496 294.59C165.496 294.782 165.329 294.935 165.329 295.281C165.329 295.627 165.329 295.607 165.81 295.972C165.873 296.027 165.918 296.101 165.94 296.183C165.94 296.279 166.033 296.913 166.44 296.913C166.847 296.913 166.903 296.644 166.903 296.644L166.736 296.375C166.663 296.392 166.587 296.392 166.514 296.375C166.472 296.364 166.434 296.342 166.402 296.312C166.37 296.282 166.345 296.244 166.329 296.203C166.329 296.087 166.329 295.857 166.199 295.742C166.07 295.627 165.718 295.435 165.718 295.146C165.718 294.858 165.903 294.839 165.847 294.513C165.815 294.403 165.76 294.301 165.687 294.215C165.613 294.129 165.523 294.06 165.422 294.013H165.273V294.34H165.348Z",
                    fill: "#A8AC71"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.46 292.073C166.608 292.073 166.46 291.67 166.46 291.67L166.367 291.766C166.38 291.816 166.38 291.869 166.367 291.919C166.374 291.97 166.374 292.022 166.367 292.073H166.46Z",
                    fill: "#F1A720"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.719 295.76C166.719 295.76 166.459 295.549 166.497 295.011C166.534 294.473 167.367 294.089 167.422 293.859C167.478 293.628 167.682 293.475 167.015 292.937L166.848 293.129L167.126 293.34C167.126 293.34 167.126 293.494 167.034 293.552C166.888 293.696 166.733 293.831 166.571 293.955L166.33 294.147C166.243 294.249 166.174 294.366 166.126 294.493C166.078 294.668 166.078 294.855 166.126 295.03C166.134 295.217 166.205 295.395 166.327 295.532C166.449 295.669 166.614 295.757 166.793 295.779L166.719 295.76Z",
                    fill: "#A8AC71"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.292 296.107V296.318H166.163H166.052L165.959 296.414C165.965 296.369 165.965 296.324 165.959 296.279H166.089V296.145L166.181 296.03L166.292 296.107Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.904 296.143V296.048H165.996V296.162V296.258L165.904 296.143Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.127 295.78C166.127 295.78 166.127 295.78 166.219 295.78V295.895H166.071H165.941V295.78H166.127Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.477 296.433H166.385V296.567V296.683H166.477V296.433Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.108 296.836H166.219V296.74H165.979L166.108 296.836Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.459 296.739L166.663 296.605V296.49H166.533V296.644V296.778L166.459 296.739Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.311 296.951C166.443 296.998 166.586 296.998 166.718 296.951C166.829 296.951 166.848 296.951 166.848 296.951H166.737L166.644 297.047L166.311 297.143V296.951Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.106 295.24V295.126C166.095 295.095 166.095 295.061 166.106 295.031L166.198 295.126L166.106 295.24Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M166.273 295.549H166.365V295.663L166.273 295.549Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.812 292.035C165.812 292.035 165.812 292.189 165.812 292.208C165.885 292.203 165.956 292.182 166.02 292.145C166.084 292.109 166.139 292.058 166.183 291.997C166.2 291.934 166.2 291.868 166.183 291.805V291.69C166.155 291.671 166.123 291.661 166.09 291.661C166.057 291.661 166.025 291.671 165.997 291.69C165.878 291.789 165.767 291.899 165.664 292.016L165.812 292.035Z",
                    fill: "#C6C7A6"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.051 291.786L165.922 291.92C165.998 291.89 166.067 291.845 166.126 291.786C166.197 291.758 166.276 291.758 166.348 291.786C166.348 291.786 166.237 291.786 166.218 291.786L166.051 291.901V291.786Z",
                    fill: "#A8AC71"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.423 295.182C166.416 295.151 166.416 295.118 166.423 295.087V294.992V295.087H166.533L166.423 295.182Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.053 294.953V294.761C166.045 294.678 166.045 294.595 166.053 294.512V294.627L166.164 294.819H166.053H165.941L166.053 294.953Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.421 294.913C166.415 294.882 166.415 294.85 166.421 294.818C166.415 294.78 166.415 294.742 166.421 294.704L166.311 294.799",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.126 294.34C166.12 294.295 166.12 294.25 166.126 294.205L166.237 294.052V294.263V294.436H166.033C166.037 294.398 166.037 294.359 166.033 294.321L166.126 294.34Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M166.513 294.647V294.551H166.254L166.513 294.647Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.349 294.091H166.441H166.552V294.341H166.423L166.33 294.225L166.349 294.091Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.681 294.474L166.829 294.321H166.57V294.493L166.681 294.474Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.774 294.032V293.763C166.737 293.757 166.7 293.757 166.663 293.763H166.57H166.663L166.774 294.032Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.106 294.071L167.236 293.956L167.366 293.821H167.014V293.956V294.09L167.106 294.071Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.33 292.919V293.072H166.626V292.976V292.88L166.33 292.919Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.867 294.338L166.997 294.223H167.089H166.83V294.415L166.867 294.338Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.42 293.783C167.426 293.707 167.426 293.63 167.42 293.553C167.428 293.502 167.428 293.45 167.42 293.399L167.217 293.553V293.649V293.745H167.309L167.42 293.783Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.033 293.515V293.399H167.422H167.329H167.2L167.033 293.515Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.403 294.972C165.47 294.959 165.539 294.959 165.606 294.972L165.611 294.976C165.683 294.994 165.773 295.088 165.773 295.088L165.611 294.976C165.603 294.974 165.595 294.972 165.588 294.972C165.533 294.961 165.476 294.961 165.421 294.972H165.403Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.403 294.492C165.403 294.492 165.403 294.492 165.532 294.358C165.555 294.344 165.58 294.337 165.606 294.337C165.632 294.337 165.658 294.344 165.681 294.358C165.658 294.346 165.632 294.34 165.606 294.34C165.581 294.34 165.555 294.346 165.532 294.358C165.492 294.394 165.46 294.44 165.44 294.492H165.403Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.653 294.729C165.755 294.759 165.755 294.857 165.755 294.857C165.734 294.805 165.698 294.76 165.653 294.729C165.644 294.726 165.635 294.724 165.625 294.723C165.559 294.701 165.488 294.701 165.421 294.723C165.493 294.695 165.572 294.695 165.644 294.723C165.647 294.725 165.65 294.727 165.653 294.729Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.355 294.398C165.358 294.411 165.361 294.423 165.366 294.435V294.512C165.352 294.475 165.349 294.436 165.355 294.398C165.345 294.353 165.349 294.305 165.366 294.262H165.455C165.456 294.249 165.457 294.236 165.458 294.224L165.366 294.243C165.386 294.201 165.418 294.167 165.458 294.147V294.224V294.243C165.458 294.249 165.457 294.256 165.456 294.262H165.458L165.456 294.264C165.454 294.286 165.453 294.308 165.454 294.33C165.454 294.352 165.456 294.374 165.458 294.396C165.456 294.374 165.454 294.352 165.454 294.33C165.453 294.309 165.454 294.287 165.455 294.266L165.366 294.358C165.361 294.371 165.357 294.385 165.355 294.398Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.995 292.63C166.037 292.613 166.083 292.613 166.125 292.63C166.117 292.642 166.111 292.655 166.106 292.668H166.125V292.822C166.162 292.764 166.213 292.718 166.273 292.687C166.268 292.703 166.265 292.72 166.263 292.736C166.273 292.732 166.282 292.729 166.292 292.726V292.86C166.323 292.793 166.375 292.739 166.44 292.706L166.292 292.86C166.333 292.913 166.384 292.959 166.44 292.994C166.376 292.971 166.319 292.931 166.273 292.879C166.269 292.896 166.267 292.912 166.265 292.929C166.265 292.957 166.268 292.986 166.273 293.014L166.262 293.002C166.263 293.032 166.266 293.061 166.273 293.091C166.215 293.041 166.165 292.983 166.125 292.918V293.071C166.117 293.001 166.117 292.93 166.125 292.86C166.103 292.826 166.092 292.786 166.092 292.745C166.092 292.718 166.097 292.692 166.106 292.668H165.921C165.876 292.694 165.836 292.728 165.803 292.769C165.799 292.774 165.795 292.778 165.792 292.783C165.795 292.778 165.799 292.774 165.803 292.769C165.838 292.725 165.878 292.684 165.921 292.649L165.995 292.63Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.681 294.588C165.626 294.573 165.568 294.573 165.514 294.588V294.492C165.569 294.479 165.626 294.479 165.681 294.492H165.847V294.588C165.793 294.569 165.735 294.569 165.681 294.588Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.921 293.167C166.994 293.186 167.07 293.186 167.143 293.167H167.125H166.921Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M166.493 292.65H166.291V292.802L166.493 292.65Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.273 292.649V292.801L166.439 292.63L166.273 292.649Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.238 293.073L166.09 292.842V293.034H166.312L166.238 293.073Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.83 296.817C166.718 296.887 166.59 296.927 166.459 296.933C166.362 296.957 166.26 296.957 166.163 296.933C166.111 296.895 166.072 296.841 166.052 296.779C166.002 296.677 165.97 296.566 165.959 296.452C165.972 296.35 165.972 296.247 165.959 296.145C165.868 296.035 165.762 295.938 165.645 295.857C165.58 295.808 165.527 295.744 165.489 295.671C165.451 295.598 165.428 295.518 165.422 295.435C165.403 295.307 165.403 295.178 165.422 295.051C165.478 294.965 165.51 294.865 165.515 294.763C165.489 294.704 165.451 294.651 165.404 294.609H165.311H165.219H165.33C165.337 294.647 165.337 294.686 165.33 294.724C165.349 294.819 165.349 294.917 165.33 295.012C165.277 295.134 165.246 295.264 165.237 295.396C165.262 295.569 165.348 295.726 165.478 295.838C165.608 295.953 165.719 296.011 165.774 296.107C165.842 296.237 165.88 296.382 165.885 296.529C165.877 296.606 165.877 296.683 165.885 296.76C165.895 296.793 165.912 296.824 165.934 296.851C165.957 296.877 165.984 296.899 166.015 296.913C166.112 296.939 166.214 296.939 166.311 296.913C166.451 296.91 166.586 296.863 166.7 296.779L166.83 296.817Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.662 296.414H166.55C166.531 296.426 166.508 296.432 166.486 296.432C166.463 296.432 166.44 296.426 166.421 296.414C166.404 296.351 166.404 296.285 166.421 296.222C166.421 296.222 166.421 296.049 166.421 295.934C166.341 295.813 166.241 295.709 166.125 295.627C166.013 295.627 165.902 295.454 165.884 295.358C165.867 295.269 165.867 295.178 165.884 295.089C165.905 294.975 165.905 294.858 165.884 294.743C165.869 294.667 165.838 294.594 165.793 294.531C165.748 294.468 165.691 294.416 165.625 294.379C165.558 294.321 165.483 294.276 165.402 294.244C165.488 294.278 165.569 294.323 165.643 294.379C165.7 294.412 165.748 294.459 165.783 294.516C165.819 294.573 165.84 294.638 165.847 294.705C165.868 294.813 165.868 294.924 165.847 295.031C165.83 295.127 165.83 295.224 165.847 295.32C165.889 295.444 165.975 295.547 166.087 295.608C166.207 295.679 166.304 295.786 166.365 295.915C166.386 296.003 166.386 296.095 166.365 296.184C166.38 296.265 166.418 296.339 166.476 296.395C166.524 296.413 166.577 296.413 166.625 296.395C166.667 296.406 166.712 296.406 166.754 296.395L166.662 296.414Z",
                    fill: "#78732E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 295.761C167.422 295.761 167.57 295.761 167.551 295.915C167.565 296.01 167.565 296.107 167.551 296.203L167.348 296.03L167.459 295.934V295.838L167.422 295.761Z",
                    fill: "#A8AC71"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.977 294.34C164.977 294.34 164.848 294.34 164.811 294.34C164.802 294.322 164.798 294.302 164.798 294.282C164.798 294.262 164.802 294.242 164.811 294.224C164.811 294.224 164.718 294.224 164.811 294.109C164.903 293.994 164.922 294.109 164.94 294.109C164.959 294.109 164.94 293.994 165.033 293.994C165.125 293.994 165.144 294.09 165.144 294.09V294.436L164.977 294.34Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M164.885 294.34H164.793C164.785 294.295 164.785 294.25 164.793 294.206C164.793 294.206 164.793 294.206 164.793 294.09C164.793 293.975 164.793 294.09 164.922 294.09V293.994C164.949 294.003 164.972 294.017 164.992 294.037C165.011 294.058 165.025 294.082 165.033 294.11V294.455H164.922L164.885 294.34ZM164.885 293.994C164.868 293.984 164.849 293.979 164.83 293.979C164.81 293.979 164.791 293.984 164.774 293.994C164.767 294.009 164.764 294.026 164.764 294.042C164.764 294.059 164.767 294.075 164.774 294.09C164.766 294.105 164.762 294.121 164.762 294.138C164.762 294.155 164.766 294.172 164.774 294.186H164.922V293.841L164.885 293.994Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.126 294.34C165.126 294.34 165.014 294.34 164.977 294.34C164.94 294.34 164.977 294.205 164.977 294.186C164.977 294.167 164.977 294.186 164.977 294.09C164.977 293.994 164.977 294.09 165.089 294.09C165.2 294.09 165.089 293.975 165.2 293.994C165.229 293.982 165.262 293.982 165.292 293.994C165.272 294.112 165.241 294.228 165.2 294.34H165.126Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.033 294.34C165.024 294.318 165.02 294.295 165.02 294.272C165.02 294.249 165.024 294.226 165.033 294.205C165.033 294.205 165.033 294.205 165.033 294.09C165.033 293.975 165.033 294.09 165.125 294.09C165.155 294.078 165.188 294.078 165.218 294.09C165.248 294.078 165.281 294.078 165.31 294.09C165.31 294.09 165.31 294.378 165.31 294.436H165.199L165.033 294.34ZM165.033 293.879C165.033 293.879 165.033 293.879 165.033 293.994H165.162C165.162 293.994 165.162 293.687 165.162 293.648L165.033 293.879Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.33 294.34C165.33 294.34 165.33 294.436 165.219 294.34C165.108 294.244 165.219 294.186 165.219 294.167C165.219 294.148 165.219 294.167 165.219 294.052C165.219 293.937 165.219 294.052 165.33 294.052C165.441 294.052 165.33 293.918 165.441 293.937C165.553 293.956 165.553 293.937 165.534 294.052C165.516 294.167 165.423 294.052 165.404 294.167C165.393 294.194 165.387 294.224 165.387 294.254C165.387 294.283 165.393 294.313 165.404 294.34H165.33Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M165.237 294.474C165.237 294.474 165.237 294.378 165.237 294.34C165.228 294.322 165.223 294.302 165.223 294.282C165.223 294.262 165.228 294.242 165.237 294.224C165.237 294.224 165.237 294.224 165.237 294.128C165.237 294.128 165.367 294.224 165.349 294.263C165.349 294.263 165.237 294.263 165.237 294.378C165.227 294.402 165.222 294.428 165.222 294.455C165.222 294.481 165.227 294.507 165.237 294.532C165.233 294.513 165.233 294.493 165.237 294.474ZM165.237 293.994C165.237 293.994 165.237 293.994 165.145 293.994C165.138 294.009 165.135 294.025 165.135 294.042C165.135 294.059 165.138 294.075 165.145 294.09V294.205C165.145 294.205 165.145 294.205 165.237 294.205C165.33 294.205 165.237 294.09 165.237 294.013C165.237 293.936 165.33 293.898 165.367 293.898C165.364 293.871 165.354 293.846 165.338 293.826C165.321 293.805 165.299 293.79 165.274 293.783L165.237 293.994Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.2 295.742C167.132 295.67 167.07 295.593 167.015 295.511L166.83 295.3L166.644 295.204L166.533 294.993V294.762V294.628C166.533 294.628 166.144 294.762 166.348 295.511C166.361 295.591 166.393 295.667 166.442 295.731C166.49 295.795 166.554 295.844 166.626 295.876H166.978L167.2 295.742Z",
                    fill: "#AF7029"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.016 293.264V293.36C166.904 293.648 166.627 293.782 166.405 293.955C166.274 294.033 166.165 294.146 166.09 294.282C166.001 294.446 165.956 294.631 165.96 294.819C165.948 294.966 165.972 295.114 166.03 295.248C166.089 295.383 166.179 295.499 166.293 295.587C166.421 295.672 166.568 295.719 166.719 295.722H167.423C167.432 295.753 167.432 295.786 167.423 295.818C167.431 295.8 167.435 295.78 167.435 295.76C167.435 295.74 167.431 295.721 167.423 295.703H167.33H167.182H166.83C166.685 295.699 166.544 295.653 166.423 295.568C166.312 295.482 166.223 295.368 166.165 295.238C166.106 295.107 166.081 294.963 166.09 294.819C166.086 294.631 166.131 294.446 166.219 294.282C166.354 294.106 166.517 293.957 166.701 293.84C166.893 293.733 167.053 293.574 167.164 293.379C167.164 293.379 167.164 293.379 167.071 293.379L167.016 293.264Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.513 295.857C167.513 295.857 167.513 296.028 167.403 296.028C167.293 296.028 167.494 296.028 167.513 296.028C167.458 296.018 167.402 296.018 167.348 296.028H167.439C167.439 296.028 167.439 295.895 167.439 295.876L167.513 295.857Z",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.866 295.972H167.644H167.533C167.543 295.948 167.548 295.922 167.548 295.896C167.548 295.869 167.543 295.843 167.533 295.819H167.403H167.199L166.811 295.377H166.959H167.181H167.422H167.551V295.473V295.608V295.915L167.866 295.972Z",
                    fill: "#FCCA3D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.885 295.954C167.824 295.97 167.761 295.97 167.7 295.954H167.533C167.537 295.992 167.537 296.03 167.533 296.069V296.338H167.755H167.866V296.05V295.877L167.885 295.954Z",
                    fill: "#AF7029"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.625 293.342V293.149V293.034L167.532 292.9L167.44 292.804H167.199L167.088 292.957C167.261 293.084 167.406 293.248 167.514 293.438C167.6 293.456 167.678 293.503 167.736 293.572V293.438L167.625 293.342Z",
                    fill: "#FCCA3D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 293.533C167.434 293.641 167.434 293.751 167.422 293.859L167.551 293.686L167.644 293.494C167.586 293.426 167.508 293.379 167.422 293.36C167.438 293.416 167.438 293.476 167.422 293.533Z",
                    fill: "#AF7029"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.716 296.259L167.606 296.126H167.496L167.716 296.259Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.865 296.106C167.835 296.163 167.797 296.214 167.754 296.26L167.568 296.375L167.809 296.471L167.957 296.317L167.865 296.106Z",
                    fill: "#6F5B24"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.275 290.652C169.275 290.652 168.701 290.537 168.701 291.036C168.701 291.19 168.701 291.248 168.868 291.267C169.07 291.3 169.261 291.386 169.423 291.516C169.492 291.566 169.548 291.632 169.587 291.709C169.625 291.786 169.646 291.871 169.646 291.958C169.661 292.028 169.661 292.1 169.646 292.169L169.775 292.822L169.905 293.302L170.294 293.072L170.516 292.361L170.238 291.075L169.331 290.652H169.275Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.793 293.323L169.645 292.824L169.515 292.171C169.524 292.101 169.524 292.03 169.515 291.96C169.514 291.875 169.496 291.791 169.461 291.715C169.425 291.639 169.374 291.571 169.311 291.518C169.166 291.414 169.003 291.342 168.83 291.307C168.7 291.307 168.663 291.211 168.663 291.057C168.642 291.012 168.631 290.963 168.631 290.913C168.631 290.863 168.642 290.814 168.663 290.769C168.811 290.596 169.126 290.654 169.145 290.654L170.052 291.095L170.348 292.382L170.126 293.093L169.793 293.323ZM169.552 292.171L169.682 292.824L169.811 293.285L170.163 293.054L170.385 292.363L170.107 291.095L169.2 290.673H169.071C168.955 290.667 168.842 290.709 168.756 290.788C168.693 290.862 168.66 290.958 168.663 291.057C168.663 291.191 168.663 291.249 168.811 291.287H168.904C169.081 291.305 169.249 291.379 169.385 291.499C169.454 291.552 169.51 291.622 169.549 291.702C169.587 291.782 169.607 291.87 169.607 291.96C169.608 292.034 169.589 292.107 169.552 292.171Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.775 293.111C169.775 293.111 169.979 293.111 170.016 292.881C170.053 292.65 169.831 292.631 169.812 292.631L169.979 292.727H170.09C170.09 292.727 170.201 292.497 170.09 292.439C170.04 292.359 169.977 292.288 169.905 292.228C169.845 292.206 169.78 292.206 169.72 292.228C169.792 292.204 169.87 292.204 169.942 292.228H170.035C170.05 292.126 170.05 292.023 170.035 291.921C170.021 291.885 169.999 291.853 169.969 291.829C169.94 291.806 169.905 291.791 169.868 291.786C169.807 291.775 169.744 291.775 169.683 291.786C169.755 291.765 169.832 291.765 169.905 291.786C170.016 291.786 170.016 291.786 170.016 291.786C170.022 291.703 170.022 291.62 170.016 291.537C169.975 291.47 169.918 291.417 169.849 291.383H169.646C169.699 291.361 169.759 291.361 169.812 291.383C169.923 291.383 169.923 291.383 169.942 291.383L169.59 291.229H169.275C169.275 291.229 169.386 291.229 169.368 291.229H169.146H168.979H168.738C168.738 291.229 168.738 291.229 168.849 291.229C168.96 291.229 168.849 291.133 168.849 291.133V291.018H169.164L169.831 291.421L170.146 291.69L170.331 292.228V293.111L169.886 293.495H169.683V293.303L169.775 293.111Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.276 290.884C169.265 290.84 169.265 290.793 169.276 290.749C169.276 290.653 169.276 290.749 169.276 290.749C169.145 290.729 169.012 290.764 168.906 290.845C168.758 290.961 168.906 291.191 168.906 291.191C168.945 291.141 168.996 291.101 169.054 291.076H169.295C169.295 291.076 169.295 291.076 169.202 290.98H169.035C169.096 290.962 169.16 290.962 169.22 290.98C169.332 290.98 169.35 290.98 169.35 290.98L169.276 290.884Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.867 293.188H169.719L169.812 293.822L170.386 294.839H170.682L170.775 294.647H170.867C170.927 294.755 171.009 294.847 171.108 294.916L171.33 295.012C171.33 295.012 171.719 295.569 171.738 295.588C171.756 295.607 171.738 295.377 171.738 295.377L171.645 295.089L171.534 294.897H171.682H171.793L171.941 295.012V295.108V295.223V295.358L172.034 295.55L172.126 295.723V295.511L171.978 294.993V294.82L172.145 294.935C172.194 294.988 172.237 295.046 172.275 295.108V295.3V295.473V295.607V295.761H172.367V295.646V295.281V294.916C172.41 294.973 172.441 295.039 172.46 295.108V295.454V295.761L172.571 296.088L172.663 296.28V296.395V296.26L172.534 294.935L172.626 295.089V295.3V295.723V296.011L172.756 296.337V296.51V296.299V294.859L172.867 294.974V295.3V296.203V296.433L173.126 294.071H173.293H173.182L172.923 293.649L172.738 293.245L172.441 292.65L171.904 291.978L171.478 291.613L171.33 291.517V291.421L171.423 291.287H171.164H170.978L170.627 291.037L170.256 290.845H170.034L169.497 290.691H168.96H168.719H168.516C168.456 290.712 168.404 290.753 168.368 290.807C168.346 290.875 168.346 290.949 168.368 291.018C168.368 291.133 168.367 291.191 168.59 291.248C168.763 291.338 168.931 291.44 169.09 291.555L169.256 291.728L169.367 292.65L169.145 293.169H168.997L169.867 293.188Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.441 294.648C170.441 294.648 170.534 294.821 170.664 294.648C170.793 294.475 170.664 294.149 170.664 294.13C170.664 294.11 170.664 294.13 170.664 294.13L170.756 294.322C170.782 294.409 170.782 294.503 170.756 294.59C170.731 294.712 170.665 294.821 170.571 294.898H170.404V294.686L170.441 294.648Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.793 296.837L173.663 296.452C173.663 296.452 173.663 296.203 173.663 296.164C173.663 296.126 173.663 295.492 173.663 295.377C173.677 295.288 173.677 295.197 173.663 295.108L173.534 294.935C173.555 294.808 173.555 294.678 173.534 294.551C173.446 294.313 173.341 294.082 173.219 293.86L173.367 293.975L173.7 294.11H173.885L173.996 294.34C174.019 294.544 174.019 294.75 173.996 294.955C174.032 295.151 174.032 295.353 173.996 295.55C173.939 295.867 173.901 296.188 173.885 296.51C173.897 296.58 173.897 296.651 173.885 296.721L173.793 296.837Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.793 295.742C173.839 295.68 173.871 295.608 173.886 295.531C173.951 295.15 173.951 294.76 173.886 294.379C173.79 294.29 173.676 294.224 173.553 294.187C173.572 294.292 173.603 294.395 173.645 294.494V294.609V294.763C173.659 294.929 173.659 295.096 173.645 295.262C173.645 295.492 173.645 295.742 173.645 295.742H173.793Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.313 296.26C173.327 296.011 173.327 295.761 173.313 295.511C173.342 295.372 173.342 295.228 173.313 295.089C173.225 294.918 173.157 294.738 173.109 294.551C173.066 294.374 173.01 294.201 172.943 294.033C172.943 294.033 172.795 293.86 172.776 293.898C172.77 293.93 172.77 293.963 172.776 293.994H172.646V293.86V293.706L172.813 293.841L173.146 294.071L173.313 294.801L173.461 295.243V296.664V296.376L173.313 296.26Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.498 294.34L173.646 294.455C173.646 294.455 173.794 294.551 173.776 294.551H173.609L173.498 294.34Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.849 296.146C172.877 296.032 172.877 295.913 172.849 295.8C172.834 295.552 172.791 295.307 172.719 295.07C172.614 294.946 172.521 294.811 172.442 294.667C172.395 294.525 172.333 294.39 172.256 294.264L172.09 294.052V293.783L172.368 293.918H172.497L172.645 294.648L172.775 294.859V295.147V295.819V296.376L172.608 296.03L172.849 296.146Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.515 295.838C172.526 295.697 172.526 295.556 172.515 295.415C172.49 295.279 172.439 295.148 172.367 295.031C172.246 294.899 172.134 294.758 172.034 294.609L171.719 294.186V293.917L171.885 294.033L172.071 294.129V294.455L172.163 294.666L172.311 294.878V294.974V295.3V295.492V295.761V295.895L172.515 295.838Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.275 295.838C172.295 295.782 172.295 295.721 172.275 295.665C172.283 295.563 172.283 295.46 172.275 295.358C172.275 295.262 172.275 295.185 172.183 295.166L171.813 294.82C171.723 294.721 171.623 294.631 171.516 294.551H171.387V294.225C171.387 294.225 171.498 294.379 171.553 294.398H171.738L171.961 294.82V294.916L172.183 295.108V295.281V295.492V295.78V295.953L172.275 295.838Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.831 295.743C171.756 295.668 171.698 295.576 171.664 295.474C171.664 295.474 171.664 295.474 171.664 295.262C171.593 295.114 171.492 294.982 171.368 294.878C171.238 294.878 171.09 294.629 171.09 294.552C171.09 294.475 171.09 294.552 171.09 294.552L171.442 294.955L171.553 295.166L171.645 295.416V295.551V295.704L171.831 295.743Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.126 293.784C173.126 293.784 173.367 294.11 173.441 293.784C173.436 293.651 173.404 293.52 173.348 293.4C173.256 293.219 173.151 293.046 173.034 292.881L172.571 292.267L172.293 292.132L172.386 292.305C172.577 292.51 172.739 292.743 172.867 292.996C173.023 293.212 173.102 293.477 173.089 293.745L173.126 293.784Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.682 291.863C171.983 292.133 172.256 292.436 172.497 292.765C172.812 293.245 172.941 293.553 172.867 293.63C172.793 293.706 172.589 293.63 172.515 293.457C172.4 293.194 172.25 292.948 172.071 292.727C171.951 292.562 171.8 292.425 171.626 292.324L171.404 291.959L171.682 291.863Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.423 292.9L171.904 293.361L172.182 293.707L172.293 293.841C172.293 293.841 172.293 293.707 172.293 293.668C172.293 293.63 172.293 293.668 172.293 293.668L171.367 292.651V292.92L171.423 292.9Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.369 292.938C171.433 293.064 171.514 293.181 171.609 293.284L171.943 293.61V293.86C171.943 293.86 171.517 293.514 171.517 293.591C171.517 293.668 171.609 293.86 171.609 293.86H171.48L171.294 293.591L171.202 293.361L171.072 293.034L171.369 292.938Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.09 293.975C170.09 293.975 170.312 294.186 170.423 293.975C170.454 293.909 170.47 293.837 170.47 293.764C170.47 293.691 170.454 293.618 170.423 293.553C170.423 293.553 170.738 294.033 170.812 293.553C170.812 293.457 170.627 293.149 170.627 293.149L170.793 293.418C170.835 293.389 170.869 293.349 170.892 293.301C170.915 293.254 170.926 293.202 170.923 293.149C170.903 292.999 170.852 292.855 170.775 292.727L170.923 292.881C170.923 292.881 171.219 292.881 171.219 292.708C171.219 292.535 171.127 292.42 171.127 292.42C171.127 292.42 171.33 292.42 171.312 292.304C171.293 292.189 171.053 292.112 171.053 292.036C171.05 292.012 171.054 291.988 171.064 291.966C171.073 291.945 171.088 291.926 171.107 291.912C171.126 291.899 171.148 291.89 171.171 291.888C171.194 291.886 171.217 291.891 171.238 291.901C171.367 291.901 171.534 292.036 171.608 291.901C171.682 291.767 171.608 291.728 171.608 291.728H171.442L171.164 291.575H170.96H170.719L170.812 291.748V292.228V292.458V292.938L170.701 293.322L170.608 293.534L170.479 293.687L170.293 293.918L170.145 294.09L170.09 293.975Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.646 294.877C171.609 294.782 171.552 294.697 171.479 294.628C171.376 294.599 171.267 294.599 171.164 294.628L171.497 294.973L171.646 294.877Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.107 294.954C172.041 294.83 171.96 294.714 171.867 294.609C171.756 294.474 171.663 294.301 171.645 294.301V294.589L171.867 294.801C171.867 294.801 172.089 294.974 172.144 294.954H172.107Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.479 294.936C172.436 294.762 172.374 294.595 172.293 294.437C172.238 294.31 172.156 294.199 172.053 294.11V294.341L172.164 294.59L172.33 294.84H172.46L172.479 294.936Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.773 294.801C172.811 294.578 172.811 294.351 172.773 294.128C172.722 294.044 172.643 293.983 172.551 293.956V294.34L172.662 294.609L172.754 294.724L172.773 294.801Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.09 293.937C173.152 293.996 173.203 294.068 173.238 294.148C173.333 294.378 173.407 294.615 173.46 294.859L173.145 294.359V293.899L173.09 293.937Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.96 294.532C170.96 294.532 171.127 294.532 171.127 294.436C171.127 294.34 170.941 294.263 170.941 294.167C170.941 294.071 171.108 294.167 171.127 294.167C171.145 294.167 170.96 293.86 171.015 293.802C171.071 293.745 171.219 294.09 171.219 294.09C171.238 294.179 171.238 294.271 171.219 294.359C171.108 294.666 170.904 294.551 170.904 294.551L170.96 294.532Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.348 294.168H171.589L171.367 293.938V293.803H171.552C171.552 293.803 171.385 293.534 171.385 293.496C171.385 293.458 171.385 293.496 171.385 293.496C171.466 293.58 171.54 293.67 171.607 293.765C171.652 293.824 171.685 293.892 171.705 293.964C171.724 294.037 171.728 294.113 171.718 294.187C171.718 294.379 171.311 294.187 171.348 294.187V294.168Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.44 293.783C172.44 293.783 172.44 293.611 172.44 293.591H172.533C172.471 293.582 172.409 293.582 172.348 293.591L172.459 293.783V293.918L172.44 293.783Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.699 293.917C171.699 293.917 172.07 294.013 172.088 293.917C172.107 293.821 171.792 293.591 171.792 293.591C171.792 293.591 171.94 293.591 171.977 293.591C172.014 293.591 171.977 293.687 171.977 293.706C171.977 293.725 172.107 293.917 172.144 293.879C172.181 293.84 172.144 293.629 172.144 293.61L172.329 293.764C172.329 293.764 172.569 293.956 172.588 293.879C172.592 293.834 172.592 293.789 172.588 293.744C172.588 293.744 172.588 293.956 172.588 293.994C172.556 294.008 172.521 294.016 172.486 294.016C172.451 294.016 172.416 294.008 172.384 293.994H172.292C172.292 293.994 172.292 294.186 172.292 294.225H171.995L171.792 294.09L171.699 293.917Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.57 293.649C172.57 293.649 172.959 293.898 172.996 293.841C173.033 293.783 172.904 293.226 172.996 293.149C173.089 293.072 173.33 293.821 173.163 293.917C172.996 294.013 172.996 293.917 172.996 293.917L172.811 293.821L172.644 293.629L172.57 293.649Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M173.682 294.684H173.773V294.589L173.682 294.684Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.182 293.11C173.196 293.119 173.212 293.123 173.229 293.123C173.245 293.123 173.261 293.119 173.275 293.11C173.275 293.11 173.275 293.11 173.275 293.11H173.164H172.979L173.108 293.283L173.182 293.11Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.533 294.34H173.681H173.774H173.57V294.225L173.533 294.34Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.868 292.42H172.978C172.978 292.42 172.978 292.534 172.978 292.553L172.85 292.363L172.868 292.42Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.293 291.902H172.422H172.533C172.562 292.009 172.562 292.121 172.533 292.228C172.533 292.228 172.237 292.075 172.237 292.055L172.107 291.844L172.293 291.902Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.034 291.785C172.034 291.785 172.238 291.785 172.219 291.67C172.215 291.632 172.203 291.595 172.184 291.562C172.165 291.529 172.139 291.5 172.108 291.478L171.867 291.651L172.034 291.785Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.516 291.536C171.551 291.551 171.591 291.551 171.627 291.536C171.627 291.536 171.83 291.306 171.942 291.267C172.053 291.229 172.09 291.267 172.108 291.267C172.127 291.33 172.127 291.397 172.108 291.459L171.756 291.632H171.645H171.534L171.516 291.536Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.461 291.171C171.444 291.13 171.418 291.094 171.386 291.064C171.354 291.034 171.317 291.012 171.275 290.999C171.275 290.999 171.387 291.133 171.424 291.306C171.445 291.401 171.445 291.499 171.424 291.594V291.171H171.461Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.979 290.999C170.864 290.861 170.717 290.755 170.553 290.691C170.553 290.691 170.867 290.903 170.942 291.037C171.016 291.171 170.942 291.344 171.053 291.363C171.164 291.383 171.053 291.363 171.053 291.363V291.21L170.979 290.999Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.533 290.807C170.293 290.635 170.01 290.541 169.718 290.538C169.441 290.538 169.311 290.538 169.348 290.73C169.385 290.922 169.515 290.96 169.737 290.96C169.878 290.94 170.022 290.94 170.163 290.96L170.459 291.133L170.255 290.922L170.052 290.768C170.052 290.768 170.052 290.768 170.181 290.768C170.27 290.777 170.355 290.805 170.432 290.852C170.509 290.898 170.575 290.962 170.626 291.037C170.64 291.12 170.64 291.204 170.626 291.287C170.631 291.249 170.631 291.21 170.626 291.172C170.602 291.106 170.564 291.047 170.515 290.999H170.422L170.533 290.807Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.756 293.207C169.871 293.161 169.972 293.083 170.048 292.982C170.123 292.88 170.169 292.758 170.182 292.631C170.186 292.268 170.116 291.908 169.978 291.575C169.978 291.575 169.978 291.575 170.126 291.575C170.251 291.859 170.32 292.165 170.33 292.477C170.344 292.594 170.328 292.714 170.282 292.822C170.236 292.93 170.163 293.023 170.071 293.092C169.99 293.188 169.878 293.249 169.756 293.265V293.207Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.184 294.167C170.204 294.177 170.226 294.182 170.248 294.182C170.271 294.182 170.293 294.177 170.313 294.167C170.424 294.167 170.609 294.013 170.609 293.84C170.609 293.668 170.461 293.61 170.461 293.572H170.591V293.764C170.591 293.764 170.591 293.764 170.702 293.764C170.813 293.764 170.906 293.629 170.869 293.514C170.832 293.399 170.721 293.264 170.702 293.207C170.692 293.176 170.692 293.142 170.702 293.111H170.832V293.284C170.832 293.284 170.832 293.284 170.924 293.284C171.017 293.284 171.128 293.13 171.091 293.072C171.056 292.991 171.013 292.913 170.961 292.842C170.961 292.842 170.961 292.842 171.091 292.842C171.22 292.842 171.276 292.746 171.276 292.688C171.289 292.631 171.289 292.572 171.276 292.515V292.611V292.727L171.165 292.861H171.054V292.976V293.149L170.943 293.245H170.813V293.399V293.572L170.646 293.687V293.783L170.535 293.937L170.35 294.071H170.221V293.956L170.184 294.167Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.219 292.42C171.219 292.42 171.533 292.516 171.515 292.305C171.496 292.094 171.219 291.921 171.182 291.883C171.171 291.845 171.171 291.805 171.182 291.767L171.33 291.921C171.33 291.921 171.533 291.921 171.589 291.921C171.645 291.921 171.589 291.729 171.589 291.729H171.737V291.902L171.626 292.363C171.626 292.363 171.626 292.555 171.515 292.574C171.416 292.565 171.321 292.532 171.237 292.478L171.219 292.42Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.515 294.878C171.533 294.822 171.533 294.761 171.515 294.705C171.445 294.654 171.37 294.609 171.293 294.571L171.515 294.859V294.878Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.96 294.897C171.96 294.897 171.812 294.686 171.775 294.609C171.738 294.532 171.664 294.398 171.59 294.398C171.515 294.398 171.59 294.647 171.59 294.647L171.83 294.878L171.96 294.897Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.403 294.878C172.34 294.767 172.284 294.651 172.236 294.532C172.193 294.407 172.13 294.291 172.051 294.187C171.958 294.187 172.051 294.283 172.051 294.283L172.143 294.571L172.292 294.801H172.403V294.878Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.719 294.685C172.719 294.685 172.719 294.455 172.719 294.301C172.713 294.248 172.697 294.197 172.671 294.151C172.646 294.105 172.612 294.065 172.571 294.032C172.562 294.122 172.562 294.212 172.571 294.301L172.757 294.685H172.719Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.368 294.859C173.368 294.859 173.257 294.59 173.22 294.456C173.18 294.333 173.124 294.217 173.054 294.11C173.045 294.193 173.045 294.277 173.054 294.36L173.183 294.763H173.331L173.368 294.859Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.941 294.148C173.854 294.057 173.745 293.991 173.626 293.956C173.485 293.897 173.334 293.865 173.182 293.86L173.274 293.956L173.497 294.071H173.793L173.941 294.148Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.608 294.34C171.609 294.45 171.641 294.557 171.7 294.647C171.814 294.785 171.938 294.913 172.071 295.031C172.141 295.192 172.197 295.359 172.237 295.531C172.266 295.674 172.303 295.815 172.348 295.953C172.348 295.953 172.348 296.107 172.348 296.088C172.348 296.069 172.256 296.088 172.237 295.953C172.219 295.819 172.237 295.953 172.237 295.78C172.204 295.544 172.129 295.316 172.015 295.108C171.824 294.949 171.65 294.769 171.497 294.571C171.386 294.379 171.497 294.34 171.497 294.34H171.608Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.126 295.589C172.074 295.473 172.037 295.35 172.015 295.224C172.015 295.224 171.719 294.898 171.663 294.859C171.607 294.821 171.515 294.859 171.478 294.859C171.374 294.756 171.275 294.647 171.182 294.533L171.552 294.936C171.663 295.032 171.7 295.243 171.774 295.416C171.79 295.486 171.79 295.558 171.774 295.628C171.773 295.657 171.781 295.687 171.798 295.711C171.815 295.736 171.839 295.753 171.867 295.762C171.787 295.68 171.724 295.582 171.682 295.474C171.638 295.292 171.57 295.117 171.478 294.955C171.62 295.032 171.741 295.144 171.83 295.282C171.845 295.409 171.883 295.533 171.941 295.647C171.982 295.757 172.038 295.86 172.107 295.954C172.045 295.856 171.989 295.753 171.941 295.647L172.126 295.589Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.699 293.917L171.958 294.052H172.051C172.072 294.253 172.128 294.448 172.218 294.628C172.289 294.738 172.376 294.835 172.477 294.916C172.478 295.145 172.515 295.372 172.588 295.588C172.674 295.801 172.712 296.03 172.699 296.26C172.699 296.26 172.588 296.087 172.514 295.895L172.366 295.377C172.326 295.241 172.256 295.116 172.162 295.012C172.261 295.112 172.331 295.238 172.366 295.377C172.366 295.588 172.458 295.819 172.495 295.819C172.532 295.819 172.495 295.819 172.495 295.819C172.495 295.819 172.495 295.665 172.495 295.454C172.481 295.322 172.45 295.193 172.403 295.07C172.324 294.983 172.255 294.886 172.199 294.782C172.118 294.644 172.056 294.495 172.014 294.34C172.014 294.34 172.014 294.34 172.014 294.225H171.884C171.816 294.174 171.76 294.108 171.718 294.033L171.699 293.917Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.201 293.841L172.386 293.956C172.441 293.968 172.498 293.968 172.553 293.956C172.544 294.155 172.582 294.353 172.664 294.532C172.736 294.664 172.823 294.787 172.923 294.897C172.923 294.897 172.923 294.897 172.923 295.454C172.923 296.011 172.923 295.954 172.923 296.146C172.946 296.433 172.946 296.722 172.923 297.01C172.923 297.01 172.923 296.568 172.923 296.414C172.807 296.22 172.726 296.005 172.683 295.781C172.659 295.548 172.622 295.317 172.572 295.089C172.572 294.917 172.423 294.916 172.423 294.916C172.464 294.925 172.502 294.943 172.534 294.97C172.566 294.997 172.592 295.031 172.609 295.07C172.652 295.299 172.683 295.529 172.701 295.761C172.755 295.976 172.836 296.183 172.942 296.376C172.957 296.107 172.957 295.838 172.942 295.569C172.942 295.281 172.942 295.032 172.942 294.916C172.942 294.801 172.775 294.724 172.701 294.571C172.65 294.4 172.606 294.227 172.572 294.052C172.572 294.052 172.572 294.052 172.479 294.052C172.386 294.052 172.294 293.88 172.294 293.88L172.201 293.841Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.57 293.649C172.64 293.731 172.722 293.802 172.811 293.86C172.891 293.869 172.972 293.869 173.052 293.86C173.065 294.071 173.109 294.278 173.181 294.475C173.236 294.596 173.311 294.707 173.404 294.801C173.404 294.801 173.404 295.685 173.404 295.973C173.404 296.261 173.404 297.221 173.404 297.221C173.404 297.221 173.404 296.51 173.404 296.338C173.374 296.251 173.337 296.168 173.293 296.088C173.293 295.953 173.293 295.435 173.144 295.128C172.996 294.82 173.015 294.859 173.015 294.859C173.1 294.916 173.159 295.006 173.181 295.109C173.181 295.301 173.181 295.934 173.311 296.05C173.381 296.15 173.437 296.26 173.478 296.376C173.502 295.941 173.502 295.505 173.478 295.07C173.284 294.848 173.116 294.603 172.978 294.34C172.978 294.091 172.978 294.052 172.978 294.033C172.9 294.016 172.83 293.976 172.774 293.918C172.694 293.846 172.626 293.762 172.57 293.668V293.649Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.145 293.803C173.145 293.803 173.145 293.938 173.441 294.034C173.598 294.084 173.759 294.116 173.922 294.13C174.048 294.399 174.111 294.695 174.107 294.994C174.099 295.282 174.049 295.567 173.959 295.839C173.959 296.242 173.959 297.068 173.83 297.202C173.823 297.247 173.823 297.292 173.83 297.337C173.83 297.433 173.83 297.567 173.83 297.587C173.83 297.606 173.83 297.471 173.83 297.394C173.941 297.058 173.941 296.693 173.83 296.357C173.83 296.089 173.83 295.224 173.83 295.148C173.783 295.053 173.727 294.963 173.663 294.879C173.743 294.93 173.807 295.003 173.848 295.09C173.848 295.205 173.848 296.165 173.848 296.357C173.848 296.549 173.848 296.357 173.848 296.204C173.848 296.05 173.848 295.628 173.848 295.378C173.838 295.074 173.776 294.775 173.663 294.495L173.756 294.668C173.834 294.882 173.872 295.11 173.867 295.34C173.867 295.762 173.867 296.703 173.867 296.722C173.867 296.742 173.867 296.204 173.996 295.781C174.126 295.359 174.163 295.301 174.126 294.956C174.13 294.681 174.066 294.41 173.941 294.168C173.781 294.144 173.626 294.099 173.478 294.034C173.311 293.899 173.2 293.784 173.219 293.765L173.145 293.803Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.242 292.566C171.215 292.558 171.178 292.555 171.127 292.555C171.165 292.565 171.203 292.568 171.242 292.566Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M173.922 294.128C173.922 294.128 174.052 294.128 174.07 294.128C174.089 294.128 174.07 294.128 173.904 293.994C173.737 293.859 173.496 292.976 173.182 292.534C172.893 292.126 172.543 291.77 172.145 291.478C172.561 291.746 172.92 292.099 173.2 292.515C173.663 293.207 173.774 293.763 173.904 293.898C174.033 294.032 174.163 294.071 174.144 294.109H173.978L173.922 294.128Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.053 293.937C170.053 293.937 170.238 293.764 170.219 293.725C170.174 293.705 170.136 293.672 170.108 293.629C170.09 293.58 170.09 293.525 170.108 293.476C170.108 293.476 170.108 293.591 170.201 293.61C170.223 293.624 170.249 293.631 170.275 293.631C170.301 293.631 170.326 293.624 170.349 293.61C170.349 293.61 170.608 293.399 170.59 293.322C170.566 293.333 170.541 293.338 170.516 293.338C170.49 293.338 170.465 293.333 170.442 293.322C170.429 293.265 170.429 293.206 170.442 293.149C170.464 293.205 170.503 293.252 170.553 293.284C170.578 293.299 170.607 293.307 170.636 293.307C170.665 293.307 170.694 293.299 170.719 293.284C170.719 293.284 170.886 293.034 170.867 292.957C170.844 292.968 170.819 292.973 170.793 292.973C170.768 292.973 170.743 292.968 170.719 292.957L170.608 292.784C170.642 292.84 170.695 292.881 170.756 292.9C170.756 292.9 170.923 292.9 170.923 292.804C170.923 292.708 170.923 292.496 170.923 292.419C170.923 292.343 170.793 292.419 170.719 292.419C170.667 292.382 170.628 292.328 170.608 292.266C170.651 292.321 170.709 292.361 170.775 292.381C170.797 292.397 170.822 292.405 170.849 292.405C170.875 292.405 170.901 292.397 170.923 292.381C170.95 292.3 170.95 292.212 170.923 292.131C170.923 292.131 170.923 292.131 170.83 291.939C170.803 291.959 170.772 291.973 170.74 291.979C170.707 291.985 170.674 291.983 170.642 291.974C170.61 291.965 170.58 291.948 170.555 291.926C170.53 291.903 170.51 291.875 170.497 291.843C170.526 291.856 170.558 291.863 170.59 291.863C170.621 291.863 170.653 291.856 170.682 291.843C170.717 291.843 170.75 291.829 170.774 291.804C170.798 291.779 170.812 291.745 170.812 291.709C170.829 291.646 170.829 291.58 170.812 291.517V291.382C170.812 291.382 170.812 291.382 170.645 291.382C170.612 291.381 170.581 291.369 170.554 291.348C170.528 291.328 170.508 291.3 170.497 291.267C170.552 291.279 170.609 291.279 170.664 291.267H170.775C170.775 291.267 170.775 291.133 170.59 290.979L170.312 290.749C170.429 290.816 170.541 290.893 170.645 290.979C170.72 291.044 170.783 291.122 170.83 291.21C170.83 291.21 170.979 291.21 170.997 291.21C171.013 291.177 171.022 291.141 171.022 291.104C171.022 291.067 171.013 291.031 170.997 290.998C170.949 290.922 170.893 290.851 170.83 290.787C170.904 290.853 170.966 290.931 171.016 291.018C171.016 291.114 171.016 291.21 171.016 291.229C171.016 291.248 171.275 291.363 171.33 291.325C171.386 291.286 171.33 291.21 171.33 291.133L171.238 290.979C171.281 291.025 171.319 291.077 171.349 291.133C171.349 291.133 171.349 291.267 171.349 291.306C171.349 291.344 171.349 291.306 171.349 291.306L171.534 291.421C171.627 291.421 171.719 291.421 171.738 291.421C171.75 291.364 171.75 291.305 171.738 291.248V291.018C171.749 291.094 171.749 291.172 171.738 291.248C171.738 291.248 171.738 291.402 171.738 291.44C171.738 291.478 171.738 291.44 171.738 291.44C171.708 291.453 171.677 291.459 171.645 291.459C171.613 291.459 171.582 291.453 171.553 291.44C171.441 291.44 170.942 291.152 170.923 291.171C170.905 291.19 171.145 291.363 171.275 291.479C171.341 291.547 171.397 291.624 171.441 291.709L171.256 291.575C171.139 291.503 171.015 291.445 170.886 291.402H170.997C170.997 291.402 170.997 291.498 170.997 291.536C170.997 291.575 171.367 291.843 171.367 291.882C171.336 291.92 171.299 291.953 171.256 291.978L171.034 291.843C171.034 291.843 171.145 291.959 171.145 291.997C171.145 292.035 171.145 291.997 171.145 292.112C171.145 292.227 171.367 292.323 171.349 292.381C171.33 292.439 171.238 292.496 171.256 292.515L171.386 292.688L171.238 292.573L171.127 292.458C171.127 292.458 171.034 292.631 171.127 292.669C171.219 292.708 171.219 292.765 171.238 292.861C171.253 292.931 171.253 293.003 171.238 293.072C171.238 293.072 171.108 292.9 171.071 292.9L170.979 293.111C170.979 293.111 171.108 293.111 171.127 293.264C171.145 293.327 171.145 293.394 171.127 293.456C171.076 293.388 171.021 293.324 170.96 293.264C170.889 293.325 170.827 293.396 170.775 293.476C170.775 293.476 170.886 293.591 170.775 293.61C170.664 293.629 170.775 293.61 170.627 293.61H170.497L170.053 293.937Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.145 291.44C172.145 291.44 172.275 291.287 172.238 291.267C172.201 291.248 172.071 291.267 171.997 291.267C171.923 291.267 171.849 291.267 171.627 291.075C171.065 290.721 170.431 290.511 169.775 290.461C169.423 290.461 169.257 290.576 169.238 290.653C169.301 290.596 169.375 290.553 169.454 290.526C169.534 290.5 169.618 290.491 169.701 290.499C170.388 290.519 171.058 290.725 171.646 291.094C171.646 291.094 171.868 291.325 172.053 291.287C172.238 291.248 172.275 291.287 172.275 291.287V291.402C172.269 291.433 172.269 291.466 172.275 291.498L172.145 291.44Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.126 291.594C170.063 291.496 169.988 291.405 169.904 291.325C169.702 291.184 169.484 291.068 169.256 290.979C169.481 291.079 169.692 291.208 169.885 291.363L170.126 291.594Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.126 292.42L169.997 292.286H169.793H170.015C170.064 292.327 170.102 292.38 170.126 292.439V292.42Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.071 292.017C170.015 291.974 169.952 291.941 169.885 291.921H169.719C169.754 291.905 169.792 291.897 169.83 291.897C169.868 291.897 169.906 291.905 169.941 291.921C169.972 291.93 170 291.947 170.023 291.97C170.046 291.994 170.062 292.023 170.071 292.055V292.017Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.98 291.651C169.946 291.595 169.893 291.554 169.832 291.536C169.758 291.523 169.683 291.523 169.609 291.536C169.694 291.508 169.784 291.508 169.869 291.536C169.886 291.539 169.902 291.544 169.917 291.553C169.932 291.562 169.945 291.574 169.955 291.589C169.966 291.603 169.973 291.619 169.977 291.637C169.982 291.654 169.982 291.672 169.98 291.69V291.651Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.83 291.402C169.744 291.351 169.65 291.319 169.552 291.306H169.219C169.36 291.289 169.503 291.289 169.645 291.306C169.716 291.344 169.779 291.396 169.83 291.46V291.402Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.385 291.152H169.108H168.756C168.922 291.128 169.09 291.128 169.256 291.152C169.367 291.152 169.385 291.152 169.385 291.152Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.072 296.261C168.09 296.301 168.118 296.335 168.155 296.359C168.191 296.383 168.233 296.395 168.276 296.395C168.424 296.395 168.535 296.625 168.535 296.625L168.368 296.779H167.998L167.887 296.568L168.072 296.241V296.261Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.997 296.875L167.867 296.664L168.052 296.337C168.073 296.375 168.103 296.407 168.138 296.43C168.174 296.454 168.214 296.468 168.256 296.472C168.404 296.472 168.515 296.683 168.515 296.683L168.367 296.836L167.997 296.875ZM167.886 296.664L167.997 296.856H168.367L168.515 296.721C168.515 296.721 168.404 296.51 168.275 296.51C168.232 296.508 168.191 296.495 168.155 296.471C168.12 296.448 168.09 296.415 168.071 296.376L167.886 296.664Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.071 296.26C168.039 296.136 167.967 296.028 167.867 295.953C167.867 295.953 167.867 295.953 167.867 296.087C167.867 296.222 167.867 296.202 167.867 296.202C167.867 296.202 167.867 296.318 167.867 296.375L168.071 296.26Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.905 296.26V296.222V296.107V296.068V295.972C167.918 295.984 167.93 295.996 167.942 296.009C168.008 296.081 168.059 296.166 168.09 296.26H167.905Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.996 296.586C168.038 296.6 168.083 296.6 168.125 296.586C168.155 296.593 168.186 296.593 168.216 296.586",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.089 296.625H168.18C168.144 296.631 168.107 296.631 168.07 296.625H168.089Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.942 296.491C167.942 296.491 168.146 296.337 168.127 296.261C168.109 296.184 168.127 296.165 168.035 296.261L167.887 296.395V296.568L167.942 296.491Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.941 296.51C167.933 296.453 167.933 296.395 167.941 296.337C167.941 296.337 168.089 296.203 168.108 296.184C168.108 296.184 167.922 296.433 167.904 296.453L167.941 296.51ZM168.071 296.184L167.904 296.318C167.894 296.369 167.894 296.421 167.904 296.472C167.904 296.472 168.089 296.318 168.089 296.26C168.089 296.203 168.071 296.26 168.071 296.26V296.184Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.793 296.606C167.793 296.606 167.793 296.702 167.886 296.702C167.921 296.7 167.956 296.69 167.988 296.674C168.02 296.657 168.048 296.634 168.071 296.606C168.071 296.606 168.071 296.491 167.941 296.471C167.811 296.452 167.793 296.471 167.793 296.471V296.567V296.606Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.886 296.722L167.775 296.606V296.491H167.905C167.957 296.529 167.996 296.583 168.016 296.645C168.016 296.645 167.961 296.722 167.886 296.722ZM167.794 296.606C167.794 296.606 167.794 296.702 167.886 296.702C167.979 296.702 168.053 296.702 168.053 296.606C168.046 296.576 168.033 296.548 168.013 296.525C167.994 296.502 167.97 296.483 167.942 296.472H167.831L167.794 296.606Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.98 296.452C167.98 296.452 167.832 296.452 167.795 296.568C167.757 296.683 167.665 296.452 167.702 296.433H167.813C167.813 296.433 167.813 296.433 167.906 296.433C167.998 296.433 167.906 296.433 167.906 296.433L167.98 296.452Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.795 296.568C167.768 296.559 167.745 296.545 167.725 296.524C167.706 296.504 167.692 296.48 167.684 296.452C167.684 296.452 167.684 296.452 167.684 296.452H167.795C167.795 296.452 167.887 296.452 167.906 296.452C167.848 296.504 167.777 296.537 167.702 296.548L167.795 296.568ZM167.795 296.337H167.684C167.698 296.344 167.714 296.348 167.73 296.348C167.746 296.348 167.762 296.344 167.776 296.337H167.961H167.795Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.849 296.548C167.849 296.548 167.645 296.836 167.553 296.817C167.46 296.798 167.553 296.414 167.553 296.414H167.645C167.7 296.396 167.758 296.396 167.812 296.414L167.849 296.548Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.553 296.836C167.553 296.836 167.553 296.472 167.553 296.433H167.646C167.646 296.433 167.794 296.433 167.813 296.433C167.813 296.433 167.646 296.836 167.553 296.836ZM167.553 296.433C167.54 296.554 167.54 296.677 167.553 296.798C167.553 296.798 167.775 296.606 167.831 296.529C167.887 296.452 167.738 296.529 167.683 296.529L167.553 296.433Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 296.26C167.422 296.26 167.681 296.26 167.7 296.26C167.718 296.26 167.57 296.375 167.496 296.375C167.422 296.375 167.496 296.164 167.496 296.164L167.422 296.26Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.554 296.548C167.461 296.548 167.461 296.376 167.461 296.337H167.739C167.704 296.429 167.638 296.504 167.554 296.548ZM167.554 296.356V296.529C167.613 296.551 167.679 296.551 167.739 296.529L167.554 296.356Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.813 296.759C166.813 296.759 166.812 296.894 166.961 296.894C167.109 296.894 167.183 296.778 167.183 296.778L166.924 296.663L166.813 296.759Z",
                    fill: "#202220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.887 296.721C166.911 296.754 166.941 296.782 166.976 296.802C167.012 296.822 167.05 296.833 167.09 296.836C167.19 296.828 167.283 296.78 167.35 296.702L167.127 296.51L166.887 296.721Z",
                    fill: "#202220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.887 296.721C166.907 296.758 166.937 296.788 166.973 296.809C167.009 296.829 167.05 296.839 167.09 296.836C167.195 296.826 167.293 296.778 167.368 296.702L167.127 296.491L166.887 296.721L167.127 296.491L167.35 296.683C167.278 296.751 167.187 296.791 167.09 296.798C167.042 296.814 166.99 296.814 166.942 296.798L166.887 296.721Z",
                    fill: "#4B4139"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.09 296.606C167.09 296.606 167.09 296.779 167.294 296.76C167.497 296.741 167.442 296.664 167.442 296.664L167.275 296.433L167.09 296.606Z",
                    fill: "#202220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.109 296.644C167.109 296.644 167.109 296.76 167.258 296.74H167.424H167.295L167.109 296.644Z",
                    fill: "#4B4139"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.85 296.817H166.961C167.01 296.826 167.06 296.826 167.109 296.817H166.998H166.85Z",
                    fill: "#4B4139"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.424 296.261C167.424 296.261 167.609 296.434 167.609 296.53C167.609 296.626 167.609 296.76 167.516 296.741C167.415 296.711 167.329 296.642 167.275 296.549C167.275 296.549 167.275 296.414 167.275 296.376L167.424 296.261Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.553 296.836C167.553 296.836 167.331 296.683 167.294 296.625C167.294 296.625 167.294 296.529 167.294 296.49C167.294 296.452 167.479 296.375 167.498 296.356C167.498 296.356 167.702 296.548 167.702 296.644C167.702 296.74 167.628 296.836 167.553 296.836ZM167.424 296.26C167.424 296.26 167.257 296.26 167.239 296.394C167.22 296.529 167.239 296.394 167.239 296.49C167.295 296.586 167.379 296.66 167.479 296.702C167.479 296.702 167.572 296.567 167.572 296.49C167.572 296.414 167.442 296.222 167.387 296.222L167.424 296.26Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.812 296.356C166.812 296.356 166.701 296.26 166.664 296.356C166.642 296.391 166.631 296.431 166.631 296.472C166.631 296.512 166.642 296.553 166.664 296.587H166.812V296.491V296.356Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.682 296.549C166.655 296.474 166.655 296.393 166.682 296.318H166.793V296.453C166.793 296.453 166.719 296.549 166.682 296.549ZM166.682 296.299C166.682 296.299 166.682 296.472 166.682 296.51H166.793V296.414C166.793 296.382 166.784 296.351 166.768 296.324C166.752 296.297 166.728 296.275 166.701 296.261L166.682 296.299Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.791 296.452H166.645C166.645 296.452 166.645 296.585 166.736 296.604H166.865V296.433L166.791 296.452Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.738 296.702C166.728 296.677 166.723 296.651 166.723 296.625C166.723 296.598 166.728 296.572 166.738 296.548C166.738 296.548 166.868 296.452 166.886 296.452V296.644L166.738 296.702ZM166.738 296.452H166.608C166.591 296.502 166.591 296.556 166.608 296.606H166.738V296.452Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.849 296.568H166.701C166.701 296.568 166.701 296.722 166.812 296.722C166.923 296.722 166.812 296.626 166.905 296.606C166.998 296.587 166.905 296.472 166.905 296.472L166.849 296.568Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.813 296.817C166.813 296.817 166.702 296.721 166.702 296.663C166.702 296.606 166.813 296.663 166.85 296.663C166.943 296.778 166.85 296.798 166.85 296.817C166.838 296.819 166.825 296.819 166.813 296.817ZM166.813 296.586H166.684C166.684 296.586 166.684 296.721 166.776 296.721C166.869 296.721 166.776 296.721 166.776 296.721L166.813 296.586Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.925 296.144C166.911 296.136 166.895 296.131 166.878 296.131C166.862 296.131 166.846 296.136 166.832 296.144C166.795 296.157 166.763 296.184 166.743 296.219C166.722 296.254 166.715 296.296 166.721 296.336C166.708 296.386 166.708 296.439 166.721 296.49H166.943V296.24L166.925 296.144Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.757 296.491C166.751 296.433 166.751 296.375 166.757 296.318C166.754 296.273 166.765 296.228 166.788 296.19C166.811 296.152 166.846 296.123 166.886 296.107H166.979V296.376L166.757 296.491ZM166.868 296.126C166.834 296.138 166.805 296.162 166.784 296.193C166.764 296.224 166.755 296.261 166.757 296.299C166.748 296.35 166.748 296.402 166.757 296.452H166.942V296.203L166.868 296.126Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.943 296.261C166.943 296.261 166.757 296.261 166.739 296.395C166.72 296.53 166.739 296.549 166.831 296.549C166.924 296.549 167.035 296.414 167.035 296.414L166.943 296.261Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.85 296.625C166.817 296.612 166.79 296.588 166.773 296.556C166.756 296.524 166.751 296.488 166.757 296.452C166.757 296.452 166.924 296.318 166.961 296.298L167.072 296.471C167.072 296.471 166.905 296.625 166.85 296.625ZM166.85 296.318C166.85 296.318 166.683 296.318 166.683 296.452C166.672 296.476 166.666 296.502 166.666 296.529C166.666 296.556 166.672 296.582 166.683 296.606C166.683 296.606 166.813 296.51 166.868 296.471L166.85 296.318Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.09 296.625C167.027 296.671 166.959 296.71 166.887 296.74C166.887 296.74 166.887 296.644 166.887 296.586C166.887 296.529 167.016 296.471 167.072 296.452C167.127 296.433 167.164 296.625 167.164 296.625H167.09Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.888 296.759C166.869 296.71 166.869 296.655 166.888 296.606C166.888 296.606 167.017 296.51 167.091 296.471C167.091 296.471 167.202 296.625 167.202 296.663C167.104 296.714 166.997 296.746 166.888 296.759ZM166.999 296.452C166.888 296.452 166.832 296.452 166.832 296.586C166.832 296.721 166.832 296.586 166.832 296.702L167.036 296.567C167.036 296.567 167.036 296.452 166.999 296.452Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.258 295.934C167.232 295.92 167.203 295.913 167.174 295.913C167.145 295.913 167.117 295.92 167.091 295.934C166.98 295.934 166.906 296.088 166.887 296.164C166.869 296.241 166.887 296.376 166.887 296.395C166.887 296.414 167.165 296.241 167.165 296.241V295.972L167.258 295.934Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.925 296.375C166.925 296.375 166.925 296.202 166.925 296.125C166.925 296.048 167.036 295.895 167.147 295.875C167.258 295.856 167.314 295.875 167.314 295.875V296.144C167.314 296.144 166.999 296.375 166.925 296.375ZM167.11 295.895C167.059 295.911 167.014 295.94 166.978 295.981C166.942 296.022 166.917 296.071 166.906 296.125C166.906 296.125 166.906 296.336 166.906 296.356C167.005 296.322 167.095 296.262 167.165 296.183V295.933C167.149 295.918 167.13 295.905 167.11 295.895Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.034 296.491C166.996 296.482 166.963 296.46 166.939 296.428C166.916 296.397 166.903 296.358 166.904 296.318C166.904 296.318 167.071 296.126 167.145 296.145C167.219 296.164 167.145 296.356 167.145 296.356C167.145 296.356 167.053 296.51 166.978 296.491H167.034Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.035 296.51C167.017 296.519 166.998 296.523 166.979 296.523C166.96 296.523 166.941 296.519 166.924 296.51C166.916 296.466 166.916 296.42 166.924 296.376C166.924 296.376 167.09 296.184 167.183 296.203C167.275 296.222 167.183 296.414 167.183 296.433C167.183 296.433 167.127 296.51 167.035 296.51ZM167.035 296.145C166.988 296.157 166.945 296.178 166.906 296.208C166.868 296.238 166.836 296.275 166.813 296.318C166.807 296.356 166.807 296.395 166.813 296.433C166.813 296.433 166.813 296.433 166.905 296.433C166.998 296.433 167.035 296.337 167.072 296.299C167.109 296.26 167.072 296.107 167.072 296.088L167.035 296.145Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.275 296.491C167.247 296.543 167.209 296.589 167.164 296.625C167.164 296.625 167.034 296.625 166.997 296.625C166.96 296.625 166.997 296.625 166.997 296.51C167.04 296.501 167.084 296.501 167.127 296.51L167.219 296.625L167.275 296.491Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.09 296.645C167.09 296.645 167.09 296.645 166.979 296.645C166.868 296.645 166.979 296.549 166.979 296.51C167.028 296.5 167.078 296.5 167.127 296.51L167.238 296.645C167.238 296.645 167.238 296.741 167.109 296.779L167.09 296.645ZM167.183 296.376H167.053C167.053 296.376 167.146 296.472 167.22 296.376C167.262 296.349 167.295 296.309 167.312 296.261L167.183 296.376Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.146 296.26C167.146 296.26 167.146 296.26 167.146 296.414C167.146 296.568 167.239 296.529 167.295 296.529C167.35 296.529 167.406 296.529 167.461 296.529C167.517 296.529 167.572 296.529 167.572 296.376C167.572 296.222 167.572 296.241 167.48 296.222C167.425 296.216 167.37 296.223 167.318 296.243C167.267 296.263 167.221 296.295 167.184 296.337L167.146 296.26Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.293 296.529C167.261 296.519 167.231 296.502 167.206 296.478C167.18 296.455 167.16 296.427 167.145 296.395C167.145 296.395 167.145 296.241 167.145 296.222C167.219 296.159 167.309 296.119 167.404 296.107C167.416 296.134 167.422 296.163 167.422 296.193C167.422 296.223 167.416 296.252 167.404 296.28V296.395C167.398 296.425 167.384 296.453 167.365 296.476C167.345 296.5 167.321 296.518 167.293 296.529ZM167.164 296.241C167.149 296.264 167.141 296.291 167.141 296.318C167.141 296.345 167.149 296.372 167.164 296.395C167.177 296.426 167.197 296.453 167.223 296.473C167.249 296.493 167.28 296.506 167.312 296.51C167.312 296.51 167.312 296.51 167.442 296.51C167.45 296.495 167.454 296.479 167.454 296.462C167.454 296.445 167.45 296.429 167.442 296.414C167.453 296.39 167.459 296.364 167.459 296.337C167.459 296.311 167.453 296.284 167.442 296.26C167.351 296.23 167.254 296.23 167.164 296.26V296.241Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.424 295.876C167.37 295.86 167.312 295.86 167.258 295.876C167.224 295.894 167.195 295.922 167.176 295.956C167.156 295.99 167.146 296.029 167.147 296.068V296.26C167.201 296.273 167.258 296.273 167.313 296.26V296.164C167.307 296.149 167.303 296.133 167.303 296.116C167.303 296.1 167.307 296.083 167.313 296.068C167.313 295.953 167.313 295.934 167.313 295.934L167.424 295.876Z",
                    fill: "#202220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 295.876H167.256C167.209 295.919 167.171 295.971 167.144 296.03V296.126C167.134 296.088 167.134 296.048 167.144 296.011C167.144 296.011 167.144 295.876 167.274 295.857L167.422 295.876Z",
                    fill: "#4B4139"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.035 297.892H170.165L170.313 297.796V297.988L170.183 298.103H170.054L170.035 297.892Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.089 298.046H169.996H170.107L170.274 297.931V298.142L170.126 298.258L170.089 298.046ZM170.089 298.046H170.2L170.348 297.931V297.778L170.2 297.874H170.07L170.089 298.046Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.831 297.912H169.923C169.923 297.912 169.923 297.912 170.033 297.912C170.038 297.95 170.038 297.988 170.033 298.026H169.923H169.812V297.893L169.831 297.912Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.923 298.181H169.793V298.008H170.034L169.923 298.181ZM169.83 298.181H169.923H170.034C170.04 298.149 170.04 298.116 170.034 298.085H169.812L169.83 298.181Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.811 297.855L170.645 297.682V298.104H170.83L170.922 297.97L170.811 297.855Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.553 298.027V297.585L170.756 297.758V297.854L170.664 297.988L170.553 298.027ZM170.553 297.643V298.008H170.719V297.892L170.553 297.643Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.83 297.912C169.83 297.912 169.831 297.912 169.738 297.912C169.7 297.911 169.662 297.922 169.629 297.942C169.597 297.962 169.57 297.992 169.553 298.027C169.553 298.027 169.553 298.258 169.553 298.277C169.576 298.297 169.606 298.308 169.636 298.308C169.667 298.308 169.696 298.297 169.719 298.277C169.899 298.194 170.072 298.097 170.238 297.989H170.016C169.973 297.998 169.929 297.998 169.886 297.989C169.886 297.989 169.886 297.989 169.793 297.989C169.701 297.989 169.793 297.893 169.793 297.893L169.83 297.912Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.7 298.314H169.589C169.589 298.314 169.589 298.103 169.589 298.046C169.589 297.988 169.681 297.911 169.755 297.911C169.775 297.899 169.797 297.893 169.82 297.893C169.843 297.893 169.865 297.899 169.885 297.911V298.007C169.885 298.007 169.885 298.007 169.978 298.007C170.019 298.023 170.065 298.023 170.107 298.007H170.218H170.329C170.329 298.007 169.903 298.276 169.829 298.295L169.7 298.314ZM169.7 297.892C169.7 297.892 169.533 297.892 169.533 298.007C169.533 298.122 169.533 298.218 169.533 298.257C169.559 298.272 169.587 298.28 169.616 298.28C169.646 298.28 169.675 298.272 169.7 298.257C169.859 298.177 170.014 298.087 170.163 297.988H169.996C169.976 297.997 169.954 298.002 169.931 298.002C169.909 298.002 169.887 297.997 169.866 297.988C169.866 297.988 169.774 297.988 169.755 297.988V297.873L169.7 297.892Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.127 298.065H170.016V298.219H170.201L170.312 298.123V298.18H170.182L170.127 298.065Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.145 298.354H169.941V298.2H170.053H170.201V298.181L170.145 298.354ZM169.96 298.354H170.145V298.181H170.034H169.941L169.96 298.354Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.959 297.97C170.945 297.963 170.929 297.96 170.913 297.96C170.897 297.96 170.882 297.963 170.867 297.97L170.775 298.084V298.179H170.867H170.959V298.084V297.97Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.887 298.181H170.775V298.085C170.775 298.085 170.775 297.97 170.868 297.97C170.961 297.97 170.868 297.97 170.979 297.97V298.181H170.887ZM170.887 298.181V298.085C170.887 298.085 170.887 298.085 170.887 298.2V298.181Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.349 297.893H170.22L170.127 297.989L170.22 298.104H170.312L170.516 297.951V297.816L170.349 297.893Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.311 298.18H170.2L170.107 298.065H170.219H170.385V298.218L170.311 298.18ZM170.219 298.18H170.311L170.496 298.045V297.93H170.367C170.33 297.92 170.292 297.92 170.256 297.93L170.219 298.18Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.128 298.065C171.11 298.057 171.091 298.052 171.072 298.052C171.053 298.052 171.034 298.057 171.016 298.065L170.924 298.18H171.128H171.22L171.128 298.065Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.127 298.181H170.979C170.979 298.181 170.979 298.046 171.09 298.046H171.201V298.143L171.127 298.181ZM170.997 298.181H171.108L170.997 298.296V298.181Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.979 298.623C169.924 298.637 169.867 298.637 169.813 298.623C169.795 298.56 169.795 298.493 169.813 298.431C169.804 298.409 169.799 298.386 169.799 298.363C169.799 298.34 169.804 298.317 169.813 298.296C169.832 298.284 169.855 298.278 169.877 298.278C169.9 298.278 169.922 298.284 169.942 298.296C169.973 298.359 170.026 298.408 170.09 298.431H170.22L170.312 298.315L170.461 298.2C170.461 298.2 170.461 298.2 170.461 298.296C170.461 298.296 170.553 298.296 170.59 298.162C170.657 298.145 170.727 298.145 170.794 298.162C170.813 298.186 170.824 298.217 170.824 298.248C170.824 298.28 170.813 298.31 170.794 298.335L170.627 298.546H170.461C170.429 298.529 170.403 298.505 170.383 298.475C170.364 298.444 170.352 298.409 170.349 298.373C170.35 298.407 170.359 298.441 170.375 298.471C170.391 298.501 170.414 298.527 170.442 298.546C170.442 298.546 170.553 298.546 170.609 298.546L170.757 298.354C170.772 298.331 170.78 298.304 170.78 298.277C170.78 298.249 170.772 298.223 170.757 298.2H170.59C170.59 298.2 170.498 298.354 170.442 298.335C170.433 298.303 170.433 298.27 170.442 298.239H170.312C170.307 298.266 170.295 298.292 170.279 298.316C170.263 298.339 170.243 298.358 170.22 298.373H170.072C170.083 298.404 170.083 298.438 170.072 298.469C170.003 298.445 169.944 298.398 169.905 298.335C169.888 298.326 169.869 298.322 169.85 298.322C169.83 298.322 169.811 298.326 169.794 298.335C169.794 298.335 169.794 298.335 169.794 298.469C169.777 298.525 169.777 298.586 169.794 298.642C169.826 298.667 169.865 298.68 169.905 298.68C169.945 298.68 169.984 298.667 170.016 298.642C170.034 298.621 170.045 298.593 170.045 298.565C170.045 298.537 170.034 298.509 170.016 298.488H170.146H170.035C170.035 298.488 170.035 298.488 169.942 298.488C169.85 298.488 169.942 298.488 169.942 298.488C169.942 298.488 169.942 298.603 169.942 298.661L169.979 298.623Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.589 297.393V297.662C170.613 297.763 170.613 297.868 170.589 297.969C170.589 297.969 170.367 297.969 170.349 297.969C170.332 297.88 170.332 297.789 170.349 297.7L170.627 297.412L170.589 297.393Z",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.459 298.027C170.459 298.027 170.329 298.027 170.311 298.027C170.303 297.931 170.303 297.835 170.311 297.739L170.625 297.413V297.72C170.625 297.72 170.625 297.95 170.625 298.027C170.601 298.044 170.572 298.054 170.542 298.054C170.512 298.054 170.483 298.044 170.459 298.027ZM170.311 297.701C170.303 297.784 170.303 297.867 170.311 297.95C170.331 297.961 170.353 297.966 170.375 297.966C170.398 297.966 170.42 297.961 170.44 297.95C170.457 297.96 170.476 297.966 170.496 297.966C170.515 297.966 170.534 297.96 170.551 297.95V297.662V297.413L170.311 297.701Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.387 298.181C170.387 298.181 170.387 298.276 170.478 298.276C170.57 298.276 170.589 298.162 170.589 298.162",
                    fill: "#F8C83C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.684 298.295C170.693 298.326 170.693 298.36 170.684 298.391V298.295Z",
                    fill: "#977C2E"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.424 298.411C169.424 298.411 169.424 298.296 169.424 298.258C169.424 298.219 169.553 298.258 169.59 298.258C169.627 298.258 169.59 298.142 169.59 298.104C169.59 298.104 169.312 298.104 169.331 298.296C169.328 298.341 169.339 298.386 169.362 298.424C169.386 298.462 169.42 298.491 169.461 298.507L169.424 298.411Z",
                    fill: "#202220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.829 298.853C169.829 298.853 169.737 298.719 169.829 298.642C169.922 298.565 169.922 298.642 169.94 298.642C169.959 298.642 169.94 298.642 169.94 298.508C169.94 298.373 169.848 298.373 169.829 298.373C169.777 298.394 169.733 298.431 169.703 298.479C169.673 298.528 169.659 298.585 169.663 298.642C169.675 298.698 169.703 298.75 169.742 298.79C169.781 298.831 169.831 298.86 169.885 298.872L169.829 298.853Z",
                    fill: "#202220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.292 298.699C171.292 298.699 171.57 298.815 171.588 298.527C171.592 298.469 171.578 298.412 171.548 298.364C171.518 298.315 171.474 298.278 171.422 298.258C171.422 298.258 171.422 298.258 171.329 298.258C171.237 298.258 171.237 298.373 171.329 298.392C171.422 298.411 171.422 298.392 171.459 298.392C171.496 298.392 171.366 298.546 171.366 298.546L171.292 298.699Z",
                    fill: "#202220"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.832 298.852C169.769 298.836 169.714 298.799 169.674 298.747C169.634 298.695 169.611 298.631 169.609 298.564C169.609 298.43 169.758 298.353 169.758 298.353C169.758 298.353 169.609 298.353 169.609 298.564C169.611 298.631 169.634 298.695 169.674 298.747C169.714 298.799 169.769 298.836 169.832 298.852Z",
                    fill: "#4B4139"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.422 298.41C169.422 298.41 169.293 298.41 169.274 298.199C169.256 297.988 169.571 298.007 169.571 298.007C169.571 298.007 169.274 298.007 169.293 298.218C169.311 298.429 169.422 298.41 169.422 298.41Z",
                    fill: "#4B4139"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.902 292.42H168.05H168.347V292.612L168.05 292.784V292.669L167.902 292.42Z",
                    fill: "#904720"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.681 296.933V296.472L169.496 296.856L169.959 297.317L170.681 296.933Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.459 296.125H168.367H168.256H168.145L168.256 296.26L168.441 296.356L168.348 296.125H168.459Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.44 296.26V296.356V296.472H168.311L167.922 296.337V296.241H168.033L168.44 296.26Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.682 296.663V296.03L168.367 295.626V295.857V296.241V296.49L168.682 296.663Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.459 295.779C168.459 295.779 168.459 295.779 168.459 295.933C168.478 296.147 168.535 296.355 168.626 296.548L168.533 296.394C168.431 296.179 168.38 295.942 168.385 295.703C168.385 295.415 168.385 295.703 168.385 295.703L168.459 295.779Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.701 296.03C168.659 296.073 168.628 296.126 168.608 296.184C168.605 296.241 168.605 296.299 168.608 296.356V296.26C168.608 296.26 168.608 296.453 168.608 296.472C168.619 296.344 168.619 296.215 168.608 296.088H168.516L168.701 296.03Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.718 296.837L168.366 296.741C168.181 296.741 168.088 296.587 168.088 296.549C168.088 296.511 168.421 296.549 168.477 296.549H168.662H168.81V296.722H168.606L168.718 296.837Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.125 296.759C168.125 296.759 168.217 296.759 168.125 296.855H167.939L168.273 296.951L167.995 296.817L168.125 296.759Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.033 296.664C168.033 296.664 168.033 296.664 168.181 296.664C168.242 296.681 168.306 296.681 168.367 296.664V296.76H168.144H168.033V296.664Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.829 296.491V296.587V296.395V296.26H168.699L168.829 296.491Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.477 296.145L168.385 295.972L168.236 295.703L168.329 295.569L168.422 295.722C168.411 295.786 168.411 295.851 168.422 295.914V296.145H168.477Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.773 296.817C167.79 296.791 167.811 296.768 167.837 296.752C167.863 296.735 167.891 296.725 167.921 296.721H168.107L168.329 296.836H167.921H167.736L167.773 296.817Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.828 296.068C168.821 296.176 168.821 296.285 168.828 296.394C168.828 296.394 168.828 296.548 168.828 296.586C168.828 296.625 168.828 296.586 168.828 296.586C168.779 296.596 168.729 296.596 168.68 296.586H168.791C168.784 296.516 168.784 296.445 168.791 296.375C168.791 296.279 168.791 296.183 168.791 296.183C168.777 296.068 168.777 295.952 168.791 295.837L168.92 295.972L168.828 296.068Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.088 296.74C168.12 296.783 168.163 296.817 168.212 296.837C168.261 296.857 168.314 296.864 168.366 296.856H168.68C168.686 296.894 168.686 296.933 168.68 296.971L168.495 297.086V296.894H168.31L168.088 296.74Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.479 296.145C168.346 296.009 168.234 295.854 168.145 295.684C168.103 295.54 168.103 295.386 168.145 295.242L168.386 295.588C168.367 295.637 168.367 295.692 168.386 295.742C168.416 295.883 168.466 296.019 168.534 296.145H168.479Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.31 297.163C168.299 297.142 168.293 297.119 168.293 297.095C168.293 297.072 168.299 297.049 168.31 297.028C168.465 296.867 168.656 296.749 168.866 296.683V296.932L168.347 297.182L168.31 297.163Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.347 296.99L168.458 296.875C168.458 296.875 168.458 296.875 168.292 296.875H168.088L168.273 297.009L168.347 296.99Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.014 297.047C168.976 296.988 168.945 296.923 168.922 296.855C168.915 296.798 168.915 296.74 168.922 296.683H168.829H168.681H168.829H168.589C168.589 296.683 168.792 296.683 168.774 296.683C168.755 296.683 168.681 296.683 168.57 296.798H168.385C168.427 296.809 168.472 296.809 168.514 296.798H168.737L169.051 296.683L169.014 297.047Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.014 297.047C169.014 297.047 169.014 297.047 168.866 296.644C168.847 296.485 168.847 296.323 168.866 296.164L169.014 296.26L169.144 296.51L169.051 297.047H169.014Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.07 296.414C169.056 296.528 169.056 296.645 169.07 296.759C169.051 296.854 169.051 296.953 169.07 297.048C169.112 297.117 169.162 297.182 169.218 297.24V296.779L169.033 296.471L169.07 296.414Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.275 296.702C169.275 296.702 169.275 297.24 169.182 297.24C169.09 297.24 169.016 297.048 169.016 297.048C169.016 297.048 169.127 297.24 169.182 297.221C169.238 297.202 169.182 296.664 169.182 296.664L169.275 296.702Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.015 297.047C169.015 297.047 169.015 297.047 168.737 297.201C168.618 297.248 168.486 297.248 168.367 297.201C168.367 297.201 168.367 297.201 168.737 297.201L169.015 297.086V297.047Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.513 296.376L168.605 296.51V296.683V296.51L168.42 296.241V296.395L168.513 296.376Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.347 297.029C168.347 297.029 168.347 297.029 168.347 296.913H168.107H167.773C167.848 296.963 167.929 297.002 168.014 297.029H168.292H168.347Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.347 297.029C168.254 297.036 168.161 297.036 168.069 297.029L167.791 296.913C167.872 296.977 167.968 297.017 168.069 297.029H168.365H168.347Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.44 296.261C168.366 296.246 168.291 296.246 168.218 296.261L168.088 296.433H168.199C168.186 296.377 168.186 296.317 168.199 296.261C168.266 296.244 168.336 296.244 168.403 296.261H168.44Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.125 295.992C168.166 296.045 168.217 296.091 168.273 296.126L168.44 296.222C168.447 296.273 168.447 296.325 168.44 296.376C168.336 296.328 168.237 296.27 168.143 296.203C168.107 296.135 168.076 296.065 168.051 295.992H168.125Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.366 296.049C168.335 296.042 168.304 296.042 168.273 296.049C168.273 296.049 168.162 296.049 168.144 296.049L168.236 296.183C168.236 296.183 168.088 296.087 168.125 296.068C168.162 296.049 168.329 296.068 168.329 296.068L168.366 296.049Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.014 295.723L170.385 294.994L171.033 295.935L169.848 296.261H169.237L168.922 296.031L169.014 295.723Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.849 296.125L172.552 297.662L172.367 297.796L171.978 297.681L171.145 296.836L170.83 296.509L170.849 296.125Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 297.355L172.014 296.587L170.773 295.626V296.087L172.181 297.431L172.644 297.662H172.884L172.996 297.527V297.431L172.977 297.355Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.849 296.261C171.117 296.571 171.408 296.86 171.719 297.125C172.089 297.413 172.441 297.739 172.515 297.701C172.589 297.662 172.515 297.605 172.515 297.605L170.793 296.145V296.261H170.849Z",
                    fill: "#803F1D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.051 297.739L171.884 297.892L171.68 297.796L170.625 296.683V296.491H170.773L172.051 297.739Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.977 297.354C172.977 297.354 172.847 297.68 172.588 297.604C171.931 297.138 171.312 296.618 170.736 296.048V296.259C171.309 296.816 171.928 297.317 172.588 297.757C172.684 297.776 172.783 297.764 172.873 297.723C172.962 297.682 173.037 297.613 173.088 297.527L172.94 297.411L172.977 297.354Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.68 296.51C170.907 296.822 171.154 297.117 171.42 297.394C171.68 297.624 171.902 297.816 172.013 297.797C172.124 297.778 172.013 297.663 172.013 297.663L171.291 296.894L170.902 296.51H170.754H170.68Z",
                    fill: "#803F1D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.811 296.51C170.811 296.51 172.033 297.816 172.125 297.835C172.218 297.854 172.625 297.681 172.625 297.681H172.533C172.533 297.681 172.533 297.816 172.218 297.681C171.72 297.317 171.266 296.891 170.866 296.414L170.811 296.51Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.272 297.757L170.809 297.22L170.717 297.047V296.816L171.606 297.757H171.476H171.365H171.272Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M172.07 297.777C172.07 297.777 171.977 297.949 171.829 297.911C171.736 297.885 171.652 297.832 171.588 297.757L170.736 296.893V296.759C171.076 297.15 171.448 297.51 171.847 297.834C171.959 297.834 172.051 297.719 172.051 297.719L172.07 297.777Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.607 297.739C171.607 297.739 171.607 297.873 171.44 297.854C171.386 297.875 171.327 297.875 171.273 297.854L170.736 297.22V297.047C170.929 297.347 171.152 297.624 171.403 297.873C171.42 297.879 171.438 297.881 171.456 297.879C171.474 297.878 171.491 297.872 171.507 297.863C171.522 297.854 171.536 297.842 171.547 297.827C171.558 297.812 171.565 297.795 171.57 297.777L171.607 297.739Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M171.125 296.049L171.68 296.529H171.921H171.792C171.874 296.632 171.974 296.716 172.088 296.779H172.347C172.347 296.779 172.199 296.779 172.18 296.779C172.256 296.876 172.35 296.955 172.458 297.009H172.773C172.773 297.009 172.551 297.009 172.569 297.009C172.588 297.009 172.94 297.297 172.921 297.336C172.903 297.374 172.477 297.028 172.458 297.048C172.466 297.092 172.466 297.138 172.458 297.182C172.458 297.182 172.458 297.048 172.458 296.99C172.391 296.881 172.294 296.794 172.18 296.74V296.875C172.18 296.875 172.18 296.74 172.18 296.683C172.091 296.588 171.992 296.504 171.884 296.433C171.884 296.433 171.884 296.548 171.884 296.568C171.884 296.587 171.884 296.433 171.884 296.395C171.685 296.217 171.5 296.025 171.329 295.819L171.125 296.049Z",
                    fill: "#B07229"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.164 297.508C170.164 297.508 170.164 297.719 170.164 297.738C170.164 297.758 169.904 297.374 169.904 297.374V297.009L170.164 297.258L170.275 297.508H170.164Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.846 297.413V297.297C170.85 297.259 170.85 297.221 170.846 297.182V296.971V296.836L170.717 296.933V297.067V297.317V297.547H170.846V297.413Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.682 297.758C170.691 297.662 170.691 297.566 170.682 297.47L170.534 297.067V296.932H170.404V297.028V297.201L170.59 297.566C170.59 297.566 170.775 297.835 170.83 297.816L170.682 297.758Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.533 296.894C170.585 296.962 170.622 297.041 170.644 297.124C170.688 297.229 170.72 297.338 170.737 297.451C170.737 297.451 170.866 297.604 170.922 297.585C170.978 297.566 170.922 297.432 170.922 297.393C170.922 297.355 170.922 297.393 170.922 297.393C170.904 297.272 170.904 297.149 170.922 297.028V296.817C170.922 296.817 171.052 297.048 171.052 297.201C171.057 297.112 171.057 297.022 171.052 296.932V296.74C171.052 296.74 171.052 296.74 171.052 296.625C171.052 296.625 171.052 296.625 171.052 296.471C171.061 296.299 171.061 296.126 171.052 295.953L170.496 296.702L170.663 296.913L170.533 296.894Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.533 296.836C170.507 296.97 170.507 297.107 170.533 297.24C170.533 297.451 170.625 297.451 170.625 297.489C170.644 297.578 170.644 297.67 170.625 297.758C170.551 297.577 170.489 297.391 170.44 297.201C170.418 297.109 170.387 297.019 170.348 296.933L170.551 296.836H170.533Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.477 297.912V297.816V297.624L170.291 297.221L170.088 297.029L169.977 296.836V297.182C170.041 297.338 170.122 297.486 170.217 297.624L170.514 297.912H170.477Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.699 296.989C169.709 297.04 169.709 297.092 169.699 297.143V297.239L169.829 297.546C169.829 297.662 169.977 297.796 170.032 297.777C170.088 297.758 170.032 297.642 170.125 297.642C170.218 297.642 170.125 297.642 170.014 297.642C169.936 297.463 169.874 297.277 169.829 297.085V296.97L169.699 296.989Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.274 297.451L170.125 297.182C170.125 297.182 170.125 297.028 170.014 297.028C169.903 297.028 170.014 296.875 170.014 296.875C170.046 296.93 170.091 296.976 170.144 297.009C170.144 297.009 170.255 297.009 170.292 297.009C170.297 297.067 170.297 297.125 170.292 297.182V297.393L170.274 297.451Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.923 297.182C169.949 297.258 169.986 297.329 170.034 297.393C170.085 297.484 170.147 297.568 170.219 297.643L170.015 297.412C169.968 297.335 169.93 297.251 169.904 297.163L169.923 297.182Z",
                    fill: "#5C3A1D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.292 297.029H170.403H170.292C170.292 297.029 170.292 297.029 170.2 296.913C170.196 296.971 170.196 297.029 170.2 297.086V297.221L170.292 297.029Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.254 297.067C170.254 297.067 170.421 297.413 170.458 297.528C170.474 297.623 170.474 297.721 170.458 297.816V297.605C170.398 297.46 170.33 297.319 170.254 297.182C170.251 297.144 170.251 297.105 170.254 297.067Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.477 296.836V296.337V296.164L170.255 295.646C170.155 295.625 170.064 295.572 169.996 295.492C170.012 295.568 170.012 295.647 169.996 295.722C170.004 295.78 170.004 295.838 169.996 295.895L170.422 296.721H170.551L170.477 296.836Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.625 297.182C169.625 297.182 169.625 297.182 169.736 297.182C169.847 297.182 169.736 297.028 169.736 296.932C169.551 296.626 169.334 296.343 169.088 296.087L169.662 297.124L169.625 297.182Z",
                    fill: "#8B441F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.976 296.874C169.976 296.874 169.976 297.143 169.976 297.162C169.976 297.182 169.272 296.375 169.198 296.26C169.124 296.145 168.828 296.029 168.828 295.972C168.828 295.914 169.217 295.972 169.217 295.972L169.976 296.74V296.874Z",
                    fill: "#8B441F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.625 297.182C169.61 297.112 169.61 297.04 169.625 296.971C169.638 296.92 169.638 296.867 169.625 296.817C169.485 296.576 169.33 296.346 169.162 296.126L168.977 296.01C168.98 296.062 168.98 296.113 168.977 296.164C169.075 296.339 169.187 296.506 169.31 296.663L169.717 297.144L169.625 297.182Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.253 297.067C170.253 297.067 170.253 296.837 170.253 296.779C170.253 296.721 169.883 295.973 169.883 295.973L169.679 295.819L169.568 295.704C169.583 295.786 169.583 295.871 169.568 295.953V296.107L169.846 296.587L170.29 297.029L170.253 297.067Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.644 296.625V296.51V296.145L170.421 295.357C170.404 295.366 170.385 295.37 170.366 295.37C170.347 295.37 170.328 295.366 170.31 295.357L170.199 295.242V295.722L170.44 296.394V296.586H170.551L170.644 296.625Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.941 296.817C169.833 296.697 169.734 296.569 169.645 296.433L169.496 296.184C169.454 296.195 169.409 296.195 169.367 296.184C169.296 296.146 169.233 296.094 169.182 296.03C169.182 296.03 169.182 296.164 169.441 296.491C169.7 296.817 169.941 296.817 169.941 296.817Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.477 296.894C170.569 296.894 170.569 296.453 170.477 296.165C170.423 295.983 170.348 295.809 170.254 295.646C170.342 295.852 170.417 296.064 170.477 296.28C170.477 296.453 170.477 296.587 170.477 296.587C170.477 296.587 170.477 296.472 170.365 296.299L170.254 296.069C170.254 296.069 170.514 296.817 170.44 296.798C170.26 296.525 170.105 296.236 169.977 295.934C169.977 295.934 170.291 296.952 170.532 296.856L170.477 296.894Z",
                    fill: "#8B441F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.7 294.915L170.848 295.261V295.626V295.933V296.567C170.831 296.577 170.812 296.582 170.792 296.582C170.773 296.582 170.754 296.577 170.737 296.567L170.607 295.857L170.459 295.146V295.031H170.626L170.7 294.915Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.257 297.067V296.894C170.215 296.813 170.178 296.73 170.146 296.644V296.51C170.146 296.51 170.146 296.644 170.034 296.644C169.893 296.479 169.769 296.299 169.664 296.107C169.664 296.107 170.109 297.028 170.423 296.99L170.257 297.067Z",
                    fill: "#8B441F"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.05 296.663C170.07 296.575 170.07 296.483 170.05 296.394C170.002 296.248 169.94 296.106 169.865 295.972H169.754L169.568 295.857C169.568 295.857 169.661 296.087 169.754 296.26L170.013 296.663H170.05Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.311 296.471C170.283 296.278 170.227 296.09 170.144 295.914C170.092 295.786 170.016 295.669 169.922 295.569C169.93 295.626 169.93 295.684 169.922 295.742V295.857C170.006 295.908 170.076 295.981 170.126 296.068C170.126 296.222 170.292 296.471 170.292 296.471H170.311Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.643 295.973C170.652 295.813 170.652 295.652 170.643 295.492C170.635 295.358 170.635 295.223 170.643 295.089L170.736 295.262V294.955H170.625C170.625 294.955 170.625 294.955 170.625 295.07C170.625 295.185 170.625 295.07 170.625 295.07C170.634 295.121 170.634 295.173 170.625 295.224C170.63 295.275 170.63 295.326 170.625 295.377C170.657 295.475 170.694 295.572 170.736 295.665L170.829 295.992L170.643 295.973Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.923 295.935C170.961 295.699 170.961 295.459 170.923 295.224C170.891 295.092 170.834 294.968 170.756 294.859C170.844 295 170.906 295.156 170.941 295.32C170.981 295.504 171.012 295.69 171.034 295.877L170.923 295.935Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.478 296.261C170.488 296.069 170.488 295.877 170.478 295.685C170.478 295.473 170.386 295.397 170.386 295.397L170.293 295.301C170.3 295.403 170.3 295.506 170.293 295.608C170.298 295.646 170.298 295.685 170.293 295.723L170.404 295.934C170.455 296.04 170.499 296.149 170.534 296.261H170.478Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.718 296.721C170.718 296.721 170.718 296.222 170.718 296.088L170.496 295.358C170.496 295.358 170.718 296.222 170.7 296.261C170.681 296.299 170.589 295.992 170.57 296.011C170.552 296.03 170.755 296.587 170.681 296.587C170.607 296.587 170.57 296.472 170.57 296.472V296.587C170.587 296.625 170.612 296.657 170.645 296.68C170.678 296.704 170.716 296.718 170.755 296.721H170.718Z",
                    fill: "#904720"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.809 296.472C170.809 296.472 170.809 295.992 170.809 295.781C170.809 295.569 170.643 295.147 170.643 295.147C170.729 295.35 170.791 295.563 170.828 295.781C170.828 296.107 170.939 296.549 170.828 296.549C170.858 296.561 170.891 296.561 170.92 296.549L170.809 296.472Z",
                    fill: "#904720"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.032 297.028C170.032 297.028 170.032 297.22 169.939 297.2C169.846 297.181 169.717 297.047 169.68 296.951C169.643 296.855 169.865 297.162 169.921 297.162C169.976 297.162 169.921 296.951 169.921 296.893V297.028H170.032Z",
                    fill: "#312317"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.458 294.763C170.489 294.781 170.524 294.791 170.559 294.791C170.595 294.791 170.63 294.781 170.661 294.763C170.698 294.732 170.728 294.694 170.75 294.652C170.773 294.609 170.786 294.562 170.791 294.513C170.817 294.445 170.817 294.37 170.791 294.302C170.809 294.371 170.809 294.444 170.791 294.513C170.791 294.628 170.791 294.859 170.587 294.916C170.383 294.974 170.476 294.916 170.476 294.916V294.763H170.458Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.293 294.34C170.37 294.467 170.432 294.602 170.478 294.743C170.478 294.955 170.478 295.031 170.478 295.031L170.33 294.417L170.293 294.34Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.033 294.628L168.885 295.914L169.959 294.666L169.274 293.936L168.033 294.628Z",
                    fill: "#1E2121"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.107 293.84V294.032L169.2 294.378L169.385 294.57L169.589 294.704V294.551V294.359H169.718L169.811 294.224L169.959 293.975V293.859L169.737 293.456V293.61H169.607L169.459 293.821H169.274L169.107 293.84Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.55 294.704C169.55 294.704 169.55 294.705 169.55 294.589C169.568 294.411 169.568 294.23 169.55 294.052C169.524 293.924 169.48 293.801 169.42 293.687C169.487 293.871 169.525 294.066 169.531 294.263C169.531 294.57 169.531 294.666 169.531 294.685C169.531 294.704 169.531 294.685 169.531 294.685L169.55 294.704Z",
                    fill: "#5C3818"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.606 294.205C169.606 294.205 169.754 294.398 169.81 294.34C169.865 294.282 169.81 293.994 169.81 293.879C169.769 293.8 169.738 293.716 169.717 293.629C169.723 293.725 169.723 293.821 169.717 293.917C169.717 294.013 169.828 294.34 169.717 294.398C169.606 294.455 169.477 294.282 169.477 294.282L169.606 294.205Z",
                    fill: "#5C3818"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.145 294.34C169.145 294.34 169.145 294.34 169.256 294.34C169.367 294.34 169.256 294.34 169.256 294.34V294.513L169.348 294.686V294.782L169.145 294.667V294.417V294.34Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.479 296.26C169.479 296.26 169.257 296.26 169.183 296.145L168.627 295.588V295.319H168.812L169.108 295.185V295.07L169.479 294.877L169.701 294.762H170.145L170.257 294.532C170.325 294.653 170.381 294.782 170.423 294.916C170.423 295.031 170.423 295.377 170.423 295.396C170.423 295.415 170.238 295.3 170.219 295.281C170.201 295.262 170.331 295.761 170.219 295.78C170.108 295.799 169.923 295.607 169.923 295.607C169.923 295.607 169.923 296.03 169.923 296.049C169.767 296.019 169.624 295.938 169.516 295.818C169.516 295.818 169.608 296.183 169.516 296.241L169.479 296.26Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.403 295.607L169.495 295.741C169.504 295.837 169.504 295.933 169.495 296.029C169.495 296.029 169.366 295.933 169.31 295.78L169.125 295.453L169.421 295.607H169.403Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.273 294.513C170.273 294.513 170.44 295.204 170.273 295.224C170.106 295.243 169.995 295.012 169.958 294.974L169.625 294.436H169.755L170.236 294.571L170.273 294.513Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.145 295.838C169.145 295.838 169.053 295.838 169.016 295.723L168.775 295.435C168.705 295.373 168.643 295.302 168.59 295.224C168.59 295.224 169.016 295.569 169.053 295.627C169.07 295.754 169.07 295.884 169.053 296.011L169.145 295.838Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.792 295.838C169.623 295.746 169.477 295.615 169.366 295.454C169.255 295.281 169.125 295.127 169.088 295.051C169.094 294.993 169.094 294.935 169.088 294.878H169.181C169.423 295.175 169.646 295.489 169.847 295.819L169.792 295.838Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.904 295.531C169.904 295.531 169.755 295.531 169.681 295.339C169.666 295.302 169.658 295.263 169.658 295.224C169.658 295.184 169.666 295.145 169.681 295.108C169.783 295.239 169.87 295.38 169.941 295.531H169.904Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.07 295.473C170.07 295.473 169.866 295.3 169.718 295.07C169.57 294.839 169.589 294.859 169.57 294.859C169.534 294.847 169.495 294.847 169.459 294.859V294.743L169.811 295.454V295.627L170.07 295.473Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.273 296.05C169.273 296.05 169.273 296.05 169.18 296.05C168.851 295.933 168.57 295.703 168.384 295.397L168.125 294.974L168.218 294.859L168.995 295.781L169.273 296.011V296.05Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.273 296.049C169.273 296.049 169.273 296.049 169.181 296.049C168.959 295.959 168.766 295.806 168.625 295.607C168.457 295.423 168.314 295.216 168.199 294.993V294.839H168.292L168.829 295.665L169.292 296.049H169.273Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.699 295.684C169.601 295.615 169.513 295.53 169.44 295.434C169.31 295.293 169.204 295.131 169.125 294.954C169.125 294.954 169.218 294.954 169.218 294.954V294.762H169.366L169.551 295.011C169.599 295.116 169.636 295.225 169.662 295.338C169.662 295.338 169.458 295.165 169.44 295.184C169.421 295.203 169.625 295.568 169.606 295.588L169.699 295.684Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.403 295.607C169.417 295.651 169.417 295.698 169.403 295.742C169.403 295.742 169.403 295.742 169.273 295.742L169.107 295.492V295.684C169.107 295.684 168.94 295.53 168.866 295.415L168.662 295.089C168.676 295.032 168.676 294.972 168.662 294.916V294.705L168.94 295.05H169.032L169.199 295.396L169.366 295.569L169.403 295.607Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.293 295.088C168.419 295.316 168.568 295.528 168.737 295.722C168.862 295.862 169.013 295.973 169.182 296.049L168.497 295.223L168.293 295.088Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.014 295.339C169.922 295.254 169.841 295.157 169.773 295.051C169.691 294.924 169.641 294.779 169.625 294.628C169.62 294.532 169.62 294.436 169.625 294.34C169.726 294.45 169.813 294.572 169.884 294.705C169.884 294.82 170.032 294.974 170.014 294.993C169.995 295.012 169.829 294.878 169.81 294.993C169.792 295.108 169.995 295.396 169.977 295.416L170.014 295.339Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.273 295.069C170.273 295.069 170.125 294.935 170.106 294.858C170.098 294.769 170.098 294.679 170.106 294.589L170.014 294.34V294.071H170.125L170.273 294.282C170.292 294.39 170.292 294.501 170.273 294.608C170.273 294.781 170.273 295.069 170.273 295.089V295.069Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.458 295.762C168.335 295.598 168.223 295.425 168.125 295.243V294.994C168.198 295.226 168.333 295.432 168.514 295.589C168.631 295.725 168.761 295.847 168.903 295.954C168.903 295.954 168.903 296.127 168.903 296.184C168.753 296.039 168.61 295.885 168.477 295.723L168.458 295.762Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.792 296.126C168.792 296.126 168.533 295.876 168.311 295.608C168.177 295.434 168.059 295.247 167.959 295.051V294.955C168.047 295.169 168.152 295.374 168.274 295.569L168.7 296.126H168.792Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.272 296.049L168.79 295.53C168.688 295.422 168.6 295.3 168.531 295.166H168.679C168.716 295.272 168.772 295.37 168.846 295.454L169.272 295.991V296.049Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.125 295.454C169.03 295.347 168.943 295.231 168.866 295.109C168.8 295.006 168.745 294.897 168.699 294.782C168.699 294.782 168.922 295.07 168.996 295.09C168.981 295.146 168.981 295.206 168.996 295.262V295.454H169.125Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.273 294.57C169.287 294.652 169.287 294.737 169.273 294.819C169.273 294.915 169.273 294.915 169.273 294.915L169.422 295.088L169.607 295.242L169.459 295.011C169.459 295.011 169.348 294.858 169.459 294.781C169.57 294.704 169.625 294.781 169.662 294.781L169.866 295.031C169.84 294.924 169.789 294.825 169.718 294.742L169.403 294.493L169.273 294.57Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.884 295.031C169.834 294.919 169.791 294.803 169.754 294.686C169.754 294.551 169.606 294.244 169.606 294.244C169.616 294.32 169.616 294.398 169.606 294.474C169.632 294.568 169.632 294.668 169.606 294.762H169.477C169.513 294.774 169.552 294.774 169.588 294.762C169.588 294.762 169.588 294.628 169.588 294.647C169.588 294.666 169.588 294.782 169.699 294.839L169.828 295.031H169.884Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.607 294.339C169.607 294.339 169.774 294.531 169.848 294.455C169.922 294.378 169.848 294.109 169.848 294.109C169.848 294.109 169.941 294.109 169.978 294.109C170.015 294.109 169.978 293.994 169.978 293.994C170.075 294.134 170.162 294.281 170.237 294.435C170.303 294.588 170.347 294.75 170.367 294.915C170.278 294.763 170.203 294.602 170.144 294.435C170.144 294.205 169.978 294.109 169.959 294.128C169.938 294.216 169.938 294.309 169.959 294.397C169.994 294.497 170.038 294.593 170.089 294.685L170.181 294.973L170.033 294.762C170.033 294.762 169.941 294.666 169.904 294.627L169.774 294.512H169.626L169.607 294.339Z",
                    fill: "#202020"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.053 295.07C169.101 295.17 169.157 295.267 169.219 295.358L169.405 295.608C169.322 295.533 169.248 295.449 169.182 295.358C169.126 295.269 169.082 295.172 169.053 295.07Z",
                    fill: "#171717"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M170.142 295.128H170.031C170.013 295.197 170.013 295.27 170.031 295.339H170.124C170.124 295.339 170.124 295.339 170.124 295.205C170.124 295.07 170.124 295.09 170.124 295.07C170.124 295.051 170.124 295.07 170.124 295.07L170.142 295.128Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.181 293.899H168.089L167.959 294.129V294.59L168.126 294.84C168.126 294.936 168.422 295.185 168.477 295.185C168.533 295.185 168.589 294.993 168.589 294.897C168.595 294.801 168.595 294.705 168.589 294.609L168.737 294.82C168.829 294.82 168.903 295.012 168.94 295.012C168.977 295.012 169.107 294.744 169.107 294.705C169.016 294.418 168.911 294.136 168.792 293.86H168.663H168.126L168.181 293.899Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.885 294.59V294.897V295.089C168.977 294.994 169.041 294.874 169.07 294.743C169.082 294.571 169.082 294.397 169.07 294.225C169.032 294.087 169.032 293.94 169.07 293.802H168.977L168.811 294.148V294.666L168.885 294.59Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.328 294.34C168.328 294.34 168.328 294.647 168.328 294.763C168.355 294.856 168.393 294.946 168.439 295.031C168.439 295.031 168.569 294.743 168.587 294.667C168.552 294.509 168.552 294.344 168.587 294.187C168.587 293.86 168.587 293.822 168.587 293.822L168.384 294.34H168.328Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.903 293.745C167.777 293.92 167.695 294.125 167.662 294.34C167.662 294.552 167.662 294.494 167.755 294.686C167.798 294.85 167.829 295.017 167.847 295.185V293.784L167.903 293.745Z",
                    fill: "#45392D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.903 293.802C167.794 293.962 167.724 294.146 167.699 294.34C167.705 294.47 167.743 294.595 167.81 294.705C167.828 294.858 167.828 295.013 167.81 295.166H167.958C168.021 295.122 168.071 295.062 168.107 294.993V294.82V294.647V294.551V294.225V293.975L167.903 293.802Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.088 294.339H168.941C168.934 294.308 168.934 294.275 168.941 294.244L169.124 294.453L169.088 294.339Z",
                    fill: "#DBAD6C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.94 293.84C167.859 294.028 167.815 294.23 167.811 294.435C167.835 294.627 167.885 294.815 167.959 294.992V294.263V294.032V293.898L167.94 293.84Z",
                    fill: "#D2A567"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.329 293.917C168.339 293.968 168.339 294.02 168.329 294.071C168.329 294.071 168.237 294.167 168.2 294.244C168.191 294.32 168.191 294.398 168.2 294.474C168.222 294.418 168.253 294.366 168.292 294.321C168.31 294.39 168.31 294.463 168.292 294.532C168.292 294.532 168.292 294.532 168.292 294.685C168.27 294.754 168.27 294.828 168.292 294.897V294.705L168.385 294.897C168.378 294.846 168.378 294.794 168.385 294.743C168.385 294.743 168.385 294.57 168.496 294.57C168.607 294.57 168.496 294.57 168.496 294.57C168.459 294.445 168.459 294.311 168.496 294.186C168.496 294.186 168.644 294.186 168.625 294.186L168.496 293.994L168.292 294.186L168.329 293.917Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.052 294.686C168.06 294.723 168.06 294.763 168.052 294.801V294.935C168.047 294.846 168.047 294.756 168.052 294.666C168.052 294.551 168.052 294.474 168.052 294.474C168.04 294.411 168.04 294.346 168.052 294.282C168.052 294.282 168.052 294.148 168.052 294.129C168.052 294.109 168.052 294.129 168.052 294.129V294.225C168.044 294.174 168.044 294.122 168.052 294.071L168.218 293.841C168.224 293.802 168.224 293.764 168.218 293.725C168.218 293.725 168.311 293.725 168.311 293.841C168.311 293.956 168.311 293.841 168.218 293.841C168.126 293.841 168.218 293.841 168.218 294.129C168.218 294.417 168.218 294.378 168.218 294.513L168.052 294.686Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.809 293.956C168.818 294.019 168.818 294.084 168.809 294.148C168.809 294.148 168.809 294.244 168.716 294.301C168.709 294.371 168.709 294.442 168.716 294.512V294.397C168.716 294.397 168.716 294.397 168.716 294.532V294.762V294.647C168.716 294.647 168.716 294.647 168.716 294.551C168.716 294.455 168.716 294.551 168.624 294.416C168.617 294.359 168.617 294.301 168.624 294.244L168.753 294.359V294.263V294.032C168.753 293.936 168.753 293.859 168.753 293.84C168.762 293.79 168.762 293.737 168.753 293.687L168.457 293.898L168.809 293.956Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.7 293.63C169.694 293.726 169.694 293.822 169.7 293.918C169.726 294.022 169.757 294.124 169.792 294.225C169.736 294.129 169.693 294.026 169.663 293.918C169.663 293.783 169.663 293.63 169.552 293.63C169.441 293.63 169.552 293.63 169.552 293.745C169.559 293.872 169.59 293.996 169.644 294.11C169.644 294.11 169.644 293.995 169.533 293.898C169.54 293.841 169.54 293.783 169.533 293.726C169.516 293.782 169.516 293.842 169.533 293.898C169.553 293.974 169.584 294.045 169.626 294.11H169.533C169.528 294.167 169.528 294.225 169.533 294.283L169.626 294.436L169.533 294.34C169.525 294.43 169.525 294.52 169.533 294.609L169.644 294.859C169.575 294.794 169.518 294.716 169.478 294.628C169.445 294.399 169.445 294.166 169.478 293.937L169.57 293.783C169.624 293.654 169.661 293.519 169.681 293.38C169.709 293.504 169.747 293.626 169.792 293.745C169.829 293.752 169.867 293.752 169.904 293.745L169.7 293.63Z",
                    fill: "#1E2121"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.995 293.533V293.668L168.81 293.84C168.717 293.84 168.588 293.994 168.551 293.956L168.736 293.802C168.796 293.752 168.841 293.685 168.866 293.61L168.995 293.533Z",
                    fill: "#1E2121"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.125 293.591C168.121 293.648 168.121 293.706 168.125 293.764C168.125 293.764 167.959 293.764 167.922 293.764C167.912 293.719 167.912 293.673 167.922 293.629H168.051L168.144 293.533L168.125 293.591Z",
                    fill: "#1E2121"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.772 293.322C169.799 293.416 169.836 293.507 169.883 293.591L169.995 293.841C169.951 293.778 169.902 293.72 169.846 293.668H169.754V293.495L169.772 293.322Z",
                    fill: "#1E2121"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.865 293.706H168.05V293.61C168.029 293.678 168.029 293.752 168.05 293.821C168.111 293.84 168.175 293.84 168.236 293.821L168.402 293.667C168.386 293.737 168.386 293.809 168.402 293.878C168.402 293.994 168.513 293.994 168.587 293.878C168.665 293.812 168.734 293.734 168.791 293.648L168.884 293.206H168.773H168.643V293.341H168.513V293.245L168.328 293.437H168.217L168.106 293.61V293.725V293.936L167.865 293.706Z",
                    fill: "#DBAD6C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.828 293.245C168.848 293.346 168.848 293.451 168.828 293.552C168.794 293.668 168.744 293.778 168.68 293.879C168.805 293.791 168.907 293.672 168.976 293.533C169.008 293.375 169.008 293.211 168.976 293.053L168.791 293.245H168.828Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.07 293.034C169.085 293.103 169.085 293.175 169.07 293.245C169.081 293.353 169.081 293.463 169.07 293.571C169.07 293.571 169.163 293.725 169.218 293.706C169.274 293.687 169.33 293.706 169.385 293.533C169.441 293.36 169.478 293.303 169.496 293.283C169.515 293.264 169.496 293.283 169.496 293.283C169.479 293.333 169.479 293.387 169.496 293.437C169.496 293.437 169.589 293.533 169.626 293.437C169.637 293.406 169.637 293.372 169.626 293.341C169.594 293.224 169.557 293.108 169.515 292.995L169.385 292.669V292.534H169.274L169.107 292.822L169.07 293.034Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.459 292.726C169.478 292.828 169.478 292.932 169.459 293.033C169.469 293.135 169.469 293.238 169.459 293.341C169.469 293.238 169.469 293.136 169.459 293.033C169.459 292.918 169.459 292.841 169.459 292.803V292.726Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.773 293.341C169.783 293.404 169.783 293.469 169.773 293.533C169.773 293.533 169.662 293.533 169.607 293.283C169.551 293.033 169.607 293.014 169.607 292.918C169.598 292.854 169.598 292.79 169.607 292.726H169.718L169.922 293.36L169.773 293.341Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.273 293.725C169.351 293.664 169.415 293.586 169.46 293.496C169.505 293.406 169.53 293.307 169.533 293.206C169.526 293.04 169.488 292.877 169.422 292.726C169.446 292.898 169.446 293.073 169.422 293.245C169.381 293.364 169.331 293.479 169.273 293.59V293.494C169.278 293.539 169.278 293.584 169.273 293.629C169.278 293.68 169.278 293.731 169.273 293.782V293.725Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.7 292.592C169.714 292.701 169.714 292.81 169.7 292.919C169.71 293.059 169.71 293.201 169.7 293.341L169.552 293.072C169.56 292.996 169.56 292.919 169.552 292.842C169.552 292.842 169.552 292.842 169.552 292.746H169.459C169.459 292.746 169.459 292.746 169.459 292.65C169.47 292.619 169.47 292.585 169.459 292.554H169.57L169.7 292.592Z",
                    fill: "#1E2121"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.791 293.706C167.791 293.706 167.791 293.533 167.939 293.418L168.124 293.13C168.163 293.122 168.199 293.106 168.231 293.083C168.263 293.06 168.289 293.03 168.31 292.996C168.35 292.93 168.381 292.859 168.402 292.784C168.372 292.865 168.372 292.954 168.402 293.034C168.402 293.13 168.402 293.034 168.513 293.034C168.524 293.11 168.524 293.188 168.513 293.264C168.513 293.38 168.513 293.552 168.513 293.552C168.53 293.457 168.53 293.36 168.513 293.264C168.513 293.264 168.513 293.264 168.513 293.36C168.489 293.41 168.458 293.455 168.421 293.495C168.429 293.431 168.429 293.367 168.421 293.303C168.421 293.188 168.421 293.188 168.421 293.188C168.426 293.156 168.426 293.123 168.421 293.092V292.938L168.31 293.034C168.31 293.034 168.217 293.034 168.198 293.149V293.36C168.205 293.437 168.205 293.514 168.198 293.591V293.399C168.198 293.284 168.291 293.13 168.198 293.111C168.106 293.092 168.198 293.111 168.198 293.111L168.032 293.341C168.032 293.456 168.032 293.61 167.939 293.61L167.791 293.706Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.772 292.42C169.783 292.44 169.789 292.463 169.789 292.486C169.789 292.51 169.783 292.533 169.772 292.553C169.711 292.567 169.648 292.567 169.588 292.553C169.588 292.553 169.588 292.439 169.588 292.439L169.772 292.42Z",
                    fill: "#874F20"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.179 292.727V292.899C168.179 293.015 168.05 293.092 168.068 293.092C168.087 293.092 168.068 293.092 168.179 293.092C168.29 293.092 168.272 292.688 168.272 292.688L168.179 292.727Z",
                    fill: "#B27129"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.274 292.516C169.274 292.516 169.274 293.053 169.089 293.053C168.904 293.053 168.885 292.765 168.885 292.765C168.885 292.765 168.885 293.13 168.681 293.13C168.478 293.13 168.515 292.861 168.533 292.804C168.515 292.904 168.47 292.997 168.404 293.073C168.237 293.207 168.126 293.073 168.107 293.073C168.192 292.96 168.249 292.829 168.274 292.689C168.274 292.689 168.274 292.554 168.385 292.554C168.496 292.554 168.644 292.554 168.644 292.554L168.755 292.401C168.801 292.361 168.834 292.307 168.848 292.247L169.07 292.439V292.593L169.274 292.516Z",
                    fill: "#DBAD6C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.625 291.998C168.625 291.998 168.754 292.209 168.847 292.324C168.847 292.324 168.847 292.324 168.847 292.42C168.824 292.471 168.812 292.527 168.812 292.583C168.812 292.64 168.824 292.695 168.847 292.747C168.836 292.696 168.836 292.643 168.847 292.593C168.847 292.497 168.847 292.478 168.847 292.478C168.869 292.646 168.9 292.812 168.939 292.977C168.962 292.85 168.962 292.72 168.939 292.593C168.939 292.439 168.939 292.593 168.939 292.593C168.939 292.593 169.088 292.843 169.199 292.804C169.31 292.766 169.291 292.574 169.291 292.535C169.269 292.43 169.238 292.328 169.199 292.228L168.717 291.902C168.712 291.946 168.712 291.991 168.717 292.036H168.439L168.625 291.998Z",
                    fill: "#B27129"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.273 291.939V292.112C169.273 292.227 169.273 292.649 169.273 292.63C169.195 292.615 169.123 292.575 169.069 292.515C169.069 292.515 169.069 292.246 169.069 292.188C169.026 292.118 168.994 292.04 168.977 291.958V291.804H169.088L169.254 291.996L169.273 291.939Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.274 291.825L169.478 292.151L169.663 292.42C169.628 292.455 169.582 292.475 169.533 292.475C169.485 292.475 169.438 292.455 169.404 292.42C169.404 292.42 169.404 292.247 169.292 292.036C169.24 291.912 169.149 291.811 169.033 291.748H169.126L169.274 291.825Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.274 291.651C169.377 291.716 169.46 291.809 169.515 291.92L169.7 292.265C169.747 292.337 169.803 292.402 169.867 292.457C169.867 292.457 169.774 292.457 169.756 292.323L169.552 291.977C169.496 291.913 169.434 291.855 169.367 291.804L169.496 291.996C169.54 292.074 169.571 292.158 169.589 292.246C169.589 292.246 169.589 292.246 169.496 292.073C169.404 291.9 169.274 291.804 169.256 291.824C169.288 291.912 169.332 291.996 169.385 292.073C169.43 292.157 169.461 292.248 169.478 292.342L169.348 292.112C169.308 292.046 169.258 291.988 169.2 291.939L169.107 291.785C169.13 291.799 169.156 291.806 169.182 291.806C169.208 291.806 169.233 291.799 169.256 291.785C169.303 291.759 169.341 291.719 169.367 291.67L169.274 291.651Z",
                    fill: "#1E2121"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.698 291.997C168.759 292.012 168.822 292.012 168.883 291.997C168.892 292.035 168.892 292.075 168.883 292.113C168.903 292.175 168.903 292.242 168.883 292.305C168.883 292.305 168.883 292.189 168.883 292.151L168.68 291.978L168.698 291.997Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.754 292.42C168.772 292.528 168.772 292.638 168.754 292.746C168.729 292.886 168.672 293.018 168.587 293.13C168.58 293.021 168.58 292.912 168.587 292.804V292.938C168.587 292.938 168.587 292.746 168.587 292.727L168.735 292.573L168.754 292.42Z",
                    fill: "#B27129"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.533 292.419C168.485 292.438 168.432 292.438 168.384 292.419V292.515C168.384 292.515 168.384 292.515 168.384 292.611C168.328 292.705 168.266 292.794 168.199 292.88C168.283 292.822 168.358 292.75 168.421 292.669C168.421 292.669 168.421 292.534 168.421 292.515C168.421 292.496 168.421 292.515 168.421 292.515C168.417 292.592 168.417 292.669 168.421 292.746V292.515C168.429 292.438 168.429 292.361 168.421 292.285H168.31C168.323 292.361 168.323 292.439 168.31 292.515L168.533 292.419Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.272 291.516C169.29 291.548 169.299 291.585 169.299 291.622C169.299 291.659 169.29 291.695 169.272 291.728H169.161H169.013L168.698 291.593H168.531H168.772L169.013 291.689H169.124H169.327L169.272 291.516Z",
                    fill: "#DBAD6C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M169.273 291.517C169.28 291.549 169.28 291.581 169.273 291.613C169.248 291.628 169.219 291.636 169.19 291.636C169.161 291.636 169.132 291.628 169.106 291.613L168.81 291.498C168.724 291.482 168.637 291.482 168.551 291.498C168.458 291.498 168.551 291.498 168.551 291.498C168.667 291.475 168.786 291.475 168.903 291.498C169.003 291.544 169.109 291.576 169.218 291.594C169.347 291.594 169.366 291.594 169.366 291.594L169.273 291.517Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.94 291.805C168.94 291.805 169.051 291.92 168.94 292.016L168.736 291.92L168.384 291.767H168.199H168.421H168.662L168.829 291.92L168.94 291.805Z",
                    fill: "#DBAD6C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.699 291.977C168.699 291.977 168.903 292.227 168.848 292.323L168.385 292.016L168.237 292.304L167.848 292.092C167.971 292.005 168.089 291.909 168.199 291.804H168.366L168.625 291.9L168.699 291.977Z",
                    fill: "#DBAD6C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.587 291.575C168.682 291.597 168.775 291.629 168.865 291.671C168.944 291.684 169.026 291.684 169.105 291.671C169.052 291.691 168.993 291.691 168.939 291.671C168.878 291.65 168.821 291.617 168.772 291.575L168.568 291.479L168.587 291.575Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.94 291.958C168.94 291.958 169.032 291.958 168.94 291.958C168.898 291.974 168.852 291.974 168.81 291.958C168.81 291.958 168.699 291.958 168.662 291.958C168.625 291.958 168.662 291.843 168.458 291.804H168.218H168.125H168.384H168.606H168.755L168.94 291.958Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.515 292.112V292.324V292.42C168.515 292.42 168.515 292.42 168.515 292.324C168.515 292.228 168.367 292.324 168.367 292.324C168.39 292.268 168.429 292.221 168.478 292.189H168.645L168.515 292.112Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.256 291.67C168.298 291.681 168.343 291.681 168.385 291.67C168.44 291.657 168.497 291.657 168.552 291.67H168.645H168.848C168.941 291.67 169.015 291.785 168.996 291.785H168.848C168.769 291.769 168.687 291.769 168.608 291.785C168.491 291.772 168.373 291.772 168.256 291.785V291.67Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.83 292.265C168.79 292.287 168.746 292.298 168.7 292.298C168.655 292.298 168.611 292.287 168.571 292.265V292.149L168.367 292.015C168.47 292.049 168.569 292.094 168.663 292.149C168.732 292.183 168.794 292.229 168.848 292.284L168.83 292.265Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.847 292.266C168.737 292.141 168.596 292.048 168.44 291.997H168.31H168.125C168.191 291.975 168.262 291.975 168.329 291.997L168.218 292.17C168.218 292.17 168.218 292.055 168.384 292.074C168.414 292.062 168.447 292.062 168.477 292.074C168.477 292.074 168.384 291.978 168.477 291.978C168.569 291.992 168.657 292.024 168.736 292.074L168.958 292.209L168.847 292.266Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.366 292.036C168.429 292.054 168.485 292.094 168.522 292.151C168.56 292.207 168.576 292.275 168.57 292.343C168.57 292.593 168.384 292.554 168.366 292.458C168.347 292.362 168.366 292.458 168.458 292.458C168.551 292.458 168.458 292.362 168.458 292.266C168.471 292.236 168.477 292.203 168.477 292.17C168.477 292.137 168.471 292.105 168.458 292.074H168.366V292.036Z",
                    fill: "#DBAD6C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 291.44C167.422 291.44 167.422 291.44 167.422 291.632C167.374 291.759 167.305 291.876 167.218 291.978C167.033 292.189 166.959 292.189 166.977 292.266H167.088L167.422 291.766V291.459V291.44Z",
                    fill: "#6C3F18"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.196 291.074C168.24 291.211 168.24 291.359 168.196 291.497C168.196 291.785 167.825 292.015 167.825 292.015L167.307 292.399H167.029V292.303L167.214 292.111L167.344 291.938C167.347 291.868 167.347 291.797 167.344 291.727C167.353 291.683 167.353 291.637 167.344 291.593V291.746V291.919L167.492 291.823L167.659 291.727C167.659 291.727 167.659 291.727 167.751 291.727C167.765 291.619 167.765 291.509 167.751 291.401V291.247C167.765 291.297 167.765 291.35 167.751 291.401V291.631V291.535V291.42C167.76 291.369 167.76 291.317 167.751 291.266L168.196 291.074Z",
                    fill: "#DBAD6C"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.255 292.42C168.265 292.441 168.27 292.464 168.27 292.487C168.27 292.51 168.265 292.533 168.255 292.554C168.255 292.669 168.255 292.708 168.125 292.708V292.573L168.014 292.477H167.885H168.014H168.2L168.255 292.42Z",
                    fill: "#904720"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.162 292.42C168.192 292.43 168.224 292.43 168.254 292.42C168.27 292.398 168.278 292.371 168.278 292.343C168.278 292.316 168.27 292.289 168.254 292.266V292.362C168.254 292.362 168.254 292.266 168.125 292.266C168.102 292.253 168.077 292.246 168.051 292.246C168.025 292.246 167.999 292.253 167.977 292.266C167.977 292.266 167.977 292.266 167.977 292.266H168.088L168.162 292.42Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.42 292.073H167.55L167.809 291.977H167.957C168.026 291.925 168.085 291.859 168.129 291.783C168.174 291.707 168.204 291.623 168.216 291.535C168.236 291.408 168.236 291.278 168.216 291.151C168.289 291.251 168.328 291.372 168.328 291.497C168.328 291.621 168.289 291.743 168.216 291.842C168.134 291.967 168.026 292.071 167.902 292.15C167.902 292.15 168.179 292.15 168.198 292.15C168.213 292.179 168.22 292.212 168.22 292.246C168.22 292.279 168.213 292.312 168.198 292.342C168.198 292.342 168.365 292.342 168.383 292.457C168.402 292.572 168.198 292.457 168.068 292.457C167.987 292.474 167.914 292.522 167.865 292.591C167.865 292.591 167.865 292.591 167.698 292.591C167.531 292.591 167.513 292.591 167.439 292.591C167.365 292.591 167.143 292.591 167.105 292.476L167.254 292.303C167.254 292.169 167.42 292.188 167.42 292.188V292.073Z",
                    fill: "#904720"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.996 291.421C168.052 291.363 168.102 291.298 168.144 291.229V291.075C168.159 291.138 168.159 291.204 168.144 291.267L168.015 291.44L167.996 291.421Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.977 291.171C167.977 291.171 168.069 291.535 167.977 291.689C167.828 291.825 167.659 291.935 167.477 292.016C167.642 291.926 167.783 291.794 167.884 291.631C167.95 291.522 167.982 291.395 167.977 291.267V291.171Z",
                    fill: "#904720"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.553 292.093C167.626 292.112 167.702 292.112 167.775 292.093L167.96 291.959H167.83C167.806 292.007 167.771 292.049 167.73 292.082C167.688 292.115 167.641 292.138 167.59 292.151L167.553 292.093Z",
                    fill: "#1E2121"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.865 291.632C167.944 291.529 167.984 291.399 167.976 291.267C167.976 291.018 167.884 291.056 167.884 291.056C167.884 291.056 167.884 291.056 167.884 291.306C167.898 291.414 167.898 291.524 167.884 291.632H167.865Z",
                    fill: "#1E2121"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.014 291.671C168.078 291.648 168.135 291.608 168.18 291.556C168.193 291.479 168.193 291.401 168.18 291.325C168.19 291.389 168.19 291.454 168.18 291.517L168.032 291.671H168.014Z",
                    fill: "#1E2121"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.939 292.419C167.939 292.419 167.939 292.286 168.068 292.419C168.197 292.552 168.068 292.419 168.068 292.419C168.026 292.404 167.981 292.404 167.939 292.419Z",
                    fill: "#1E2121"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.699 292.227H167.996L168.218 292.131C168.154 292.207 168.079 292.272 167.996 292.323C167.917 292.345 167.834 292.345 167.755 292.323C167.755 292.323 168.014 292.208 168.033 292.15C167.922 292.166 167.81 292.166 167.699 292.15V292.227Z",
                    fill: "#1E2121"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.421 291.939C167.441 291.959 167.458 291.983 167.469 292.009C167.48 292.036 167.485 292.064 167.485 292.093C167.485 292.122 167.48 292.15 167.469 292.177C167.458 292.203 167.441 292.227 167.421 292.247C167.384 292.275 167.338 292.29 167.292 292.29C167.245 292.29 167.2 292.275 167.162 292.247",
                    fill: "white"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.421 291.959C167.455 291.995 167.474 292.043 167.474 292.093C167.474 292.143 167.455 292.192 167.421 292.228C167.391 292.256 167.351 292.272 167.31 292.272C167.269 292.272 167.23 292.256 167.199 292.228",
                    fill: "#F16E16"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.291 292.055C167.299 292.069 167.303 292.086 167.303 292.102C167.303 292.119 167.299 292.135 167.291 292.15H167.199",
                    fill: "black"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.418 291.786C167.497 291.71 167.549 291.608 167.566 291.498C167.583 291.409 167.583 291.318 167.566 291.229V291.364V291.575H167.696C167.762 291.404 167.794 291.221 167.789 291.037C167.789 291.037 167.789 291.037 167.789 291.364C167.788 291.445 167.763 291.524 167.716 291.59C167.67 291.655 167.604 291.704 167.529 291.728C167.395 291.805 167.291 291.927 167.233 292.074C167.233 292.17 167.048 292.305 167.029 292.343C167.079 292.27 167.123 292.193 167.159 292.112C167.197 292.029 167.247 291.951 167.307 291.882V291.767L167.418 291.786Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.422 291.901C167.432 291.812 167.432 291.721 167.422 291.632C167.436 291.569 167.436 291.503 167.422 291.44C167.422 291.44 167.422 291.44 167.422 291.632C167.422 291.824 167.422 291.843 167.422 291.901Z",
                    fill: "#904720"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.625 291.67C167.646 291.595 167.646 291.515 167.625 291.44C167.644 291.371 167.644 291.297 167.625 291.228C167.625 291.228 167.625 291.228 167.736 291.44C167.847 291.651 167.736 291.612 167.644 291.67H167.625Z",
                    fill: "#4D2A15"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.068 292.42C167.057 292.382 167.057 292.342 167.068 292.304C167.086 292.236 167.125 292.175 167.179 292.132C167.272 292.065 167.343 291.972 167.383 291.863C167.412 291.807 167.427 291.744 167.427 291.68C167.427 291.617 167.412 291.554 167.383 291.498C167.409 291.551 167.423 291.611 167.423 291.671C167.423 291.731 167.409 291.79 167.383 291.844C167.315 291.967 167.227 292.077 167.124 292.17C167.031 292.17 167.031 292.266 167.031 292.304L167.068 292.42Z",
                    fill: "#AB6D29"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.144 292.745C168.158 292.726 168.165 292.702 168.165 292.678C168.165 292.654 168.158 292.63 168.144 292.611C168.096 292.596 168.044 292.596 167.996 292.611H167.848C167.873 292.648 167.904 292.681 167.94 292.707C167.94 292.707 168.051 292.707 168.088 292.707C168.101 292.751 168.101 292.797 168.088 292.841L168.144 292.745Z",
                    fill: "#6C4119"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.144 292.746C168.144 292.746 168.274 292.746 168.274 292.592V292.42C168.274 292.42 168.274 292.669 168.033 292.65L168.144 292.746Z",
                    fill: "#6C4119"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.274 292.726H167.57V292.63V292.495H167.348L167.107 292.668L167.274 292.726Z",
                    fill: "#BF802D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M168.015 292.63V292.534H167.793H167.663C167.649 292.543 167.633 292.547 167.617 292.547C167.601 292.547 167.585 292.543 167.57 292.534H167.348H167.2H167.071L166.959 292.649C166.892 292.688 166.832 292.74 166.785 292.803C166.737 292.865 166.702 292.937 166.682 293.014C166.682 293.245 167.071 293.59 167.219 293.418C167.367 293.245 166.996 293.245 167.033 293.11C167.051 293.034 167.094 292.967 167.155 292.921C167.217 292.876 167.292 292.854 167.367 292.861C167.462 292.863 167.554 292.828 167.626 292.765C167.67 292.725 167.726 292.704 167.783 292.704C167.841 292.704 167.897 292.725 167.941 292.765C168.052 292.861 167.552 292.976 167.552 292.976C167.552 292.976 168.163 292.765 168.126 292.649L168.015 292.63Z",
                    fill: "#F9C83A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.941 293.339C166.876 293.332 166.813 293.311 166.756 293.278C166.698 293.245 166.648 293.2 166.608 293.146C166.574 293.112 166.548 293.07 166.532 293.023C166.516 292.977 166.51 292.927 166.516 292.878C166.552 292.725 166.645 292.594 166.775 292.513C166.775 292.513 166.867 292.397 166.904 292.397H167.034H167.182H167.404H167.867C167.867 292.532 167.293 292.705 167.293 292.705V292.609C167.423 292.609 167.664 292.513 167.682 292.455C167.628 292.437 167.57 292.437 167.516 292.455H167.367C167.289 292.478 167.205 292.478 167.127 292.455C167.056 292.448 166.986 292.468 166.928 292.51C166.87 292.552 166.829 292.615 166.812 292.686C166.812 292.82 166.979 292.974 166.979 292.974C167.025 292.979 167.068 293.003 167.097 293.041C167.127 293.078 167.141 293.127 167.136 293.175C167.131 293.224 167.108 293.268 167.071 293.299C167.035 293.329 166.988 293.344 166.941 293.339ZM166.793 292.532C166.668 292.609 166.575 292.732 166.534 292.878C166.535 292.97 166.568 293.058 166.627 293.127C166.703 293.232 166.816 293.301 166.941 293.319H167.034C167.034 293.319 166.812 293.127 166.867 292.993C166.923 292.858 167.016 292.762 167.201 292.743C167.386 292.724 167.367 292.743 167.423 292.743C167.477 292.727 167.535 292.727 167.59 292.743C167.619 292.731 167.65 292.724 167.682 292.724C167.714 292.724 167.745 292.731 167.775 292.743C167.775 292.839 167.46 292.916 167.367 292.935C167.516 292.935 167.886 292.743 167.923 292.647H167.701H167.571H167.423H167.219H167.071H166.941L166.83 292.762L166.793 292.532Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.847 293.166C166.847 293.166 166.588 293.166 166.606 292.878C166.612 292.798 166.642 292.721 166.691 292.659C166.741 292.597 166.809 292.553 166.884 292.533C166.884 292.533 166.884 292.398 166.884 292.379C166.907 292.365 166.932 292.358 166.958 292.358C166.984 292.358 167.01 292.365 167.032 292.379H167.143C167.143 292.379 166.699 292.571 166.699 292.84C166.699 293.109 166.699 293.051 166.699 293.051L166.847 293.166Z",
                    fill: "#FCF3D8"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.998 292.592C167.998 292.496 167.85 292.477 167.757 292.477H167.498H167.35C167.257 292.477 167.053 292.323 167.016 292.342C167.016 292.342 167.016 292.342 166.924 292.342C166.831 292.342 166.924 292.189 167.072 292.189C167.22 292.189 167.442 292.323 167.535 292.323C167.627 292.323 167.683 292.323 167.813 292.323C167.942 292.323 168.09 292.323 168.09 292.496L167.998 292.592Z",
                    fill: "#FDEAAF"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.312 292.764H167.498H167.664L167.516 292.861H167.35L167.312 292.764Z",
                    fill: "#513625"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.96 293.322C166.867 293.317 166.776 293.284 166.701 293.226C166.618 293.158 166.56 293.064 166.534 292.958C166.527 292.898 166.533 292.837 166.552 292.781C166.572 292.724 166.604 292.673 166.645 292.631C166.793 292.477 166.812 292.516 166.831 292.535L166.701 292.65V292.765V292.862V292.977V293.111L166.905 293.226L167.034 293.322H166.96Z",
                    fill: "#F9C83A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.311 292.63C167.204 292.653 167.098 292.685 166.996 292.726H167.366C167.478 292.726 167.718 292.592 167.755 292.726C167.792 292.86 167.422 292.899 167.422 292.899H167.718H167.866L167.737 292.784H167.515H167.422H167.292L167.311 292.63Z",
                    fill: "#F9C83A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.867 293.071C166.874 293.111 166.889 293.149 166.912 293.182C166.934 293.215 166.963 293.243 166.996 293.264H166.867C166.755 293.264 166.607 293.264 166.533 292.918V293.033L166.626 293.129H166.774H166.867L166.774 293.033L166.663 292.841L166.867 293.071Z",
                    fill: "#8F4620"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.421 292.975L167.311 292.861L167.402 293.013L167.421 292.975Z",
                    fill: "#FCCA3D"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.827 295.606L167.624 295.721H167.494H167.587H167.698L167.827 295.606Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.698 295.377C167.712 295.414 167.712 295.455 167.698 295.492L167.568 295.645L167.679 295.511V295.415C167.694 295.378 167.694 295.337 167.679 295.3L167.698 295.377Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.512 295.281C167.512 295.281 167.512 295.281 167.512 295.396C167.489 295.458 167.458 295.516 167.42 295.569C167.468 295.469 167.512 295.367 167.549 295.262C167.558 295.224 167.558 295.185 167.549 295.147L167.512 295.281Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.42 295.261C167.43 295.311 167.43 295.364 167.42 295.414C167.42 295.414 167.42 295.51 167.42 295.568L167.512 295.338C167.512 295.338 167.512 295.242 167.512 295.184L167.42 295.261Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.217 295.261C167.227 295.318 167.227 295.377 167.217 295.434V295.645C167.217 295.645 167.217 295.549 167.217 295.511C167.223 295.421 167.223 295.331 167.217 295.242V295.261Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.069 295.28V295.414C167.078 295.452 167.078 295.492 167.069 295.53C167.063 295.6 167.063 295.671 167.069 295.741C167.069 295.741 167.069 295.645 167.069 295.607V295.357V295.28Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.978 295.299V295.471V295.644C166.974 295.561 166.974 295.478 166.978 295.395C166.985 295.331 166.985 295.266 166.978 295.203V295.299Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.847 295.3C166.864 295.356 166.864 295.416 166.847 295.473C166.847 295.473 166.847 295.569 166.736 295.607C166.808 295.554 166.87 295.489 166.922 295.415C166.939 295.352 166.939 295.286 166.922 295.223L166.847 295.3Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M166.772 295.279C166.779 295.33 166.779 295.382 166.772 295.433L166.68 295.529C166.743 295.496 166.8 295.45 166.846 295.395C166.885 295.335 166.916 295.271 166.939 295.203L166.772 295.279Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M166.588 295.126L166.716 294.992L166.588 295.126Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.42 293.34L167.55 293.244L167.679 293.148L167.55 293.244H167.438L167.42 293.34Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d: "M167.254 293.207L167.513 293.015L167.254 293.207Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.144 293.072L167.292 292.957H167.403H167.273L167.125 293.072H167.144Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.051 292.994L167.179 292.899H167.271L167.051 293.07V292.994Z",
                    fill: "#816C2A"
                  }
                }),
                _vm._v(" "),
                _c("path", {
                  attrs: {
                    d:
                      "M167.254 292.726L167.439 292.937C167.529 293.029 167.582 293.153 167.588 293.283C167.562 293.442 167.491 293.589 167.384 293.706C167.21 293.904 167.018 294.084 166.81 294.243C166.726 294.317 166.651 294.4 166.588 294.493C166.52 294.573 166.48 294.674 166.477 294.781C166.488 294.883 166.519 294.981 166.569 295.069C166.598 295.114 166.636 295.151 166.681 295.178C166.726 295.204 166.777 295.22 166.828 295.223H167.291C167.357 295.221 167.423 295.234 167.483 295.26C167.544 295.287 167.598 295.326 167.643 295.376C167.744 295.513 167.79 295.685 167.773 295.856C167.773 295.991 167.773 296.125 167.773 296.202C167.773 296.279 167.773 296.298 167.773 296.317C167.795 296.145 167.795 295.971 167.773 295.799C167.781 295.619 167.729 295.443 167.625 295.299C167.576 295.249 167.519 295.209 167.455 295.183C167.391 295.156 167.323 295.144 167.254 295.146H166.791C166.696 295.126 166.611 295.072 166.551 294.992C166.524 294.905 166.524 294.811 166.551 294.723C166.56 294.594 166.612 294.471 166.699 294.378C166.878 294.191 167.07 294.017 167.273 293.859C167.466 293.701 167.598 293.476 167.643 293.225C167.632 293.072 167.566 292.928 167.458 292.822C167.402 292.752 167.34 292.688 167.273 292.63L167.254 292.726Z",
                    fill: "#78732E"
                  }
                })
              ]),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M282.663 480.78L260.519 510.959L238.337 480.78C235.327 476.683 233.512 471.832 233.093 466.765C232.675 461.699 233.669 456.615 235.965 452.079C238.261 447.544 241.769 443.733 246.101 441.071C250.432 438.409 255.416 437 260.5 437C265.584 437 270.568 438.409 274.899 441.071C279.231 443.733 282.739 447.544 285.035 452.079C287.331 456.615 288.325 461.699 287.907 466.765C287.488 471.832 285.673 476.683 282.663 480.78Z",
                  fill: "#FAB500"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M282.663 480.78L260.519 510.959L238.337 480.78C235.327 476.683 233.512 471.832 233.093 466.765C232.675 461.699 233.669 456.615 235.965 452.079C238.261 447.544 241.769 443.733 246.101 441.071C250.432 438.409 255.416 437 260.5 437C265.584 437 270.568 438.409 274.899 441.071C279.231 443.733 282.739 447.544 285.035 452.079C287.331 456.615 288.325 461.699 287.907 466.765C287.488 471.832 285.673 476.683 282.663 480.78V480.78Z",
                  stroke: "#2F6A69",
                  "stroke-width": "0.83",
                  "stroke-miterlimit": "10"
                }
              }),
              _vm._v(" "),
              _c(
                "g",
                {
                  staticStyle: { "mix-blend-mode": "multiply" },
                  attrs: { opacity: "0.2" }
                },
                [
                  _c("path", {
                    attrs: {
                      d:
                        "M270.493 520.235C270.493 521.691 266.03 522.855 260.518 522.855C255.006 522.855 250.523 521.691 250.523 520.235C250.523 518.78 255.006 517.654 260.518 517.654C266.03 517.654 270.493 518.78 270.493 520.235Z",
                      fill: "#00792D"
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M282.116 457.332H239.67V457.235C240.159 455.884 240.771 454.581 241.498 453.342C241.79 452.856 242.102 452.389 242.432 451.922C245.519 447.532 250.073 444.392 255.271 443.067C258.59 442.233 262.055 442.164 265.404 442.866C268.754 443.567 271.9 445.02 274.607 447.115C276.379 448.481 277.933 450.109 279.217 451.941L279.431 452.233C279.684 452.603 279.917 452.992 280.151 453.362C280.918 454.596 281.569 455.899 282.096 457.254C282.096 457.254 282.116 457.293 282.116 457.332Z",
                  fill: "#73AADC"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M282.116 472.55V472.667C281.602 474.028 280.95 475.332 280.171 476.559C279.898 477.007 279.626 477.416 279.334 477.824L278.829 478.525C275.232 483.262 269.911 486.386 264.024 487.217C258.136 488.048 252.159 486.519 247.393 482.962C245.705 481.695 244.2 480.202 242.919 478.525L242.413 477.824C242.118 477.418 241.846 476.995 241.596 476.559C240.817 475.332 240.165 474.027 239.651 472.667C239.642 472.629 239.642 472.589 239.651 472.55H282.116Z",
                  fill: "#73AADC"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M283.439 464.942C283.436 465.845 283.384 466.748 283.284 467.647C283.077 469.32 282.685 470.964 282.116 472.551H239.709C239.141 470.964 238.749 469.32 238.542 467.647C238.442 466.748 238.39 465.845 238.387 464.942C238.384 462.348 238.832 459.773 239.709 457.332V457.235H282.097C282.097 457.235 282.097 457.235 282.097 457.332C282.686 458.993 283.078 460.717 283.264 462.47C283.373 463.29 283.431 464.115 283.439 464.942Z",
                  fill: "#FCFCFC"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M263.322 462.996C263.301 463.027 263.272 463.053 263.239 463.07C263.205 463.087 263.167 463.095 263.129 463.092L263.283 462.957L263.322 462.996Z",
                  fill: "#DDC8BC"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M258.929 462.529C258.968 462.555 259 462.589 259.023 462.629C259.047 462.67 259.061 462.714 259.064 462.761L258.891 462.568L258.929 462.529Z",
                  fill: "#DDC8BC"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M259.98 467.861V467.725C260 467.768 260.01 467.814 260.01 467.861C260.01 467.908 260 467.954 259.98 467.997C259.98 467.997 260.02 467.9 259.98 467.861Z",
                  fill: "#B28066"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.858 467.392C262.809 467.35 262.77 467.297 262.742 467.238C262.742 467.238 262.858 467.238 262.897 467.334L262.858 467.392Z",
                  fill: "#DEC9BE"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.809 462.062V462.178C261.789 462.136 261.779 462.089 261.779 462.042C261.779 461.995 261.789 461.949 261.809 461.906C261.809 461.906 261.77 462.023 261.809 462.062Z",
                  fill: "#B4816A"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M258.559 466.907C258.603 466.894 258.65 466.894 258.694 466.907C258.694 466.907 258.694 466.907 258.694 467.042L258.559 466.907Z",
                  fill: "#DBC5B9"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M263.558 466.401L263.385 466.304C263.501 466.304 263.558 466.304 263.597 466.304L263.558 466.401Z",
                  fill: "#D7C0B3"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M263.811 465.876C263.867 465.857 263.928 465.857 263.984 465.876H263.811Z",
                  fill: "#C49E8A"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M263.285 466.965C263.285 466.965 263.285 466.965 263.285 466.849C263.307 466.84 263.33 466.835 263.353 466.835C263.376 466.835 263.399 466.84 263.42 466.849L263.285 466.965Z",
                  fill: "#D2B7A8"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.896 462.567C262.864 462.578 262.83 462.578 262.799 462.567C262.799 462.567 262.799 462.567 262.799 462.431L262.896 462.567Z",
                  fill: "#D3B8A9"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M258.072 465.837C258.09 465.828 258.11 465.823 258.13 465.823C258.15 465.823 258.17 465.828 258.188 465.837C258.188 465.837 258.092 465.798 258.072 465.837Z",
                  fill: "#EBDFD9"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.02 462.139V462.023C260.02 462.023 260.02 462.023 260.02 462.139C260.02 462.255 260.058 462.158 260.02 462.139Z",
                  fill: "#EADED7"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.894 467.607C260.378 467.607 259.874 467.454 259.446 467.168C259.017 466.881 258.683 466.474 258.486 465.997C258.288 465.521 258.237 464.997 258.337 464.491C258.438 463.985 258.686 463.52 259.051 463.155C259.415 462.791 259.88 462.542 260.385 462.442C260.891 462.341 261.415 462.393 261.891 462.59C262.368 462.788 262.775 463.122 263.061 463.551C263.348 463.98 263.501 464.484 263.501 465C263.49 465.688 263.213 466.345 262.726 466.832C262.239 467.319 261.582 467.597 260.894 467.607Z",
                  fill: "#F2B307"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.512 464.144L263.831 464.32C263.748 464.338 263.662 464.338 263.578 464.32C264.154 464.096 264.771 463.996 265.388 464.028C265.753 464.05 266.117 463.969 266.438 463.794C266.64 463.683 266.875 463.648 267.1 463.697C267.191 463.716 267.272 463.764 267.333 463.833C267.178 463.787 267.014 463.779 266.855 463.809C266.696 463.84 266.546 463.908 266.419 464.008C266.059 464.214 265.646 464.309 265.232 464.281C264.948 464.258 264.663 464.298 264.396 464.397L263.773 464.611C263.773 464.611 263.617 464.728 263.578 464.611C263.54 464.495 263.578 464.611 263.734 464.514L264.473 464.242C264.523 464.222 264.579 464.222 264.629 464.242H264.843H264.688L264.512 464.144Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.116 461.497C260.116 461.692 260.233 461.906 260.272 462.1C260.311 462.295 260.272 462.256 260.272 462.275C260.272 462.295 260.272 462.275 260.272 462.139C260.272 462.003 260.272 461.964 260.272 461.886C260.101 461.42 260.035 460.921 260.077 460.427C260.104 460.055 260.022 459.683 259.844 459.356C259.768 459.23 259.729 459.085 259.729 458.938C259.729 458.791 259.768 458.646 259.844 458.519C259.818 458.677 259.826 458.837 259.866 458.992C259.907 459.146 259.978 459.29 260.077 459.415C260.278 459.762 260.366 460.163 260.33 460.563C260.31 460.932 260.384 461.3 260.544 461.633C260.544 461.789 260.641 461.945 260.7 462.12C260.758 462.295 260.7 462.217 260.7 462.236C260.7 462.256 260.7 462.236 260.7 462.139L260.447 461.419C260.38 461.321 260.34 461.207 260.33 461.088C260.33 461.088 260.33 461.088 260.33 460.933C260.32 460.875 260.32 460.815 260.33 460.757C260.32 460.848 260.32 460.939 260.33 461.03C260.273 461.192 260.202 461.348 260.116 461.497Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.671 468.464C261.671 468.231 261.555 467.997 261.516 467.764C261.477 467.53 261.516 467.647 261.516 467.647C261.516 467.647 261.516 467.647 261.516 467.744V468.017C261.702 468.486 261.775 468.993 261.73 469.496C261.705 469.853 261.779 470.21 261.944 470.527C261.992 470.634 262.016 470.75 262.016 470.868C262.016 470.985 261.992 471.101 261.944 471.208C261.944 471.251 261.933 471.293 261.913 471.33C261.892 471.368 261.863 471.399 261.827 471.422C261.875 471.286 261.888 471.139 261.864 470.996C261.84 470.853 261.781 470.719 261.691 470.605C261.454 470.213 261.345 469.758 261.379 469.301C261.394 468.96 261.327 468.619 261.185 468.309L261.01 467.803C261.01 467.803 261.01 467.705 261.01 467.686C261.01 467.666 261.01 467.686 261.107 467.686C261.174 467.919 261.259 468.147 261.36 468.367C261.36 468.367 261.36 468.464 261.36 468.503C261.375 468.574 261.375 468.647 261.36 468.717C261.36 468.717 261.36 468.834 261.36 468.893C261.36 468.951 261.36 469.009 261.36 469.048C261.37 468.964 261.37 468.879 261.36 468.795C261.36 468.795 261.36 468.795 261.36 468.678V468.484C261.359 468.463 261.361 468.443 261.368 468.424C261.375 468.404 261.385 468.386 261.399 468.371C261.426 468.34 261.465 468.321 261.506 468.318C261.547 468.316 261.588 468.33 261.619 468.357C261.65 468.384 261.669 468.423 261.671 468.464Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.276 465.779L257.957 465.604H258.132C257.603 465.798 257.043 465.897 256.478 465.896C256.071 465.859 255.661 465.933 255.292 466.11C255.164 466.191 255.015 466.234 254.864 466.234C254.712 466.234 254.563 466.191 254.436 466.11C254.572 466.143 254.714 466.146 254.851 466.119C254.989 466.092 255.119 466.036 255.233 465.954C255.645 465.697 256.134 465.594 256.615 465.662C256.958 465.67 257.298 465.597 257.607 465.448L258.093 465.292C258.093 465.292 258.21 465.292 258.23 465.292C258.249 465.292 258.23 465.292 258.23 465.39L257.393 465.682C257.393 465.682 257.257 465.682 257.198 465.682H256.868C256.952 465.692 257.037 465.692 257.121 465.682H257.237L257.276 465.779Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.273 468.58C260.291 468.312 260.33 468.045 260.389 467.782C260.389 467.782 260.389 467.665 260.389 467.782C260.389 467.899 260.389 467.782 260.389 467.782C260.37 467.983 260.37 468.185 260.389 468.386C260.358 468.718 260.266 469.041 260.117 469.339C259.902 469.717 259.807 470.151 259.844 470.585C259.867 470.795 259.819 471.008 259.708 471.188C259.691 471.227 259.664 471.262 259.63 471.289C259.596 471.316 259.556 471.335 259.514 471.344C259.59 471.246 259.644 471.132 259.67 471.011C259.697 470.89 259.697 470.764 259.669 470.643C259.594 470.165 259.669 469.675 259.883 469.242C260.034 468.892 260.101 468.512 260.078 468.133C260.078 467.996 260.078 467.86 260.078 467.743C260.078 467.627 260.078 467.627 260.078 467.627C260.078 467.627 260.078 467.627 260.078 467.763C260.059 468.002 260.059 468.243 260.078 468.483C260.078 468.58 260.078 468.677 260.078 468.736C260.078 468.794 260.234 468.619 260.273 468.58Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.785 465.662L263.89 465.545H263.695C264.37 465.559 265.033 465.719 265.641 466.012C265.919 466.145 266.23 466.193 266.536 466.148C266.749 466.138 266.963 466.178 267.158 466.265C267.158 466.265 267.333 466.362 267.372 466.499C267.266 466.417 267.142 466.361 267.011 466.334C266.879 466.307 266.744 466.31 266.614 466.343C266.14 466.412 265.657 466.33 265.232 466.109C264.893 465.973 264.527 465.913 264.162 465.934H263.753C263.753 465.934 263.617 465.934 263.637 465.934C263.656 465.934 263.637 465.934 263.773 465.934H264.862H265.018C264.982 465.946 264.943 465.947 264.906 465.936C264.869 465.926 264.836 465.905 264.811 465.875C264.786 465.846 264.77 465.811 264.765 465.773C264.761 465.735 264.767 465.696 264.785 465.662Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.002 464.299L257.975 464.435C257.975 464.435 258.189 464.435 258.15 464.533C258.111 464.63 258.033 464.533 257.955 464.533H257.566C257.209 464.518 256.859 464.432 256.535 464.28C256.15 464.047 255.699 463.945 255.251 463.988C255.116 464.009 254.978 463.992 254.851 463.941C254.724 463.89 254.614 463.805 254.531 463.696C254.862 463.929 255.232 463.696 255.582 463.696C255.876 463.669 256.172 463.723 256.438 463.852C256.832 464.04 257.265 464.133 257.702 464.124H258.111C258.111 464.124 258.247 464.124 258.228 464.124C258.208 464.124 258.228 464.124 258.092 464.124H257.002H256.846C256.887 464.135 256.923 464.157 256.95 464.188C256.978 464.219 256.996 464.258 257.002 464.299Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.512 459.609C264.429 459.658 264.357 459.722 264.3 459.799C264.244 459.876 264.203 459.964 264.181 460.057C264.082 460.59 263.8 461.072 263.384 461.419C263.158 461.644 262.985 461.917 262.878 462.217L262.644 462.684C262.644 462.684 262.644 462.684 262.528 462.684C262.411 462.684 262.528 462.684 262.528 462.568C262.63 462.372 262.721 462.171 262.8 461.964C262.843 461.809 262.916 461.664 263.014 461.536C263.014 461.653 262.897 461.828 262.761 461.925C262.656 462.12 262.539 462.309 262.411 462.49C262.411 462.49 262.411 462.587 262.294 462.49C262.177 462.392 262.294 462.49 262.294 462.373C262.294 462.256 262.489 462.042 262.567 461.867C262.717 461.577 262.922 461.32 263.17 461.108C263.523 460.818 263.786 460.433 263.929 459.999C263.96 459.876 264.021 459.762 264.106 459.667C264.19 459.572 264.296 459.499 264.415 459.454C264.415 459.454 264.512 459.571 264.512 459.609Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.554 461.069L261.438 461.965C261.438 461.965 261.438 462.081 261.438 462.159C261.438 462.237 261.438 462.256 261.438 462.159C261.438 462.062 261.438 462.159 261.438 462.062C261.463 461.42 261.622 460.79 261.905 460.213C262.039 459.907 262.093 459.572 262.06 459.24C262.045 459.104 262.061 458.966 262.109 458.838C262.156 458.709 262.233 458.594 262.333 458.5C262.099 458.851 262.333 459.201 262.333 459.551C262.349 459.851 262.296 460.151 262.177 460.427C261.988 460.815 261.895 461.242 261.905 461.673C261.905 461.809 261.905 461.965 261.905 462.101C261.905 462.237 261.905 462.218 261.905 462.218C261.905 462.218 261.905 462.218 261.905 462.081C261.905 461.712 261.905 461.361 261.905 460.991C261.905 460.991 261.905 460.894 261.905 460.836C261.905 460.777 261.905 460.836 261.905 460.738C261.905 460.641 261.905 460.738 261.905 460.836C261.924 460.882 261.927 460.933 261.913 460.981C261.899 461.029 261.868 461.071 261.827 461.098C261.785 461.126 261.735 461.138 261.685 461.133C261.636 461.128 261.589 461.105 261.554 461.069Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.275 470.313C257.36 470.258 257.433 470.187 257.49 470.103C257.547 470.02 257.586 469.926 257.606 469.827C257.711 469.307 257.993 468.839 258.404 468.503C258.63 468.271 258.803 467.992 258.91 467.686L259.143 467.219C259.143 467.219 259.143 467.121 259.26 467.219C259.377 467.316 259.26 467.219 259.26 467.335C259.143 467.527 259.045 467.729 258.968 467.939C258.925 468.094 258.852 468.239 258.754 468.367C258.827 468.224 258.911 468.087 259.007 467.958L259.357 467.413C259.357 467.413 259.357 467.297 259.474 467.413C259.591 467.53 259.474 467.413 259.474 467.53C259.385 467.666 259.306 467.809 259.24 467.958C259.069 468.301 258.831 468.605 258.54 468.854C258.219 469.122 257.978 469.471 257.84 469.866C257.805 469.992 257.744 470.11 257.66 470.21C257.576 470.311 257.471 470.393 257.353 470.449C257.353 470.449 257.275 470.352 257.275 470.313Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.86 463.035C258.076 463.144 258.284 463.268 258.483 463.405C258.483 463.405 258.599 463.405 258.483 463.522C258.366 463.639 258.483 463.522 258.366 463.522L257.957 463.288C257.604 463.117 257.292 462.872 257.043 462.568C256.774 462.254 256.424 462.018 256.031 461.887C255.904 461.853 255.787 461.791 255.686 461.708C255.585 461.624 255.504 461.519 255.447 461.401C255.447 461.401 255.447 461.401 255.447 461.401C255.499 461.482 255.568 461.552 255.648 461.605C255.729 461.659 255.819 461.695 255.914 461.712C256.438 461.833 256.909 462.119 257.257 462.53C257.439 462.725 257.666 462.872 257.918 462.958L258.541 463.269C258.541 463.269 258.541 463.269 258.541 463.366C258.541 463.464 258.541 463.366 258.424 463.366L257.763 463.055C257.615 463.007 257.477 462.935 257.354 462.841C257.587 462.88 257.763 462.899 257.86 463.035Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M263.85 466.848L263.306 466.498C263.306 466.498 263.189 466.498 263.306 466.381C263.422 466.264 263.306 466.381 263.422 466.381L263.889 466.634C264.208 466.79 264.493 467.008 264.726 467.276C265.003 467.613 265.366 467.869 265.777 468.016C265.901 468.05 266.016 468.112 266.113 468.196C266.211 468.28 266.288 468.385 266.341 468.502C266.223 468.325 266.042 468.2 265.835 468.152C265.339 468.052 264.892 467.784 264.57 467.393C264.335 467.156 264.049 466.976 263.734 466.867L263.267 466.634C263.267 466.634 263.15 466.634 263.267 466.517C263.383 466.4 263.267 466.517 263.403 466.517L263.987 466.809C264.139 466.85 264.284 466.916 264.415 467.004C264.142 466.984 263.967 466.965 263.85 466.848Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M258.773 461.965C258.946 462.17 259.109 462.385 259.26 462.607C259.26 462.607 259.26 462.607 259.26 462.724C259.26 462.84 259.26 462.724 259.143 462.724C259.071 462.615 258.994 462.511 258.91 462.412C258.612 462.079 258.387 461.688 258.248 461.264C258.137 460.898 257.92 460.573 257.626 460.33C257.51 460.244 257.417 460.133 257.352 460.004C257.288 459.876 257.255 459.734 257.256 459.591C257.256 459.591 257.256 459.591 257.256 459.591C257.269 459.677 257.3 459.76 257.346 459.834C257.393 459.907 257.455 459.97 257.528 460.019C257.98 460.32 258.317 460.766 258.482 461.284C258.61 461.598 258.81 461.878 259.065 462.101L259.357 462.451C259.357 462.451 259.357 462.451 259.357 462.568C259.357 462.685 259.357 462.568 259.24 462.568L258.696 461.965C258.54 461.838 258.426 461.669 258.365 461.478C258.489 461.65 258.625 461.813 258.773 461.965Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M255.543 468.503C255.712 468.463 255.863 468.367 255.971 468.231C256.28 467.777 256.732 467.441 257.255 467.277C257.559 467.14 257.83 466.941 258.053 466.693L258.423 466.382C258.423 466.382 258.423 466.382 258.52 466.382C258.617 466.382 258.52 466.382 258.52 466.499L258.131 466.829C257.938 467.079 257.683 467.274 257.392 467.394H257.508C257.718 467.296 257.914 467.172 258.092 467.024C258.139 466.957 258.208 466.909 258.286 466.888L258.676 466.615C258.676 466.615 258.676 466.615 258.792 466.615C258.909 466.615 258.792 466.615 258.792 466.615C258.792 466.615 258.423 466.907 258.228 467.044C258.005 467.234 257.748 467.38 257.469 467.472C257.042 467.597 256.658 467.84 256.36 468.172C256.277 468.283 256.168 468.371 256.042 468.428C255.916 468.486 255.778 468.512 255.64 468.503C255.64 468.503 255.524 468.523 255.543 468.503Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.781 467.607C262.781 467.471 262.606 467.335 262.509 467.199C262.412 467.062 262.509 467.199 262.509 467.101C262.509 467.004 262.509 467.101 262.509 467.101C262.509 467.101 262.801 467.471 262.956 467.666C263.15 467.891 263.29 468.157 263.365 468.444C263.492 468.86 263.735 469.231 264.066 469.515C264.169 469.605 264.253 469.715 264.313 469.839C264.373 469.963 264.408 470.097 264.416 470.235C264.404 470.148 264.374 470.064 264.327 469.99C264.28 469.916 264.217 469.854 264.143 469.806C263.695 469.493 263.36 469.042 263.19 468.522C263.054 468.207 262.848 467.927 262.587 467.705L262.295 467.354C262.295 467.354 262.295 467.354 262.295 467.257C262.295 467.16 262.295 467.257 262.412 467.257C262.501 467.398 262.612 467.523 262.742 467.627C262.995 467.825 263.189 468.087 263.307 468.386C263.307 468.386 263.307 468.386 263.307 468.483C263.295 468.438 263.295 468.392 263.307 468.347C263.207 468.14 263.075 467.949 262.918 467.782C262.918 467.782 262.801 467.763 262.781 467.607Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M263.889 462.84C263.684 463.013 263.47 463.176 263.247 463.327C263.247 463.327 263.248 463.327 263.111 463.327C262.975 463.327 263.111 463.327 263.111 463.23L263.442 462.977C263.758 462.681 264.138 462.462 264.551 462.334C264.917 462.223 265.241 462.007 265.485 461.712C265.617 461.545 265.803 461.428 266.01 461.381C266.01 461.381 266.01 461.381 266.127 461.381C265.966 461.417 265.826 461.515 265.738 461.653C265.437 462.102 264.99 462.432 264.473 462.587C264.173 462.721 263.902 462.913 263.675 463.152L263.345 463.463C263.345 463.463 263.345 463.58 263.189 463.463C263.033 463.346 263.189 463.366 263.189 463.327L263.792 462.801C263.915 462.643 264.086 462.527 264.279 462.471C264.141 462.586 264.011 462.709 263.889 462.84Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.396 466.343L263.617 465.993C263.617 465.993 263.617 465.993 263.617 465.895C263.617 465.798 263.617 465.895 263.734 465.895L267.1 467.452C267.1 467.452 266.983 467.452 266.925 467.452L263.656 466.226C263.656 466.226 263.656 466.226 263.773 466.226L264.454 466.479H264.551C264.551 466.479 264.746 466.479 264.843 466.577C264.94 466.674 264.396 466.421 264.396 466.343Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.201 463.56L263.539 463.794C263.539 463.794 263.423 463.794 263.384 463.794C263.345 463.794 263.384 463.794 263.5 463.696L266.633 462.529L266.983 462.412C266.983 462.412 266.983 462.412 266.867 462.509L263.656 463.988C263.656 463.988 263.559 463.988 263.52 463.988C263.481 463.988 263.52 463.988 263.52 463.988L264.201 463.657C264.298 463.56 264.473 463.56 264.59 463.463H264.707C264.707 463.463 264.59 463.463 264.532 463.463C264.427 463.511 264.315 463.544 264.201 463.56Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M259.434 461.459L259.745 462.335C259.745 462.335 259.745 462.452 259.745 462.471C259.745 462.491 259.745 462.471 259.745 462.374L258.461 458.929C258.461 458.929 258.461 458.929 258.461 459.026C258.967 460.097 259.453 461.167 259.94 462.238C259.94 462.238 259.94 462.354 259.94 462.393C259.94 462.432 259.842 462.393 259.823 462.277C259.803 462.16 259.57 461.712 259.434 461.44C259.376 461.366 259.336 461.279 259.317 461.187C259.356 461.265 259.434 461.342 259.434 461.459Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.449 468.464C262.352 468.153 262.235 467.861 262.138 467.569C262.041 467.277 262.138 467.471 262.138 467.452C262.138 467.432 262.138 467.452 262.138 467.452L263.422 470.916C263.412 470.898 263.406 470.878 263.406 470.858C263.406 470.837 263.412 470.817 263.422 470.799C262.916 469.729 262.43 468.658 261.943 467.588C261.943 467.588 261.943 467.588 261.943 467.471C261.943 467.355 261.943 467.471 262.041 467.471L262.449 468.328C262.504 468.404 262.543 468.49 262.566 468.581C262.449 468.639 262.449 468.561 262.449 468.464Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.587 466.343L258.288 466.089C258.288 466.089 258.288 466.089 258.404 466.089C258.521 466.089 258.404 466.089 258.404 466.089L254.922 467.374C254.922 467.374 254.922 467.374 255.058 467.277L258.229 465.817C258.229 465.817 258.327 465.817 258.346 465.817C258.366 465.817 258.346 465.817 258.346 465.914L257.665 466.226C257.548 466.362 257.373 466.362 257.237 466.44C257.353 466.403 257.469 466.371 257.587 466.343Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.295 461.536C262.159 461.789 262.042 462.042 261.926 462.295C261.809 462.548 261.926 462.393 261.828 462.295C261.731 462.198 261.828 462.295 261.828 462.178C262.354 461.05 262.86 459.921 263.385 458.812C263.385 458.812 263.385 458.948 263.385 458.987L262.159 462.276C262.159 462.276 262.159 462.373 262.159 462.276C262.159 462.178 262.159 462.276 262.159 462.159C262.159 462.042 262.354 461.634 262.432 461.381C262.509 461.128 262.529 461.186 262.529 461.069C262.535 461.011 262.535 460.952 262.529 460.894C262.536 460.965 262.536 461.037 262.529 461.108C262.522 461.192 262.497 461.273 262.457 461.347C262.417 461.421 262.362 461.485 262.295 461.536Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M259.494 468.385L259.863 467.606C259.863 467.606 259.863 467.509 259.961 467.606C260.058 467.704 259.961 467.606 259.961 467.723C259.435 468.832 258.93 469.961 258.404 471.09C258.404 471.09 258.404 470.973 258.404 470.934L259.63 467.626C259.63 467.626 259.63 467.626 259.63 467.742C259.63 467.859 259.435 468.248 259.358 468.521C259.28 468.793 259.26 468.716 259.26 468.813C259.242 468.876 259.242 468.944 259.26 469.007C259.26 469.007 259.26 468.891 259.26 468.832C259.257 468.744 259.276 468.656 259.317 468.577C259.358 468.499 259.419 468.432 259.494 468.385Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.47 463.56L258.248 463.91C258.248 463.91 258.248 463.91 258.132 463.91L254.766 462.353C254.766 462.353 254.882 462.353 254.96 462.353L258.229 463.579C258.229 463.579 258.346 463.579 258.229 463.677C258.112 463.774 258.229 463.677 258.093 463.677L257.334 463.404C257.217 463.404 257.139 463.404 257.042 463.404H256.848L257.062 463.501C257.2 463.472 257.345 463.493 257.47 463.56Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M254.474 464.923L258.132 464.787C257.808 464.817 257.483 464.817 257.159 464.787C257.041 464.836 256.908 464.836 256.79 464.787C256.99 464.798 257.192 464.798 257.393 464.787H257.976H258.132C258.132 464.787 258.132 464.787 257.976 464.787L254.98 464.67H254.474C254.474 464.67 254.435 464.943 254.474 464.923Z",
                  fill: "#F0B105"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M256.615 460.563L259.047 462.82C259.047 462.82 259.047 462.82 258.91 462.82L258.482 462.431C258.366 462.431 258.307 462.314 258.249 462.236C258.191 462.159 258.405 462.373 258.424 462.47L258.813 462.898C258.813 462.898 258.93 462.898 258.813 463.034C258.696 463.171 258.813 463.034 258.677 463.034L257.14 461.38L256.439 460.621L256.615 460.563Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M256.498 469.301L258.736 466.868C258.736 466.868 258.736 466.752 258.852 466.868C258.969 466.985 258.852 466.966 258.852 467.005C258.733 467.156 258.603 467.299 258.463 467.433C258.435 467.524 258.372 467.601 258.288 467.647C258.288 467.647 258.405 467.51 258.502 467.472L258.93 467.102C258.93 467.102 258.93 466.985 259.066 467.102C259.203 467.219 259.066 467.199 259.066 467.238L257.432 468.756L256.654 469.476L256.498 469.301Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M265.289 460.621L263.343 462.762L263.11 463.015C263.11 463.015 263.11 463.151 262.974 463.015C262.837 462.879 262.974 462.918 262.974 462.879C262.974 462.84 263.207 462.606 263.343 462.45C263.479 462.295 263.343 462.314 263.518 462.256C263.693 462.197 263.402 462.392 263.304 462.411L262.876 462.801C262.876 462.801 262.876 462.917 262.74 462.801C262.604 462.684 262.74 462.684 262.74 462.664L264.374 461.127L265.153 460.426C265.153 460.426 265.289 460.563 265.289 460.621Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.933 468.581C260.933 468.328 260.933 468.094 260.933 467.861C260.933 467.627 260.933 467.705 260.933 467.724C260.933 467.744 260.933 467.822 260.933 467.861L260.816 471.383C260.816 470.157 260.816 468.931 260.68 467.705C260.718 468.054 260.718 468.407 260.68 468.756C260.709 468.824 260.723 468.896 260.723 468.97C260.723 469.044 260.709 469.116 260.68 469.184C260.913 468.97 260.894 468.775 260.933 468.581Z",
                  fill: "#F2B105"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M263.363 467.374C263.224 467.24 263.094 467.097 262.974 466.945C262.974 466.945 262.858 466.945 262.974 466.809C263.091 466.673 262.974 466.809 263.111 466.809L264.667 468.464L265.348 469.222L262.916 466.965C262.916 466.965 262.916 466.965 262.916 466.848C262.916 466.731 263.013 466.848 263.052 466.848L263.48 467.257C263.566 467.286 263.64 467.34 263.694 467.413C263.694 467.413 263.383 467.471 263.363 467.374Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.932 458.519L261.068 462.198C261.038 461.913 261.038 461.626 261.068 461.341C261.04 461.266 261.04 461.183 261.068 461.108C261.048 460.992 261.048 460.873 261.068 460.757C261.057 460.939 261.057 461.121 261.068 461.302C261.068 461.302 261.068 461.439 261.068 461.497C261.078 461.685 261.078 461.873 261.068 462.061V462.198C261.068 462.198 261.068 462.198 261.068 462.061C261.068 461.478 261.068 460.894 261.068 460.29V458.519H260.932Z",
                  fill: "#F0B105"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M267.314 464.982L263.656 465.137C263.98 465.108 264.305 465.108 264.629 465.137C264.712 465.117 264.799 465.117 264.882 465.137H264.765H264.435H263.754C263.754 465.137 263.637 465.137 263.754 465.137C263.87 465.137 263.754 465.137 263.87 465.137H265.699H267.372C267.372 465.137 267.333 464.962 267.314 464.982Z",
                  fill: "#F1B208"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M258.171 466.849C257.949 467.08 257.685 467.265 257.393 467.394C257.393 467.394 257.393 467.394 257.393 467.394C257.675 467.258 257.932 467.073 258.151 466.849H258.171Z",
                  fill: "#974704"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M263.287 468.484C263.141 468.207 262.958 467.951 262.742 467.725C262.973 467.946 263.158 468.211 263.287 468.503C263.287 468.503 263.326 468.503 263.287 468.484Z",
                  fill: "#964702"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.859 463.034C257.634 462.949 257.438 462.8 257.295 462.606C257.481 462.757 257.683 462.888 257.898 462.995L257.859 463.034Z",
                  fill: "#A05303"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.392 464.98C257.174 465.028 256.948 465.028 256.73 464.98H257.159H257.392Z",
                  fill: "#A85D04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.932 468.581C260.971 468.787 260.971 468.998 260.932 469.204V468.756V468.581Z",
                  fill: "#B87004"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M263.889 462.84C264.024 462.69 264.2 462.582 264.395 462.529C264.209 462.602 264.038 462.708 263.889 462.84Z",
                  fill: "#9E5003"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M258.559 461.419C258.636 461.603 258.741 461.773 258.87 461.925C258.731 461.781 258.624 461.608 258.559 461.419C258.559 461.399 258.559 461.419 258.559 461.419Z",
                  fill: "#9C4F03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M263.365 467.374C263.484 467.484 263.588 467.608 263.676 467.744C263.541 467.656 263.416 467.551 263.307 467.433L263.365 467.374Z",
                  fill: "#9B4D04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M258.559 467.413C258.457 467.537 258.339 467.649 258.209 467.744C258.291 467.604 258.396 467.479 258.52 467.374L258.559 467.413Z",
                  fill: "#9B4D04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M263.324 462.49C263.431 462.37 263.548 462.259 263.674 462.159C263.598 462.303 263.491 462.429 263.363 462.529L263.324 462.49Z",
                  fill: "#9C4E03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M258.422 462.529C258.304 462.419 258.199 462.295 258.111 462.159C258.23 462.269 258.334 462.393 258.422 462.529Z",
                  fill: "#9A4C03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M256.496 469.301C256.394 469.423 256.269 469.522 256.127 469.593C256.238 469.481 256.362 469.383 256.496 469.301Z",
                  fill: "#E3A005"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M256.614 460.563C256.504 460.47 256.412 460.358 256.342 460.232C256.416 460.352 256.469 460.483 256.497 460.621L256.614 460.563Z",
                  fill: "#E3A005"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M265.291 460.621C265.388 460.509 265.499 460.411 265.622 460.329C265.533 460.449 265.421 460.548 265.291 460.621Z",
                  fill: "#E6A306"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.779 461.983C262.838 461.837 262.917 461.7 263.013 461.575L262.779 461.983Z",
                  fill: "#974704"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M265.23 469.359C265.345 469.447 265.438 469.56 265.503 469.69C265.398 469.592 265.306 469.48 265.23 469.359Z",
                  fill: "#E3A005"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M258.735 468.309L258.969 467.88C258.91 468.033 258.832 468.177 258.735 468.309C258.716 468.348 258.735 468.309 258.735 468.309Z",
                  fill: "#974704"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.239 467.121L263.811 466.887C263.963 466.945 264.107 467.024 264.239 467.121C264.277 467.14 264.239 467.121 264.239 467.121Z",
                  fill: "#964702"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.08 466.499L257.547 466.304C257.391 466.398 257.219 466.463 257.041 466.499C257.041 466.499 257.041 466.499 257.041 466.499H257.08Z",
                  fill: "#A35602"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.271 468.581C260.306 468.695 260.306 468.817 260.271 468.931V468.484V468.581Z",
                  fill: "#8D3B03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.629 463.425C264.509 463.503 264.378 463.562 264.24 463.6L264.629 463.444C264.629 463.444 264.629 463.405 264.629 463.425Z",
                  fill: "#9E5103"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.394 466.343L264.745 466.498C264.606 466.499 264.471 466.458 264.355 466.382L264.394 466.343Z",
                  fill: "#A65B03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.116 461.497C260.089 461.369 260.089 461.237 260.116 461.108L260.213 461.42L260.116 461.497Z",
                  fill: "#9B4D04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M266.205 461.42C266.186 461.411 266.166 461.407 266.146 461.407C266.126 461.407 266.106 461.411 266.088 461.42C266.088 461.42 266.263 461.42 266.38 461.42C266.496 461.42 266.341 461.401 266.205 461.42Z",
                  fill: "#D79205"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.451 461.263C262.417 461.372 262.371 461.477 262.314 461.575L262.412 461.302L262.451 461.263Z",
                  fill: "#9C4E03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.47 463.56L257.197 463.443C257.308 463.461 257.414 463.501 257.509 463.56H257.47Z",
                  fill: "#9C4E03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M259.494 468.385L259.396 468.658C259.415 468.547 259.454 468.442 259.513 468.346L259.494 468.385Z",
                  fill: "#9C4E03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.451 468.464C262.518 468.555 262.559 468.662 262.568 468.775V468.503L262.451 468.464Z",
                  fill: "#A85D04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M259.357 461.147L259.455 461.42C259.387 461.329 259.347 461.221 259.338 461.108L259.357 461.147Z",
                  fill: "#A85D04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M254.472 464.922C254.445 464.936 254.416 464.943 254.386 464.943C254.355 464.943 254.326 464.936 254.299 464.922C254.299 464.922 254.415 464.922 254.472 464.922Z",
                  fill: "#DE9906"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.041 465.798H257.234C257.17 465.809 257.105 465.809 257.041 465.798Z",
                  fill: "#A35604"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.555 461.068V460.913C261.574 460.963 261.574 461.018 261.555 461.068Z",
                  fill: "#873403"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M256.846 464.222C256.895 464.203 256.95 464.203 257 464.222H256.846Z",
                  fill: "#873403"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.512 464.143C264.561 464.124 264.617 464.124 264.666 464.143H264.512Z",
                  fill: "#883603"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.672 468.599V468.464V468.56C261.672 468.56 261.71 468.618 261.672 468.599Z",
                  fill: "#893503"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.512 459.609C264.512 459.609 264.512 459.609 264.627 459.609C264.743 459.609 264.55 459.59 264.512 459.609Z",
                  fill: "#D48E05"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M255.544 461.341C255.544 461.341 255.544 461.341 255.544 461.225C255.544 461.109 255.524 461.302 255.544 461.341Z",
                  fill: "#D48E05"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M258.072 465.837C258.072 465.837 258.072 465.837 258.188 465.837C258.304 465.837 258.111 465.818 258.072 465.837Z",
                  fill: "#B4846B"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.778 464.572C260.761 464.472 260.723 464.378 260.665 464.295C260.608 464.212 260.533 464.143 260.445 464.092C260.358 464.042 260.26 464.012 260.159 464.004C260.059 463.996 259.958 464.011 259.863 464.046C259.681 464.092 259.51 464.171 259.357 464.28C259.437 464.176 259.537 464.09 259.651 464.027C259.766 463.964 259.892 463.926 260.022 463.915C260.152 463.904 260.284 463.92 260.407 463.963C260.53 464.006 260.643 464.074 260.739 464.163C260.779 464.27 260.779 464.388 260.739 464.494C260.739 464.494 260.856 464.572 260.778 464.572Z",
                  fill: "#883603"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.314 464.182C262.132 464.09 261.933 464.037 261.73 464.027C261.579 464.008 261.426 464.045 261.301 464.131C261.175 464.217 261.086 464.346 261.049 464.494C261.04 464.415 261.058 464.335 261.101 464.268C261.143 464.201 261.207 464.15 261.282 464.124C261.453 464.019 261.653 463.972 261.853 463.989C262.053 464.007 262.241 464.088 262.391 464.221C262.391 464.221 262.45 464.202 262.314 464.182Z",
                  fill: "#893503"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.42 465.389C261.437 465.405 261.451 465.425 261.46 465.447C261.469 465.468 261.474 465.492 261.474 465.515C261.474 465.539 261.469 465.562 261.46 465.584C261.451 465.606 261.437 465.626 261.42 465.642C261.42 465.642 261.284 465.642 261.206 465.642C261.012 465.622 260.816 465.622 260.622 465.642C260.586 465.661 260.546 465.67 260.505 465.67C260.465 465.67 260.425 465.661 260.389 465.642C260.389 465.642 260.389 465.486 260.389 465.369C260.389 465.253 260.389 465.545 260.642 465.545C260.895 465.545 260.992 465.642 261.167 465.545C261.342 465.447 261.381 465.525 261.42 465.389Z",
                  fill: "#893703"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.348 466.226C260.348 466.226 260.348 466.226 260.232 466.226C260.115 466.226 260.232 466.226 260.232 466.129C260.232 466.032 260.232 466.129 260.329 466.129H260.562C260.683 466.168 260.812 466.168 260.932 466.129H261.049C261.049 466.129 260.562 466.44 260.348 466.265C260.134 466.09 260.504 466.187 260.348 466.226Z",
                  fill: "#F0B007"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.001 464.728C261.908 464.766 261.803 464.766 261.709 464.728C261.612 464.728 261.709 464.533 261.709 464.417C261.773 464.375 261.847 464.353 261.923 464.353C261.999 464.353 262.074 464.375 262.137 464.417C262.098 464.495 262.021 464.611 262.001 464.728Z",
                  fill: "#883303"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.156 464.727C260.067 464.757 259.972 464.757 259.883 464.727C259.859 464.719 259.836 464.705 259.817 464.688C259.798 464.67 259.783 464.649 259.772 464.625C259.761 464.602 259.755 464.576 259.754 464.55C259.753 464.524 259.757 464.499 259.767 464.474C259.767 464.474 259.767 464.377 259.942 464.338C260.117 464.299 260.117 464.338 260.195 464.338C260.214 464.381 260.224 464.427 260.224 464.474C260.224 464.521 260.214 464.568 260.195 464.61L260.156 464.727Z",
                  fill: "#883303"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.478 464.455C261.361 464.455 261.322 464.591 261.205 464.572C261.276 464.475 261.368 464.397 261.474 464.343C261.581 464.288 261.699 464.26 261.818 464.26C261.937 464.26 262.055 464.288 262.162 464.343C262.268 464.397 262.36 464.475 262.431 464.572C262.295 464.572 262.236 464.435 262.139 464.435C262.047 464.383 261.943 464.355 261.837 464.355C261.732 464.355 261.628 464.383 261.536 464.435L261.478 464.455Z",
                  fill: "#974903"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.35 466.227C260.35 466.227 260.486 466.227 260.544 466.227C260.894 466.46 260.972 466.46 261.284 466.227C261.595 465.993 261.381 466.13 261.42 466.227C261.459 466.324 261.264 466.344 261.186 466.402C261.123 466.422 261.055 466.422 260.992 466.402C260.979 466.415 260.964 466.425 260.947 466.432C260.93 466.439 260.913 466.443 260.894 466.443C260.876 466.443 260.858 466.439 260.842 466.432C260.825 466.425 260.81 466.415 260.797 466.402C260.749 466.404 260.701 466.394 260.657 466.373C260.613 466.353 260.574 466.323 260.544 466.285C260.544 466.285 260.505 466.227 260.35 466.227Z",
                  fill: "#914103"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.389 464.455C260.077 464.26 259.922 464.279 259.377 464.571C259.434 464.486 259.509 464.414 259.596 464.36C259.684 464.307 259.783 464.273 259.885 464.262C259.987 464.251 260.09 464.263 260.187 464.296C260.285 464.329 260.373 464.383 260.447 464.455H260.389Z",
                  fill: "#954603"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.12 464.845C261.983 464.924 261.822 464.949 261.668 464.917C261.514 464.885 261.377 464.797 261.283 464.67C261.397 464.752 261.528 464.808 261.666 464.831C261.805 464.855 261.946 464.846 262.081 464.806C262.081 464.806 262.139 464.806 262.12 464.845Z",
                  fill: "#914003"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.506 465.954C260.549 465.936 260.595 465.927 260.642 465.927C260.689 465.927 260.735 465.936 260.778 465.954C260.878 465.993 260.989 465.993 261.089 465.954C261.133 465.936 261.179 465.927 261.226 465.927C261.272 465.927 261.319 465.936 261.362 465.954H260.506C260.506 465.954 260.506 465.993 260.506 465.954Z",
                  fill: "#914003"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M259.863 464.845C260.106 464.862 260.347 464.793 260.544 464.65C260.464 464.771 260.344 464.859 260.204 464.898C260.065 464.938 259.916 464.925 259.785 464.864C259.785 464.864 259.824 464.825 259.863 464.845Z",
                  fill: "#8D3B03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.797 466.46H260.992C260.992 466.46 261.167 466.46 261.206 466.655C261.011 466.441 260.797 466.48 260.564 466.655C260.33 466.83 260.72 466.538 260.797 466.46Z",
                  fill: "#974704"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M259.824 464.495C259.8 464.536 259.787 464.583 259.787 464.631C259.787 464.679 259.8 464.726 259.824 464.767H259.688C259.688 464.767 259.551 464.767 259.688 464.631C259.703 464.593 259.727 464.56 259.758 464.533C259.788 464.506 259.824 464.486 259.863 464.475L259.824 464.495Z",
                  fill: "#E4A107"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.002 464.727C261.967 464.682 261.948 464.627 261.948 464.571C261.948 464.514 261.967 464.46 262.002 464.415H262.099C262.099 464.59 262.099 464.61 261.943 464.668L262.002 464.727Z",
                  fill: "#EAA909"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M259.824 464.494C259.824 464.494 259.687 464.494 259.629 464.494C259.571 464.494 259.629 464.591 259.629 464.63C259.454 464.63 259.434 464.475 259.629 464.377C259.713 464.314 259.816 464.28 259.921 464.28L259.824 464.494Z",
                  fill: "#9D5209"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.154 464.707C260.154 464.61 260.154 464.493 260.154 464.415H260.271C260.368 464.629 260.31 464.688 260.154 464.707Z",
                  fill: "#DD9A06"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.049 464.883L261.185 465.213C261.185 465.213 261.185 465.214 261.185 465.311C261.185 465.408 261.185 465.311 261.088 465.311C261.068 465.188 261.068 465.063 261.088 464.941C261.088 464.941 261.029 464.863 261.049 464.883Z",
                  fill: "#944403"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.154 464.709C260.204 464.695 260.247 464.664 260.276 464.621C260.304 464.578 260.316 464.526 260.31 464.475C260.31 464.475 260.466 464.475 260.427 464.611C260.388 464.748 260.271 464.728 260.154 464.728V464.709Z",
                  fill: "#974A08"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.775 464.571C260.843 464.733 260.843 464.915 260.775 465.077C260.824 464.912 260.824 464.736 260.775 464.571Z",
                  fill: "#A85D04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.737 464.962C260.733 465.029 260.715 465.095 260.685 465.155C260.655 465.215 260.613 465.269 260.562 465.312C260.601 465.176 260.718 465.079 260.737 464.962Z",
                  fill: "#924303"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.002 464.728C262.05 464.706 262.09 464.67 262.117 464.625C262.145 464.58 262.159 464.528 262.158 464.475C262.158 464.475 262.294 464.475 262.274 464.611C262.245 464.655 262.204 464.689 262.155 464.71C262.107 464.731 262.054 464.737 262.002 464.728Z",
                  fill: "#8A3B08"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.593 464.435C261.611 464.499 261.611 464.566 261.593 464.63C261.34 464.532 261.593 464.454 261.593 464.377C261.593 464.377 261.535 464.377 261.593 464.435Z",
                  fill: "#9A4D09"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.419 466.227C261.419 466.227 261.322 466.227 261.283 466.227C261.264 466.218 261.245 466.213 261.224 466.213C261.204 466.213 261.184 466.218 261.166 466.227C261.166 466.227 261.166 466.227 261.166 466.11C261.166 465.993 261.283 466.11 261.341 466.11C261.341 466.11 261.458 466.227 261.419 466.227Z",
                  fill: "#D48E05"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.05 464.882C260.991 464.732 260.991 464.565 261.05 464.415C260.993 464.566 260.993 464.732 261.05 464.882Z",
                  fill: "#984A03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.389 464.455C260.429 464.46 260.468 464.475 260.502 464.499C260.536 464.522 260.563 464.554 260.581 464.591C260.508 464.561 260.442 464.515 260.389 464.455Z",
                  fill: "#9C4E03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.505 465.952C260.505 466.049 260.505 465.952 260.389 466.068L260.505 465.952Z",
                  fill: "#AE6403"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.283 465.992C261.344 466.033 261.396 466.086 261.438 466.147C261.397 466.147 261.357 466.13 261.328 466.101C261.299 466.072 261.283 466.033 261.283 465.992Z",
                  fill: "#AE6403"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.477 464.708C261.477 464.708 261.592 464.708 261.65 464.708C261.594 464.725 261.533 464.725 261.477 464.708Z",
                  fill: "#B06707"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.119 464.844C262.175 464.821 262.237 464.821 262.293 464.844C262.293 464.844 262.177 464.824 262.119 464.844Z",
                  fill: "#B46C03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.314 464.183C262.326 464.203 262.333 464.227 262.333 464.25C262.333 464.274 262.326 464.297 262.314 464.318V464.183Z",
                  fill: "#9E5103"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.824 464.065C264.88 464.033 264.944 464.016 265.009 464.016C265.074 464.016 265.138 464.033 265.194 464.065H264.883C264.883 464.065 264.824 464.104 264.824 464.065Z",
                  fill: "#BC7504"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.822 464.066H264.609C264.642 464.048 264.678 464.038 264.715 464.038C264.753 464.038 264.789 464.048 264.822 464.066Z",
                  fill: "#8B3B03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M259.999 461.03C259.966 460.963 259.949 460.89 259.949 460.816C259.949 460.741 259.966 460.668 259.999 460.601V460.913C259.999 460.913 260.057 461.01 259.999 461.03Z",
                  fill: "#C17A04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.788 468.873C261.82 468.932 261.837 468.999 261.837 469.067C261.837 469.135 261.82 469.202 261.788 469.262V468.989C261.788 468.989 261.729 468.892 261.788 468.873Z",
                  fill: "#C47E04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.672 468.599C261.689 468.669 261.689 468.742 261.672 468.812C261.672 468.812 261.672 468.812 261.672 468.812V468.599Z",
                  fill: "#A35602"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M256.965 465.856C256.828 465.912 256.674 465.912 256.537 465.856H256.868C256.868 465.856 256.946 465.798 256.965 465.856Z",
                  fill: "#BF7805"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.173 469.029C260.171 469.074 260.159 469.117 260.139 469.157C260.119 469.198 260.091 469.233 260.057 469.262C260.068 469.173 260.109 469.091 260.173 469.029Z",
                  fill: "#AF6504"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.939 465.661C264.984 465.661 265.028 465.673 265.065 465.697C265.103 465.721 265.133 465.755 265.152 465.796L264.939 465.661Z",
                  fill: "#AF6504"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M256.845 464.22C256.802 464.214 256.761 464.199 256.725 464.175C256.688 464.152 256.657 464.121 256.633 464.085L256.845 464.22Z",
                  fill: "#AF6504"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M263.053 461.615C263.078 461.563 263.113 461.518 263.157 461.481C263.2 461.444 263.251 461.417 263.306 461.401L263.053 461.615Z",
                  fill: "#A95E03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.633 460.914C261.635 460.867 261.649 460.821 261.672 460.78C261.696 460.74 261.729 460.705 261.769 460.68L261.633 460.914Z",
                  fill: "#AF6504"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M258.732 468.308C258.708 468.354 258.675 468.395 258.635 468.428C258.596 468.461 258.55 468.486 258.5 468.501L258.732 468.308Z",
                  fill: "#A95E03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.24 467.122C264.289 467.143 264.332 467.174 264.366 467.215C264.4 467.256 264.424 467.304 264.435 467.356L264.24 467.122Z",
                  fill: "#A95E03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M258.561 461.418C258.547 461.399 258.539 461.375 258.539 461.351C258.539 461.327 258.547 461.303 258.561 461.283C258.561 461.283 258.561 461.38 258.561 461.418Z",
                  fill: "#C57F03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.354 467.354C257.333 467.365 257.31 467.37 257.286 467.37C257.263 467.37 257.24 467.365 257.219 467.354C257.219 467.354 257.335 467.374 257.354 467.354Z",
                  fill: "#C57F03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M263.285 468.484C263.299 468.504 263.307 468.527 263.307 468.551C263.307 468.576 263.299 468.599 263.285 468.619C263.285 468.619 263.305 468.522 263.285 468.484Z",
                  fill: "#C67F03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.396 462.567C264.418 462.556 264.441 462.551 264.464 462.551C264.487 462.551 264.511 462.556 264.532 462.567C264.532 462.567 264.396 462.547 264.396 462.567Z",
                  fill: "#C57F03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.627 463.424H264.839C264.807 463.443 264.77 463.453 264.733 463.453C264.696 463.453 264.659 463.443 264.627 463.424Z",
                  fill: "#C07904"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M259.356 461.145C259.343 461.122 259.336 461.095 259.336 461.068C259.336 461.041 259.343 461.014 259.356 460.991C259.356 460.991 259.318 461.087 259.356 461.145Z",
                  fill: "#C37D04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.451 468.756C262.465 468.78 262.472 468.806 262.472 468.833C262.472 468.861 262.465 468.887 262.451 468.911C262.451 468.911 262.451 468.814 262.451 468.756Z",
                  fill: "#C37D04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.08 466.498C257.057 466.511 257.03 466.518 257.003 466.518C256.976 466.518 256.949 466.511 256.926 466.498C256.977 466.486 257.03 466.486 257.08 466.498Z",
                  fill: "#C47D04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.451 461.262C262.478 461.191 262.517 461.126 262.567 461.069C262.552 461.145 262.511 461.213 262.451 461.262Z",
                  fill: "#B46C03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M262.45 461.068C262.437 461.044 262.43 461.018 262.43 460.991C262.43 460.964 262.437 460.937 262.45 460.913C262.464 460.937 262.471 460.964 262.471 460.991C262.471 461.018 262.464 461.044 262.45 461.068Z",
                  fill: "#D18B06"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M259.317 468.833C259.317 468.833 259.317 468.949 259.317 468.988C259.317 469.026 259.317 468.988 259.317 468.853C259.317 468.718 259.298 468.814 259.317 468.833Z",
                  fill: "#D18B06"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M259.318 468.832C259.304 468.801 259.297 468.769 259.297 468.735C259.297 468.702 259.304 468.669 259.318 468.639V468.832Z",
                  fill: "#B46C03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257.195 463.404C257.124 463.387 257.058 463.354 257.002 463.307C257.075 463.317 257.143 463.351 257.195 463.404Z",
                  fill: "#B56D03"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M257 463.346C256.95 463.362 256.896 463.362 256.846 463.346C256.869 463.333 256.896 463.325 256.923 463.325C256.95 463.325 256.977 463.333 257 463.346Z",
                  fill: "#D18B04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.933 461.108V461.303C260.895 461.11 260.895 460.912 260.933 460.719V461.108Z",
                  fill: "#B36A04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M264.881 465C265.053 464.956 265.234 464.956 265.406 465H264.881Z",
                  fill: "#CC8505"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.282 465.993C261.334 466.049 261.402 466.09 261.476 466.109C261.476 466.109 261.34 466.109 261.262 466.109C261.152 466.102 261.042 466.102 260.932 466.109H260.815C260.705 466.102 260.594 466.102 260.484 466.109L260.601 465.993C260.827 465.969 261.056 465.969 261.282 465.993Z",
                  fill: "#F0B105"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.835 466.148H260.933C260.933 466.148 261.05 466.148 261.088 466.148C261.028 466.177 260.961 466.193 260.894 466.193C260.827 466.193 260.76 466.177 260.699 466.148C260.699 466.148 260.777 466.148 260.835 466.148Z",
                  fill: "#8E3D04"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.087 466.187C261.037 466.17 260.982 466.17 260.932 466.187C261.04 466.157 261.154 466.157 261.262 466.187H261.087Z",
                  fill: "#A05303"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M260.834 466.148C260.813 466.138 260.79 466.132 260.766 466.132C260.743 466.132 260.719 466.138 260.698 466.148C260.628 466.167 260.554 466.167 260.484 466.148C260.601 466.129 260.718 466.09 260.834 466.148Z",
                  fill: "#A45903"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.593 464.435H261.477C261.569 464.364 261.681 464.326 261.798 464.326C261.914 464.326 262.027 464.364 262.119 464.435C261.95 464.367 261.762 464.367 261.593 464.435Z",
                  fill: "#F2B307"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M261.65 464.725H261.477C261.477 464.629 261.477 464.609 261.592 464.551C261.708 464.494 261.573 464.648 261.65 464.725Z",
                  fill: "#EBAA08"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M537.663 254.78L515.519 284.959L493.337 254.78C490.327 250.683 488.512 245.832 488.093 240.765C487.675 235.699 488.669 230.615 490.965 226.079C493.261 221.544 496.769 217.733 501.101 215.071C505.432 212.409 510.416 211 515.5 211C520.584 211 525.568 212.409 529.899 215.071C534.231 217.733 537.739 221.544 540.035 226.079C542.331 230.615 543.325 235.699 542.907 240.765C542.488 245.832 540.673 250.683 537.663 254.78Z",
                  fill: "#FAB500"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M537.663 254.78L515.519 284.959L493.337 254.78C490.327 250.683 488.512 245.832 488.093 240.765C487.675 235.699 488.669 230.615 490.965 226.079C493.261 221.544 496.769 217.733 501.101 215.071C505.432 212.409 510.416 211 515.5 211C520.584 211 525.568 212.409 529.899 215.071C534.231 217.733 537.739 221.544 540.035 226.079C542.331 230.615 543.325 235.699 542.907 240.765C542.488 245.832 540.673 250.683 537.663 254.78V254.78Z",
                  stroke: "#2F6A69",
                  "stroke-width": "0.83",
                  "stroke-miterlimit": "10"
                }
              }),
              _vm._v(" "),
              _c(
                "g",
                {
                  staticStyle: { "mix-blend-mode": "multiply" },
                  attrs: { opacity: "0.2" }
                },
                [
                  _c("path", {
                    attrs: {
                      d:
                        "M525.493 294.235C525.493 295.691 521.03 296.855 515.518 296.855C510.006 296.855 505.523 295.691 505.523 294.235C505.523 292.78 510.006 291.654 515.518 291.654C521.03 291.654 525.493 292.78 525.493 294.235Z",
                      fill: "#00792D"
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M537.439 238.805C537.44 239.709 537.381 240.613 537.264 241.51C537.068 243.168 536.69 244.8 536.136 246.376H493.69C493.139 244.798 492.754 243.167 492.543 241.51C492.442 240.612 492.39 239.709 492.387 238.805C492.369 236.15 492.823 233.514 493.729 231.02H536.117V231.117C536.704 232.772 537.096 234.49 537.284 236.236C537.388 237.088 537.44 237.946 537.439 238.805Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M536.116 231.117H493.729C494.244 229.757 494.896 228.453 495.673 227.224C495.965 226.738 496.276 226.251 496.606 225.804C499.692 221.414 504.243 218.273 509.439 216.948C512.757 216.115 516.22 216.046 519.568 216.747C522.916 217.448 526.061 218.901 528.767 220.996C530.537 222.363 532.091 223.99 533.375 225.823L533.569 226.115C533.822 226.485 534.075 226.855 534.308 227.244C535.033 228.474 535.639 229.771 536.116 231.117Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M536.116 246.375V246.551C535.634 247.907 535.015 249.211 534.269 250.443C533.997 250.871 533.725 251.299 533.433 251.708L532.928 252.409C531.647 254.08 530.142 255.567 528.455 256.827C524.564 259.744 519.833 261.32 514.971 261.32C510.109 261.32 505.378 259.744 501.487 256.827C499.811 255.561 498.313 254.075 497.034 252.409L496.529 251.708C496.237 251.299 495.965 250.871 495.692 250.443C494.913 249.215 494.262 247.911 493.748 246.551V246.375H536.116Z",
                  fill: "#000478"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M513.076 234.971V238.864H516.79V234.971H513.076ZM516.751 238.864H513.096V234.971H516.751V238.864Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M516.73 231.078V234.971H520.289V231.078H516.73ZM520.25 234.971H516.769V231.078H520.25V234.971Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M516.73 238.804V242.697H520.289V238.804H516.73ZM516.73 238.804H520.211V242.697H516.73V238.804Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M509.537 238.804V242.697H513.076V238.804H509.537ZM513.056 242.697H509.576V238.804H513.056V242.697Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M513.076 242.717V246.609H516.79V242.717H513.076ZM516.751 246.609H513.096V242.717H516.751V246.609Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M509.537 231.078V234.971H513.076V231.078H509.537ZM513.056 234.971H509.576V231.078H513.056V234.971Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M509.556 234.99V231.097H505.861V234.99H509.556Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M516.751 234.99V231.097H513.057V234.99H516.751Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M520.27 234.971H523.945V231.078H520.27V234.971Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M509.556 242.717V238.824H505.861V242.717H509.556Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M513.057 242.717H516.751V238.824H513.057V242.717Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M520.27 238.824V242.717H523.945V238.824H520.27Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M509.557 246.55V248.73C510.615 249.461 511.803 249.983 513.057 250.267V246.55H509.557Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M516.752 250.267C518.015 249.981 519.21 249.452 520.271 248.71V246.55H516.752V250.267Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M509.556 246.55H507.262C507.672 247.1 508.141 247.602 508.662 248.049C508.947 248.293 509.245 248.52 509.556 248.73V246.55Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M516.751 246.55H513.057V250.267C514.273 250.54 515.535 250.54 516.751 250.267V246.55Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M520.27 246.55V248.71C520.522 248.535 520.814 248.302 521.047 248.107C521.594 247.642 522.089 247.12 522.525 246.55H520.27Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M513.057 234.99H509.557V238.824H513.057V234.99Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M516.752 234.99V238.824H520.271V234.99H516.752Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M513.057 242.717H509.557V246.551H513.057V242.717Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M516.752 242.717V246.551H520.271V242.717H516.752Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M509.556 231.098H523.944V230.806C518.09 228.759 511.716 228.759 505.861 230.806V231.078L509.556 231.098Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M523.827 231.137H505.783V242.814C505.866 244.126 506.303 245.391 507.047 246.473V246.59L507.339 246.921C507.664 247.302 508.015 247.659 508.389 247.991L508.817 248.342L509.264 248.673C510.806 249.769 512.641 250.379 514.533 250.424H514.708C516.173 250.367 517.608 249.988 518.912 249.316C520.215 248.643 521.356 247.693 522.252 246.532V246.415C523.003 245.336 523.441 244.069 523.516 242.756V231.195L523.827 231.137ZM523.827 242.814C523.739 244.128 523.295 245.393 522.544 246.473V246.571L522.369 246.804L522.214 246.979L521.922 247.291C521.825 247.388 521.727 247.505 521.611 247.602C521.222 247.976 520.806 248.321 520.366 248.634L520.055 248.828C519.977 248.904 519.885 248.964 519.783 249.004L519.472 249.198L518.83 249.51L518.5 249.646L518.189 249.782L517.839 249.899L517.489 250.016L517.158 250.113H516.886L515.875 250.269H515.039C514.443 250.27 513.85 250.205 513.269 250.074C512.021 249.789 510.84 249.267 509.789 248.536C508.924 247.944 508.162 247.214 507.533 246.376V246.279C506.947 245.425 506.549 244.457 506.367 243.437V243.126C506.357 243.003 506.357 242.879 506.367 242.756V231.078H524.391L523.827 242.814Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M523.848 231.157H505.979V231.293H523.848V231.157Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M515.039 250.579C512.864 250.512 510.767 249.755 509.05 248.418C508.136 247.764 507.372 246.922 506.809 245.948C506.246 244.975 505.896 243.893 505.783 242.774V230.98H505.919V242.774C506.035 243.872 506.383 244.932 506.939 245.885C507.496 246.838 508.248 247.662 509.147 248.302C510.816 249.616 512.858 250.366 514.98 250.442C517.01 250.369 518.963 249.653 520.561 248.399C521.431 247.732 522.175 246.915 522.758 245.985C523.358 245.012 523.724 243.913 523.827 242.774V230.98H523.983V242.774C523.869 243.935 523.49 245.053 522.875 246.044C522.297 246.994 521.544 247.826 520.658 248.496C519.051 249.765 517.084 250.494 515.039 250.579Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M515.039 250.444C512.917 250.367 510.874 249.617 509.206 248.303C508.298 247.665 507.536 246.84 506.973 245.883C506.41 244.927 506.057 243.86 505.939 242.756V231.176H506.095V242.756C506.214 243.84 506.559 244.888 507.109 245.83C507.658 246.772 508.399 247.588 509.284 248.225C510.954 249.532 512.998 250.268 515.117 250.327C517.11 250.274 519.036 249.593 520.62 248.381C521.506 247.724 522.25 246.894 522.805 245.94C523.36 244.987 523.714 243.929 523.847 242.834V231.254H523.828V242.834C523.697 243.947 523.338 245.022 522.772 245.99C522.207 246.958 521.447 247.798 520.542 248.459C518.964 249.687 517.037 250.382 515.039 250.444Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M526.044 226.037L524.625 223.585L521.864 224.733L521.67 224.519L519.725 222.573L517.236 224.11L517.12 224.013L516.731 223.701L514.786 222.203L512.706 224.052L511.967 223.604L510.023 222.456L508.662 224.188L508.389 224.538L508.175 224.83L505.395 223.546H505.22L503.898 225.998L503.742 226.29L505.998 230.805C506.792 230.519 507.604 230.285 508.428 230.105H508.72C510.747 229.675 512.812 229.447 514.884 229.423H515.292C517.1 229.429 518.901 229.644 520.658 230.066C521.46 230.253 522.246 230.5 523.011 230.805H523.225L523.595 230.961L523.731 230.669L525.831 226.601L526.044 226.037ZM524.353 229.832L524.042 230.435L523.828 230.805C522.442 230.221 520.993 229.797 519.511 229.54C518.19 229.302 516.849 229.184 515.506 229.19H515.098C513.185 229.219 511.279 229.415 509.4 229.774L508.642 229.929C507.962 230.085 507.398 230.241 506.97 230.377L506.231 230.63H506.056L503.839 226.154L503.976 225.901L504.092 225.667L505.278 223.448H505.414L508.234 224.733L508.448 224.46L508.778 224.032L510.081 222.378L512.025 223.487L512.823 223.954L514.903 222.105L516.847 223.585L517.256 223.916H517.353L519.842 222.378L521.786 224.324L521.981 224.538L524.761 223.39L525.539 224.733L526.025 225.589L526.161 225.823L526.297 226.076L524.353 229.832Z",
                  fill: "#FD0508"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M522.68 228.724L522.272 228.198L521.903 228.081L522.292 228.587L523.789 230.534V230.32L522.68 228.724ZM520.542 225.979L520.658 226.116L521.242 226.855V226.622L520.755 225.999L520.542 225.979ZM518.461 225.201H516.517H515.564H513.62H512.997H511.383H511.033L510.295 225.318H509.925L508.992 226.544L508.409 227.322C508.427 227.445 508.427 227.57 508.409 227.692L509.07 226.836L510.236 225.279H513.036H518.733C518.636 225.284 518.54 225.257 518.461 225.201ZM524.022 230.456L523.905 230.3L522.68 228.724L522.272 228.198L522.019 227.887V227.789L521.825 227.556V227.439L521.592 227.147V227.011L521.3 226.641L520.814 226.018L520.444 225.551V225.454H513.27H511.656H510.392L510.197 225.726L509.264 226.953L508.681 227.731L508.506 227.984L508.253 228.315L507.747 228.977L506.542 230.573L506.406 230.748L506.522 231.02V231.176H506.639C507.396 230.831 508.176 230.539 508.972 230.3L509.439 230.164L509.906 230.028C511.598 229.567 513.343 229.325 515.097 229.307H515.544C517.047 229.326 518.545 229.489 520.017 229.794L521.319 230.105L521.805 230.242L522.505 230.475C523.065 230.665 523.61 230.892 524.139 231.156V231.04L524.255 230.728L524.022 230.456ZM507.475 228.626L508.136 227.75L508.797 226.894L509.964 225.337H512.764H519.939L520.328 225.843L520.444 225.979L521.028 226.719L521.475 227.303V227.42L521.864 227.926L522.253 228.432L523.75 230.378V230.534C523.017 230.178 522.256 229.886 521.475 229.658C521.125 229.658 520.736 229.444 520.269 229.346C519.119 229.069 517.949 228.88 516.769 228.782C516.219 228.752 515.667 228.752 515.117 228.782H514.669C514.164 228.782 513.678 228.782 513.211 228.782C512.009 228.884 510.818 229.093 509.653 229.405C508.503 229.682 507.378 230.053 506.289 230.514V230.378L507.475 228.626ZM518.481 225.357C518.471 225.305 518.471 225.252 518.481 225.201H516.536H515.583H513.639H513.017H511.403H511.053L510.314 225.318H509.945L509.011 226.544L508.428 227.322C508.447 227.445 508.447 227.57 508.428 227.692L509.089 226.836L510.256 225.279H513.056H518.753L518.481 225.357ZM520.561 225.979L520.678 226.116L521.261 226.855V226.622L520.561 225.979ZM522.68 228.724L522.272 228.198L521.903 228.081L522.292 228.587L523.789 230.534V230.32L522.68 228.724Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M513.096 228.899H513.116L512.668 223.605L513.096 228.899Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M526.142 225.824L524.45 223.099L521.708 224.131L519.764 221.912L517.217 223.371L514.923 221.425L512.648 223.371L510.12 221.912L508.175 224.131L505.395 223.099L503.742 225.824L505.939 230.787L506.114 230.689L503.956 225.804L505.473 223.352L508.234 224.364L510.178 222.165L512.725 223.605L514.981 221.776L517.198 223.625L519.725 222.184L521.67 224.345L524.411 223.352L525.928 225.804L523.828 230.806L524.022 230.904L526.142 225.824Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M508.272 224.363L505.511 223.351L503.994 225.804L506.152 230.689C507.27 230.222 508.42 229.838 509.594 229.54L508.272 224.363Z",
                  fill: "#0592E0"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M510.218 222.165L508.273 224.364L509.596 229.541C510.762 229.232 511.952 229.017 513.154 228.899L512.726 223.605L510.218 222.165Z",
                  fill: "#06079B"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M515.021 228.859H516.674L517.14 223.565L514.924 221.619L512.668 223.565L513.096 228.859C513.737 228.859 514.379 228.859 515.021 228.859Z",
                  fill: "#0592E0"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M516.77 228.859C517.948 228.964 519.118 229.152 520.269 229.423L521.65 224.266L519.706 222.105L517.178 223.546C517.178 223.546 516.847 227.886 516.77 228.859Z",
                  fill: "#06079B"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M516.771 228.86C516.771 227.809 517.141 223.546 517.141 223.546L516.674 228.84L516.771 228.86Z",
                  fill: "#06079B"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M524.392 223.351L521.65 224.344L520.27 229.502C521.499 229.807 522.692 230.244 523.828 230.806L526.006 225.901L524.392 223.351Z",
                  fill: "#0592E0"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M520.27 229.502L521.65 224.345L520.27 229.502Z",
                  fill: "#0592E0"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M505.57 227.691C505.57 227.691 506.309 228.723 507.281 228.255C507.567 228.15 507.804 227.943 507.947 227.674C508.09 227.404 508.13 227.092 508.059 226.796C508.14 226.961 508.186 227.141 508.196 227.325C508.205 227.509 508.177 227.693 508.114 227.866C508.05 228.039 507.952 228.197 507.826 228.331C507.699 228.465 507.547 228.571 507.378 228.645C507.199 228.724 507.003 228.762 506.807 228.756C506.61 228.749 506.418 228.698 506.244 228.606C506.07 228.514 505.919 228.384 505.802 228.226C505.686 228.067 505.606 227.885 505.57 227.691Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M508.274 227.322C508.261 227.142 508.221 226.965 508.157 226.796C508.212 227.007 508.212 227.228 508.157 227.439C508.168 227.51 508.168 227.582 508.157 227.653C508.102 227.783 508.015 227.896 507.904 227.984C507.78 228.101 507.635 228.193 507.476 228.256C507.325 228.331 507.159 228.371 506.99 228.373C506.753 228.348 506.524 228.275 506.317 228.158C506.109 228.041 505.928 227.882 505.785 227.692C505.848 227.981 506.003 228.242 506.228 228.436C506.452 228.629 506.734 228.743 507.029 228.762C507.145 228.781 507.263 228.781 507.379 228.762C507.457 228.771 507.535 228.771 507.612 228.762H507.71C508 228.632 508.23 228.395 508.351 228.1C508.37 228.004 508.37 227.905 508.351 227.808C508.344 227.644 508.318 227.48 508.274 227.322ZM508.274 227.711C508.253 227.903 508.18 228.086 508.064 228.24C507.947 228.394 507.791 228.514 507.612 228.587H507.496C507.418 228.596 507.34 228.596 507.262 228.587C507.147 228.606 507.028 228.606 506.912 228.587C506.627 228.579 506.352 228.475 506.133 228.292C505.914 228.108 505.764 227.855 505.707 227.575C505.846 227.764 506.023 227.921 506.228 228.035C506.433 228.149 506.659 228.218 506.893 228.237C507.068 228.233 507.24 228.193 507.399 228.12C507.533 228.061 507.657 227.982 507.768 227.886C507.921 227.769 508.041 227.615 508.118 227.439C508.124 227.393 508.124 227.348 508.118 227.302C508.163 227.117 508.163 226.923 508.118 226.738C508.134 226.887 508.134 227.037 508.118 227.186C508.137 227.308 508.137 227.433 508.118 227.555L508.274 227.711Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M506.33 225.182L506.835 224.948L506.66 225.474L507.107 225.804L506.563 225.921L506.505 226.466L506.135 226.057L505.63 226.291L505.805 225.766L505.338 225.435L505.882 225.318L505.941 224.753L506.33 225.182Z",
                  fill: "#FDDA00"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M507.127 225.804L506.68 225.493L506.874 224.948L506.349 225.181L505.96 224.753V225.317L505.396 225.434L505.863 225.784L505.688 226.329L506.174 226.115L506.544 226.543V225.999L507.088 225.882L507.127 225.804ZM506.563 225.804V226.31L506.233 225.921L505.766 226.115L505.921 225.629L505.494 225.337L505.98 225.22V224.695L506.31 225.084L506.777 224.87L506.602 225.356L507.01 225.648H506.505L506.563 225.804Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M505.803 225.765V225.746L506.659 225.473V225.493L505.803 225.765Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M507.106 225.804L505.355 225.434V225.415L507.106 225.804Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M506.562 225.92L505.881 225.317H505.9L506.562 225.92Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M506.504 226.485L505.939 224.772H505.959L506.523 226.466L506.504 226.485Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M506.304 225.165L506.125 226.042L506.144 226.046L506.323 225.169L506.304 225.165Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M506.77 224.859L505.566 226.184L505.581 226.197L506.784 224.872L506.77 224.859Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M524.122 224.714L524.666 224.85L524.219 225.161L524.374 225.706L523.869 225.453L523.48 225.862L523.441 225.298L522.896 225.161L523.363 224.85L523.208 224.324L523.713 224.558L524.083 224.169L524.122 224.714Z",
                  fill: "#FDDA00"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M524.217 225.162L524.683 224.85L524.139 224.714V224.13L523.75 224.558L523.225 224.305L523.381 224.85L522.914 225.181L523.439 225.317V225.862L523.808 225.473L524.314 225.707L524.217 225.162ZM523.867 225.454L523.536 225.823V225.298L523.05 225.181L523.478 224.889L523.342 224.383L523.789 224.597L524.139 224.208V224.714L524.644 224.831L524.217 225.123L524.372 225.609L523.867 225.454Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M524.217 225.181L523.361 224.869V224.85L524.217 225.161V225.181Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M524.372 225.707L523.205 224.344L523.225 224.325L524.372 225.687V225.707Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M523.72 224.441L523.701 224.444L523.863 225.325L523.882 225.321L523.72 224.441Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M524.01 224.11L523.408 225.796L523.427 225.803L524.028 224.117L524.01 224.11Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M524.119 224.693L523.438 225.273L523.45 225.288L524.132 224.708L524.119 224.693Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M522.916 225.181L522.896 225.161L524.666 224.85L522.916 225.181Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M520.639 228.101C521.905 228.421 523.141 228.851 524.333 229.385L524.489 229.035C523.282 228.492 522.025 228.068 520.736 227.77L520.639 228.101Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M525.151 227.555C523.88 227.02 522.582 226.552 521.262 226.154V226.504C522.595 226.853 523.896 227.315 525.151 227.886V227.555Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M521.067 226.504L520.736 227.769C522.024 228.074 523.28 228.497 524.489 229.034L524.995 227.886C523.723 227.326 522.41 226.864 521.067 226.504Z",
                  fill: "#FD0001"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M522.623 227.808C522.623 227.808 522.623 227.691 522.935 227.808C523.246 227.925 523.11 227.944 523.09 227.964C523.071 227.983 523.09 227.964 523.09 227.964C523.09 227.964 522.935 227.964 522.896 227.964C522.857 227.964 522.643 227.847 522.623 227.808Z",
                  fill: "white"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M522.934 227.75H522.779C522.755 227.738 522.728 227.731 522.701 227.731C522.674 227.731 522.647 227.738 522.623 227.75H523.129C523.129 227.75 523.051 227.788 522.934 227.75ZM523.09 227.925H522.973H522.876C522.914 227.911 522.955 227.911 522.993 227.925H523.149C523.285 227.925 523.304 228.022 523.304 228.022L523.09 227.925Z",
                  fill: "#232020"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M508.546 225.61C509.926 225.239 511.339 225.005 512.765 224.909V223.605C511.258 223.696 509.765 223.951 508.312 224.364L508.546 225.61Z",
                  fill: "#FD0001"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M508.855 226.913C510.172 226.556 511.52 226.328 512.88 226.232V227.575C511.561 227.572 510.249 227.776 508.992 228.178L508.855 226.913Z",
                  fill: "#FD0001"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M515.719 226.855H515.603C515.603 226.855 515.603 226.855 515.603 226.758C515.603 226.66 515.603 226.855 515.486 226.894C515.495 226.872 515.5 226.849 515.5 226.826C515.5 226.802 515.495 226.779 515.486 226.758H515.35C515.329 226.747 515.306 226.742 515.282 226.742C515.258 226.742 515.235 226.747 515.214 226.758H514.222C514.172 226.74 514.117 226.74 514.067 226.758H513.95C513.981 226.758 514.011 226.77 514.033 226.792C514.055 226.814 514.067 226.843 514.067 226.874C514.001 226.83 513.948 226.77 513.911 226.699C513.902 226.751 513.902 226.803 513.911 226.855H514.009H514.106C514.126 226.901 514.155 226.942 514.192 226.975C514.229 227.009 514.272 227.034 514.32 227.05C514.32 227.05 514.32 227.05 514.203 227.166C514.253 227.184 514.308 227.184 514.359 227.166V227.283V227.38C514.376 227.391 514.396 227.396 514.417 227.396C514.437 227.396 514.457 227.391 514.475 227.38V227.536H514.572H514.689C514.716 227.605 514.716 227.681 514.689 227.75C514.701 227.719 514.701 227.684 514.689 227.653C514.689 227.653 514.689 227.653 514.689 227.75V227.653C514.727 227.661 514.767 227.661 514.806 227.653C514.806 227.536 514.806 227.536 514.806 227.517H515H515.117C515.112 227.484 515.112 227.452 515.117 227.419V227.322C515.16 227.34 515.206 227.35 515.253 227.35C515.3 227.35 515.346 227.34 515.389 227.322C515.421 227.313 515.451 227.296 515.475 227.272C515.499 227.248 515.516 227.218 515.525 227.186L515.719 226.855Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M515.409 226.212C515.409 226.212 515.409 226.212 515.292 226.212C515.292 226.212 515.292 226.212 515.175 226.096C515.153 226.153 515.112 226.201 515.059 226.232C515.052 226.247 515.048 226.264 515.048 226.281C515.048 226.297 515.052 226.314 515.059 226.329C515.04 226.321 515.021 226.316 515 226.316C514.98 226.316 514.96 226.321 514.942 226.329C514.942 226.329 514.942 226.212 514.65 226.173L514.748 226.329H515.914V226.173C515.914 226.173 515.409 226.135 515.409 226.212Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M514.456 226.519L514.455 226.538L515.446 226.586L515.447 226.567L514.456 226.519Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M514.379 226.368V226.466H515.371V226.368H514.379ZM514.671 226.466C514.671 226.466 514.671 226.446 514.671 226.466V226.466ZM515.177 226.466C515.177 226.466 515.177 226.446 515.177 226.466V226.466Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M514.36 226.7C514.36 226.7 514.341 226.68 514.36 226.7V226.7Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M515 226.913C514.984 226.901 514.963 226.894 514.943 226.894C514.922 226.894 514.901 226.901 514.885 226.913H515Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M514.669 226.737C514.669 226.737 514.804 226.737 514.823 226.834C514.823 226.834 514.688 226.718 514.592 226.737H514.669Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M515.098 227.4C515.098 227.4 515.117 227.38 515.098 227.4V227.4Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M515.177 226.465C515.177 226.465 515.157 226.446 515.177 226.465V226.465Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M514.669 226.465C514.669 226.465 514.649 226.446 514.669 226.465V226.465Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M514.958 226.408H514.924V226.442H514.958V226.408Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M515.195 227.866C515.185 227.828 515.185 227.788 515.195 227.75V227.866Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M514.514 227.282C514.503 227.326 514.503 227.373 514.514 227.417C514.514 227.417 514.514 227.321 514.514 227.263C514.514 227.205 514.514 227.263 514.514 227.263V227.282Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M514.476 224.48C514.464 224.512 514.464 224.546 514.476 224.578V224.48Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M514.399 223.897C514.382 223.884 514.362 223.877 514.341 223.877C514.32 223.877 514.299 223.884 514.282 223.897C514.282 223.897 514.282 223.897 514.166 223.78C514.138 223.834 514.098 223.88 514.049 223.916C514.041 223.948 514.041 223.981 514.049 224.013C514.049 224.013 514.049 224.013 513.932 224.013C513.932 224.013 513.932 224.013 513.66 223.877V224.013H514.788V223.858C514.788 223.858 514.418 223.838 514.399 223.897Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M513.432 224.209L513.432 224.228L514.424 224.248L514.424 224.229L513.432 224.209Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M513.387 224.071V224.168H514.36V224.071H513.387Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M514.105 224.538C514.105 224.538 514.105 224.538 514.105 224.422C514.105 224.306 514.105 224.422 514.105 224.422C514.096 224.44 514.092 224.46 514.092 224.48C514.092 224.5 514.096 224.519 514.105 224.538C514.105 224.538 514.105 224.441 514.105 224.538C514.128 224.526 514.148 224.509 514.165 224.489C514.181 224.47 514.194 224.447 514.201 224.422L514.105 224.538Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M513.66 224.441C513.715 224.418 513.777 224.418 513.833 224.441C513.833 224.441 513.698 224.325 513.602 224.325L513.66 224.441Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M513.912 224.5C513.907 224.467 513.907 224.435 513.912 224.402C513.903 224.421 513.898 224.441 513.898 224.461C513.898 224.481 513.903 224.501 513.912 224.519V224.616H513.756C513.756 224.616 513.756 224.714 513.892 224.733C514.028 224.753 513.892 224.733 513.892 224.733C513.892 224.733 513.892 224.558 513.912 224.5Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M513.931 225.142V224.967V224.87C513.913 224.878 513.893 224.883 513.873 224.883C513.853 224.883 513.833 224.878 513.814 224.87C513.814 224.87 513.814 224.87 513.814 224.87C513.814 224.87 513.814 224.87 513.814 224.967V225.103L513.931 225.142Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M513.678 224.168C513.678 224.168 513.643 224.15 513.678 224.168V224.168Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M513.946 224.111H513.912V224.145H513.946V224.111Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M514.106 225.569C514.095 225.531 514.095 225.491 514.106 225.453V225.569Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M513.503 224.967C513.494 225.012 513.494 225.058 513.503 225.102C513.486 225.059 513.486 225.011 513.503 224.967Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M516.498 224.48C516.486 224.512 516.486 224.546 516.498 224.578V224.48Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M516.671 223.76C516.671 223.76 516.418 223.76 516.418 223.896C516.418 223.896 516.418 223.896 516.302 223.896L516.166 223.779C516.166 223.779 516.166 223.896 516.03 223.916C516.03 223.916 516.03 223.916 516.03 224.013C516.011 224.004 515.991 224 515.971 224C515.951 224 515.931 224.004 515.913 224.013C515.913 224.013 515.913 224.013 515.641 223.877L515.738 224.013V224.13H516.866V223.994L516.671 223.76Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M515.342 224.198L515.342 224.217L516.334 224.233L516.334 224.214L515.342 224.198Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M515.389 224.071V224.168H516.381V224.071H515.389Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M516.692 224.519H516.79L517.431 224.908C517.392 224.986 517.256 225.103 517.256 225.103H517.003V225.2H516.867H516.673C516.661 225.221 516.655 225.244 516.655 225.268C516.655 225.292 516.661 225.315 516.673 225.336C516.62 225.307 516.573 225.267 516.537 225.219C516.524 225.253 516.504 225.284 516.476 225.308C516.449 225.331 516.416 225.348 516.381 225.356V225.239C516.353 225.287 516.313 225.327 516.265 225.356C516.284 225.327 516.294 225.293 516.294 225.258C516.294 225.224 516.284 225.19 516.265 225.161C516.22 225.146 516.173 225.146 516.128 225.161V225.064V225.005V224.966H515.934H515.701V224.85C515.611 224.799 515.537 224.725 515.487 224.635H515.604V224.538C515.595 224.487 515.595 224.434 515.604 224.382C515.594 224.344 515.594 224.304 515.604 224.266C515.622 224.274 515.642 224.279 515.662 224.279C515.682 224.279 515.702 224.274 515.72 224.266H515.837L515.733 224.091H515.467L515.351 223.993L515.156 223.876H515.267L515.254 223.857C515.314 223.857 515.361 223.865 515.397 223.876H515.607L515.584 223.837C515.622 223.842 515.655 223.848 515.684 223.855C515.704 223.834 515.734 223.804 515.778 223.76L515.915 223.876H516.031C516.031 223.876 516.048 223.866 516.072 223.85C516.094 223.829 516.113 223.805 516.128 223.779L516.151 223.802C516.199 223.775 516.251 223.749 516.284 223.74V223.876H516.226L516.245 223.896C516.263 223.887 516.283 223.883 516.303 223.883C516.324 223.883 516.343 223.887 516.362 223.896C516.381 223.74 516.614 223.74 516.614 223.74V223.876L516.459 224.149H516.595V224.266C516.611 224.316 516.611 224.371 516.595 224.421V224.519H516.692Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M516.185 224.538C516.176 224.52 516.172 224.5 516.172 224.48C516.172 224.46 516.176 224.44 516.185 224.422C516.185 224.422 516.185 224.422 516.185 224.422C516.176 224.44 516.172 224.46 516.172 224.48C516.172 224.5 516.176 224.52 516.185 224.538C516.185 224.538 516.185 224.442 516.185 224.538H516.281C516.292 224.5 516.292 224.46 516.281 224.422L516.185 224.538Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M515.662 224.441C515.662 224.441 515.816 224.441 515.835 224.441C515.835 224.441 515.7 224.325 515.623 224.325L515.662 224.441Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M515.933 225.142V224.967V224.87C515.912 224.879 515.889 224.883 515.865 224.883C515.842 224.883 515.818 224.879 515.797 224.87C515.797 224.87 515.797 224.87 515.797 224.87C515.797 224.87 515.797 224.87 515.797 224.967V225.103L515.933 225.142Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d: "M515.949 224.111H515.914V224.145H515.949V224.111Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M516.205 225.569C516.211 225.531 516.211 225.492 516.205 225.453V225.569Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M515.524 224.967C515.524 224.967 515.524 225.064 515.524 225.102C515.508 225.059 515.508 225.011 515.524 224.967Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.443 224.967H518.638C518.638 224.967 518.793 224.967 518.832 224.967C518.871 224.967 518.832 225.084 518.716 225.103C518.599 225.123 518.58 225.103 518.502 225.103C518.424 225.103 518.502 225.103 518.502 225.103C518.502 225.103 518.502 225.22 518.502 225.24C518.495 225.285 518.495 225.331 518.502 225.376C518.502 225.473 518.696 225.648 518.813 225.668H519.027C519.027 225.668 519.143 225.765 519.221 225.785C519.291 225.803 519.365 225.803 519.435 225.785C519.512 225.775 519.591 225.775 519.668 225.785C519.766 225.785 519.824 225.785 519.902 225.785C519.979 225.785 519.902 225.785 519.902 225.785H520.057H520.193H520.31C520.31 225.785 520.31 225.785 520.427 225.785C520.434 225.817 520.434 225.85 520.427 225.882C520.427 225.882 520.31 225.882 520.271 225.882C520.232 225.882 520.271 225.882 520.271 225.999C520.271 226.115 520.271 225.999 520.271 225.999C520.26 226.05 520.26 226.103 520.271 226.154V226.252C520.271 226.252 520.271 226.252 520.271 226.407C520.271 226.563 520.271 226.505 520.271 226.563C520.271 226.622 520.271 226.563 520.271 226.563C520.203 226.611 520.144 226.67 520.096 226.738L519.941 226.933C519.941 226.933 519.941 226.933 519.941 227.03H519.843C519.843 227.03 519.727 227.03 519.843 227.03C519.96 227.03 519.843 227.03 519.999 226.894L520.154 226.758C520.154 226.758 520.291 226.641 520.31 226.583C520.329 226.524 520.31 226.466 520.193 226.427L520.057 226.544C520.057 226.544 520.057 226.544 520.057 226.641C520.057 226.738 519.921 226.641 519.941 226.758C519.96 226.874 519.941 226.758 519.941 226.758C519.941 226.758 519.805 226.758 519.746 226.758C519.688 226.758 519.746 226.758 519.746 226.758H519.843C519.894 226.717 519.939 226.672 519.98 226.622C520.002 226.565 520.002 226.502 519.98 226.446C519.98 226.446 519.98 226.31 519.98 226.252C519.98 226.193 519.98 226.252 519.863 226.252C519.746 226.252 519.863 226.252 519.863 226.252H519.746H519.552L519.435 226.466C519.435 226.466 519.435 226.602 519.435 226.68C519.435 226.758 519.435 226.68 519.435 226.68C519.435 226.68 519.435 226.816 519.318 226.816H519.221L519.357 226.68C519.357 226.68 519.357 226.544 519.357 226.485V226.368C519.357 226.368 519.357 226.213 519.357 226.174C519.357 226.135 519.357 226.174 519.241 226.174C519.197 226.218 519.164 226.271 519.143 226.33C519.143 226.33 519.143 226.33 519.143 226.427C519.143 226.524 519.143 226.427 519.143 226.427C519.143 226.427 519.143 226.563 519.143 226.602C519.143 226.641 519.007 226.602 518.949 226.602C518.998 226.566 519.038 226.52 519.066 226.466C519.073 226.408 519.073 226.349 519.066 226.291V226.193C519.076 226.149 519.076 226.102 519.066 226.057C519.074 226.039 519.079 226.019 519.079 225.999C519.079 225.978 519.074 225.959 519.066 225.94V225.843C519.066 225.843 519.066 225.843 519.066 225.726C519.066 225.609 519.066 225.609 519.066 225.551C519.066 225.493 519.066 225.454 519.066 225.395C519.066 225.337 519.066 225.395 519.066 225.395C519.066 225.395 519.066 225.395 519.066 225.298C519.066 225.201 519.182 225.298 519.066 225.162C519.066 225.162 519.066 225.162 518.949 225.162C518.832 225.162 518.949 225.064 518.949 225.026C518.949 224.987 518.949 225.026 519.085 225.026H519.26C519.26 225.026 519.26 225.026 519.26 225.123H519.377C519.377 225.123 519.552 225.123 519.493 225.123L518.443 224.967Z",
                  fill: "#FDD901"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M520.25 225.922H520.056H519.822C519.745 225.912 519.666 225.912 519.589 225.922C519.519 225.94 519.445 225.94 519.375 225.922C519.375 225.922 519.34 225.893 519.296 225.864H519.181H518.967C518.85 225.864 518.733 225.688 518.675 225.591V225.552C518.668 225.539 518.662 225.526 518.656 225.513C518.662 225.521 518.668 225.529 518.675 225.538C518.717 225.594 518.768 225.669 518.824 225.725C518.867 225.758 518.915 225.785 518.967 225.805H519.181H519.278H519.745C519.763 225.797 519.783 225.792 519.803 225.792C519.823 225.792 519.843 225.797 519.861 225.805C519.899 225.816 519.94 225.816 519.978 225.805C520.022 225.789 520.07 225.789 520.114 225.805L520.182 225.864L520.25 225.922Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M517.994 224.831C518.046 224.758 518.113 224.696 518.19 224.649C518.267 224.602 518.352 224.571 518.441 224.559C518.627 224.52 518.819 224.52 519.005 224.559C519.196 224.67 519.398 224.761 519.608 224.831H519.783C519.9 224.831 519.919 224.831 519.783 224.831H519.666C519.476 224.839 519.287 224.792 519.122 224.695C519.122 224.695 518.539 224.442 518.227 224.792C518.152 224.818 518.074 224.831 517.994 224.831Z",
                  fill: "#FF0000"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.802 224.968H519.627C519.497 224.945 519.372 224.899 519.258 224.831C519.184 224.785 519.106 224.746 519.025 224.715H518.344C518.271 224.727 518.203 224.761 518.15 224.812L518.014 224.948H518.111H518.655H518.753C518.804 224.938 518.857 224.938 518.908 224.948H519.025C519.082 224.965 519.143 224.965 519.2 224.948H519.394H519.122H518.927H518.791H518.675H518.091H518.208H518.403H518.714H518.869H518.986H519.938C519.938 224.948 519.938 224.831 519.822 224.831L519.802 224.968ZM518.364 224.968H518.325H518.364Z",
                  fill: "#000001"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.382 224.83C518.324 224.757 518.242 224.709 518.15 224.695C518.233 224.705 518.309 224.746 518.362 224.811L518.382 224.83Z",
                  fill: "#000001"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.52 224.753C518.486 224.686 518.432 224.632 518.365 224.598C518.402 224.614 518.435 224.638 518.462 224.668C518.489 224.698 518.508 224.733 518.52 224.772V224.753Z",
                  fill: "#000001"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.676 224.713C518.676 224.559 518.676 224.54 518.676 224.54C518.676 224.54 518.695 224.559 518.676 224.713Z",
                  fill: "#000001"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.871 224.713C518.871 224.578 518.871 224.54 518.871 224.54C518.871 224.54 518.929 224.559 518.871 224.713Z",
                  fill: "#000001"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.062 224.752C519.062 224.752 519.062 224.752 519.062 224.617C519.074 224.638 519.081 224.661 519.081 224.685C519.081 224.708 519.074 224.732 519.062 224.752Z",
                  fill: "#000001"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.415 227.692H519.299H519.395C519.404 227.66 519.404 227.627 519.395 227.595L519.415 227.692Z",
                  fill: "#FF0000"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.226 227.516H517.994H518.091C518.091 227.516 518.091 227.516 518.206 227.38L518.226 227.516Z",
                  fill: "#FF0000"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.569 226.524C519.56 226.493 519.56 226.459 519.569 226.427C519.58 226.406 519.585 226.383 519.585 226.359C519.585 226.335 519.58 226.312 519.569 226.291C519.584 226.311 519.591 226.335 519.591 226.359C519.591 226.383 519.584 226.407 519.569 226.427C519.56 226.459 519.56 226.493 519.569 226.524Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.746 226.544C519.746 226.544 519.746 226.544 519.746 226.447C519.746 226.349 519.746 226.447 519.746 226.447C519.755 226.408 519.755 226.368 519.746 226.33V226.213V226.038C519.763 226.068 519.772 226.101 519.772 226.135C519.772 226.17 519.763 226.203 519.746 226.233V226.349C519.755 226.394 519.755 226.441 519.746 226.486V226.544Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.939 227.049V226.914C519.956 226.958 519.956 227.006 519.939 227.049Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.141 226.912C519.155 226.869 519.155 226.821 519.141 226.777C519.149 226.816 519.149 226.855 519.141 226.893L519.256 226.758C519.228 226.816 519.188 226.869 519.141 226.912Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.044 226.914C519.044 226.914 519.044 226.914 518.947 226.914C518.947 226.914 518.947 226.914 518.947 227.011L519.044 226.914Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.278 225.942C519.262 225.985 519.262 226.033 519.278 226.077C519.278 226.077 519.259 225.98 519.278 225.942Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.492 226.135C519.511 226.072 519.511 226.005 519.492 225.942C519.496 225.993 519.496 226.045 519.492 226.096V226.135Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.664 226.094C519.664 225.94 519.529 225.921 519.529 225.921C519.529 225.921 519.645 226.037 519.664 226.075C519.675 226.051 519.681 226.025 519.681 225.998C519.681 225.971 519.675 225.945 519.664 225.921C519.682 225.946 519.691 225.977 519.691 226.008C519.691 226.039 519.682 226.069 519.664 226.094Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.939 226.445C519.925 226.422 519.918 226.395 519.918 226.368C519.918 226.341 519.925 226.314 519.939 226.291C519.922 226.334 519.922 226.382 519.939 226.426C519.928 226.408 519.923 226.388 519.923 226.368C519.923 226.348 519.928 226.328 519.939 226.31C519.929 226.355 519.929 226.401 519.939 226.445Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M520.269 226.135C520.259 226.117 520.254 226.097 520.254 226.077C520.254 226.057 520.259 226.037 520.269 226.019C520.269 226.019 520.269 226.019 520.269 226.116V226.135Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.939 226.913C519.952 226.882 519.952 226.848 519.939 226.817V226.913Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.598 226.66C518.629 226.668 518.662 226.668 518.694 226.66C518.704 226.622 518.704 226.582 518.694 226.544C518.712 226.57 518.721 226.6 518.721 226.631C518.721 226.662 518.712 226.692 518.694 226.718L518.598 226.66Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.579 226.602C518.57 226.564 518.57 226.524 518.579 226.485C518.568 226.434 518.568 226.381 518.579 226.33C518.579 226.33 518.579 226.427 518.579 226.485C518.57 226.524 518.57 226.564 518.579 226.602C518.57 226.57 518.57 226.537 518.579 226.505C518.587 226.486 518.592 226.467 518.592 226.446C518.592 226.426 518.587 226.406 518.579 226.388C518.594 226.425 518.594 226.467 518.579 226.505C518.568 226.536 518.568 226.57 518.579 226.602Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.121 226.563C519.121 226.563 519.121 226.466 519.121 226.427C519.131 226.409 519.137 226.389 519.137 226.369C519.137 226.348 519.131 226.328 519.121 226.31C519.121 226.31 519.121 226.31 519.121 226.213C519.121 226.116 519.121 226.213 519.121 226.096C519.112 226.135 519.112 226.175 519.121 226.213C519.123 226.245 519.123 226.278 519.121 226.31C519.121 226.135 519.121 226.116 519.121 226.116C519.121 226.116 519.121 226.116 519.121 226.291C519.123 226.258 519.123 226.226 519.121 226.194C519.105 226.15 519.105 226.101 519.121 226.057C519.112 226.079 519.107 226.102 519.107 226.125C519.107 226.149 519.112 226.172 519.121 226.194C519.121 226.194 519.121 226.193 519.121 226.291C519.135 226.311 519.143 226.334 519.143 226.359C519.143 226.383 519.135 226.407 519.121 226.427C519.11 226.465 519.11 226.506 519.121 226.544C519.121 226.544 519.121 226.447 519.238 226.447V226.349V226.447C519.238 226.447 519.238 226.447 519.121 226.544V226.563Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.377 226.212C519.396 226.149 519.396 226.082 519.377 226.019C519.386 226.083 519.386 226.148 519.377 226.212C519.377 226.077 519.377 226.058 519.377 226.058C519.377 226.058 519.377 226.193 519.377 226.231V226.212Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.947 226.076C518.956 226.038 518.956 225.999 518.947 225.961C518.962 225.998 518.962 226.039 518.947 226.076Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.791 226.503C518.805 226.476 518.812 226.446 518.812 226.416C518.812 226.386 518.805 226.356 518.791 226.33C518.791 226.33 518.791 226.33 518.791 226.33V226.503Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.714 226.641C518.712 226.686 518.712 226.731 518.714 226.776C518.702 226.731 518.702 226.685 518.714 226.641Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.463 226.912C518.463 226.912 518.463 226.912 518.463 226.758C518.463 226.603 518.54 226.912 518.463 226.912Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.482 226.642C518.49 226.603 518.49 226.563 518.482 226.525C518.468 226.501 518.461 226.474 518.461 226.447C518.461 226.42 518.468 226.393 518.482 226.369C518.482 226.369 518.482 226.369 518.482 226.525C518.494 226.563 518.494 226.604 518.482 226.642Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.383 226.913C518.372 226.856 518.372 226.796 518.383 226.738C518.367 226.796 518.367 226.856 518.383 226.913V226.738V226.972V226.913Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.385 226.581C518.377 226.53 518.377 226.478 518.385 226.427C518.374 226.478 518.374 226.53 518.385 226.581Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.501 225.843V225.94C518.501 225.94 518.482 225.862 518.501 225.843Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.248 225.824C518.248 225.824 518.248 225.824 518.248 225.94C518.238 225.922 518.232 225.902 518.232 225.882C518.232 225.862 518.238 225.842 518.248 225.824Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.209 225.123C518.209 225.123 518.227 225.159 518.209 225.123V225.123Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M517.994 225.861C517.994 225.861 517.994 225.861 517.994 225.765C518.006 225.796 518.006 225.83 517.994 225.861Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M517.995 226.272C517.977 226.28 517.957 226.285 517.937 226.285C517.917 226.285 517.897 226.28 517.879 226.272H517.995Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M517.801 226.174H517.897C517.89 226.199 517.877 226.222 517.861 226.242C517.844 226.262 517.824 226.278 517.801 226.29V226.174Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M517.994 226.679C517.986 226.641 517.986 226.601 517.994 226.563V226.698V226.679Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.17 225.803V225.668C518.17 225.668 518.209 225.784 518.17 225.803Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.111 225.686C518.111 225.686 518.147 225.669 518.111 225.686V225.686Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M517.994 226.465C518.004 226.427 518.004 226.387 517.994 226.349C517.994 226.349 517.994 226.349 517.994 226.465Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.307 227.341V227.225C518.307 227.225 518.326 227.322 518.307 227.341Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.267 226.426C518.249 226.376 518.249 226.322 518.267 226.272C518.26 226.303 518.26 226.336 518.267 226.368V226.426Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.209 226.678C518.216 226.646 518.216 226.614 518.209 226.582C518.218 226.613 518.218 226.647 518.209 226.678C518.209 226.678 518.209 226.678 518.209 226.543C518.209 226.408 518.209 226.64 518.209 226.678Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.189 226.408C518.189 226.408 518.189 226.408 518.189 226.292V226.175C518.181 226.156 518.176 226.137 518.176 226.116C518.176 226.096 518.181 226.076 518.189 226.058C518.198 226.043 518.203 226.026 518.203 226.009C518.203 225.992 518.198 225.975 518.189 225.961V226.058C518.18 226.08 518.176 226.103 518.176 226.126C518.176 226.149 518.18 226.173 518.189 226.194C518.178 226.265 518.178 226.337 518.189 226.408Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.734 226.914C518.752 226.912 518.77 226.906 518.785 226.897C518.801 226.888 518.815 226.876 518.825 226.861C518.836 226.847 518.844 226.83 518.849 226.812C518.853 226.795 518.854 226.777 518.851 226.759C518.831 226.709 518.831 226.653 518.851 226.603C518.836 226.64 518.836 226.682 518.851 226.72C518.851 226.72 518.832 226.798 518.734 226.914Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.394 227.008C519.405 226.971 519.405 226.931 519.394 226.893C519.379 226.856 519.379 226.814 519.394 226.777C519.394 226.777 519.394 226.777 519.394 226.777C519.425 226.777 519.454 226.789 519.476 226.811C519.498 226.833 519.51 226.862 519.51 226.893C519.51 226.923 519.498 226.953 519.476 226.975C519.454 226.996 519.425 227.008 519.394 227.008Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.346 227.166C518.333 227.129 518.333 227.088 518.346 227.05C518.346 227.05 518.346 227.147 518.346 227.205V227.166Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.131 226.642C518.121 226.624 518.115 226.604 518.115 226.584C518.115 226.563 518.121 226.543 518.131 226.525V226.389C518.131 226.389 518.131 226.506 518.131 226.545V226.642Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.578 226.912C518.568 226.891 518.562 226.868 518.562 226.844C518.562 226.821 518.568 226.798 518.578 226.777C518.568 226.815 518.568 226.855 518.578 226.893C518.578 226.893 518.616 226.796 518.578 226.912Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.637 226.445C518.637 226.445 518.637 226.445 518.637 226.33C518.647 226.347 518.652 226.367 518.652 226.387C518.652 226.408 518.647 226.428 518.637 226.445Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.617 225.843C518.626 225.861 518.63 225.881 518.63 225.901C518.63 225.921 518.626 225.941 518.617 225.959C518.625 225.921 518.625 225.881 518.617 225.843Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.111 224.968C518.162 224.903 518.227 224.852 518.301 224.818C518.376 224.784 518.457 224.769 518.539 224.773C518.774 224.742 519.012 224.805 519.2 224.949L519.434 225.143C519.574 225.248 519.732 225.327 519.9 225.377C520.134 225.377 520.153 225.377 520.192 225.377C520.231 225.377 520.309 225.377 520.192 225.377C520.065 225.426 519.927 225.439 519.794 225.415C519.66 225.391 519.535 225.331 519.434 225.241C519.236 225.074 519.003 224.955 518.753 224.89C518.5 224.89 518.481 224.89 518.461 224.89C518.35 224.938 518.232 224.964 518.111 224.968Z",
                  fill: "#FF0000"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M520.231 225.259H519.803L519.59 225.104H519.453H519.278H518.656H518.909H518.676H519.337L519.512 225.24H519.628H519.726H520.192H519.706H519.57H519.453L519.259 225.104H519.084H518.967H519.181H519.278L519.473 225.24H519.59C519.66 225.256 519.733 225.256 519.803 225.24H519.959H520.134L520.231 225.259Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.461 224.965C518.47 224.944 518.475 224.921 518.475 224.898C518.475 224.875 518.47 224.852 518.461 224.83C518.41 224.818 518.357 224.818 518.307 224.83C518.331 224.82 518.357 224.814 518.384 224.814C518.411 224.814 518.437 224.82 518.461 224.83C518.471 224.851 518.477 224.874 518.477 224.898C518.477 224.921 518.471 224.944 518.461 224.965Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.598 224.966C518.607 224.944 518.612 224.921 518.612 224.898C518.612 224.875 518.607 224.852 518.598 224.831C518.554 224.819 518.507 224.819 518.463 224.831C518.484 224.82 518.507 224.815 518.531 224.815C518.554 224.815 518.577 224.82 518.598 224.831C518.598 224.831 518.598 224.831 518.598 224.966Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M518.947 224.966C518.959 224.935 518.959 224.901 518.947 224.87C518.959 224.901 518.959 224.935 518.947 224.966Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M519.121 224.967C519.256 224.967 519.237 224.851 519.237 224.851C519.233 224.88 519.219 224.908 519.199 224.928C519.178 224.949 519.15 224.963 519.121 224.967Z",
                  fill: "black"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M482.663 204.78L460.519 234.959L438.337 204.78C435.327 200.683 433.512 195.832 433.093 190.765C432.675 185.699 433.669 180.615 435.965 176.079C438.261 171.544 441.769 167.733 446.101 165.071C450.432 162.409 455.416 161 460.5 161C465.584 161 470.568 162.409 474.899 165.071C479.231 167.733 482.739 171.544 485.035 176.079C487.331 180.615 488.325 185.699 487.907 190.765C487.488 195.832 485.673 200.683 482.663 204.78Z",
                  fill: "#FAB500"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M482.663 204.78L460.519 234.959L438.337 204.78C435.327 200.683 433.512 195.832 433.093 190.765C432.675 185.699 433.669 180.615 435.965 176.079C438.261 171.544 441.769 167.733 446.101 165.071C450.432 162.409 455.416 161 460.5 161C465.584 161 470.568 162.409 474.899 165.071C479.231 167.733 482.739 171.544 485.035 176.079C487.331 180.615 488.325 185.699 487.907 190.765C487.488 195.832 485.673 200.683 482.663 204.78V204.78Z",
                  stroke: "#2F6A69",
                  "stroke-width": "0.83",
                  "stroke-miterlimit": "10"
                }
              }),
              _vm._v(" "),
              _c(
                "g",
                {
                  staticStyle: { "mix-blend-mode": "multiply" },
                  attrs: { opacity: "0.2" }
                },
                [
                  _c("path", {
                    attrs: {
                      d:
                        "M470.493 244.235C470.493 245.691 466.03 246.855 460.518 246.855C455.006 246.855 450.523 245.691 450.523 244.235C450.523 242.78 455.006 241.654 460.518 241.654C466.03 241.654 470.493 242.78 470.493 244.235Z",
                      fill: "#00792D"
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M483.439 188.953C483.44 189.854 483.382 190.754 483.264 191.647C483.07 193.391 482.659 195.104 482.04 196.746C481.548 198.094 480.93 199.392 480.193 200.623L479.358 201.883C479.183 202.116 479.027 202.349 478.852 202.562C477.572 204.233 476.068 205.72 474.382 206.982C470.487 209.876 465.76 211.439 460.903 211.439C456.047 211.439 451.32 209.876 447.425 206.982C445.749 205.714 444.252 204.228 442.974 202.562C442.799 202.349 442.624 202.116 442.469 201.883L441.633 200.623C440.888 199.396 440.27 198.097 439.786 196.746C439.17 195.102 438.752 193.39 438.543 191.647C438.441 190.753 438.389 189.853 438.387 188.953C438.366 184.858 439.468 180.835 441.574 177.321C441.866 176.836 442.177 176.371 442.507 175.905C445.594 171.544 450.133 168.418 455.316 167.085C458.629 166.238 462.093 166.16 465.442 166.856C468.791 167.551 471.935 169.002 474.635 171.098C476.399 172.459 477.945 174.08 479.221 175.905L479.435 176.196C479.688 176.565 479.941 176.952 480.154 177.321C481.836 180.089 482.885 183.194 483.225 186.413C483.381 187.305 483.439 188.119 483.439 188.953Z",
                  fill: "#F52717"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M472.846 185.424H464.469V177.068H457.336V185.424H448.979V192.539H457.336V200.875H464.469V192.539H472.846V185.424Z",
                  fill: "white"
                }
              })
            ]
          )
        ])
      ])
    ]
  )
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("span", { staticClass: "h2 mt-5 courses-title" }, [
      _c("span", { staticClass: "courses-span" }, [
        _vm._v("Explora  y aprende del mundo")
      ]),
      _vm._v(" con Lingua Planet")
    ])
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=template&id=6e45ef0f&scoped=true&":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Show.vue?vue&type=template&id=6e45ef0f&scoped=true& ***!
  \***********************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass:
        "col-12 text-center d-flex flex-column justify-content-center"
    },
    [
      _c("h1", { staticClass: "m-0" }, [_vm._v("Un tour por el mundo")]),
      _vm._v(" "),
      _c(
        "div",
        { staticClass: "d-flex justify-content-center my-4" },
        _vm._l(_vm.idiomas, function(idio) {
          return _c(
            "a",
            {
              staticClass: "mx-1",
              attrs: { href: "/cursos/" + idio.nombreURL }
            },
            [
              _c("img", {
                key: "lang" + idio.id,
                class: [
                  "mini-flag-img iz-100",
                  idio.diminutivo === _vm.idioma.diminutivo ? "active" : null
                ],
                attrs: { src: "/images/" + idio.diminutivo + ".svg" }
              })
            ]
          )
        }),
        0
      ),
      _vm._v(" "),
      _c("div", { staticClass: "video-container" }, [
        _c("iframe", {
          staticClass: "frame-video",
          attrs: {
            src: _vm.idioma.video + "?autoplay=1",
            webkitallowfullscreen: "",
            mozallowfullscreen: "",
            allowfullscreen: "",
            autoplay: "1"
          }
        })
      ]),
      _vm._v(" "),
      _c("h1", { staticClass: "course-show-header mb-4" }, [
        _vm._v(
          "Tus hijos aprenden " +
            _vm._s(_vm.idioma.idioma) +
            " con lingua planet"
        )
      ]),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "carousel slide mobile-display pt-4",
          attrs: {
            id: "carouselMIndicators",
            "data-ride": "false",
            "data-interval": "false"
          }
        },
        [
          _c(
            "ol",
            { staticClass: "carousel-indicators" },
            _vm._l(_vm.idioma.membresias, function(membresia, index) {
              return _c("li", {
                class: { active: index === 0 },
                attrs: {
                  "data-target": "#carouselMIndicators",
                  "data-slide-to": "mCard" + index
                }
              })
            }),
            0
          ),
          _vm._v(" "),
          _c(
            "div",
            { staticClass: "carousel-inner" },
            _vm._l(_vm.idioma.membresias, function(membresia, index) {
              return _c(
                "div",
                {
                  key: "mCard" + index,
                  class: ["carousel-item", index === 0 ? "active" : null]
                },
                [
                  _c(
                    "div",
                    { staticClass: "card card-course-carrousel mx-3" },
                    [
                      _c(
                        "div",
                        { staticClass: "card-body d-flex flex-column" },
                        [
                          _c("img", {
                            staticClass: "flag-img mx-auto",
                            attrs: {
                              src:
                                "/storage/images/" +
                                _vm.idioma.diminutivo +
                                "-square.svg",
                              alt: "lingua planet france"
                            }
                          }),
                          _vm._v(" "),
                          _c("h1", { staticClass: "mb-0" }, [
                            _vm._v(_vm._s(membresia.nombre))
                          ]),
                          _vm._v(" "),
                          _c("h2", [_vm._v("Pago " + _vm._s(membresia.tipo))]),
                          _vm._v(" "),
                          _vm._m(0, true),
                          _vm._v(" "),
                          _c(
                            "a",
                            {
                              staticClass: "btn btn-buy btn-success",
                              attrs: {
                                href: "/membresia/" + membresia.nombreURL
                              }
                            },
                            [
                              _c("h1", { staticClass: "mb-0" }, [
                                _vm._v("Comprar")
                              ])
                            ]
                          )
                        ]
                      )
                    ]
                  )
                ]
              )
            }),
            0
          ),
          _vm._v(" "),
          _vm._m(1),
          _vm._v(" "),
          _vm._m(2)
        ]
      ),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "carousel slide web-display pt-4",
          attrs: {
            id: "carouselWIndicators",
            "data-ride": "false",
            "data-interval": "false"
          }
        },
        [
          _c(
            "ol",
            { staticClass: "web-display carousel-indicators" },
            _vm._l(
              _vm.keysArray.filter(function(e) {
                return e % 3 === 0
              }),
              function(key, index) {
                return _c("li", {
                  class: { active: index === 0 },
                  attrs: {
                    "data-target": "#carouselWIndicators",
                    "data-slide-to": "wCard" + index
                  }
                })
              }
            ),
            0
          ),
          _vm._v(" "),
          _c(
            "div",
            { staticClass: "carousel-inner" },
            _vm._l(
              _vm.keysArray.filter(function(e) {
                return e % 3 === 0
              }),
              function(key, index) {
                return _c(
                  "div",
                  {
                    key: "wCard" + index,
                    class: ["carousel-item", index === 0 ? "active" : null]
                  },
                  [
                    _c(
                      "div",
                      { staticClass: "row justify-content-center" },
                      _vm._l(_vm.offsetCarousel(key), function(
                        membresia,
                        index2
                      ) {
                        return _c(
                          "div",
                          {
                            staticClass: "card card-course-carrousel mx-3",
                            staticStyle: { width: "15rem" }
                          },
                          [
                            _c(
                              "div",
                              { staticClass: "card-body d-flex flex-column" },
                              [
                                _c("img", {
                                  staticClass: "flag-img mx-auto",
                                  attrs: {
                                    src:
                                      "/images/" +
                                      _vm.idioma.diminutivo +
                                      "-square.svg",
                                    alt: "lingua planet " + _vm.idioma.idioma
                                  }
                                }),
                                _vm._v(" "),
                                _c("span", { staticClass: "h3 bold" }, [
                                  _vm._v(_vm._s(membresia.nombre))
                                ]),
                                _vm._v(" "),
                                _c("h3", [
                                  _vm._v("Pago " + _vm._s(membresia.tipo))
                                ]),
                                _vm._v(" "),
                                _vm._m(3, true),
                                _vm._v(" "),
                                _c(
                                  "a",
                                  {
                                    staticClass:
                                      "btn btn-buy btn-success mx-auto",
                                    attrs: {
                                      href: "/membresia/" + membresia.nombreURL
                                    }
                                  },
                                  [
                                    _c(
                                      "span",
                                      { staticClass: "h4 bold mb-0" },
                                      [_vm._v("Comprar")]
                                    )
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      }),
                      0
                    )
                  ]
                )
              }
            ),
            0
          ),
          _vm._v(" "),
          _vm._m(4),
          _vm._v(" "),
          _vm._m(5)
        ]
      )
    ]
  )
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "mt-5 mb-4" }, [
      _c("h3", { staticClass: "bold" }, [_vm._v("Tendrás acceso a:")]),
      _vm._v(" "),
      _c("h3", [_vm._v("Dashboard de seguimiento")]),
      _vm._v(" "),
      _c("h3", [_vm._v("Clases offline")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      {
        staticClass: "carousel-control-prev",
        attrs: {
          href: "#carouselMIndicators",
          role: "button",
          "data-slide": "prev"
        }
      },
      [
        _c("span", {
          staticClass: "carousel-control-prev-icon carousel-control-icon",
          attrs: { "aria-hidden": "true" }
        }),
        _vm._v(" "),
        _c("span", { staticClass: "sr-only" }, [_vm._v("Previous")])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      {
        staticClass: "carousel-control-next",
        attrs: {
          href: "#carouselMIndicators",
          role: "button",
          "data-slide": "next"
        }
      },
      [
        _c("span", {
          staticClass: "carousel-control-next-icon carousel-control-icon",
          attrs: { "aria-hidden": "true" }
        }),
        _vm._v(" "),
        _c("span", { staticClass: "sr-only" }, [_vm._v("Next")])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "mt-4 mb-3 lh" }, [
      _c("span", { staticClass: "h5" }, [_vm._v("Tendrás acceso a:")]),
      _vm._v(" "),
      _c("h4", [_vm._v("Dashboard de seguimiento")]),
      _vm._v(" "),
      _c("h4", [_vm._v("Clases offline")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      {
        staticClass: "carousel-control-prev",
        attrs: {
          href: "#carouselWIndicators",
          role: "button",
          "data-slide": "prev"
        }
      },
      [
        _c("span", {
          staticClass: "carousel-control-prev-icon carousel-control-icon",
          attrs: { "aria-hidden": "true" }
        }),
        _vm._v(" "),
        _c("span", { staticClass: "sr-only" }, [_vm._v("Previous")])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      {
        staticClass: "carousel-control-next",
        attrs: {
          href: "#carouselWIndicators",
          role: "button",
          "data-slide": "next"
        }
      },
      [
        _c("span", {
          staticClass: "carousel-control-next-icon carousel-control-icon",
          attrs: { "aria-hidden": "true" }
        }),
        _vm._v(" "),
        _c("span", { staticClass: "sr-only" }, [_vm._v("Next")])
      ]
    )
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=template&id=3a5f66d2&scoped=true&":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Membresia/show.vue?vue&type=template&id=3a5f66d2&scoped=true& ***!
  \**************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "col" }, [
    _vm._m(0),
    _vm._v(" "),
    _vm.screenWidth >= 768
      ? _c("div", { staticClass: "web-display" }, [
          _c("div", { staticClass: "row mt-4" }, [
            _c("div", { staticClass: "col-3" }, [
              _c("div", { staticClass: "card h-100 gray-back" }, [
                _c(
                  "div",
                  { staticClass: "card-body py-3 d-flex flex-column" },
                  [
                    _c("div", { staticClass: "col px-0" }, [
                      _c(
                        "span",
                        {
                          staticClass:
                            "d-flex mb-2 align-items-center justify-content-center"
                        },
                        [
                          _c("img", {
                            staticClass: "mx-1 iz-10 mini-flag-img active",
                            attrs: {
                              src:
                                "/images/" +
                                _vm.membresia.idioma.diminutivo +
                                ".svg",
                              alt: "membresia idioma"
                            }
                          }),
                          _vm._v(" "),
                          _c("h3", { staticClass: "bold mb-0 ml-2" }, [
                            _vm._v(_vm._s(_vm.membresia.nombre))
                          ])
                        ]
                      ),
                      _vm._v(" "),
                      _c("h4", { staticClass: "px-3 select-subtitle" }, [
                        _vm._v("Selecciona tu membresía y comienza aprender.")
                      ])
                    ]),
                    _vm._v(" "),
                    _vm._m(1)
                  ]
                )
              ])
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "col-9" }, [
              _c(
                "div",
                {
                  staticClass: "carousel slide web-display pt-4",
                  attrs: {
                    id: "carouselWIndicators",
                    "data-ride": "false",
                    "data-interval": "false"
                  }
                },
                [
                  _c("div", { staticClass: "carousel-indicators" }, [
                    _vm._m(2),
                    _vm._v(" "),
                    _c(
                      "ol",
                      { staticClass: "web-display carousel-indicators" },
                      _vm._l(
                        _vm.keysArray.filter(function(e) {
                          return e % _vm.limit === 0
                        }),
                        function(key, index) {
                          return _c("li", {
                            class: { active: index === 0 },
                            attrs: {
                              "data-target": "#carouselWIndicators",
                              "data-slide-to": "wCard" + index
                            }
                          })
                        }
                      ),
                      0
                    ),
                    _vm._v(" "),
                    _vm._m(3)
                  ]),
                  _vm._v(" "),
                  _c(
                    "div",
                    { staticClass: "carousel-inner" },
                    _vm._l(
                      _vm.keysArray.filter(function(e) {
                        return e % _vm.limit === 0
                      }),
                      function(key, index) {
                        return _c(
                          "div",
                          {
                            key: "wCard" + index,
                            class: [
                              "carousel-item",
                              index === 0 ? "active" : null
                            ]
                          },
                          [
                            _c(
                              "div",
                              { staticClass: "row justify-content-center" },
                              _vm._l(_vm.offsetCarousel(key), function(plan) {
                                return _c(
                                  "div",
                                  {
                                    staticClass:
                                      "card card-membership-web mx-3",
                                    staticStyle: { width: "15rem" }
                                  },
                                  [
                                    _c(
                                      "div",
                                      {
                                        staticClass:
                                          "card-header border-0 text-center py-3"
                                      },
                                      [_vm._v(_vm._s(plan.nombre))]
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "div",
                                      {
                                        staticClass:
                                          "card-body px-1 d-flex flex-column text-center"
                                      },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "price-web" },
                                          [
                                            _vm._v(
                                              "\n                                            " +
                                                _vm._s(
                                                  plan.precio.toLocaleString(
                                                    "de-DE",
                                                    {
                                                      style: "currency",
                                                      currency: "USD"
                                                    }
                                                  )
                                                ) +
                                                "\n                                        "
                                            )
                                          ]
                                        ),
                                        _vm._v(" "),
                                        _c("span", { staticClass: "h4" }, [
                                          _vm._v("Pago " + _vm._s(plan.tipo))
                                        ]),
                                        _vm._v(" "),
                                        _vm._m(4, true),
                                        _vm._v(" "),
                                        _c(
                                          "a",
                                          {
                                            staticClass:
                                              "btn w-50 py-2 btn-primary-red mx-auto",
                                            attrs: {
                                              href:
                                                "/comprar/plan/" +
                                                plan.nombreURL
                                            }
                                          },
                                          [
                                            _c(
                                              "span",
                                              { staticClass: "h5 bold mb-0" },
                                              [_vm._v("Comprar")]
                                            )
                                          ]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              }),
                              0
                            )
                          ]
                        )
                      }
                    ),
                    0
                  )
                ]
              )
            ])
          ]),
          _vm._v(" "),
          _vm._m(5)
        ])
      : _vm._e(),
    _vm._v(" "),
    _c("div", { staticClass: "mobile-display" }, [
      _c("div", { staticClass: "card gray-back" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("div", { staticClass: "col" }, [
            _c(
              "span",
              {
                staticClass: "d-flex align-items-center justify-content-center"
              },
              [
                _c("img", {
                  staticClass: "mx-1 mini-flag-img active",
                  attrs: {
                    src:
                      "/storage/images/" +
                      _vm.membresia.idioma.diminutivo +
                      ".svg",
                    alt: "membresia idioma"
                  }
                }),
                _vm._v(" "),
                _c("h1", { staticClass: "mb-0 ml-3" }, [
                  _vm._v(_vm._s(_vm.membresia.nombre))
                ])
              ]
            ),
            _vm._v(" "),
            _c("h3", { staticClass: "text-center" }, [
              _vm._v("Selecciona tu membresía y comienza aprender.")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("nav", [
          _c(
            "div",
            {
              staticClass: "nav nav-tabs d-flex text-center",
              attrs: { id: "nav-tab", role: "tablist" }
            },
            _vm._l(_vm.membresia.planes, function(plan, key) {
              return _c(
                "a",
                {
                  class: ["nav-link flex-fill", key === 0 ? "active" : null],
                  attrs: {
                    id: "nav-" + plan.id + "-tab",
                    "data-toggle": "tab",
                    href: "#nav-" + plan.id,
                    role: "tab",
                    "aria-controls": "#nav-" + plan.id,
                    "aria-selected": key === 0 ? true : false
                  }
                },
                [_vm._v(_vm._s(plan.nombre))]
              )
            }),
            0
          )
        ]),
        _vm._v(" "),
        _c(
          "div",
          {
            staticClass: "tab-content bg-white",
            attrs: { id: "nav-tabContent" }
          },
          _vm._l(_vm.membresia.planes, function(plan, key) {
            return _c(
              "div",
              {
                class: ["tab-pane fade", key === 0 ? "show active" : null],
                attrs: {
                  id: "nav-" + plan.id,
                  role: "tabpanel",
                  "aria-labelledby": "nav-" + plan.id + "-tab"
                }
              },
              [
                _c(
                  "div",
                  { staticClass: "card-membership-mobile text-center" },
                  [
                    _c("div", { staticClass: "d-flex flex-column" }, [
                      _c("span", { staticClass: "price-mobile" }, [
                        _vm._v(
                          "\n                                " +
                            _vm._s(
                              plan.precio.toLocaleString("de-DE", {
                                style: "currency",
                                currency: "USD"
                              })
                            ) +
                            "\n                            "
                        )
                      ]),
                      _vm._v(" "),
                      _c("span", { staticClass: "h4" }, [
                        _vm._v("Pago " + _vm._s(plan.tipo))
                      ]),
                      _vm._v(" "),
                      _vm._m(6, true)
                    ]),
                    _vm._v(" "),
                    _c(
                      "a",
                      {
                        staticClass: "btn btn-primary-red px-5 mt-3 mb-2",
                        attrs: { href: "" }
                      },
                      [_vm._v("Comprar")]
                    )
                  ]
                ),
                _vm._v(" "),
                _vm._m(7, true)
              ]
            )
          }),
          0
        )
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row d-flex justify-content-center" }, [
      _c("div", { staticClass: "col-lg-6 col-md-6 col-sm-12 col-xs-12" }, [
        _c("h2", { staticClass: "text-center" }, [
          _c("span", { staticClass: "membership-span" }, [
            _vm._v("Enseñamos idiomas")
          ]),
          _vm._v(" a través del juego ¿Qué esperas para que tus hijos inicien?")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col px-0" }, [
      _c("span", { staticClass: "d-flex mb-2 span-payment-methods" }, [
        _vm._v(
          "\n                                Aceptamos múltiples metodos de pago.\n                            "
        )
      ]),
      _vm._v(" "),
      _c("img", {
        staticClass: "mx-1",
        attrs: { src: "/images/stripe-logo.svg", alt: "membresia idioma" }
      }),
      _vm._v(" "),
      _c("img", {
        staticClass: "mx-1",
        attrs: { src: "/images/paypal-logo.svg", alt: "membresia idioma" }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      {
        staticClass: "carousel-control-prev",
        attrs: {
          href: "#carouselWIndicators",
          role: "button",
          "data-slide": "prev"
        }
      },
      [
        _c("span", {
          staticClass: "carousel-control-prev-icon carousel-control-icon",
          attrs: { "aria-hidden": "true" }
        }),
        _vm._v(" "),
        _c("span", { staticClass: "sr-only" }, [_vm._v("Previous")])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      {
        staticClass: "carousel-control-next",
        attrs: {
          href: "#carouselWIndicators",
          role: "button",
          "data-slide": "next"
        }
      },
      [
        _c("span", {
          staticClass: "carousel-control-next-icon carousel-control-icon",
          attrs: { "aria-hidden": "true" }
        }),
        _vm._v(" "),
        _c("span", { staticClass: "sr-only" }, [_vm._v("Next")])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "text-left w-80 mx-auto mt-4" }, [
      _c("li", { staticClass: "li-benefits text-secondary" }, [
        _c("span", { staticClass: "text-primary bold" }, [_vm._v("1 perfil")]),
        _vm._v(" de estudiante en la plataforma.")
      ]),
      _vm._v(" "),
      _c("li", { staticClass: "li-benefits text-secondary" }, [
        _vm._v("Certificado de finalización.")
      ]),
      _vm._v(" "),
      _c("li", { staticClass: "li-benefits text-secondary" }, [
        _vm._v("Clases nuevas semanales.")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col" }, [
        _c("ul", { staticClass: "membership-details text-left mx-auto mt-4" }, [
          _c("li", { staticClass: "d-flex align-items-center p-2" }, [
            _c("div", { staticClass: "w-24" }, [
              _c("h4", { staticClass: "mb-0" }, [
                _vm._v("Estudiantes con acceso a la plataforma")
              ])
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "w-38 text-center p-3" }, [
              _c("span", { staticClass: "h4 bold" }, [_vm._v("1")])
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "w-38 text-center p-3" }, [
              _c("span", { staticClass: "h4 bold" }, [_vm._v("1")])
            ])
          ]),
          _vm._v(" "),
          _c("li", { staticClass: "d-flex align-items-center p-2" }, [
            _c("div", { staticClass: "w-24" }, [
              _c("h4", { staticClass: "mb-0" }, [
                _vm._v("Panel de monitoreo para padres")
              ])
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "w-38 text-center" }, [
              _c("img", {
                staticClass: "mx-1",
                attrs: { src: "/images/check.svg" }
              })
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "w-38 text-center" }, [
              _c("img", {
                staticClass: "mx-1",
                attrs: { src: "/images/check.svg" }
              })
            ])
          ]),
          _vm._v(" "),
          _c("li", { staticClass: "d-flex align-items-center p-2" }, [
            _c("div", { staticClass: "w-24" }, [
              _c("h4", { staticClass: "mb-0" }, [
                _vm._v("Clases nuevas semanales")
              ])
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "w-38 text-center" }, [
              _c("img", {
                staticClass: "mx-1",
                attrs: { src: "/images/check.svg" }
              })
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "w-38 text-center" }, [
              _c("img", {
                staticClass: "mx-1",
                attrs: { src: "/images/check.svg" }
              })
            ])
          ]),
          _vm._v(" "),
          _c("li", { staticClass: "d-flex align-items-center p-2" }, [
            _c("div", { staticClass: "w-24" }, [
              _c("h4", { staticClass: "mb-0" }, [_vm._v("Juegos educativos")])
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "w-38 text-center" }, [
              _c("img", {
                staticClass: "mx-1",
                attrs: { src: "/images/check.svg" }
              })
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "w-38 text-center" }, [
              _c("img", {
                staticClass: "mx-1",
                attrs: { src: "/images/check.svg" }
              })
            ])
          ]),
          _vm._v(" "),
          _c("li", { staticClass: "d-flex align-items-center p-2" }, [
            _c("div", { staticClass: "w-24" }, [
              _c("h4", { staticClass: "mb-0" }, [
                _vm._v("Certificado de finalización")
              ])
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "w-38 text-center" }, [
              _c("img", {
                staticClass: "mx-1",
                attrs: { src: "/images/check.svg" }
              })
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "w-38 text-center" }, [
              _c("img", {
                staticClass: "mx-1",
                attrs: { src: "/images/check.svg" }
              })
            ])
          ]),
          _vm._v(" "),
          _c("li", { staticClass: "d-flex align-items-center p-2" }, [
            _c("div", { staticClass: "w-24" }, [
              _c("h4", { staticClass: "mb-0" }, [_vm._v("Clases en full HD")])
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "w-38 text-center" }, [
              _c("img", {
                staticClass: "mx-1",
                attrs: { src: "/images/check.svg" }
              })
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "w-38 text-center" }, [
              _c("img", {
                staticClass: "mx-1",
                attrs: { src: "/images/check.svg" }
              })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "text-left w-80 mx-auto" }, [
      _c("li", [
        _c("span", { staticClass: "text-primary bold" }, [_vm._v("1 perfil")]),
        _vm._v(" de estudiante en la plataforma.")
      ]),
      _vm._v(" "),
      _c("li", [_vm._v("Certificado de finalización.")]),
      _vm._v(" "),
      _c("li", [_vm._v("Clases nuevas semanales.")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "membership-details mx-4" }, [
      _c("li", { staticClass: "d-flex align-items-center py-2" }, [
        _c("div", { staticClass: "w-75" }, [
          _c("h3", { staticClass: "mb-0" }, [
            _vm._v("Estudiantes con acceso a la plataforma")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "w-25 text-center p-4" }, [
          _c("span", { staticClass: "h4 bold" }, [_vm._v("1")])
        ])
      ]),
      _vm._v(" "),
      _c("li", { staticClass: "d-flex align-items-center py-2" }, [
        _c("div", { staticClass: "w-75" }, [
          _c("h3", { staticClass: "mb-0" }, [
            _vm._v("Panel de monitoreo para padres")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "w-25 text-center" }, [
          _c("img", {
            staticClass: "mx-1",
            attrs: { src: "/storage/images/check.svg" }
          })
        ])
      ]),
      _vm._v(" "),
      _c("li", { staticClass: "d-flex align-items-center py-2" }, [
        _c("div", { staticClass: "w-75" }, [
          _c("h3", { staticClass: "mb-0" }, [_vm._v("Clases nuevas semanales")])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "w-25 text-center p-4" }, [
          _c("img", {
            staticClass: "mx-1",
            attrs: { src: "/storage/images/check.svg" }
          })
        ])
      ]),
      _vm._v(" "),
      _c("li", { staticClass: "d-flex align-items-center py-2" }, [
        _c("div", { staticClass: "w-75" }, [
          _c("h3", { staticClass: "mb-0" }, [_vm._v("Juegos educativos")])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "w-25 text-center p-4" }, [
          _c("img", {
            staticClass: "mx-1",
            attrs: { src: "/storage/images/check.svg" }
          })
        ])
      ]),
      _vm._v(" "),
      _c("li", { staticClass: "d-flex align-items-center py-2" }, [
        _c("div", { staticClass: "w-75" }, [
          _c("h3", { staticClass: "mb-0" }, [
            _vm._v("Certificado de finalización")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "w-25 text-center p-4" }, [
          _c("img", {
            staticClass: "mx-1",
            attrs: { src: "/storage/images/check.svg" }
          })
        ])
      ]),
      _vm._v(" "),
      _c("li", { staticClass: "d-flex align-items-center py-2" }, [
        _c("div", { staticClass: "w-75" }, [
          _c("h3", { staticClass: "mb-0" }, [_vm._v("Clases en full HD")])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "w-25 text-center p-4" }, [
          _c("img", {
            staticClass: "mx-1",
            attrs: { src: "/storage/images/check.svg" }
          })
        ])
      ])
    ])
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=template&id=6feb5108&scoped=true&":
/*!*************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=template&id=6feb5108&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [
    _vm.paymentmetod === null
      ? _c(
          "div",
          {
            staticClass: "btn-group btn-group-toggle row m-0 w-100 p-0",
            attrs: { "data-toggle": "buttons" }
          },
          [
            _c(
              "label",
              {
                staticClass:
                  "btn d-flex m-2 col-12 py-2 row m-0 justify-content-between align-items-center",
                on: {
                  click: function($event) {
                    $event.preventDefault()
                    return _vm.definir("efectivoCollapse")
                  }
                }
              },
              [_vm._m(0), _vm._v(" "), _vm._m(1)]
            ),
            _vm._v(" "),
            _c(
              "label",
              {
                staticClass:
                  "btn d-flex m-2 col-12 py-2 row m-0 justify-content-between align-items-center",
                on: {
                  click: function($event) {
                    $event.preventDefault()
                    return _vm.definir("transferenciabancariaCollapse")
                  }
                }
              },
              [_vm._m(2), _vm._v(" "), _vm._m(3)]
            )
          ]
        )
      : _c("div", [
          _c("div", { staticClass: "d-flex flex-column align-items-center" }, [
            _vm.paymentmetod === "efectivoCollapse"
              ? _c("img", {
                  staticClass: "iz-lg",
                  attrs: { src: "/images/stripe-logo.svg" }
                })
              : _vm.paymentmetod === "transferenciabancariaCollapse"
              ? _c("img", {
                  staticClass: "iz-lg",
                  attrs: { src: "/images/paypal-logo.svg" }
                })
              : _vm._e(),
            _vm._v(" "),
            _c(
              "div",
              {
                staticClass:
                  "card-rounded m-2 w-100 py-3 d-flex justify-content-between align-items-center"
              },
              [
                _c("span", [_vm._v("Metodo de pago agregado")]),
                _vm._v(" "),
                _c(
                  "button",
                  {
                    staticClass: "btn btn-success btn-registro",
                    on: {
                      click: function($event) {
                        $event.preventDefault()
                        return _vm.cambiar()
                      }
                    }
                  },
                  [_vm._v("Seleccionar otro pago")]
                )
              ]
            )
          ])
        ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", [
      _c("input", {
        staticClass: "position-relative",
        attrs: {
          type: "radio",
          name: "payment_platform",
          value: "efectivo",
          required: ""
        }
      }),
      _vm._v(" "),
      _c("span", { staticClass: "h5" }, [_vm._v("Pagar con Stripe")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", [
      _c("img", {
        staticClass: "iz",
        attrs: { src: "/images/stripe-logo.svg" }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", [
      _c("input", {
        staticClass: "position-relative",
        attrs: {
          type: "radio",
          name: "payment_platform",
          value: "transferencia",
          required: ""
        }
      }),
      _vm._v(" "),
      _c("span", { staticClass: "h5" }, [_vm._v("Paypal")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", [
      _c("img", {
        staticClass: "iz",
        attrs: { src: "/images/paypal-logo.svg" }
      })
    ])
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=template&id=107001ad&scoped=true&":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=template&id=107001ad&scoped=true& ***!
  \**************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "row justify-content-center" }, [
    _c(
      "div",
      {
        staticClass:
          "col-xs-12 col-sm-12 col-md-6 col-lg-6 d-flex justify-content-center"
      },
      [
        _c("div", { staticClass: "d-flex" }, [
          _c("div", { staticClass: "text-center" }, [
            _c("img", {
              staticClass: "mx-1 mb-2 process-dot active",
              attrs: {
                src:
                  "/images/ellipse-" +
                  (_vm.process >= 33.3 ? "filled" : "outlined") +
                  ".svg"
              }
            }),
            _vm._v(" "),
            _c("span", { staticClass: "h6 d-block" }, [
              _vm._v("Seleccione el curso")
            ])
          ]),
          _vm._v(" "),
          _c("div", [
            _c("img", {
              staticClass: "line1",
              attrs: { src: "/images/line.svg" }
            })
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "text-center" }, [
            _c("img", {
              staticClass: "mx-1 mb-2 process-dot active",
              attrs: {
                src:
                  "/images/ellipse-" +
                  (_vm.process >= 66.6 ? "filled" : "outlined") +
                  ".svg"
              }
            }),
            _vm._v(" "),
            _c("span", { staticClass: "h6 d-block" }, [
              _vm._v("Seleccione el tipo de pago")
            ])
          ]),
          _vm._v(" "),
          _c("div", [
            _c("img", {
              staticClass: "line2",
              attrs: { src: "/images/line.svg" }
            })
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "text-center" }, [
            _c("img", {
              staticClass: "mx-1 mb-2 process-dot active",
              attrs: {
                src:
                  "/images/ellipse-" +
                  (_vm.process === 100 ? "filled" : "outlined") +
                  ".svg"
              }
            }),
            _vm._v(" "),
            _c("span", { staticClass: "h6 d-block" }, [
              _vm._v("Confirma tu pago")
            ])
          ])
        ])
      ]
    )
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer.vue?vue&type=template&id=7ca0f343&scoped=true&":
/*!***********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Templades/Footer/footer.vue?vue&type=template&id=7ca0f343&scoped=true& ***!
  \***********************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [_vm._v("\n    footer\n")])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=template&id=17951e7f&scoped=true&":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=template&id=17951e7f&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [_vm._v("\n    footer dos\n")])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
        injectStyles.call(
          this,
          (options.functional ? this.parent : this).$root.$options.shadowRoot
        )
      }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "./node_modules/vue/dist/vue.common.dev.js":
/*!*************************************************!*\
  !*** ./node_modules/vue/dist/vue.common.dev.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */


/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Generate a string containing static keys from compiler modules.
 */
function genStaticKeys (modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (!config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i], vm);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  var haveExpectedTypes = expectedTypes.some(function (t) { return t; });
  if (!valid && haveExpectedTypes) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;

function assertType (value, type, vm) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    try {
      valid = value instanceof type;
    } catch (e) {
      warn('Invalid prop type: "' + String(type) + '" is not a constructor', vm);
      valid = false;
    }
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

var functionTypeCheckRE = /^\s*function (\w+)/;

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(functionTypeCheckRE);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  // check if we need to specify expected value
  if (
    expectedTypes.length === 1 &&
    isExplicable(expectedType) &&
    isExplicable(typeof value) &&
    !isBoolean(expectedType, receivedType)
  ) {
    message += " with value " + (styleValue(value, expectedType));
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + (styleValue(value, receivedType)) + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

var EXPLICABLE_TYPES = ['string', 'number', 'boolean'];
function isExplicable (value) {
  return EXPLICABLE_TYPES.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

var mark;
var measure;

{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

{
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals. ' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    var vnode = res && res[0];
    return res && (
      !vnode ||
      (res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode)) // #9658, #10391
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallbackRender,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) {
    // scoped slot
    props = props || {};
    if (bindObject) {
      if (!isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes =
      scopedSlotFn(props) ||
      (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
  } else {
    nodes =
      this.$slots[name] ||
      (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
  return eventKeyCode === undefined
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  // we know it's MountedComponentVNode but flow doesn't
  vnode,
  // activeInstance in lifecycle state
  parent
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if (isDef(data) && isDef(data.nativeOn) && data.tag !== 'component') {
        warn(
          ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),
          context
        );
      }
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
      warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                "timeout (" + (res.timeout) + "ms)"
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key) ||
    (!newScopedSlots && vm.$scopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (!config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString();
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
      warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        var info = "callback for watcher \"" + (this.expression) + "\"";
        invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      } else if (vm.$options.methods && key in vm.$options.methods) {
        warn(("The computed property \"" + key + "\" is already defined as a method."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      var info = "callback for immediate watcher \"" + (watcher.expression) + "\"";
      pushTarget();
      invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
      popTarget();
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    {
      initProxy(vm);
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if (!(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */





function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var entry = cache[key];
    if (entry) {
      var name = entry.name;
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var entry = cache[key];
  if (entry && (!current || entry.tag !== current.tag)) {
    entry.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  methods: {
    cacheVNode: function cacheVNode() {
      var ref = this;
      var cache = ref.cache;
      var keys = ref.keys;
      var vnodeToCache = ref.vnodeToCache;
      var keyToCache = ref.keyToCache;
      if (vnodeToCache) {
        var tag = vnodeToCache.tag;
        var componentInstance = vnodeToCache.componentInstance;
        var componentOptions = vnodeToCache.componentOptions;
        cache[keyToCache] = {
          name: getComponentName(componentOptions),
          tag: tag,
          componentInstance: componentInstance,
        };
        keys.push(keyToCache);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
        this.vnodeToCache = null;
      }
    }
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.cacheVNode();
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  updated: function updated () {
    this.cacheVNode();
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        // delay setting the cache until update
        this.vnodeToCache = vnode;
        this.keyToCache = key;
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.14';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isPreTag = function (tag) { return tag === 'pre'; };

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key &&
    a.asyncFactory === b.asyncFactory && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur, vnode.data.pre);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value, isInPre) {
  if (isInPre || el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters (exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
    } else if (
      c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C &&
      exp.charCodeAt(i - 1) !== 0x7C &&
      !curly && !square && !paren
    ) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22: inDouble = true; break         // "
        case 0x27: inSingle = true; break         // '
        case 0x60: inTemplateString = true; break // `
        case 0x28: paren++; break                 // (
        case 0x29: paren--; break                 // )
        case 0x5B: square++; break                // [
        case 0x5D: square--; break                // ]
        case 0x7B: curly++; break                 // {
        case 0x7D: curly--; break                 // }
      }
      if (c === 0x2f) { // /
        var j = i - 1;
        var p = (void 0);
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') { break }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter () {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression
}

function wrapFilter (exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return ("_f(\"" + filter + "\")(" + exp + ")")
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
  }
}

/*  */



/* eslint-disable no-unused-vars */
function baseWarn (msg, range) {
  console.error(("[Vue compiler]: " + msg));
}
/* eslint-enable no-unused-vars */

function pluckModuleFunction (
  modules,
  key
) {
  return modules
    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
    : []
}

function addProp (el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

function addAttr (el, name, value, range, dynamic) {
  var attrs = dynamic
    ? (el.dynamicAttrs || (el.dynamicAttrs = []))
    : (el.attrs || (el.attrs = []));
  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

// add a raw attr (use this in preTransforms)
function addRawAttr (el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));
}

function addDirective (
  el,
  name,
  rawName,
  value,
  arg,
  isDynamicArg,
  modifiers,
  range
) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker (symbol, name, dynamic) {
  return dynamic
    ? ("_p(" + name + ",\"" + symbol + "\")")
    : symbol + name // mark the event as captured
}

function addHandler (
  el,
  name,
  value,
  modifiers,
  important,
  warn,
  range,
  dynamic
) {
  modifiers = modifiers || emptyObject;
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (
    warn &&
    modifiers.prevent && modifiers.passive
  ) {
    warn(
      'passive and prevent can\'t be used together. ' +
      'Passive handler can\'t prevent default event.',
      range
    );
  }

  // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.
  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  }

  // check capture modifier
  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }
  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */
  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;
  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr (
  el,
  name
) {
  return el.rawAttrsMap[':' + name] ||
    el.rawAttrsMap['v-bind:' + name] ||
    el.rawAttrsMap[name]
}

function getBindingAttr (
  el,
  name,
  getStatic
) {
  var dynamicValue =
    getAndRemoveAttr(el, ':' + name) ||
    getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue)
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue)
    }
  }
}

// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.
function getAndRemoveAttr (
  el,
  name,
  removeFromMap
) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break
      }
    }
  }
  if (removeFromMap) {
    delete el.attrsMap[name];
  }
  return val
}

function getAndRemoveAttrByRegex (
  el,
  name
) {
  var list = el.attrsList;
  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];
    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr
    }
  }
}

function rangeSetItem (
  item,
  range
) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }
    if (range.end != null) {
      item.end = range.end;
    }
  }
  return item
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel (
  el,
  value,
  modifiers
) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression =
      "(typeof " + baseValueExpression + " === 'string'" +
      "? " + baseValueExpression + ".trim()" +
      ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: ("(" + value + ")"),
    expression: JSON.stringify(value),
    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode (
  value,
  assignment
) {
  var res = parseModel(value);
  if (res.key === null) {
    return (value + "=" + assignment)
  } else {
    return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
  }
}

/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */

var len, str, chr, index$1, expressionPos, expressionEndPos;



function parseModel (val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');
    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      }
    } else {
      return {
        exp: val,
        key: null
      }
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  }
}

function next () {
  return str.charCodeAt(++index$1)
}

function eof () {
  return index$1 >= len
}

function isStringStart (chr) {
  return chr === 0x22 || chr === 0x27
}

function parseBracket (chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue
    }
    if (chr === 0x5B) { inBracket++; }
    if (chr === 0x5D) { inBracket--; }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break
    }
  }
}

function parseString (chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model (
  el,
  dir,
  _warn
) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  {
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1(
        "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
        "File inputs are read only. Use a v-on:change listener instead.",
        el.rawAttrsMap['v-model']
      );
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else {
    warn$1(
      "<" + (el.tag) + " v-model=\"" + value + "\">: " +
      "v-model is not supported on this element type. " +
      'If you are working with contenteditable, it\'s recommended to ' +
      'wrap a library dedicated for that purpose inside a custom component.',
      el.rawAttrsMap['v-model']
    );
  }

  // ensure runtime directive metadata
  return true
}

function genCheckboxModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked',
    "Array.isArray(" + value + ")" +
    "?_i(" + value + "," + valueBinding + ")>-1" + (
      trueValueBinding === 'true'
        ? (":(" + value + ")")
        : (":_q(" + value + "," + trueValueBinding + ")")
    )
  );
  addHandler(el, 'change',
    "var $$a=" + value + "," +
        '$$el=$event.target,' +
        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
    'if(Array.isArray($$a)){' +
      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
          '$$i=_i($$a,$$v);' +
      "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
      "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
    null, true
  );
}

function genRadioModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" +
    ".call($event.target.options,function(o){return o.selected})" +
    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
    "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + (genAssignmentCode(value, assignment));
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel (
  el,
  value,
  modifiers
) {
  var type = el.attrsMap.type;

  // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type
  {
    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
    if (value$1 && !typeBinding) {
      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
      warn$1(
        binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " +
        'because the latter already expands to a value binding internally',
        el.rawAttrsMap[binding]
      );
    }
  }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy
    ? 'change'
    : type === 'range'
      ? RANGE_TOKEN
      : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', ("(" + value + ")"));
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecessary `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else {
        console[console.info ? 'info' : 'log'](
          'Download the Vue Devtools extension for a better development experience:\n' +
          'https://github.com/vuejs/vue-devtools'
        );
      }
    }
    if (config.productionTip !== false &&
      typeof console !== 'undefined'
    ) {
      console[console.info ? 'info' : 'log'](
        "You are running Vue in development mode.\n" +
        "Make sure to turn on production mode when deploying for production.\n" +
        "See more tips at https://vuejs.org/guide/deployment.html"
      );
    }
  }, 0);
}

/*  */

var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
});



function parseText (
  text,
  delimiters
) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return
  }
  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;
  while ((match = tagRE.exec(text))) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push(("_s(" + exp + ")"));
    rawTokens.push({ '@binding': exp });
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }
  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  }
}

/*  */

function transformNode (el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if (staticClass) {
    var res = parseText(staticClass, options.delimiters);
    if (res) {
      warn(
        "class=\"" + staticClass + "\": " +
        'Interpolation inside attributes has been removed. ' +
        'Use v-bind or the colon shorthand instead. For example, ' +
        'instead of <div class="{{ val }}">, use <div :class="val">.',
        el.rawAttrsMap['class']
      );
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData (el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + (el.staticClass) + ",";
  }
  if (el.classBinding) {
    data += "class:" + (el.classBinding) + ",";
  }
  return data
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};

/*  */

function transformNode$1 (el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    {
      var res = parseText(staticStyle, options.delimiters);
      if (res) {
        warn(
          "style=\"" + staticStyle + "\": " +
          'Interpolation inside attributes has been removed. ' +
          'Use v-bind or the colon shorthand instead. For example, ' +
          'instead of <div style="{{ val }}">, use <div :style="val">.',
          el.rawAttrsMap['style']
        );
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1 (el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + (el.staticStyle) + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + (el.styleBinding) + "),";
  }
  return data
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};

/*  */

var decoder;

var he = {
  decode: function decode (html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent
  }
};

/*  */

var isUnaryTag = makeMap(
  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
  'link,meta,param,source,track,wbr'
);

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap(
  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
);

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap(
  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
  'title,tr,track'
);

/**
 * Not type-checking this file because it's mostly vendor code.
 */

// Regular Expressions for parsing tags and attributes
var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp(("^<" + qnameCapture));
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
var doctype = /^<!DOCTYPE [^>]+>/i;
// #7298: escape - to avoid being passed as HTML comment when inlined in page
var comment = /^<!\--/;
var conditionalComment = /^<!\[/;

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

// #5992
var isIgnoreNewlineTag = makeMap('pre,textarea', true);
var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };

function decodeAttr (value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) { return decodingMap[match]; })
}

function parseHTML (html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }
            advance(commentEnd + 3);
            continue
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }
          continue
        }
      }

      var text = (void 0), rest = (void 0), next = (void 0);
      if (textEnd >= 0) {
        rest = html.slice(textEnd);
        while (
          !endTag.test(rest) &&
          !startTagOpen.test(rest) &&
          !comment.test(rest) &&
          !conditionalComment.test(rest)
        ) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);
          if (next < 0) { break }
          textEnd += next;
          rest = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text
            .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }
        if (options.chars) {
          options.chars(text);
        }
        return ''
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if (!stack.length && options.warn) {
        options.warn(("Mal-formatted tag at end of template: \"" + html + "\""), { start: index + html.length });
      }
      break
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance (n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag () {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match
      }
    }
  }

  function handleStartTag (match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
        ? options.shouldDecodeNewlinesForHref
        : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };
      if (options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag (tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) { start = index; }
    if (end == null) { end = index; }

    // Find the closest opened tag of the same type
    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (i > pos || !tagName &&
          options.warn
        ) {
          options.warn(
            ("tag <" + (stack[i].tag) + "> has no matching end tag."),
            { start: stack[i].start, end: stack[i].end }
          );
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:|^#/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;

var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

var slotRE = /^v-slot(:|$)|^#/;

var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /[ \f\t\r\n]+/g;

var invalidAttributeRE = /[\s"'<>\/=]/;

var decodeHTMLCached = cached(he.decode);

var emptySlotScopeToken = "_empty_";

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement (
  tag,
  attrs,
  parent
) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  }
}

/**
 * Convert HTML string to AST.
 */
function parse (
  template,
  options
) {
  warn$2 = options.warn || baseWarn;

  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;
  maybeComponent = function (el) { return !!(
    el.component ||
    el.attrsMap[':is'] ||
    el.attrsMap['v-bind:is'] ||
    !(el.attrsMap.is ? isReservedTag(el.attrsMap.is) : isReservedTag(el.tag))
  ); };
  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce (msg, range) {
    if (!warned) {
      warned = true;
      warn$2(msg, range);
    }
  }

  function closeElement (element) {
    trimEndingWhitespace(element);
    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    }
    // tree management
    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        {
          checkRootConstraints(element);
        }
        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else {
        warnOnce(
          "Component template should contain exactly one root element. " +
          "If you are using v-if on multiple elements, " +
          "use v-else-if to chain them instead.",
          { start: element.start }
        );
      }
    }
    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"'
          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }
        currentParent.children.push(element);
        element.parent = currentParent;
      }
    }

    // final children cleanup
    // filter out scoped slots
    element.children = element.children.filter(function (c) { return !(c).slotScope; });
    // remove trailing whitespace node again
    trimEndingWhitespace(element);

    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
    // apply post-transforms
    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace (el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;
      while (
        (lastNode = el.children[el.children.length - 1]) &&
        lastNode.type === 3 &&
        lastNode.text === ' '
      ) {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints (el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce(
        "Cannot use <" + (el.tag) + "> as component root element because it may " +
        'contain multiple nodes.',
        { start: el.start }
      );
    }
    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce(
        'Cannot use v-for on stateful component root element because ' +
        'it renders multiple elements.',
        el.rawAttrsMap['v-for']
      );
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start (tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);
      if (ns) {
        element.ns = ns;
      }

      {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated
          }, {});
        }
        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$2(
              "Invalid dynamic argument expression: attribute names cannot contain " +
              "spaces, quotes, <, >, / or =.",
              {
                start: attr.start + attr.name.indexOf("["),
                end: attr.start + attr.name.length
              }
            );
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        warn$2(
          'Templates should only be responsible for mapping the state to the ' +
          'UI. Avoid placing tags with side-effects in your templates, such as ' +
          "<" + tag + ">" + ', as they will not be parsed.',
          { start: element.start }
        );
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;
        {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },

    end: function end (tag, start, end$1) {
      var element = stack[stack.length - 1];
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      if (options.outputSourceRange) {
        element.end = end$1;
      }
      closeElement(element);
    },

    chars: function chars (text, start, end) {
      if (!currentParent) {
        {
          if (text === template) {
            warnOnce(
              'Component template requires a root element, rather than just text.',
              { start: start }
            );
          } else if ((text = text.trim())) {
            warnOnce(
              ("text \"" + text + "\" outside root element will be ignored."),
              { start: start }
            );
          }
        }
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      var children = currentParent.children;
      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }
      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }
        var res;
        var child;
        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }
        if (child) {
          if (options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }
          children.push(child);
        }
      }
    },
    comment: function comment (text, start, end) {
      // adding anything as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };
        if (options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }
        currentParent.children.push(child);
      }
    }
  });
  return root
}

function processPre (el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs (el) {
  var list = el.attrsList;
  var len = list.length;
  if (len) {
    var attrs = el.attrs = new Array(len);
    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };
      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement (
  element,
  options
) {
  processKey(element);

  // determine whether this is a plain element after
  // removing structural attributes
  element.plain = (
    !element.key &&
    !element.scopedSlots &&
    !element.attrsList.length
  );

  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);
  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }
  processAttrs(element);
  return element
}

function processKey (el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    {
      if (el.tag === 'template') {
        warn$2(
          "<template> cannot be keyed. Place the key on real elements instead.",
          getRawBindingAttr(el, 'key')
        );
      }
      if (el.for) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;
        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$2(
            "Do not use v-for index as key on <transition-group> children, " +
            "this is the same as not using keys.",
            getRawBindingAttr(el, 'key'),
            true /* tip */
          );
        }
      }
    }
    el.key = exp;
  }
}

function processRef (el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor (el) {
  var exp;
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    var res = parseFor(exp);
    if (res) {
      extend(el, res);
    } else {
      warn$2(
        ("Invalid v-for expression: " + exp),
        el.rawAttrsMap['v-for']
      );
    }
  }
}



function parseFor (exp) {
  var inMatch = exp.match(forAliasRE);
  if (!inMatch) { return }
  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);
  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();
    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }
  return res
}

function processIf (el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions (el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else {
    warn$2(
      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
      "used on element <" + (el.tag) + "> without corresponding v-if.",
      el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']
    );
  }
}

function findPrevElement (children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if (children[i].text !== ' ') {
        warn$2(
          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
          "will be ignored.",
          children[i]
        );
      }
      children.pop();
    }
  }
}

function addIfCondition (el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce (el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

// handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">
function processSlotContent (el) {
  var slotScope;
  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */
    if (slotScope) {
      warn$2(
        "the \"scope\" attribute for scoped slots have been deprecated and " +
        "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +
        "can also be used on plain elements in addition to <template> to " +
        "denote scoped slots.",
        el.rawAttrsMap['scope'],
        true
      );
    }
    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
    /* istanbul ignore if */
    if (el.attrsMap['v-for']) {
      warn$2(
        "Ambiguous combined usage of slot-scope and v-for on <" + (el.tag) + "> " +
        "(v-for takes higher priority). Use a wrapper <template> for the " +
        "scoped slot to make it clearer.",
        el.rawAttrsMap['slot-scope'],
        true
      );
    }
    el.slotScope = slotScope;
  }

  // slot="xxx"
  var slotTarget = getBindingAttr(el, 'slot');
  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
    // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.
    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  }

  // 2.6 v-slot syntax
  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding) {
        {
          if (el.slotTarget || el.slotScope) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.parent && !maybeComponent(el.parent)) {
            warn$2(
              "<template v-slot> can only appear at the root level inside " +
              "the receiving component",
              el
            );
          }
        }
        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding$1) {
        {
          if (!maybeComponent(el)) {
            warn$2(
              "v-slot can only be used on components or <template>.",
              slotBinding$1
            );
          }
          if (el.slotScope || el.slotTarget) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.scopedSlots) {
            warn$2(
              "To avoid scope ambiguity, the default slot should also use " +
              "<template> syntax when there are other named slots.",
              slotBinding$1
            );
          }
        }
        // add the component's children to its default slot
        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
        // remove children as they are returned from scopedSlots now
        el.children = [];
        // mark el non-plain so data gets generated
        el.plain = false;
      }
    }
  }
}

function getSlotName (binding) {
  var name = binding.name.replace(slotRE, '');
  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else {
      warn$2(
        "v-slot shorthand syntax requires a slot name.",
        binding
      );
    }
  }
  return dynamicArgRE.test(name)
    // dynamic [name]
    ? { name: name.slice(1, -1), dynamic: true }
    // static name
    : { name: ("\"" + name + "\""), dynamic: false }
}

// handle <slot/> outlets
function processSlotOutlet (el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if (el.key) {
      warn$2(
        "`key` does not work on <slot> because slots are abstract outlets " +
        "and can possibly expand into multiple elements. " +
        "Use the key on a wrapping element instead.",
        getRawBindingAttr(el, 'key')
      );
    }
  }
}

function processComponent (el) {
  var binding;
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs (el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name.replace(dirRE, ''));
      // support .foo shorthand syntax for the .prop modifier
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        if (
          value.trim().length === 0
        ) {
          warn$2(
            ("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"")
          );
        }
        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);
            if (name === 'innerHtml') { name = 'innerHTML'; }
          }
          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");
            if (!isDynamic) {
              addHandler(
                el,
                ("update:" + (camelize(name))),
                syncGen,
                null,
                false,
                warn$2,
                list[i]
              );
              if (hyphenate(name) !== camelize(name)) {
                addHandler(
                  el,
                  ("update:" + (hyphenate(name))),
                  syncGen,
                  null,
                  false,
                  warn$2,
                  list[i]
                );
              }
            } else {
              // handler w/ dynamic event name
              addHandler(
                el,
                ("\"update:\"+(" + name + ")"),
                syncGen,
                null,
                false,
                warn$2,
                list[i],
                true // dynamic
              );
            }
          }
        }
        if ((modifiers && modifiers.prop) || (
          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
        )) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else { // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }
        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
        if (name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      {
        var res = parseText(value, delimiters);
        if (res) {
          warn$2(
            name + "=\"" + value + "\": " +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div id="{{ val }}">, use <div :id="val">.',
            list[i]
          );
        }
      }
      addAttr(el, name, JSON.stringify(value), list[i]);
      // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation
      if (!el.component &&
          name === 'muted' &&
          platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor (el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent;
  }
  return false
}

function parseModifiers (name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) { ret[m.slice(1)] = true; });
    return ret
  }
}

function makeAttrsMap (attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (
      map[attrs[i].name] && !isIE && !isEdge
    ) {
      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }
    map[attrs[i].name] = attrs[i].value;
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el) {
  return el.tag === 'script' || el.tag === 'style'
}

function isForbiddenTag (el) {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug (attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "You are binding v-model directly to a v-for iteration alias. " +
        "This will not be able to modify the v-for source array because " +
        "writing to the alias is like modifying a function local variable. " +
        "Consider using an array of objects and use v-model on an object property instead.",
        el.rawAttrsMap['v-model']
      );
    }
    _el = _el.parent;
  }
}

/*  */

function preTransformNode (el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;
    if (!map['v-model']) {
      return
    }

    var typeBinding;
    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }
    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + (map['v-bind']) + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
      // 1. checkbox
      var branch0 = cloneASTElement(el);
      // process for on the main node
      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed
      branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0.if,
        block: branch0
      });
      // 2. add radio else-if condition
      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      });
      // 3. other
      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0
    }
  }
}

function cloneASTElement (el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent)
}

var model$1 = {
  preTransformNode: preTransformNode
};

var modules$1 = [
  klass$1,
  style$1,
  model$1
];

/*  */

function text (el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
  }
}

/*  */

function html (el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize (root, options) {
  if (!root) { return }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1 (keys) {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
    (keys ? ',' + keys : '')
  )
}

function markStatic$1 (node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots (node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true;
      return
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic (node) {
  if (node.type === 2) { // expression
    return false
  }
  if (node.type === 3) { // text
    return true
  }
  return !!(node.pre || (
    !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) &&
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}

/*  */

var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

// KeyboardEvent.keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// KeyboardEvent.key aliases
var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers (
  events,
  isNative
) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";
  for (var name in events) {
    var handlerCode = genHandler(events[name]);
    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }
  staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
  } else {
    return prefix + staticHandlers
  }
}

function genHandler (handler) {
  if (!handler) {
    return 'function(){}'
  }

  if (Array.isArray(handler)) {
    return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value
    }
    return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = (handler.modifiers);
        genModifierCode += genGuard(
          ['ctrl', 'shift', 'alt', 'meta']
            .filter(function (keyModifier) { return !modifiers[keyModifier]; })
            .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
            .join('||')
        );
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath
      ? ("return " + (handler.value) + ".apply(null, arguments)")
      : isFunctionExpression
        ? ("return (" + (handler.value) + ").apply(null, arguments)")
        : isFunctionInvocation
          ? ("return " + (handler.value))
          : handler.value;
    return ("function($event){" + code + handlerCode + "}")
  }
}

function genKeyFilter (keys) {
  return (
    // make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" +
    (keys.map(genFilterCode).join('&&')) + ")return null;"
  )
}

function genFilterCode (key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return ("$event.keyCode!==" + keyVal)
  }
  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return (
    "_k($event.keyCode," +
    (JSON.stringify(key)) + "," +
    (JSON.stringify(keyCode)) + "," +
    "$event.key," +
    "" + (JSON.stringify(keyName)) +
    ")"
  )
}

/*  */

function on (el, dir) {
  if (dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }
  el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
}

/*  */

function bind$1 (el, dir) {
  el.wrapData = function (code) {
    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
  };
}

/*  */

var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};

/*  */





var CodegenState = function CodegenState (options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;
  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };
  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};



function generate (
  ast,
  options
) {
  var state = new CodegenState(options);
  // fix #11483, Root level <script> tags should not be rendered.
  var code = ast ? (ast.tag === 'script' ? 'null' : genElement(ast, state)) : '_c("div")';
  return {
    render: ("with(this){return " + code + "}"),
    staticRenderFns: state.staticRenderFns
  }
}

function genElement (el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state)
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state)
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state)
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0'
  } else if (el.tag === 'slot') {
    return genSlot(el, state)
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;
      if (!el.plain || (el.pre && state.maybeComponent(el))) {
        data = genData$2(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
    }
    // module transforms
    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code
  }
}

// hoist static sub-trees out
function genStatic (el, state) {
  el.staticProcessed = true;
  // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.
  var originalPreState = state.pre;
  if (el.pre) {
    state.pre = el.pre;
  }
  state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
  state.pre = originalPreState;
  return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
}

// v-once
function genOnce (el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break
      }
      parent = parent.parent;
    }
    if (!key) {
      state.warn(
        "v-once can only be used inside v-for that is keyed. ",
        el.rawAttrsMap['v-once']
      );
      return genElement(el, state)
    }
    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
  } else {
    return genStatic(el, state)
  }
}

function genIf (
  el,
  state,
  altGen,
  altEmpty
) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
}

function genIfConditions (
  conditions,
  state,
  altGen,
  altEmpty
) {
  if (!conditions.length) {
    return altEmpty || '_e()'
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
  } else {
    return ("" + (genTernaryExp(condition.block)))
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp (el) {
    return altGen
      ? altGen(el, state)
      : el.once
        ? genOnce(el, state)
        : genElement(el, state)
  }
}

function genFor (
  el,
  state,
  altGen,
  altHelper
) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

  if (state.maybeComponent(el) &&
    el.tag !== 'slot' &&
    el.tag !== 'template' &&
    !el.key
  ) {
    state.warn(
      "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
      "v-for should have explicit keys. " +
      "See https://vuejs.org/guide/list.html#key for more info.",
      el.rawAttrsMap['v-for'],
      true /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion
  return (altHelper || '_l') + "((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + ((altGen || genElement)(el, state)) +
    '})'
}

function genData$2 (el, state) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el, state);
  if (dirs) { data += dirs + ','; }

  // key
  if (el.key) {
    data += "key:" + (el.key) + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + (el.ref) + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + (el.tag) + "\",";
  }
  // module data generation functions
  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:" + (genProps(el.attrs)) + ",";
  }
  // DOM props
  if (el.props) {
    data += "domProps:" + (genProps(el.props)) + ",";
  }
  // event handlers
  if (el.events) {
    data += (genHandlers(el.events, false)) + ",";
  }
  if (el.nativeEvents) {
    data += (genHandlers(el.nativeEvents, true)) + ",";
  }
  // slot target
  // only for non-scoped slots
  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + (el.slotTarget) + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.
  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
  }
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  // v-on data wrap
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data
}

function genDirectives (el, state) {
  var dirs = el.directives;
  if (!dirs) { return }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']'
  }
}

function genInlineTemplate (el, state) {
  var ast = el.children[0];
  if (el.children.length !== 1 || ast.type !== 1) {
    state.warn(
      'Inline-template components must have exactly one child element.',
      { start: el.start }
    );
  }
  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
  }
}

function genScopedSlots (
  el,
  slots,
  state
) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return (
      slot.slotTargetDynamic ||
      slot.if ||
      slot.for ||
      containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    )
  });

  // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.
  var needsKey = !!el.if;

  // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.
  if (!needsForceUpdate) {
    var parent = el.parent;
    while (parent) {
      if (
        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
        parent.for
      ) {
        needsForceUpdate = true;
        break
      }
      if (parent.if) {
        needsKey = true;
      }
      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots)
    .map(function (key) { return genScopedSlot(slots[key], state); })
    .join(',');

  return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
}

function hash(str) {
  var hash = 5381;
  var i = str.length;
  while(i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }
  return hash >>> 0
}

function containsSlotChild (el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true
    }
    return el.children.some(containsSlotChild)
  }
  return false
}

function genScopedSlot (
  el,
  state
) {
  var isLegacySyntax = el.attrsMap['slot-scope'];
  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null")
  }
  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot)
  }
  var slotScope = el.slotScope === emptySlotScopeToken
    ? ""
    : String(el.slotScope);
  var fn = "function(" + slotScope + "){" +
    "return " + (el.tag === 'template'
      ? el.if && isLegacySyntax
        ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
        : genChildren(el, state) || 'undefined'
      : genElement(el, state)) + "}";
  // reverse proxy v-slot without scope on this.$slots
  var reverseProxy = slotScope ? "" : ",proxy:true";
  return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
}

function genChildren (
  el,
  state,
  checkSkip,
  altGenElement,
  altGenNode
) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 &&
      el$1.for &&
      el$1.tag !== 'template' &&
      el$1.tag !== 'slot'
    ) {
      var normalizationType = checkSkip
        ? state.maybeComponent(el$1) ? ",1" : ",0"
        : "";
      return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
    }
    var normalizationType$1 = checkSkip
      ? getNormalizationType(children, state.maybeComponent)
      : 0;
    var gen = altGenNode || genNode;
    return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType (
  children,
  maybeComponent
) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue
    }
    if (needsNormalization(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
      res = 2;
      break
    }
    if (maybeComponent(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
      res = 1;
    }
  }
  return res
}

function needsNormalization (el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
}

function genNode (node, state) {
  if (node.type === 1) {
    return genElement(node, state)
  } else if (node.type === 3 && node.isComment) {
    return genComment(node)
  } else {
    return genText(node)
  }
}

function genText (text) {
  return ("_v(" + (text.type === 2
    ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
}

function genComment (comment) {
  return ("_e(" + (JSON.stringify(comment.text)) + ")")
}

function genSlot (el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? (",function(){return " + children + "}") : '');
  var attrs = el.attrs || el.dynamicAttrs
    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({
        // slot props are camelized
        name: camelize(attr.name),
        value: attr.value,
        dynamic: attr.dynamic
      }); }))
    : null;
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')'
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent (
  componentName,
  el,
  state
) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
}

function genProps (props) {
  var staticProps = "";
  var dynamicProps = "";
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);
    if (prop.dynamic) {
      dynamicProps += (prop.name) + "," + value + ",";
    } else {
      staticProps += "\"" + (prop.name) + "\":" + value + ",";
    }
  }
  staticProps = "{" + (staticProps.slice(0, -1)) + "}";
  if (dynamicProps) {
    return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
  } else {
    return staticProps
  }
}

// #3895, #4268
function transformSpecialNewlines (text) {
  return text
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029')
}

/*  */



// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + (
  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
  'super,throw,while,yield,delete,export,import,return,switch,default,' +
  'extends,finally,continue,debugger,function,arguments'
).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + (
  'delete,typeof,void'
).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors (ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode (node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          var range = node.rawAttrsMap[name];
          if (name === 'v-for') {
            checkFor(node, ("v-for=\"" + value + "\""), warn, range);
          } else if (name === 'v-slot' || name[0] === '#') {
            checkFunctionParameterExpression(value, (name + "=\"" + value + "\""), warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, (name + "=\"" + value + "\""), warn, range);
          } else {
            checkExpression(value, (name + "=\"" + value + "\""), warn, range);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent (exp, text, warn, range) {
  var stripped = exp.replace(stripStringRE, '');
  var keywordMatch = stripped.match(unaryOperatorsRE);
  if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {
    warn(
      "avoid using JavaScript unary operator as property name: " +
      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
      range
    );
  }
  checkExpression(exp, text, warn, range);
}

function checkFor (node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier (
  ident,
  type,
  text,
  warn,
  range
) {
  if (typeof ident === 'string') {
    try {
      new Function(("var " + ident + "=_"));
    } catch (e) {
      warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
    }
  }
}

function checkExpression (exp, text, warn, range) {
  try {
    new Function(("return " + exp));
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      warn(
        "avoid using JavaScript keyword as property name: " +
        "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
        range
      );
    } else {
      warn(
        "invalid expression: " + (e.message) + " in\n\n" +
        "    " + exp + "\n\n" +
        "  Raw expression: " + (text.trim()) + "\n",
        range
      );
    }
  }
}

function checkFunctionParameterExpression (exp, text, warn, range) {
  try {
    new Function(exp, '');
  } catch (e) {
    warn(
      "invalid function parameter expression: " + (e.message) + " in\n\n" +
      "    " + exp + "\n\n" +
      "  Raw expression: " + (text.trim()) + "\n",
      range
    );
  }
}

/*  */

var range = 2;

function generateCodeFrame (
  source,
  start,
  end
) {
  if ( start === void 0 ) start = 0;
  if ( end === void 0 ) end = source.length;

  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];
  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;
    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) { continue }
        res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
        var lineLength = lines[j].length;
        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }
          count += lineLength + 1;
        }
      }
      break
    }
  }
  return res.join('\n')
}

function repeat$1 (str, n) {
  var result = '';
  if (n > 0) {
    while (true) { // eslint-disable-line
      if (n & 1) { result += str; }
      n >>>= 1;
      if (n <= 0) { break }
      str += str;
    }
  }
  return result
}

/*  */



function createFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}

function createCompileToFunctionFn (compile) {
  var cache = Object.create(null);

  return function compileToFunctions (
    template,
    options,
    vm
  ) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;

    /* istanbul ignore if */
    {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1(
            'It seems you are using the standalone build of Vue.js in an ' +
            'environment with Content Security Policy that prohibits unsafe-eval. ' +
            'The template compiler cannot work in this environment. Consider ' +
            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
            'templates into render functions.'
          );
        }
      }
    }

    // check cache
    var key = options.delimiters
      ? String(options.delimiters) + template
      : template;
    if (cache[key]) {
      return cache[key]
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$$1(
              "Error compiling template:\n\n" + (e.msg) + "\n\n" +
              generateCodeFrame(template, e.start, e.end),
              vm
            );
          });
        } else {
          warn$$1(
            "Error compiling template:\n\n" + template + "\n\n" +
            compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
            vm
          );
        }
      }
      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) { return tip(e.msg, vm); });
        } else {
          compiled.tips.forEach(function (msg) { return tip(msg, vm); });
        }
      }
    }

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors)
    });

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1(
          "Failed to generate render function:\n\n" +
          fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return ((err.toString()) + " in\n\n" + code + "\n");
        }).join('\n'),
          vm
        );
      }
    }

    return (cache[key] = res)
  }
}

/*  */

function createCompilerCreator (baseCompile) {
  return function createCompiler (baseOptions) {
    function compile (
      template,
      options
    ) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function (msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if (options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function (msg, range, tip) {
            var data = { msg: msg };
            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }
              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }
            (tip ? tips : errors).push(data);
          };
        }
        // merge custom modules
        if (options.modules) {
          finalOptions.modules =
            (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(
            Object.create(baseOptions.directives || null),
            options.directives
          );
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;

      var compiled = baseCompile(template.trim(), finalOptions);
      {
        detectErrors(compiled.ast, warn);
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    }
  }
}

/*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
var createCompiler = createCompilerCreator(function baseCompile (
  template,
  options
) {
  var ast = parse(template.trim(), options);
  if (options.optimize !== false) {
    optimize(ast, options);
  }
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
});

/*  */

var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;

/*  */

// check whether current browser encodes a char inside attribute values
var div;
function getShouldDecode (href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0
}

// #3663: IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
// #6828: chrome encodes content in a[href]
var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML
});

var mount = Vue.prototype.$mount;
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    warn(
      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
    );
    return this
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if (!template) {
            warn(
              ("Template element not found or is empty: " + (options.template)),
              this
            );
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        {
          warn('invalid template option:' + template, this);
        }
        return this
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        outputSourceRange: "development" !== 'production',
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile end');
        measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');
      }
    }
  }
  return mount.call(this, el, hydrating)
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML (el) {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML
  }
}

Vue.compile = compileToFunctions;

module.exports = Vue;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/vue/dist/vue.common.js":
/*!*********************************************!*\
  !*** ./node_modules/vue/dist/vue.common.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

if (false) {} else {
  module.exports = __webpack_require__(/*! ./vue.common.dev.js */ "./node_modules/vue/dist/vue.common.dev.js")
}


/***/ }),

/***/ "./node_modules/vuex/dist/vuex.esm.js":
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: default, Store, createLogger, createNamespacedHelpers, install, mapActions, mapGetters, mapMutations, mapState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Store", function() { return Store; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createLogger", function() { return createLogger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNamespacedHelpers", function() { return createNamespacedHelpers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "install", function() { return install; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapActions", function() { return mapActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapGetters", function() { return mapGetters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapMutations", function() { return mapMutations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapState", function() { return mapState; });
/*!
 * vuex v3.6.2
 * (c) 2021 Evan You
 * @license MIT
 */
function applyMixin (Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({ beforeCreate: vuexInit });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;
    Vue.prototype._init = function (options) {
      if ( options === void 0 ) options = {};

      options.init = options.init
        ? [vuexInit].concat(options.init)
        : vuexInit;
      _init.call(this, options);
    };
  }

  /**
   * Vuex init hook, injected into each instances init hooks list.
   */

  function vuexInit () {
    var options = this.$options;
    // store injection
    if (options.store) {
      this.$store = typeof options.store === 'function'
        ? options.store()
        : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
}

var target = typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
    ? global
    : {};
var devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin (store) {
  if (!devtoolHook) { return }

  store._devtoolHook = devtoolHook;

  devtoolHook.emit('vuex:init', store);

  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });

  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  }, { prepend: true });

  store.subscribeAction(function (action, state) {
    devtoolHook.emit('vuex:action', action, state);
  }, { prepend: true });
}

/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */
function find (list, f) {
  return list.filter(f)[0]
}

/**
 * Deep copy the given object considering circular structure.
 * This function caches all nested objects and its copies.
 * If it detects circular structure, use cached copy to avoid infinite loop.
 *
 * @param {*} obj
 * @param {Array<Object>} cache
 * @return {*}
 */
function deepCopy (obj, cache) {
  if ( cache === void 0 ) cache = [];

  // just return if obj is immutable value
  if (obj === null || typeof obj !== 'object') {
    return obj
  }

  // if obj is hit, it is in circular structure
  var hit = find(cache, function (c) { return c.original === obj; });
  if (hit) {
    return hit.copy
  }

  var copy = Array.isArray(obj) ? [] : {};
  // put the copy into cache at first
  // because we want to refer it in recursive deepCopy
  cache.push({
    original: obj,
    copy: copy
  });

  Object.keys(obj).forEach(function (key) {
    copy[key] = deepCopy(obj[key], cache);
  });

  return copy
}

/**
 * forEach for object
 */
function forEachValue (obj, fn) {
  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });
}

function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

function isPromise (val) {
  return val && typeof val.then === 'function'
}

function assert (condition, msg) {
  if (!condition) { throw new Error(("[vuex] " + msg)) }
}

function partial (fn, arg) {
  return function () {
    return fn(arg)
  }
}

// Base data struct for store's module, package with some attribute and method
var Module = function Module (rawModule, runtime) {
  this.runtime = runtime;
  // Store some children item
  this._children = Object.create(null);
  // Store the origin module object which passed by programmer
  this._rawModule = rawModule;
  var rawState = rawModule.state;

  // Store the origin module's state
  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors = { namespaced: { configurable: true } };

prototypeAccessors.namespaced.get = function () {
  return !!this._rawModule.namespaced
};

Module.prototype.addChild = function addChild (key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild (key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild (key) {
  return this._children[key]
};

Module.prototype.hasChild = function hasChild (key) {
  return key in this._children
};

Module.prototype.update = function update (rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;
  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }
  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }
  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild (fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter (fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction (fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation (fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties( Module.prototype, prototypeAccessors );

var ModuleCollection = function ModuleCollection (rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get (path) {
  return path.reduce(function (module, key) {
    return module.getChild(key)
  }, this.root)
};

ModuleCollection.prototype.getNamespace = function getNamespace (path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '')
  }, '')
};

ModuleCollection.prototype.update = function update$1 (rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register (path, rawModule, runtime) {
    var this$1 = this;
    if ( runtime === void 0 ) runtime = true;

  if ((true)) {
    assertRawModule(path, rawModule);
  }

  var newModule = new Module(rawModule, runtime);
  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  }

  // register nested modules
  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister (path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];
  var child = parent.getChild(key);

  if (!child) {
    if ((true)) {
      console.warn(
        "[vuex] trying to unregister module '" + key + "', which is " +
        "not registered"
      );
    }
    return
  }

  if (!child.runtime) {
    return
  }

  parent.removeChild(key);
};

ModuleCollection.prototype.isRegistered = function isRegistered (path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];

  if (parent) {
    return parent.hasChild(key)
  }

  return false
};

function update (path, targetModule, newModule) {
  if ((true)) {
    assertRawModule(path, newModule);
  }

  // update target module
  targetModule.update(newModule);

  // update nested modules
  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if ((true)) {
          console.warn(
            "[vuex] trying to add a new module '" + key + "' on hot reloading, " +
            'manual reload is needed'
          );
        }
        return
      }
      update(
        path.concat(key),
        targetModule.getChild(key),
        newModule.modules[key]
      );
    }
  }
}

var functionAssert = {
  assert: function (value) { return typeof value === 'function'; },
  expected: 'function'
};

var objectAssert = {
  assert: function (value) { return typeof value === 'function' ||
    (typeof value === 'object' && typeof value.handler === 'function'); },
  expected: 'function or object with "handler" function'
};

var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert
};

function assertRawModule (path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) { return }

    var assertOptions = assertTypes[key];

    forEachValue(rawModule[key], function (value, type) {
      assert(
        assertOptions.assert(value),
        makeAssertionMessage(path, key, type, value, assertOptions.expected)
      );
    });
  });
}

function makeAssertionMessage (path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
  if (path.length > 0) {
    buf += " in module \"" + (path.join('.')) + "\"";
  }
  buf += " is " + (JSON.stringify(value)) + ".";
  return buf
}

var Vue; // bind on install

var Store = function Store (options) {
  var this$1 = this;
  if ( options === void 0 ) options = {};

  // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731
  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if ((true)) {
    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "store must be called with the new operator.");
  }

  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];
  var strict = options.strict; if ( strict === void 0 ) strict = false;

  // store internal state
  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue();
  this._makeLocalGettersCache = Object.create(null);

  // bind commit and dispatch to self
  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;
  this.dispatch = function boundDispatch (type, payload) {
    return dispatch.call(store, type, payload)
  };
  this.commit = function boundCommit (type, payload, options) {
    return commit.call(store, type, payload, options)
  };

  // strict mode
  this.strict = strict;

  var state = this._modules.root.state;

  // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters
  installModule(this, state, [], this._modules.root);

  // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)
  resetStoreVM(this, state);

  // apply plugins
  plugins.forEach(function (plugin) { return plugin(this$1); });

  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;
  if (useDevtools) {
    devtoolPlugin(this);
  }
};

var prototypeAccessors$1 = { state: { configurable: true } };

prototypeAccessors$1.state.get = function () {
  return this._vm._data.$$state
};

prototypeAccessors$1.state.set = function (v) {
  if ((true)) {
    assert(false, "use store.replaceState() to explicit replace store state.");
  }
};

Store.prototype.commit = function commit (_type, _payload, _options) {
    var this$1 = this;

  // check object-style commit
  var ref = unifyObjectStyle(_type, _payload, _options);
    var type = ref.type;
    var payload = ref.payload;
    var options = ref.options;

  var mutation = { type: type, payload: payload };
  var entry = this._mutations[type];
  if (!entry) {
    if ((true)) {
      console.error(("[vuex] unknown mutation type: " + type));
    }
    return
  }
  this._withCommit(function () {
    entry.forEach(function commitIterator (handler) {
      handler(payload);
    });
  });

  this._subscribers
    .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
    .forEach(function (sub) { return sub(mutation, this$1.state); });

  if (
    ( true) &&
    options && options.silent
  ) {
    console.warn(
      "[vuex] mutation type: " + type + ". Silent option has been removed. " +
      'Use the filter functionality in the vue-devtools'
    );
  }
};

Store.prototype.dispatch = function dispatch (_type, _payload) {
    var this$1 = this;

  // check object-style dispatch
  var ref = unifyObjectStyle(_type, _payload);
    var type = ref.type;
    var payload = ref.payload;

  var action = { type: type, payload: payload };
  var entry = this._actions[type];
  if (!entry) {
    if ((true)) {
      console.error(("[vuex] unknown action type: " + type));
    }
    return
  }

  try {
    this._actionSubscribers
      .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
      .filter(function (sub) { return sub.before; })
      .forEach(function (sub) { return sub.before(action, this$1.state); });
  } catch (e) {
    if ((true)) {
      console.warn("[vuex] error in before action subscribers: ");
      console.error(e);
    }
  }

  var result = entry.length > 1
    ? Promise.all(entry.map(function (handler) { return handler(payload); }))
    : entry[0](payload);

  return new Promise(function (resolve, reject) {
    result.then(function (res) {
      try {
        this$1._actionSubscribers
          .filter(function (sub) { return sub.after; })
          .forEach(function (sub) { return sub.after(action, this$1.state); });
      } catch (e) {
        if ((true)) {
          console.warn("[vuex] error in after action subscribers: ");
          console.error(e);
        }
      }
      resolve(res);
    }, function (error) {
      try {
        this$1._actionSubscribers
          .filter(function (sub) { return sub.error; })
          .forEach(function (sub) { return sub.error(action, this$1.state, error); });
      } catch (e) {
        if ((true)) {
          console.warn("[vuex] error in error action subscribers: ");
          console.error(e);
        }
      }
      reject(error);
    });
  })
};

Store.prototype.subscribe = function subscribe (fn, options) {
  return genericSubscribe(fn, this._subscribers, options)
};

Store.prototype.subscribeAction = function subscribeAction (fn, options) {
  var subs = typeof fn === 'function' ? { before: fn } : fn;
  return genericSubscribe(subs, this._actionSubscribers, options)
};

Store.prototype.watch = function watch (getter, cb, options) {
    var this$1 = this;

  if ((true)) {
    assert(typeof getter === 'function', "store.watch only accepts a function.");
  }
  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)
};

Store.prototype.replaceState = function replaceState (state) {
    var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule (path, rawModule, options) {
    if ( options === void 0 ) options = {};

  if (typeof path === 'string') { path = [path]; }

  if ((true)) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
  }

  this._modules.register(path, rawModule);
  installModule(this, this.state, path, this._modules.get(path), options.preserveState);
  // reset store to update getters...
  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule (path) {
    var this$1 = this;

  if (typeof path === 'string') { path = [path]; }

  if ((true)) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  this._modules.unregister(path);
  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue.delete(parentState, path[path.length - 1]);
  });
  resetStore(this);
};

Store.prototype.hasModule = function hasModule (path) {
  if (typeof path === 'string') { path = [path]; }

  if ((true)) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  return this._modules.isRegistered(path)
};

Store.prototype.hotUpdate = function hotUpdate (newOptions) {
  this._modules.update(newOptions);
  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit (fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties( Store.prototype, prototypeAccessors$1 );

function genericSubscribe (fn, subs, options) {
  if (subs.indexOf(fn) < 0) {
    options && options.prepend
      ? subs.unshift(fn)
      : subs.push(fn);
  }
  return function () {
    var i = subs.indexOf(fn);
    if (i > -1) {
      subs.splice(i, 1);
    }
  }
}

function resetStore (store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state;
  // init all modules
  installModule(store, state, [], store._modules.root, true);
  // reset vm
  resetStoreVM(store, state, hot);
}

function resetStoreVM (store, state, hot) {
  var oldVm = store._vm;

  // bind store public getters
  store.getters = {};
  // reset local getters cache
  store._makeLocalGettersCache = Object.create(null);
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    // direct inline function use will lead to closure preserving oldVm.
    // using partial to return function with only arguments preserved in closure environment.
    computed[key] = partial(fn, store);
    Object.defineProperty(store.getters, key, {
      get: function () { return store._vm[key]; },
      enumerable: true // for local getters
    });
  });

  // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent;

  // enable strict mode for new vm
  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }
    Vue.nextTick(function () { return oldVm.$destroy(); });
  }
}

function installModule (store, rootState, path, module, hot) {
  var isRoot = !path.length;
  var namespace = store._modules.getNamespace(path);

  // register in namespace map
  if (module.namespaced) {
    if (store._modulesNamespaceMap[namespace] && ("development" !== 'production')) {
      console.error(("[vuex] duplicate namespace " + namespace + " for the namespaced module " + (path.join('/'))));
    }
    store._modulesNamespaceMap[namespace] = module;
  }

  // set state
  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];
    store._withCommit(function () {
      if ((true)) {
        if (moduleName in parentState) {
          console.warn(
            ("[vuex] state field \"" + moduleName + "\" was overridden by a module with the same name at \"" + (path.join('.')) + "\"")
          );
        }
      }
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);

  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });

  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });

  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });

  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}

/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */
function makeLocalContext (store, namespace, path) {
  var noNamespace = namespace === '';

  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (( true) && !store._actions[type]) {
          console.error(("[vuex] unknown local action type: " + (args.type) + ", global type: " + type));
          return
        }
      }

      return store.dispatch(type, payload)
    },

    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (( true) && !store._mutations[type]) {
          console.error(("[vuex] unknown local mutation type: " + (args.type) + ", global type: " + type));
          return
        }
      }

      store.commit(type, payload, options);
    }
  };

  // getters and state object must be gotten lazily
  // because they will be changed by vm update
  Object.defineProperties(local, {
    getters: {
      get: noNamespace
        ? function () { return store.getters; }
        : function () { return makeLocalGetters(store, namespace); }
    },
    state: {
      get: function () { return getNestedState(store.state, path); }
    }
  });

  return local
}

function makeLocalGetters (store, namespace) {
  if (!store._makeLocalGettersCache[namespace]) {
    var gettersProxy = {};
    var splitPos = namespace.length;
    Object.keys(store.getters).forEach(function (type) {
      // skip if the target getter is not match this namespace
      if (type.slice(0, splitPos) !== namespace) { return }

      // extract local getter type
      var localType = type.slice(splitPos);

      // Add a port to the getters proxy.
      // Define as getter property because
      // we do not want to evaluate the getters in this time.
      Object.defineProperty(gettersProxy, localType, {
        get: function () { return store.getters[type]; },
        enumerable: true
      });
    });
    store._makeLocalGettersCache[namespace] = gettersProxy;
  }

  return store._makeLocalGettersCache[namespace]
}

function registerMutation (store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler (payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction (store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler (payload) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload);
    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }
    if (store._devtoolHook) {
      return res.catch(function (err) {
        store._devtoolHook.emit('vuex:error', err);
        throw err
      })
    } else {
      return res
    }
  });
}

function registerGetter (store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if ((true)) {
      console.error(("[vuex] duplicate getter key: " + type));
    }
    return
  }
  store._wrappedGetters[type] = function wrappedGetter (store) {
    return rawGetter(
      local.state, // local state
      local.getters, // local getters
      store.state, // root state
      store.getters // root getters
    )
  };
}

function enableStrictMode (store) {
  store._vm.$watch(function () { return this._data.$$state }, function () {
    if ((true)) {
      assert(store._committing, "do not mutate vuex store state outside mutation handlers.");
    }
  }, { deep: true, sync: true });
}

function getNestedState (state, path) {
  return path.reduce(function (state, key) { return state[key]; }, state)
}

function unifyObjectStyle (type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if ((true)) {
    assert(typeof type === 'string', ("expects string as the type, but found " + (typeof type) + "."));
  }

  return { type: type, payload: payload, options: options }
}

function install (_Vue) {
  if (Vue && _Vue === Vue) {
    if ((true)) {
      console.error(
        '[vuex] already installed. Vue.use(Vuex) should be called only once.'
      );
    }
    return
  }
  Vue = _Vue;
  applyMixin(Vue);
}

/**
 * Reduce the code which written in Vue.js for getting the state.
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * @param {Object}
 */
var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  if (( true) && !isValidMap(states)) {
    console.error('[vuex] mapState: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState () {
      var state = this.$store.state;
      var getters = this.$store.getters;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);
        if (!module) {
          return
        }
        state = module.context.state;
        getters = module.context.getters;
      }
      return typeof val === 'function'
        ? val.call(this, state, getters)
        : state[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for committing the mutation
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept another params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */
var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  if (( true) && !isValidMap(mutations)) {
    console.error('[vuex] mapMutations: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      // Get the commit method from store
      var commit = this.$store.commit;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
        if (!module) {
          return
        }
        commit = module.context.commit;
      }
      return typeof val === 'function'
        ? val.apply(this, [commit].concat(args))
        : commit.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for getting the getters
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} getters
 * @return {Object}
 */
var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  if (( true) && !isValidMap(getters)) {
    console.error('[vuex] mapGetters: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    // The namespace has been mutated by normalizeNamespace
    val = namespace + val;
    res[key] = function mappedGetter () {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return
      }
      if (( true) && !(val in this.$store.getters)) {
        console.error(("[vuex] unknown getter: " + val));
        return
      }
      return this.$store.getters[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for dispatch the action
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */
var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  if (( true) && !isValidMap(actions)) {
    console.error('[vuex] mapActions: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      // get dispatch function from store
      var dispatch = this.$store.dispatch;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
        if (!module) {
          return
        }
        dispatch = module.context.dispatch;
      }
      return typeof val === 'function'
        ? val.apply(this, [dispatch].concat(args))
        : dispatch.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

/**
 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
 * @param {String} namespace
 * @return {Object}
 */
var createNamespacedHelpers = function (namespace) { return ({
  mapState: mapState.bind(null, namespace),
  mapGetters: mapGetters.bind(null, namespace),
  mapMutations: mapMutations.bind(null, namespace),
  mapActions: mapActions.bind(null, namespace)
}); };

/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
 * @param {Array|Object} map
 * @return {Object}
 */
function normalizeMap (map) {
  if (!isValidMap(map)) {
    return []
  }
  return Array.isArray(map)
    ? map.map(function (key) { return ({ key: key, val: key }); })
    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })
}

/**
 * Validate whether given map is valid or not
 * @param {*} map
 * @return {Boolean}
 */
function isValidMap (map) {
  return Array.isArray(map) || isObject(map)
}

/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
 * @param {Function} fn
 * @return {Function}
 */
function normalizeNamespace (fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }
    return fn(namespace, map)
  }
}

/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * @param {Object} store
 * @param {String} helper
 * @param {String} namespace
 * @return {Object}
 */
function getModuleByNamespace (store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];
  if (( true) && !module) {
    console.error(("[vuex] module namespace not found in " + helper + "(): " + namespace));
  }
  return module
}

// Credits: borrowed code from fcomb/redux-logger

function createLogger (ref) {
  if ( ref === void 0 ) ref = {};
  var collapsed = ref.collapsed; if ( collapsed === void 0 ) collapsed = true;
  var filter = ref.filter; if ( filter === void 0 ) filter = function (mutation, stateBefore, stateAfter) { return true; };
  var transformer = ref.transformer; if ( transformer === void 0 ) transformer = function (state) { return state; };
  var mutationTransformer = ref.mutationTransformer; if ( mutationTransformer === void 0 ) mutationTransformer = function (mut) { return mut; };
  var actionFilter = ref.actionFilter; if ( actionFilter === void 0 ) actionFilter = function (action, state) { return true; };
  var actionTransformer = ref.actionTransformer; if ( actionTransformer === void 0 ) actionTransformer = function (act) { return act; };
  var logMutations = ref.logMutations; if ( logMutations === void 0 ) logMutations = true;
  var logActions = ref.logActions; if ( logActions === void 0 ) logActions = true;
  var logger = ref.logger; if ( logger === void 0 ) logger = console;

  return function (store) {
    var prevState = deepCopy(store.state);

    if (typeof logger === 'undefined') {
      return
    }

    if (logMutations) {
      store.subscribe(function (mutation, state) {
        var nextState = deepCopy(state);

        if (filter(mutation, prevState, nextState)) {
          var formattedTime = getFormattedTime();
          var formattedMutation = mutationTransformer(mutation);
          var message = "mutation " + (mutation.type) + formattedTime;

          startMessage(logger, message, collapsed);
          logger.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState));
          logger.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation);
          logger.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState));
          endMessage(logger);
        }

        prevState = nextState;
      });
    }

    if (logActions) {
      store.subscribeAction(function (action, state) {
        if (actionFilter(action, state)) {
          var formattedTime = getFormattedTime();
          var formattedAction = actionTransformer(action);
          var message = "action " + (action.type) + formattedTime;

          startMessage(logger, message, collapsed);
          logger.log('%c action', 'color: #03A9F4; font-weight: bold', formattedAction);
          endMessage(logger);
        }
      });
    }
  }
}

function startMessage (logger, message, collapsed) {
  var startMessage = collapsed
    ? logger.groupCollapsed
    : logger.group;

  // render
  try {
    startMessage.call(logger, message);
  } catch (e) {
    logger.log(message);
  }
}

function endMessage (logger) {
  try {
    logger.groupEnd();
  } catch (e) {
    logger.log('—— log end ——');
  }
}

function getFormattedTime () {
  var time = new Date();
  return (" @ " + (pad(time.getHours(), 2)) + ":" + (pad(time.getMinutes(), 2)) + ":" + (pad(time.getSeconds(), 2)) + "." + (pad(time.getMilliseconds(), 3)))
}

function repeat (str, times) {
  return (new Array(times + 1)).join(str)
}

function pad (num, maxLength) {
  return repeat('0', maxLength - num.toString().length) + num
}

var index = {
  Store: Store,
  install: install,
  version: '3.6.2',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers,
  createLogger: createLogger
};

/* harmony default export */ __webpack_exports__["default"] = (index);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./resources/js/Landing/Cursos/Cursos.vue":
/*!************************************************!*\
  !*** ./resources/js/Landing/Cursos/Cursos.vue ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Cursos_vue_vue_type_template_id_0a1453e9_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Cursos.vue?vue&type=template&id=0a1453e9&scoped=true& */ "./resources/js/Landing/Cursos/Cursos.vue?vue&type=template&id=0a1453e9&scoped=true&");
/* harmony import */ var _Cursos_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Cursos.vue?vue&type=script&lang=js& */ "./resources/js/Landing/Cursos/Cursos.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Cursos_vue_vue_type_style_index_0_id_0a1453e9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css& */ "./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Cursos_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Cursos_vue_vue_type_template_id_0a1453e9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Cursos_vue_vue_type_template_id_0a1453e9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "0a1453e9",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/Cursos/Cursos.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/Cursos/Cursos.vue?vue&type=script&lang=js&":
/*!*************************************************************************!*\
  !*** ./resources/js/Landing/Cursos/Cursos.vue?vue&type=script&lang=js& ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./Cursos.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css&":
/*!*********************************************************************************************************!*\
  !*** ./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css& ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_style_index_0_id_0a1453e9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/style-loader!../../../../node_modules/css-loader??ref--6-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--6-2!../../../../node_modules/vue-loader/lib??vue-loader-options!./Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_style_index_0_id_0a1453e9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_style_index_0_id_0a1453e9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_style_index_0_id_0a1453e9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_style_index_0_id_0a1453e9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "./resources/js/Landing/Cursos/Cursos.vue?vue&type=template&id=0a1453e9&scoped=true&":
/*!*******************************************************************************************!*\
  !*** ./resources/js/Landing/Cursos/Cursos.vue?vue&type=template&id=0a1453e9&scoped=true& ***!
  \*******************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_template_id_0a1453e9_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./Cursos.vue?vue&type=template&id=0a1453e9&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=template&id=0a1453e9&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_template_id_0a1453e9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_template_id_0a1453e9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/Cursos/Show.vue":
/*!**********************************************!*\
  !*** ./resources/js/Landing/Cursos/Show.vue ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Show_vue_vue_type_template_id_6e45ef0f_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Show.vue?vue&type=template&id=6e45ef0f&scoped=true& */ "./resources/js/Landing/Cursos/Show.vue?vue&type=template&id=6e45ef0f&scoped=true&");
/* harmony import */ var _Show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Show.vue?vue&type=script&lang=js& */ "./resources/js/Landing/Cursos/Show.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Show_vue_vue_type_style_index_0_id_6e45ef0f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true& */ "./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Show_vue_vue_type_template_id_6e45ef0f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Show_vue_vue_type_template_id_6e45ef0f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "6e45ef0f",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/Cursos/Show.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/Cursos/Show.vue?vue&type=script&lang=js&":
/*!***********************************************************************!*\
  !*** ./resources/js/Landing/Cursos/Show.vue?vue&type=script&lang=js& ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./Show.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true&":
/*!********************************************************************************************************!*\
  !*** ./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true& ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_style_index_0_id_6e45ef0f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/style-loader!../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_style_index_0_id_6e45ef0f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_style_index_0_id_6e45ef0f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_style_index_0_id_6e45ef0f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_style_index_0_id_6e45ef0f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "./resources/js/Landing/Cursos/Show.vue?vue&type=template&id=6e45ef0f&scoped=true&":
/*!*****************************************************************************************!*\
  !*** ./resources/js/Landing/Cursos/Show.vue?vue&type=template&id=6e45ef0f&scoped=true& ***!
  \*****************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_template_id_6e45ef0f_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./Show.vue?vue&type=template&id=6e45ef0f&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=template&id=6e45ef0f&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_template_id_6e45ef0f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_template_id_6e45ef0f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/Membresia/show.vue":
/*!*************************************************!*\
  !*** ./resources/js/Landing/Membresia/show.vue ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _show_vue_vue_type_template_id_3a5f66d2_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./show.vue?vue&type=template&id=3a5f66d2&scoped=true& */ "./resources/js/Landing/Membresia/show.vue?vue&type=template&id=3a5f66d2&scoped=true&");
/* harmony import */ var _show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./show.vue?vue&type=script&lang=js& */ "./resources/js/Landing/Membresia/show.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _show_vue_vue_type_style_index_0_id_3a5f66d2_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true& */ "./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _show_vue_vue_type_template_id_3a5f66d2_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _show_vue_vue_type_template_id_3a5f66d2_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "3a5f66d2",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/Membresia/show.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/Membresia/show.vue?vue&type=script&lang=js&":
/*!**************************************************************************!*\
  !*** ./resources/js/Landing/Membresia/show.vue?vue&type=script&lang=js& ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./show.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true&":
/*!***********************************************************************************************************!*\
  !*** ./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true& ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_style_index_0_id_3a5f66d2_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/style-loader!../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_style_index_0_id_3a5f66d2_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_style_index_0_id_3a5f66d2_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_style_index_0_id_3a5f66d2_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_style_index_0_id_3a5f66d2_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "./resources/js/Landing/Membresia/show.vue?vue&type=template&id=3a5f66d2&scoped=true&":
/*!********************************************************************************************!*\
  !*** ./resources/js/Landing/Membresia/show.vue?vue&type=template&id=3a5f66d2&scoped=true& ***!
  \********************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_template_id_3a5f66d2_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./show.vue?vue&type=template&id=3a5f66d2&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=template&id=3a5f66d2&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_template_id_3a5f66d2_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_template_id_3a5f66d2_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/checkpayment.vue":
/*!************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/checkpayment.vue ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _checkpayment_vue_vue_type_template_id_6feb5108_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./checkpayment.vue?vue&type=template&id=6feb5108&scoped=true& */ "./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=template&id=6feb5108&scoped=true&");
/* harmony import */ var _checkpayment_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./checkpayment.vue?vue&type=script&lang=js& */ "./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _checkpayment_vue_vue_type_style_index_0_id_6feb5108_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true& */ "./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _checkpayment_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _checkpayment_vue_vue_type_template_id_6feb5108_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _checkpayment_vue_vue_type_template_id_6feb5108_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "6feb5108",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/PaymentUtils/checkpayment.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=script&lang=js&":
/*!*************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./checkpayment.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true&":
/*!**********************************************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true& ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_style_index_0_id_6feb5108_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/style-loader!../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_style_index_0_id_6feb5108_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_style_index_0_id_6feb5108_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_style_index_0_id_6feb5108_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_style_index_0_id_6feb5108_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=template&id=6feb5108&scoped=true&":
/*!*******************************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=template&id=6feb5108&scoped=true& ***!
  \*******************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_template_id_6feb5108_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./checkpayment.vue?vue&type=template&id=6feb5108&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=template&id=6feb5108&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_template_id_6feb5108_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_template_id_6feb5108_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/paymetprocess.vue":
/*!*************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/paymetprocess.vue ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _paymetprocess_vue_vue_type_template_id_107001ad_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paymetprocess.vue?vue&type=template&id=107001ad&scoped=true& */ "./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=template&id=107001ad&scoped=true&");
/* harmony import */ var _paymetprocess_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./paymetprocess.vue?vue&type=script&lang=js& */ "./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _paymetprocess_vue_vue_type_style_index_0_id_107001ad_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true& */ "./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _paymetprocess_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _paymetprocess_vue_vue_type_template_id_107001ad_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _paymetprocess_vue_vue_type_template_id_107001ad_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "107001ad",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/PaymentUtils/paymetprocess.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=script&lang=js&":
/*!**************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./paymetprocess.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true&":
/*!***********************************************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true& ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_style_index_0_id_107001ad_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/style-loader!../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_style_index_0_id_107001ad_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_style_index_0_id_107001ad_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_style_index_0_id_107001ad_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_style_index_0_id_107001ad_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=template&id=107001ad&scoped=true&":
/*!********************************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=template&id=107001ad&scoped=true& ***!
  \********************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_template_id_107001ad_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./paymetprocess.vue?vue&type=template&id=107001ad&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=template&id=107001ad&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_template_id_107001ad_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_template_id_107001ad_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/Templades/Footer/footer.vue":
/*!**********************************************************!*\
  !*** ./resources/js/Landing/Templades/Footer/footer.vue ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _footer_vue_vue_type_template_id_7ca0f343_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./footer.vue?vue&type=template&id=7ca0f343&scoped=true& */ "./resources/js/Landing/Templades/Footer/footer.vue?vue&type=template&id=7ca0f343&scoped=true&");
/* harmony import */ var _footer_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./footer.vue?vue&type=script&lang=js& */ "./resources/js/Landing/Templades/Footer/footer.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _footer_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _footer_vue_vue_type_template_id_7ca0f343_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _footer_vue_vue_type_template_id_7ca0f343_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "7ca0f343",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/Templades/Footer/footer.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/Templades/Footer/footer.vue?vue&type=script&lang=js&":
/*!***********************************************************************************!*\
  !*** ./resources/js/Landing/Templades/Footer/footer.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_footer_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/babel-loader/lib??ref--4-0!../../../../../node_modules/vue-loader/lib??vue-loader-options!./footer.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_footer_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/Templades/Footer/footer.vue?vue&type=template&id=7ca0f343&scoped=true&":
/*!*****************************************************************************************************!*\
  !*** ./resources/js/Landing/Templades/Footer/footer.vue?vue&type=template&id=7ca0f343&scoped=true& ***!
  \*****************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_footer_vue_vue_type_template_id_7ca0f343_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../node_modules/vue-loader/lib??vue-loader-options!./footer.vue?vue&type=template&id=7ca0f343&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer.vue?vue&type=template&id=7ca0f343&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_footer_vue_vue_type_template_id_7ca0f343_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_footer_vue_vue_type_template_id_7ca0f343_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/Templades/Footer/footer2.vue":
/*!***********************************************************!*\
  !*** ./resources/js/Landing/Templades/Footer/footer2.vue ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _footer2_vue_vue_type_template_id_17951e7f_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./footer2.vue?vue&type=template&id=17951e7f&scoped=true& */ "./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=template&id=17951e7f&scoped=true&");
/* harmony import */ var _footer2_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./footer2.vue?vue&type=script&lang=js& */ "./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _footer2_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _footer2_vue_vue_type_template_id_17951e7f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _footer2_vue_vue_type_template_id_17951e7f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "17951e7f",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/Templades/Footer/footer2.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=script&lang=js&":
/*!************************************************************************************!*\
  !*** ./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=script&lang=js& ***!
  \************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_footer2_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/babel-loader/lib??ref--4-0!../../../../../node_modules/vue-loader/lib??vue-loader-options!./footer2.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_footer2_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=template&id=17951e7f&scoped=true&":
/*!******************************************************************************************************!*\
  !*** ./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=template&id=17951e7f&scoped=true& ***!
  \******************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_footer2_vue_vue_type_template_id_17951e7f_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../node_modules/vue-loader/lib??vue-loader-options!./footer2.vue?vue&type=template&id=17951e7f&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=template&id=17951e7f&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_footer2_vue_vue_type_template_id_17951e7f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_footer2_vue_vue_type_template_id_17951e7f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vuex */ "./node_modules/vuex/dist/vuex.esm.js");
__webpack_require__(/*! ./bootstrap */ "./resources/js/bootstrap.js");

window.Vue = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.common.js");

Vue.use(vuex__WEBPACK_IMPORTED_MODULE_0__["default"]);
Vue.component('footer-component', __webpack_require__(/*! ./Landing/Templades/Footer/footer */ "./resources/js/Landing/Templades/Footer/footer.vue")["default"]);
Vue.component('footerdos-component', __webpack_require__(/*! ./Landing/Templades/Footer/footer2 */ "./resources/js/Landing/Templades/Footer/footer2.vue")["default"]);
Vue.component('cursos-component', __webpack_require__(/*! ./Landing/Cursos/Cursos */ "./resources/js/Landing/Cursos/Cursos.vue")["default"]);
Vue.component('curso-show-component', __webpack_require__(/*! ./Landing/Cursos/Show */ "./resources/js/Landing/Cursos/Show.vue")["default"]);
Vue.component('membresia-show-component', __webpack_require__(/*! ./Landing/Membresia/show */ "./resources/js/Landing/Membresia/show.vue")["default"]);
Vue.component('payment-collase', __webpack_require__(/*! ./Landing/PaymentUtils/checkpayment */ "./resources/js/Landing/PaymentUtils/checkpayment.vue")["default"]);
Vue.component('proccess', __webpack_require__(/*! ./Landing/PaymentUtils/paymetprocess */ "./resources/js/Landing/PaymentUtils/paymetprocess.vue")["default"]);
var store = new vuex__WEBPACK_IMPORTED_MODULE_0__["default"].Store({
  state: {
    user: null,
    paymentselected: null
  },
  mutations: {
    setUser: function setUser(state, payload) {
      state.user = payload.user;
    },
    setPayment: function setPayment(state, payment) {
      state.paymentselected = payment;
    }
  },
  getters: {}
});
var app = new Vue({
  el: '#app',
  store: store
});

/***/ }),

/***/ "./resources/js/bootstrap.js":
/*!***********************************!*\
  !*** ./resources/js/bootstrap.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

window._ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/**
 * We'll load jQuery and the Bootstrap jQuery plugin which provides support
 * for JavaScript based Bootstrap features such as modals and tabs. This
 * code may be modified to fit the specific needs of your application.
 */

try {
  window.Popper = __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js")["default"];
  window.$ = window.jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

  __webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.js");
} catch (e) {}
/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */


window.axios = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */
// import Echo from 'laravel-echo';
// window.Pusher = require('pusher-js');
// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: process.env.MIX_PUSHER_APP_KEY,
//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,
//     encrypted: true
// });

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 0:
/*!*************************************************************!*\
  !*** multi ./resources/js/app.js ./resources/sass/app.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! c:\laragon\www\lingua-planet\resources\js\app.js */"./resources/js/app.js");
module.exports = __webpack_require__(/*! c:\laragon\www\lingua-planet\resources\sass\app.scss */"./resources/sass/app.scss");


/***/ })

/******/ });