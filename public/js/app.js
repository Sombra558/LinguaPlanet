/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];
  var defaultToConfig2Keys = [
    'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',
    'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath'
  ];

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
    if (utils.isObject(config2[prop])) {
      config[prop] = utils.deepMerge(config1[prop], config2[prop]);
    } else if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (utils.isObject(config1[prop])) {
      config[prop] = utils.deepMerge(config1[prop]);
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys);

  var otherKeys = Object
    .keys(config2)
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function deepMerge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = deepMerge(result[key], val);
    } else if (typeof val === 'object') {
      result[key] = deepMerge({}, val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  deepMerge: deepMerge,
  extend: extend,
  trim: trim
};


/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=script&lang=js&":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Cursos.vue?vue&type=script&lang=js& ***!
  \*********************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "cursos-component",
  props: ['idiomas'],
  mounted: function mounted() {
    $("path.flag").on("mouseenter mouseleave", function (e) {
      var flag = e.target;

      switch (e.type) {
        case 'mouseenter':
          document.querySelector("path.country.".concat(flag.classList[1])).setAttribute('fill', '#E4032F');
          document.querySelector("path.country.".concat(flag.classList[1])).setAttribute('stroke', 'white');
          break;

        case 'mouseleave':
          document.querySelector("path.country.".concat(flag.classList[1])).setAttribute('fill', '#FAB500');
          document.querySelector("path.country.".concat(flag.classList[1])).removeAttribute('stroke');
          break;

        default:
          break;
      }
    });
    var thisComponent = this;
    $("path.country").on('click', function (e) {
      var language = e.currentTarget.dataset.language;
      var idioma = thisComponent.idiomas.find(function (idioma) {
        return idioma.diminutivo === language;
      });
      window.location.href = "/cursos/".concat(idioma.nombreURL);
    });
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=script&lang=js&":
/*!*******************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Show.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "curso-show-component",
  props: ["idioma", "idiomas"],
  data: function data() {
    return {
      keysArray: Object.keys(this.idioma.membresias)
    };
  },
  methods: {
    offsetCarousel: function offsetCarousel(start) {
      return this.idioma.membresias.slice(start, parseInt(start) + 3);
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=script&lang=js&":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Membresia/show.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "menbresua-sow",
  props: ['membresia'],
  data: function data() {
    return {
      keysArray: Object.keys(this.membresia.planes),
      screenWidth: window.innerWidth,
      limit: 3
    };
  },
  mounted: function mounted() {
    var thisComponent = this;

    window.onresize = function () {
      return thisComponent.screenWidth = window.innerWidth;
    };
  },
  methods: {
    offsetCarousel: function offsetCarousel(start) {
      if (this.screenWidth <= 768) this.limit = 1;else if (this.screenWidth <= 1024) this.limit = 2;else this.limit = 3;
      return this.membresia.planes.slice(start, parseInt(start) + this.limit);
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue?vue&type=script&lang=js&":
/*!**************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vuex */ "./node_modules/vuex/dist/vuex.esm.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  name: "articulos",
  props: ['plan'],
  computed: _objectSpread(_objectSpread({}, Object(vuex__WEBPACK_IMPORTED_MODULE_0__["mapState"])({
    cupon: function cupon(state) {
      return state.cupon;
    }
  })), {}, {
    precio: function precio() {
      var precio = this.plan.precio;

      if (this.cupon) {
        if (this.cupon.tipo_descuento === 'Moneda') {
          return Number(precio - this.cupon.valor).toFixed(1);
        } else {
          return Number(precio - precio * this.cupon.valor / 100).toFixed(1);
        }
      } else {
        return precio.toFixed(1);
      }
    }
  })
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=script&lang=js&":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=script&lang=js& ***!
  \*********************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "payment-check-selected",
  data: function data() {
    return {
      paymentmetod: null
    };
  },
  methods: {
    definir: function definir(id) {
      this.paymentmetod = id;
      this.$store.commit("setPayment", id);
      $("#" + id).collapse("show");
    },
    cambiar: function cambiar() {
      $("#" + this.paymentmetod).collapse("hide");
      this.$store.commit("setPayment", null);
      this.paymentmetod = null;
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/cuponmodal.vue?vue&type=script&lang=js&":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/cuponmodal.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "cupon-modal",
  props: ['plan'],
  data: function data() {
    return {
      cupon: null,
      estadocupon: false
    };
  },
  methods: {
    aplicar: function aplicar(cupon) {
      var _this = this;

      if (this.estadocupon === false) {
        var url = "/aplicar-cupon/".concat(cupon, "/").concat(this.plan.id, "/").concat(this.plan.membresia_id);
        axios.get(url).then(function (result) {
          console.log(result.data);

          if (result.data != '') {
            _this.$store.commit("setCupon", result.data);

            _this.estadocupon = true;
            $("#exampleModal").modal("hide");
          }
        })["catch"](function (err) {
          console.log(err);
        });
      } else {
        console.log('ya se aplico cupon');
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=script&lang=js&":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vuex */ "./node_modules/vuex/dist/vuex.esm.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  name: "process-component",
  props: ['accion'],
  computed: _objectSpread(_objectSpread({}, Object(vuex__WEBPACK_IMPORTED_MODULE_0__["mapState"])({
    paymentselected: function paymentselected(state) {
      return state.paymentselected;
    }
  })), {}, {
    process: function process() {
      var process = 33.3;

      if (this.accion === 'completado') {
        process = 100;
        return process;
      } else {
        if (this.paymentselected) {
          process = 66.6;
          return process;
        } else {
          return process;
        }
      }
    }
  })
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/precio.vue?vue&type=script&lang=js&":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/precio.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vuex */ "./node_modules/vuex/dist/vuex.esm.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
  name: "articulos",
  props: ['plan'],
  computed: _objectSpread(_objectSpread({}, Object(vuex__WEBPACK_IMPORTED_MODULE_0__["mapState"])({
    cupon: function cupon(state) {
      return state.cupon;
    }
  })), {}, {
    precio: function precio() {
      var precio = this.plan.precio;

      if (this.cupon) {
        if (this.cupon.tipo_descuento === 'Moneda') {
          return Number(precio - this.cupon.valor).toFixed(1);
        } else {
          return Number(precio - precio * this.cupon.valor / 100).toFixed(1);
        }
      } else {
        return precio.toFixed(1);
      }
    }
  })
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer.vue?vue&type=script&lang=js&":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Templades/Footer/footer.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "footer"
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=script&lang=js&":
/*!********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=script&lang=js& ***!
  \********************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
/* harmony default export */ __webpack_exports__["default"] = ({
  name: "footer-dos"
});

/***/ }),

/***/ "./node_modules/bootstrap/dist/js/bootstrap.js":
/*!*****************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
  * Bootstrap v4.6.0 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
(function (global, factory) {
   true ? factory(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js")) :
  undefined;
}(this, (function (exports, $, Popper) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var $__default = /*#__PURE__*/_interopDefaultLegacy($);
  var Popper__default = /*#__PURE__*/_interopDefaultLegacy(Popper);

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.6.0): util.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Private TransitionEnd Helpers
   * ------------------------------------------------------------------------
   */

  var TRANSITION_END = 'transitionend';
  var MAX_UID = 1000000;
  var MILLISECONDS_MULTIPLIER = 1000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

  function toType(obj) {
    if (obj === null || typeof obj === 'undefined') {
      return "" + obj;
    }

    return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
  }

  function getSpecialTransitionEndEvent() {
    return {
      bindType: TRANSITION_END,
      delegateType: TRANSITION_END,
      handle: function handle(event) {
        if ($__default['default'](event.target).is(this)) {
          return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
        }

        return undefined;
      }
    };
  }

  function transitionEndEmulator(duration) {
    var _this = this;

    var called = false;
    $__default['default'](this).one(Util.TRANSITION_END, function () {
      called = true;
    });
    setTimeout(function () {
      if (!called) {
        Util.triggerTransitionEnd(_this);
      }
    }, duration);
    return this;
  }

  function setTransitionEndSupport() {
    $__default['default'].fn.emulateTransitionEnd = transitionEndEmulator;
    $__default['default'].event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
  }
  /**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */


  var Util = {
    TRANSITION_END: 'bsTransitionEnd',
    getUID: function getUID(prefix) {
      do {
        prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
      } while (document.getElementById(prefix));

      return prefix;
    },
    getSelectorFromElement: function getSelectorFromElement(element) {
      var selector = element.getAttribute('data-target');

      if (!selector || selector === '#') {
        var hrefAttr = element.getAttribute('href');
        selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : '';
      }

      try {
        return document.querySelector(selector) ? selector : null;
      } catch (_) {
        return null;
      }
    },
    getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {
      if (!element) {
        return 0;
      } // Get transition-duration of the element


      var transitionDuration = $__default['default'](element).css('transition-duration');
      var transitionDelay = $__default['default'](element).css('transition-delay');
      var floatTransitionDuration = parseFloat(transitionDuration);
      var floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

      if (!floatTransitionDuration && !floatTransitionDelay) {
        return 0;
      } // If multiple durations are defined, take the first


      transitionDuration = transitionDuration.split(',')[0];
      transitionDelay = transitionDelay.split(',')[0];
      return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
    },
    reflow: function reflow(element) {
      return element.offsetHeight;
    },
    triggerTransitionEnd: function triggerTransitionEnd(element) {
      $__default['default'](element).trigger(TRANSITION_END);
    },
    supportsTransitionEnd: function supportsTransitionEnd() {
      return Boolean(TRANSITION_END);
    },
    isElement: function isElement(obj) {
      return (obj[0] || obj).nodeType;
    },
    typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
      for (var property in configTypes) {
        if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
          var expectedTypes = configTypes[property];
          var value = config[property];
          var valueType = value && Util.isElement(value) ? 'element' : toType(value);

          if (!new RegExp(expectedTypes).test(valueType)) {
            throw new Error(componentName.toUpperCase() + ": " + ("Option \"" + property + "\" provided type \"" + valueType + "\" ") + ("but expected type \"" + expectedTypes + "\"."));
          }
        }
      }
    },
    findShadowRoot: function findShadowRoot(element) {
      if (!document.documentElement.attachShadow) {
        return null;
      } // Can find the shadow root otherwise it'll return the document


      if (typeof element.getRootNode === 'function') {
        var root = element.getRootNode();
        return root instanceof ShadowRoot ? root : null;
      }

      if (element instanceof ShadowRoot) {
        return element;
      } // when we don't find a shadow root


      if (!element.parentNode) {
        return null;
      }

      return Util.findShadowRoot(element.parentNode);
    },
    jQueryDetection: function jQueryDetection() {
      if (typeof $__default['default'] === 'undefined') {
        throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.');
      }

      var version = $__default['default'].fn.jquery.split(' ')[0].split('.');
      var minMajor = 1;
      var ltMajor = 2;
      var minMinor = 9;
      var minPatch = 1;
      var maxMajor = 4;

      if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
        throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');
      }
    }
  };
  Util.jQueryDetection();
  setTransitionEndSupport();

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'alert';
  var VERSION = '4.6.0';
  var DATA_KEY = 'bs.alert';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $__default['default'].fn[NAME];
  var SELECTOR_DISMISS = '[data-dismiss="alert"]';
  var EVENT_CLOSE = "close" + EVENT_KEY;
  var EVENT_CLOSED = "closed" + EVENT_KEY;
  var EVENT_CLICK_DATA_API = "click" + EVENT_KEY + DATA_API_KEY;
  var CLASS_NAME_ALERT = 'alert';
  var CLASS_NAME_FADE = 'fade';
  var CLASS_NAME_SHOW = 'show';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Alert = /*#__PURE__*/function () {
    function Alert(element) {
      this._element = element;
    } // Getters


    var _proto = Alert.prototype;

    // Public
    _proto.close = function close(element) {
      var rootElement = this._element;

      if (element) {
        rootElement = this._getRootElement(element);
      }

      var customEvent = this._triggerCloseEvent(rootElement);

      if (customEvent.isDefaultPrevented()) {
        return;
      }

      this._removeElement(rootElement);
    };

    _proto.dispose = function dispose() {
      $__default['default'].removeData(this._element, DATA_KEY);
      this._element = null;
    } // Private
    ;

    _proto._getRootElement = function _getRootElement(element) {
      var selector = Util.getSelectorFromElement(element);
      var parent = false;

      if (selector) {
        parent = document.querySelector(selector);
      }

      if (!parent) {
        parent = $__default['default'](element).closest("." + CLASS_NAME_ALERT)[0];
      }

      return parent;
    };

    _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
      var closeEvent = $__default['default'].Event(EVENT_CLOSE);
      $__default['default'](element).trigger(closeEvent);
      return closeEvent;
    };

    _proto._removeElement = function _removeElement(element) {
      var _this = this;

      $__default['default'](element).removeClass(CLASS_NAME_SHOW);

      if (!$__default['default'](element).hasClass(CLASS_NAME_FADE)) {
        this._destroyElement(element);

        return;
      }

      var transitionDuration = Util.getTransitionDurationFromElement(element);
      $__default['default'](element).one(Util.TRANSITION_END, function (event) {
        return _this._destroyElement(element, event);
      }).emulateTransitionEnd(transitionDuration);
    };

    _proto._destroyElement = function _destroyElement(element) {
      $__default['default'](element).detach().trigger(EVENT_CLOSED).remove();
    } // Static
    ;

    Alert._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $__default['default'](this);
        var data = $element.data(DATA_KEY);

        if (!data) {
          data = new Alert(this);
          $element.data(DATA_KEY, data);
        }

        if (config === 'close') {
          data[config](this);
        }
      });
    };

    Alert._handleDismiss = function _handleDismiss(alertInstance) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }

        alertInstance.close(this);
      };
    };

    _createClass(Alert, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }]);

    return Alert;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_CLICK_DATA_API, SELECTOR_DISMISS, Alert._handleDismiss(new Alert()));
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME] = Alert._jQueryInterface;
  $__default['default'].fn[NAME].Constructor = Alert;

  $__default['default'].fn[NAME].noConflict = function () {
    $__default['default'].fn[NAME] = JQUERY_NO_CONFLICT;
    return Alert._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$1 = 'button';
  var VERSION$1 = '4.6.0';
  var DATA_KEY$1 = 'bs.button';
  var EVENT_KEY$1 = "." + DATA_KEY$1;
  var DATA_API_KEY$1 = '.data-api';
  var JQUERY_NO_CONFLICT$1 = $__default['default'].fn[NAME$1];
  var CLASS_NAME_ACTIVE = 'active';
  var CLASS_NAME_BUTTON = 'btn';
  var CLASS_NAME_FOCUS = 'focus';
  var SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^="button"]';
  var SELECTOR_DATA_TOGGLES = '[data-toggle="buttons"]';
  var SELECTOR_DATA_TOGGLE = '[data-toggle="button"]';
  var SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle="buttons"] .btn';
  var SELECTOR_INPUT = 'input:not([type="hidden"])';
  var SELECTOR_ACTIVE = '.active';
  var SELECTOR_BUTTON = '.btn';
  var EVENT_CLICK_DATA_API$1 = "click" + EVENT_KEY$1 + DATA_API_KEY$1;
  var EVENT_FOCUS_BLUR_DATA_API = "focus" + EVENT_KEY$1 + DATA_API_KEY$1 + " " + ("blur" + EVENT_KEY$1 + DATA_API_KEY$1);
  var EVENT_LOAD_DATA_API = "load" + EVENT_KEY$1 + DATA_API_KEY$1;
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Button = /*#__PURE__*/function () {
    function Button(element) {
      this._element = element;
      this.shouldAvoidTriggerChange = false;
    } // Getters


    var _proto = Button.prototype;

    // Public
    _proto.toggle = function toggle() {
      var triggerChangeEvent = true;
      var addAriaPressed = true;
      var rootElement = $__default['default'](this._element).closest(SELECTOR_DATA_TOGGLES)[0];

      if (rootElement) {
        var input = this._element.querySelector(SELECTOR_INPUT);

        if (input) {
          if (input.type === 'radio') {
            if (input.checked && this._element.classList.contains(CLASS_NAME_ACTIVE)) {
              triggerChangeEvent = false;
            } else {
              var activeElement = rootElement.querySelector(SELECTOR_ACTIVE);

              if (activeElement) {
                $__default['default'](activeElement).removeClass(CLASS_NAME_ACTIVE);
              }
            }
          }

          if (triggerChangeEvent) {
            // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input
            if (input.type === 'checkbox' || input.type === 'radio') {
              input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE);
            }

            if (!this.shouldAvoidTriggerChange) {
              $__default['default'](input).trigger('change');
            }
          }

          input.focus();
          addAriaPressed = false;
        }
      }

      if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {
        if (addAriaPressed) {
          this._element.setAttribute('aria-pressed', !this._element.classList.contains(CLASS_NAME_ACTIVE));
        }

        if (triggerChangeEvent) {
          $__default['default'](this._element).toggleClass(CLASS_NAME_ACTIVE);
        }
      }
    };

    _proto.dispose = function dispose() {
      $__default['default'].removeData(this._element, DATA_KEY$1);
      this._element = null;
    } // Static
    ;

    Button._jQueryInterface = function _jQueryInterface(config, avoidTriggerChange) {
      return this.each(function () {
        var $element = $__default['default'](this);
        var data = $element.data(DATA_KEY$1);

        if (!data) {
          data = new Button(this);
          $element.data(DATA_KEY$1, data);
        }

        data.shouldAvoidTriggerChange = avoidTriggerChange;

        if (config === 'toggle') {
          data[config]();
        }
      });
    };

    _createClass(Button, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$1;
      }
    }]);

    return Button;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE_CARROT, function (event) {
    var button = event.target;
    var initialButton = button;

    if (!$__default['default'](button).hasClass(CLASS_NAME_BUTTON)) {
      button = $__default['default'](button).closest(SELECTOR_BUTTON)[0];
    }

    if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {
      event.preventDefault(); // work around Firefox bug #1540995
    } else {
      var inputBtn = button.querySelector(SELECTOR_INPUT);

      if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {
        event.preventDefault(); // work around Firefox bug #1540995

        return;
      }

      if (initialButton.tagName === 'INPUT' || button.tagName !== 'LABEL') {
        Button._jQueryInterface.call($__default['default'](button), 'toggle', initialButton.tagName === 'INPUT');
      }
    }
  }).on(EVENT_FOCUS_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, function (event) {
    var button = $__default['default'](event.target).closest(SELECTOR_BUTTON)[0];
    $__default['default'](button).toggleClass(CLASS_NAME_FOCUS, /^focus(in)?$/.test(event.type));
  });
  $__default['default'](window).on(EVENT_LOAD_DATA_API, function () {
    // ensure correct active class is set to match the controls' actual values/states
    // find all checkboxes/readio buttons inside data-toggle groups
    var buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS));

    for (var i = 0, len = buttons.length; i < len; i++) {
      var button = buttons[i];
      var input = button.querySelector(SELECTOR_INPUT);

      if (input.checked || input.hasAttribute('checked')) {
        button.classList.add(CLASS_NAME_ACTIVE);
      } else {
        button.classList.remove(CLASS_NAME_ACTIVE);
      }
    } // find all button toggles


    buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE));

    for (var _i = 0, _len = buttons.length; _i < _len; _i++) {
      var _button = buttons[_i];

      if (_button.getAttribute('aria-pressed') === 'true') {
        _button.classList.add(CLASS_NAME_ACTIVE);
      } else {
        _button.classList.remove(CLASS_NAME_ACTIVE);
      }
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$1] = Button._jQueryInterface;
  $__default['default'].fn[NAME$1].Constructor = Button;

  $__default['default'].fn[NAME$1].noConflict = function () {
    $__default['default'].fn[NAME$1] = JQUERY_NO_CONFLICT$1;
    return Button._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$2 = 'carousel';
  var VERSION$2 = '4.6.0';
  var DATA_KEY$2 = 'bs.carousel';
  var EVENT_KEY$2 = "." + DATA_KEY$2;
  var DATA_API_KEY$2 = '.data-api';
  var JQUERY_NO_CONFLICT$2 = $__default['default'].fn[NAME$2];
  var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

  var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

  var SWIPE_THRESHOLD = 40;
  var Default = {
    interval: 5000,
    keyboard: true,
    slide: false,
    pause: 'hover',
    wrap: true,
    touch: true
  };
  var DefaultType = {
    interval: '(number|boolean)',
    keyboard: 'boolean',
    slide: '(boolean|string)',
    pause: '(string|boolean)',
    wrap: 'boolean',
    touch: 'boolean'
  };
  var DIRECTION_NEXT = 'next';
  var DIRECTION_PREV = 'prev';
  var DIRECTION_LEFT = 'left';
  var DIRECTION_RIGHT = 'right';
  var EVENT_SLIDE = "slide" + EVENT_KEY$2;
  var EVENT_SLID = "slid" + EVENT_KEY$2;
  var EVENT_KEYDOWN = "keydown" + EVENT_KEY$2;
  var EVENT_MOUSEENTER = "mouseenter" + EVENT_KEY$2;
  var EVENT_MOUSELEAVE = "mouseleave" + EVENT_KEY$2;
  var EVENT_TOUCHSTART = "touchstart" + EVENT_KEY$2;
  var EVENT_TOUCHMOVE = "touchmove" + EVENT_KEY$2;
  var EVENT_TOUCHEND = "touchend" + EVENT_KEY$2;
  var EVENT_POINTERDOWN = "pointerdown" + EVENT_KEY$2;
  var EVENT_POINTERUP = "pointerup" + EVENT_KEY$2;
  var EVENT_DRAG_START = "dragstart" + EVENT_KEY$2;
  var EVENT_LOAD_DATA_API$1 = "load" + EVENT_KEY$2 + DATA_API_KEY$2;
  var EVENT_CLICK_DATA_API$2 = "click" + EVENT_KEY$2 + DATA_API_KEY$2;
  var CLASS_NAME_CAROUSEL = 'carousel';
  var CLASS_NAME_ACTIVE$1 = 'active';
  var CLASS_NAME_SLIDE = 'slide';
  var CLASS_NAME_RIGHT = 'carousel-item-right';
  var CLASS_NAME_LEFT = 'carousel-item-left';
  var CLASS_NAME_NEXT = 'carousel-item-next';
  var CLASS_NAME_PREV = 'carousel-item-prev';
  var CLASS_NAME_POINTER_EVENT = 'pointer-event';
  var SELECTOR_ACTIVE$1 = '.active';
  var SELECTOR_ACTIVE_ITEM = '.active.carousel-item';
  var SELECTOR_ITEM = '.carousel-item';
  var SELECTOR_ITEM_IMG = '.carousel-item img';
  var SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';
  var SELECTOR_INDICATORS = '.carousel-indicators';
  var SELECTOR_DATA_SLIDE = '[data-slide], [data-slide-to]';
  var SELECTOR_DATA_RIDE = '[data-ride="carousel"]';
  var PointerType = {
    TOUCH: 'touch',
    PEN: 'pen'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Carousel = /*#__PURE__*/function () {
    function Carousel(element, config) {
      this._items = null;
      this._interval = null;
      this._activeElement = null;
      this._isPaused = false;
      this._isSliding = false;
      this.touchTimeout = null;
      this.touchStartX = 0;
      this.touchDeltaX = 0;
      this._config = this._getConfig(config);
      this._element = element;
      this._indicatorsElement = this._element.querySelector(SELECTOR_INDICATORS);
      this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
      this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);

      this._addEventListeners();
    } // Getters


    var _proto = Carousel.prototype;

    // Public
    _proto.next = function next() {
      if (!this._isSliding) {
        this._slide(DIRECTION_NEXT);
      }
    };

    _proto.nextWhenVisible = function nextWhenVisible() {
      var $element = $__default['default'](this._element); // Don't call next when the page isn't visible
      // or the carousel or its parent isn't visible

      if (!document.hidden && $element.is(':visible') && $element.css('visibility') !== 'hidden') {
        this.next();
      }
    };

    _proto.prev = function prev() {
      if (!this._isSliding) {
        this._slide(DIRECTION_PREV);
      }
    };

    _proto.pause = function pause(event) {
      if (!event) {
        this._isPaused = true;
      }

      if (this._element.querySelector(SELECTOR_NEXT_PREV)) {
        Util.triggerTransitionEnd(this._element);
        this.cycle(true);
      }

      clearInterval(this._interval);
      this._interval = null;
    };

    _proto.cycle = function cycle(event) {
      if (!event) {
        this._isPaused = false;
      }

      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }

      if (this._config.interval && !this._isPaused) {
        this._updateInterval();

        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
      }
    };

    _proto.to = function to(index) {
      var _this = this;

      this._activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM);

      var activeIndex = this._getItemIndex(this._activeElement);

      if (index > this._items.length - 1 || index < 0) {
        return;
      }

      if (this._isSliding) {
        $__default['default'](this._element).one(EVENT_SLID, function () {
          return _this.to(index);
        });
        return;
      }

      if (activeIndex === index) {
        this.pause();
        this.cycle();
        return;
      }

      var direction = index > activeIndex ? DIRECTION_NEXT : DIRECTION_PREV;

      this._slide(direction, this._items[index]);
    };

    _proto.dispose = function dispose() {
      $__default['default'](this._element).off(EVENT_KEY$2);
      $__default['default'].removeData(this._element, DATA_KEY$2);
      this._items = null;
      this._config = null;
      this._element = null;
      this._interval = null;
      this._isPaused = null;
      this._isSliding = null;
      this._activeElement = null;
      this._indicatorsElement = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default, config);
      Util.typeCheckConfig(NAME$2, config, DefaultType);
      return config;
    };

    _proto._handleSwipe = function _handleSwipe() {
      var absDeltax = Math.abs(this.touchDeltaX);

      if (absDeltax <= SWIPE_THRESHOLD) {
        return;
      }

      var direction = absDeltax / this.touchDeltaX;
      this.touchDeltaX = 0; // swipe left

      if (direction > 0) {
        this.prev();
      } // swipe right


      if (direction < 0) {
        this.next();
      }
    };

    _proto._addEventListeners = function _addEventListeners() {
      var _this2 = this;

      if (this._config.keyboard) {
        $__default['default'](this._element).on(EVENT_KEYDOWN, function (event) {
          return _this2._keydown(event);
        });
      }

      if (this._config.pause === 'hover') {
        $__default['default'](this._element).on(EVENT_MOUSEENTER, function (event) {
          return _this2.pause(event);
        }).on(EVENT_MOUSELEAVE, function (event) {
          return _this2.cycle(event);
        });
      }

      if (this._config.touch) {
        this._addTouchEventListeners();
      }
    };

    _proto._addTouchEventListeners = function _addTouchEventListeners() {
      var _this3 = this;

      if (!this._touchSupported) {
        return;
      }

      var start = function start(event) {
        if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
          _this3.touchStartX = event.originalEvent.clientX;
        } else if (!_this3._pointerEvent) {
          _this3.touchStartX = event.originalEvent.touches[0].clientX;
        }
      };

      var move = function move(event) {
        // ensure swiping with one touch and not pinching
        if (event.originalEvent.touches && event.originalEvent.touches.length > 1) {
          _this3.touchDeltaX = 0;
        } else {
          _this3.touchDeltaX = event.originalEvent.touches[0].clientX - _this3.touchStartX;
        }
      };

      var end = function end(event) {
        if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
          _this3.touchDeltaX = event.originalEvent.clientX - _this3.touchStartX;
        }

        _this3._handleSwipe();

        if (_this3._config.pause === 'hover') {
          // If it's a touch-enabled device, mouseenter/leave are fired as
          // part of the mouse compatibility events on first tap - the carousel
          // would stop cycling until user tapped out of it;
          // here, we listen for touchend, explicitly pause the carousel
          // (as if it's the second time we tap on it, mouseenter compat event
          // is NOT fired) and after a timeout (to allow for mouse compatibility
          // events to fire) we explicitly restart cycling
          _this3.pause();

          if (_this3.touchTimeout) {
            clearTimeout(_this3.touchTimeout);
          }

          _this3.touchTimeout = setTimeout(function (event) {
            return _this3.cycle(event);
          }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval);
        }
      };

      $__default['default'](this._element.querySelectorAll(SELECTOR_ITEM_IMG)).on(EVENT_DRAG_START, function (e) {
        return e.preventDefault();
      });

      if (this._pointerEvent) {
        $__default['default'](this._element).on(EVENT_POINTERDOWN, function (event) {
          return start(event);
        });
        $__default['default'](this._element).on(EVENT_POINTERUP, function (event) {
          return end(event);
        });

        this._element.classList.add(CLASS_NAME_POINTER_EVENT);
      } else {
        $__default['default'](this._element).on(EVENT_TOUCHSTART, function (event) {
          return start(event);
        });
        $__default['default'](this._element).on(EVENT_TOUCHMOVE, function (event) {
          return move(event);
        });
        $__default['default'](this._element).on(EVENT_TOUCHEND, function (event) {
          return end(event);
        });
      }
    };

    _proto._keydown = function _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }

      switch (event.which) {
        case ARROW_LEFT_KEYCODE:
          event.preventDefault();
          this.prev();
          break;

        case ARROW_RIGHT_KEYCODE:
          event.preventDefault();
          this.next();
          break;
      }
    };

    _proto._getItemIndex = function _getItemIndex(element) {
      this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(SELECTOR_ITEM)) : [];
      return this._items.indexOf(element);
    };

    _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
      var isNextDirection = direction === DIRECTION_NEXT;
      var isPrevDirection = direction === DIRECTION_PREV;

      var activeIndex = this._getItemIndex(activeElement);

      var lastItemIndex = this._items.length - 1;
      var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

      if (isGoingToWrap && !this._config.wrap) {
        return activeElement;
      }

      var delta = direction === DIRECTION_PREV ? -1 : 1;
      var itemIndex = (activeIndex + delta) % this._items.length;
      return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
    };

    _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
      var targetIndex = this._getItemIndex(relatedTarget);

      var fromIndex = this._getItemIndex(this._element.querySelector(SELECTOR_ACTIVE_ITEM));

      var slideEvent = $__default['default'].Event(EVENT_SLIDE, {
        relatedTarget: relatedTarget,
        direction: eventDirectionName,
        from: fromIndex,
        to: targetIndex
      });
      $__default['default'](this._element).trigger(slideEvent);
      return slideEvent;
    };

    _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
      if (this._indicatorsElement) {
        var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(SELECTOR_ACTIVE$1));
        $__default['default'](indicators).removeClass(CLASS_NAME_ACTIVE$1);

        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

        if (nextIndicator) {
          $__default['default'](nextIndicator).addClass(CLASS_NAME_ACTIVE$1);
        }
      }
    };

    _proto._updateInterval = function _updateInterval() {
      var element = this._activeElement || this._element.querySelector(SELECTOR_ACTIVE_ITEM);

      if (!element) {
        return;
      }

      var elementInterval = parseInt(element.getAttribute('data-interval'), 10);

      if (elementInterval) {
        this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
        this._config.interval = elementInterval;
      } else {
        this._config.interval = this._config.defaultInterval || this._config.interval;
      }
    };

    _proto._slide = function _slide(direction, element) {
      var _this4 = this;

      var activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM);

      var activeElementIndex = this._getItemIndex(activeElement);

      var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);

      var nextElementIndex = this._getItemIndex(nextElement);

      var isCycling = Boolean(this._interval);
      var directionalClassName;
      var orderClassName;
      var eventDirectionName;

      if (direction === DIRECTION_NEXT) {
        directionalClassName = CLASS_NAME_LEFT;
        orderClassName = CLASS_NAME_NEXT;
        eventDirectionName = DIRECTION_LEFT;
      } else {
        directionalClassName = CLASS_NAME_RIGHT;
        orderClassName = CLASS_NAME_PREV;
        eventDirectionName = DIRECTION_RIGHT;
      }

      if (nextElement && $__default['default'](nextElement).hasClass(CLASS_NAME_ACTIVE$1)) {
        this._isSliding = false;
        return;
      }

      var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

      if (slideEvent.isDefaultPrevented()) {
        return;
      }

      if (!activeElement || !nextElement) {
        // Some weirdness is happening, so we bail
        return;
      }

      this._isSliding = true;

      if (isCycling) {
        this.pause();
      }

      this._setActiveIndicatorElement(nextElement);

      this._activeElement = nextElement;
      var slidEvent = $__default['default'].Event(EVENT_SLID, {
        relatedTarget: nextElement,
        direction: eventDirectionName,
        from: activeElementIndex,
        to: nextElementIndex
      });

      if ($__default['default'](this._element).hasClass(CLASS_NAME_SLIDE)) {
        $__default['default'](nextElement).addClass(orderClassName);
        Util.reflow(nextElement);
        $__default['default'](activeElement).addClass(directionalClassName);
        $__default['default'](nextElement).addClass(directionalClassName);
        var transitionDuration = Util.getTransitionDurationFromElement(activeElement);
        $__default['default'](activeElement).one(Util.TRANSITION_END, function () {
          $__default['default'](nextElement).removeClass(directionalClassName + " " + orderClassName).addClass(CLASS_NAME_ACTIVE$1);
          $__default['default'](activeElement).removeClass(CLASS_NAME_ACTIVE$1 + " " + orderClassName + " " + directionalClassName);
          _this4._isSliding = false;
          setTimeout(function () {
            return $__default['default'](_this4._element).trigger(slidEvent);
          }, 0);
        }).emulateTransitionEnd(transitionDuration);
      } else {
        $__default['default'](activeElement).removeClass(CLASS_NAME_ACTIVE$1);
        $__default['default'](nextElement).addClass(CLASS_NAME_ACTIVE$1);
        this._isSliding = false;
        $__default['default'](this._element).trigger(slidEvent);
      }

      if (isCycling) {
        this.cycle();
      }
    } // Static
    ;

    Carousel._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $__default['default'](this).data(DATA_KEY$2);

        var _config = _extends({}, Default, $__default['default'](this).data());

        if (typeof config === 'object') {
          _config = _extends({}, _config, config);
        }

        var action = typeof config === 'string' ? config : _config.slide;

        if (!data) {
          data = new Carousel(this, _config);
          $__default['default'](this).data(DATA_KEY$2, data);
        }

        if (typeof config === 'number') {
          data.to(config);
        } else if (typeof action === 'string') {
          if (typeof data[action] === 'undefined') {
            throw new TypeError("No method named \"" + action + "\"");
          }

          data[action]();
        } else if (_config.interval && _config.ride) {
          data.pause();
          data.cycle();
        }
      });
    };

    Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
      var selector = Util.getSelectorFromElement(this);

      if (!selector) {
        return;
      }

      var target = $__default['default'](selector)[0];

      if (!target || !$__default['default'](target).hasClass(CLASS_NAME_CAROUSEL)) {
        return;
      }

      var config = _extends({}, $__default['default'](target).data(), $__default['default'](this).data());

      var slideIndex = this.getAttribute('data-slide-to');

      if (slideIndex) {
        config.interval = false;
      }

      Carousel._jQueryInterface.call($__default['default'](target), config);

      if (slideIndex) {
        $__default['default'](target).data(DATA_KEY$2).to(slideIndex);
      }

      event.preventDefault();
    };

    _createClass(Carousel, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$2;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }]);

    return Carousel;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_CLICK_DATA_API$2, SELECTOR_DATA_SLIDE, Carousel._dataApiClickHandler);
  $__default['default'](window).on(EVENT_LOAD_DATA_API$1, function () {
    var carousels = [].slice.call(document.querySelectorAll(SELECTOR_DATA_RIDE));

    for (var i = 0, len = carousels.length; i < len; i++) {
      var $carousel = $__default['default'](carousels[i]);

      Carousel._jQueryInterface.call($carousel, $carousel.data());
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$2] = Carousel._jQueryInterface;
  $__default['default'].fn[NAME$2].Constructor = Carousel;

  $__default['default'].fn[NAME$2].noConflict = function () {
    $__default['default'].fn[NAME$2] = JQUERY_NO_CONFLICT$2;
    return Carousel._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$3 = 'collapse';
  var VERSION$3 = '4.6.0';
  var DATA_KEY$3 = 'bs.collapse';
  var EVENT_KEY$3 = "." + DATA_KEY$3;
  var DATA_API_KEY$3 = '.data-api';
  var JQUERY_NO_CONFLICT$3 = $__default['default'].fn[NAME$3];
  var Default$1 = {
    toggle: true,
    parent: ''
  };
  var DefaultType$1 = {
    toggle: 'boolean',
    parent: '(string|element)'
  };
  var EVENT_SHOW = "show" + EVENT_KEY$3;
  var EVENT_SHOWN = "shown" + EVENT_KEY$3;
  var EVENT_HIDE = "hide" + EVENT_KEY$3;
  var EVENT_HIDDEN = "hidden" + EVENT_KEY$3;
  var EVENT_CLICK_DATA_API$3 = "click" + EVENT_KEY$3 + DATA_API_KEY$3;
  var CLASS_NAME_SHOW$1 = 'show';
  var CLASS_NAME_COLLAPSE = 'collapse';
  var CLASS_NAME_COLLAPSING = 'collapsing';
  var CLASS_NAME_COLLAPSED = 'collapsed';
  var DIMENSION_WIDTH = 'width';
  var DIMENSION_HEIGHT = 'height';
  var SELECTOR_ACTIVES = '.show, .collapsing';
  var SELECTOR_DATA_TOGGLE$1 = '[data-toggle="collapse"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Collapse = /*#__PURE__*/function () {
    function Collapse(element, config) {
      this._isTransitioning = false;
      this._element = element;
      this._config = this._getConfig(config);
      this._triggerArray = [].slice.call(document.querySelectorAll("[data-toggle=\"collapse\"][href=\"#" + element.id + "\"]," + ("[data-toggle=\"collapse\"][data-target=\"#" + element.id + "\"]")));
      var toggleList = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE$1));

      for (var i = 0, len = toggleList.length; i < len; i++) {
        var elem = toggleList[i];
        var selector = Util.getSelectorFromElement(elem);
        var filterElement = [].slice.call(document.querySelectorAll(selector)).filter(function (foundElem) {
          return foundElem === element;
        });

        if (selector !== null && filterElement.length > 0) {
          this._selector = selector;

          this._triggerArray.push(elem);
        }
      }

      this._parent = this._config.parent ? this._getParent() : null;

      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._element, this._triggerArray);
      }

      if (this._config.toggle) {
        this.toggle();
      }
    } // Getters


    var _proto = Collapse.prototype;

    // Public
    _proto.toggle = function toggle() {
      if ($__default['default'](this._element).hasClass(CLASS_NAME_SHOW$1)) {
        this.hide();
      } else {
        this.show();
      }
    };

    _proto.show = function show() {
      var _this = this;

      if (this._isTransitioning || $__default['default'](this._element).hasClass(CLASS_NAME_SHOW$1)) {
        return;
      }

      var actives;
      var activesData;

      if (this._parent) {
        actives = [].slice.call(this._parent.querySelectorAll(SELECTOR_ACTIVES)).filter(function (elem) {
          if (typeof _this._config.parent === 'string') {
            return elem.getAttribute('data-parent') === _this._config.parent;
          }

          return elem.classList.contains(CLASS_NAME_COLLAPSE);
        });

        if (actives.length === 0) {
          actives = null;
        }
      }

      if (actives) {
        activesData = $__default['default'](actives).not(this._selector).data(DATA_KEY$3);

        if (activesData && activesData._isTransitioning) {
          return;
        }
      }

      var startEvent = $__default['default'].Event(EVENT_SHOW);
      $__default['default'](this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      if (actives) {
        Collapse._jQueryInterface.call($__default['default'](actives).not(this._selector), 'hide');

        if (!activesData) {
          $__default['default'](actives).data(DATA_KEY$3, null);
        }
      }

      var dimension = this._getDimension();

      $__default['default'](this._element).removeClass(CLASS_NAME_COLLAPSE).addClass(CLASS_NAME_COLLAPSING);
      this._element.style[dimension] = 0;

      if (this._triggerArray.length) {
        $__default['default'](this._triggerArray).removeClass(CLASS_NAME_COLLAPSED).attr('aria-expanded', true);
      }

      this.setTransitioning(true);

      var complete = function complete() {
        $__default['default'](_this._element).removeClass(CLASS_NAME_COLLAPSING).addClass(CLASS_NAME_COLLAPSE + " " + CLASS_NAME_SHOW$1);
        _this._element.style[dimension] = '';

        _this.setTransitioning(false);

        $__default['default'](_this._element).trigger(EVENT_SHOWN);
      };

      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      var scrollSize = "scroll" + capitalizedDimension;
      var transitionDuration = Util.getTransitionDurationFromElement(this._element);
      $__default['default'](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      this._element.style[dimension] = this._element[scrollSize] + "px";
    };

    _proto.hide = function hide() {
      var _this2 = this;

      if (this._isTransitioning || !$__default['default'](this._element).hasClass(CLASS_NAME_SHOW$1)) {
        return;
      }

      var startEvent = $__default['default'].Event(EVENT_HIDE);
      $__default['default'](this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      var dimension = this._getDimension();

      this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
      Util.reflow(this._element);
      $__default['default'](this._element).addClass(CLASS_NAME_COLLAPSING).removeClass(CLASS_NAME_COLLAPSE + " " + CLASS_NAME_SHOW$1);
      var triggerArrayLength = this._triggerArray.length;

      if (triggerArrayLength > 0) {
        for (var i = 0; i < triggerArrayLength; i++) {
          var trigger = this._triggerArray[i];
          var selector = Util.getSelectorFromElement(trigger);

          if (selector !== null) {
            var $elem = $__default['default']([].slice.call(document.querySelectorAll(selector)));

            if (!$elem.hasClass(CLASS_NAME_SHOW$1)) {
              $__default['default'](trigger).addClass(CLASS_NAME_COLLAPSED).attr('aria-expanded', false);
            }
          }
        }
      }

      this.setTransitioning(true);

      var complete = function complete() {
        _this2.setTransitioning(false);

        $__default['default'](_this2._element).removeClass(CLASS_NAME_COLLAPSING).addClass(CLASS_NAME_COLLAPSE).trigger(EVENT_HIDDEN);
      };

      this._element.style[dimension] = '';
      var transitionDuration = Util.getTransitionDurationFromElement(this._element);
      $__default['default'](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
    };

    _proto.setTransitioning = function setTransitioning(isTransitioning) {
      this._isTransitioning = isTransitioning;
    };

    _proto.dispose = function dispose() {
      $__default['default'].removeData(this._element, DATA_KEY$3);
      this._config = null;
      this._parent = null;
      this._element = null;
      this._triggerArray = null;
      this._isTransitioning = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default$1, config);
      config.toggle = Boolean(config.toggle); // Coerce string values

      Util.typeCheckConfig(NAME$3, config, DefaultType$1);
      return config;
    };

    _proto._getDimension = function _getDimension() {
      var hasWidth = $__default['default'](this._element).hasClass(DIMENSION_WIDTH);
      return hasWidth ? DIMENSION_WIDTH : DIMENSION_HEIGHT;
    };

    _proto._getParent = function _getParent() {
      var _this3 = this;

      var parent;

      if (Util.isElement(this._config.parent)) {
        parent = this._config.parent; // It's a jQuery object

        if (typeof this._config.parent.jquery !== 'undefined') {
          parent = this._config.parent[0];
        }
      } else {
        parent = document.querySelector(this._config.parent);
      }

      var selector = "[data-toggle=\"collapse\"][data-parent=\"" + this._config.parent + "\"]";
      var children = [].slice.call(parent.querySelectorAll(selector));
      $__default['default'](children).each(function (i, element) {
        _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
      });
      return parent;
    };

    _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
      var isOpen = $__default['default'](element).hasClass(CLASS_NAME_SHOW$1);

      if (triggerArray.length) {
        $__default['default'](triggerArray).toggleClass(CLASS_NAME_COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
      }
    } // Static
    ;

    Collapse._getTargetFromElement = function _getTargetFromElement(element) {
      var selector = Util.getSelectorFromElement(element);
      return selector ? document.querySelector(selector) : null;
    };

    Collapse._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $__default['default'](this);
        var data = $element.data(DATA_KEY$3);

        var _config = _extends({}, Default$1, $element.data(), typeof config === 'object' && config ? config : {});

        if (!data && _config.toggle && typeof config === 'string' && /show|hide/.test(config)) {
          _config.toggle = false;
        }

        if (!data) {
          data = new Collapse(this, _config);
          $element.data(DATA_KEY$3, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Collapse, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$3;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$1;
      }
    }]);

    return Collapse;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$1, function (event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.currentTarget.tagName === 'A') {
      event.preventDefault();
    }

    var $trigger = $__default['default'](this);
    var selector = Util.getSelectorFromElement(this);
    var selectors = [].slice.call(document.querySelectorAll(selector));
    $__default['default'](selectors).each(function () {
      var $target = $__default['default'](this);
      var data = $target.data(DATA_KEY$3);
      var config = data ? 'toggle' : $trigger.data();

      Collapse._jQueryInterface.call($target, config);
    });
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$3] = Collapse._jQueryInterface;
  $__default['default'].fn[NAME$3].Constructor = Collapse;

  $__default['default'].fn[NAME$3].noConflict = function () {
    $__default['default'].fn[NAME$3] = JQUERY_NO_CONFLICT$3;
    return Collapse._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$4 = 'dropdown';
  var VERSION$4 = '4.6.0';
  var DATA_KEY$4 = 'bs.dropdown';
  var EVENT_KEY$4 = "." + DATA_KEY$4;
  var DATA_API_KEY$4 = '.data-api';
  var JQUERY_NO_CONFLICT$4 = $__default['default'].fn[NAME$4];
  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

  var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

  var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

  var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

  var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

  var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

  var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE);
  var EVENT_HIDE$1 = "hide" + EVENT_KEY$4;
  var EVENT_HIDDEN$1 = "hidden" + EVENT_KEY$4;
  var EVENT_SHOW$1 = "show" + EVENT_KEY$4;
  var EVENT_SHOWN$1 = "shown" + EVENT_KEY$4;
  var EVENT_CLICK = "click" + EVENT_KEY$4;
  var EVENT_CLICK_DATA_API$4 = "click" + EVENT_KEY$4 + DATA_API_KEY$4;
  var EVENT_KEYDOWN_DATA_API = "keydown" + EVENT_KEY$4 + DATA_API_KEY$4;
  var EVENT_KEYUP_DATA_API = "keyup" + EVENT_KEY$4 + DATA_API_KEY$4;
  var CLASS_NAME_DISABLED = 'disabled';
  var CLASS_NAME_SHOW$2 = 'show';
  var CLASS_NAME_DROPUP = 'dropup';
  var CLASS_NAME_DROPRIGHT = 'dropright';
  var CLASS_NAME_DROPLEFT = 'dropleft';
  var CLASS_NAME_MENURIGHT = 'dropdown-menu-right';
  var CLASS_NAME_POSITION_STATIC = 'position-static';
  var SELECTOR_DATA_TOGGLE$2 = '[data-toggle="dropdown"]';
  var SELECTOR_FORM_CHILD = '.dropdown form';
  var SELECTOR_MENU = '.dropdown-menu';
  var SELECTOR_NAVBAR_NAV = '.navbar-nav';
  var SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
  var PLACEMENT_TOP = 'top-start';
  var PLACEMENT_TOPEND = 'top-end';
  var PLACEMENT_BOTTOM = 'bottom-start';
  var PLACEMENT_BOTTOMEND = 'bottom-end';
  var PLACEMENT_RIGHT = 'right-start';
  var PLACEMENT_LEFT = 'left-start';
  var Default$2 = {
    offset: 0,
    flip: true,
    boundary: 'scrollParent',
    reference: 'toggle',
    display: 'dynamic',
    popperConfig: null
  };
  var DefaultType$2 = {
    offset: '(number|string|function)',
    flip: 'boolean',
    boundary: '(string|element)',
    reference: '(string|element)',
    display: 'string',
    popperConfig: '(null|object)'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Dropdown = /*#__PURE__*/function () {
    function Dropdown(element, config) {
      this._element = element;
      this._popper = null;
      this._config = this._getConfig(config);
      this._menu = this._getMenuElement();
      this._inNavbar = this._detectNavbar();

      this._addEventListeners();
    } // Getters


    var _proto = Dropdown.prototype;

    // Public
    _proto.toggle = function toggle() {
      if (this._element.disabled || $__default['default'](this._element).hasClass(CLASS_NAME_DISABLED)) {
        return;
      }

      var isActive = $__default['default'](this._menu).hasClass(CLASS_NAME_SHOW$2);

      Dropdown._clearMenus();

      if (isActive) {
        return;
      }

      this.show(true);
    };

    _proto.show = function show(usePopper) {
      if (usePopper === void 0) {
        usePopper = false;
      }

      if (this._element.disabled || $__default['default'](this._element).hasClass(CLASS_NAME_DISABLED) || $__default['default'](this._menu).hasClass(CLASS_NAME_SHOW$2)) {
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };
      var showEvent = $__default['default'].Event(EVENT_SHOW$1, relatedTarget);

      var parent = Dropdown._getParentFromElement(this._element);

      $__default['default'](parent).trigger(showEvent);

      if (showEvent.isDefaultPrevented()) {
        return;
      } // Totally disable Popper for Dropdowns in Navbar


      if (!this._inNavbar && usePopper) {
        /**
         * Check for Popper dependency
         * Popper - https://popper.js.org
         */
        if (typeof Popper__default['default'] === 'undefined') {
          throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
        }

        var referenceElement = this._element;

        if (this._config.reference === 'parent') {
          referenceElement = parent;
        } else if (Util.isElement(this._config.reference)) {
          referenceElement = this._config.reference; // Check if it's jQuery element

          if (typeof this._config.reference.jquery !== 'undefined') {
            referenceElement = this._config.reference[0];
          }
        } // If boundary is not `scrollParent`, then set position to `static`
        // to allow the menu to "escape" the scroll parent's boundaries
        // https://github.com/twbs/bootstrap/issues/24251


        if (this._config.boundary !== 'scrollParent') {
          $__default['default'](parent).addClass(CLASS_NAME_POSITION_STATIC);
        }

        this._popper = new Popper__default['default'](referenceElement, this._menu, this._getPopperConfig());
      } // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


      if ('ontouchstart' in document.documentElement && $__default['default'](parent).closest(SELECTOR_NAVBAR_NAV).length === 0) {
        $__default['default'](document.body).children().on('mouseover', null, $__default['default'].noop);
      }

      this._element.focus();

      this._element.setAttribute('aria-expanded', true);

      $__default['default'](this._menu).toggleClass(CLASS_NAME_SHOW$2);
      $__default['default'](parent).toggleClass(CLASS_NAME_SHOW$2).trigger($__default['default'].Event(EVENT_SHOWN$1, relatedTarget));
    };

    _proto.hide = function hide() {
      if (this._element.disabled || $__default['default'](this._element).hasClass(CLASS_NAME_DISABLED) || !$__default['default'](this._menu).hasClass(CLASS_NAME_SHOW$2)) {
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };
      var hideEvent = $__default['default'].Event(EVENT_HIDE$1, relatedTarget);

      var parent = Dropdown._getParentFromElement(this._element);

      $__default['default'](parent).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      if (this._popper) {
        this._popper.destroy();
      }

      $__default['default'](this._menu).toggleClass(CLASS_NAME_SHOW$2);
      $__default['default'](parent).toggleClass(CLASS_NAME_SHOW$2).trigger($__default['default'].Event(EVENT_HIDDEN$1, relatedTarget));
    };

    _proto.dispose = function dispose() {
      $__default['default'].removeData(this._element, DATA_KEY$4);
      $__default['default'](this._element).off(EVENT_KEY$4);
      this._element = null;
      this._menu = null;

      if (this._popper !== null) {
        this._popper.destroy();

        this._popper = null;
      }
    };

    _proto.update = function update() {
      this._inNavbar = this._detectNavbar();

      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    } // Private
    ;

    _proto._addEventListeners = function _addEventListeners() {
      var _this = this;

      $__default['default'](this._element).on(EVENT_CLICK, function (event) {
        event.preventDefault();
        event.stopPropagation();

        _this.toggle();
      });
    };

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, this.constructor.Default, $__default['default'](this._element).data(), config);
      Util.typeCheckConfig(NAME$4, config, this.constructor.DefaultType);
      return config;
    };

    _proto._getMenuElement = function _getMenuElement() {
      if (!this._menu) {
        var parent = Dropdown._getParentFromElement(this._element);

        if (parent) {
          this._menu = parent.querySelector(SELECTOR_MENU);
        }
      }

      return this._menu;
    };

    _proto._getPlacement = function _getPlacement() {
      var $parentDropdown = $__default['default'](this._element.parentNode);
      var placement = PLACEMENT_BOTTOM; // Handle dropup

      if ($parentDropdown.hasClass(CLASS_NAME_DROPUP)) {
        placement = $__default['default'](this._menu).hasClass(CLASS_NAME_MENURIGHT) ? PLACEMENT_TOPEND : PLACEMENT_TOP;
      } else if ($parentDropdown.hasClass(CLASS_NAME_DROPRIGHT)) {
        placement = PLACEMENT_RIGHT;
      } else if ($parentDropdown.hasClass(CLASS_NAME_DROPLEFT)) {
        placement = PLACEMENT_LEFT;
      } else if ($__default['default'](this._menu).hasClass(CLASS_NAME_MENURIGHT)) {
        placement = PLACEMENT_BOTTOMEND;
      }

      return placement;
    };

    _proto._detectNavbar = function _detectNavbar() {
      return $__default['default'](this._element).closest('.navbar').length > 0;
    };

    _proto._getOffset = function _getOffset() {
      var _this2 = this;

      var offset = {};

      if (typeof this._config.offset === 'function') {
        offset.fn = function (data) {
          data.offsets = _extends({}, data.offsets, _this2._config.offset(data.offsets, _this2._element) || {});
          return data;
        };
      } else {
        offset.offset = this._config.offset;
      }

      return offset;
    };

    _proto._getPopperConfig = function _getPopperConfig() {
      var popperConfig = {
        placement: this._getPlacement(),
        modifiers: {
          offset: this._getOffset(),
          flip: {
            enabled: this._config.flip
          },
          preventOverflow: {
            boundariesElement: this._config.boundary
          }
        }
      }; // Disable Popper if we have a static display

      if (this._config.display === 'static') {
        popperConfig.modifiers.applyStyle = {
          enabled: false
        };
      }

      return _extends({}, popperConfig, this._config.popperConfig);
    } // Static
    ;

    Dropdown._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $__default['default'](this).data(DATA_KEY$4);

        var _config = typeof config === 'object' ? config : null;

        if (!data) {
          data = new Dropdown(this, _config);
          $__default['default'](this).data(DATA_KEY$4, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    Dropdown._clearMenus = function _clearMenus(event) {
      if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
        return;
      }

      var toggles = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE$2));

      for (var i = 0, len = toggles.length; i < len; i++) {
        var parent = Dropdown._getParentFromElement(toggles[i]);

        var context = $__default['default'](toggles[i]).data(DATA_KEY$4);
        var relatedTarget = {
          relatedTarget: toggles[i]
        };

        if (event && event.type === 'click') {
          relatedTarget.clickEvent = event;
        }

        if (!context) {
          continue;
        }

        var dropdownMenu = context._menu;

        if (!$__default['default'](parent).hasClass(CLASS_NAME_SHOW$2)) {
          continue;
        }

        if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $__default['default'].contains(parent, event.target)) {
          continue;
        }

        var hideEvent = $__default['default'].Event(EVENT_HIDE$1, relatedTarget);
        $__default['default'](parent).trigger(hideEvent);

        if (hideEvent.isDefaultPrevented()) {
          continue;
        } // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support


        if ('ontouchstart' in document.documentElement) {
          $__default['default'](document.body).children().off('mouseover', null, $__default['default'].noop);
        }

        toggles[i].setAttribute('aria-expanded', 'false');

        if (context._popper) {
          context._popper.destroy();
        }

        $__default['default'](dropdownMenu).removeClass(CLASS_NAME_SHOW$2);
        $__default['default'](parent).removeClass(CLASS_NAME_SHOW$2).trigger($__default['default'].Event(EVENT_HIDDEN$1, relatedTarget));
      }
    };

    Dropdown._getParentFromElement = function _getParentFromElement(element) {
      var parent;
      var selector = Util.getSelectorFromElement(element);

      if (selector) {
        parent = document.querySelector(selector);
      }

      return parent || element.parentNode;
    } // eslint-disable-next-line complexity
    ;

    Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
      // If not input/textarea:
      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
      // If input/textarea:
      //  - If space key => not a dropdown command
      //  - If key is other than escape
      //    - If key is not up or down => not a dropdown command
      //    - If trigger inside the menu => not a dropdown command
      if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $__default['default'](event.target).closest(SELECTOR_MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
        return;
      }

      if (this.disabled || $__default['default'](this).hasClass(CLASS_NAME_DISABLED)) {
        return;
      }

      var parent = Dropdown._getParentFromElement(this);

      var isActive = $__default['default'](parent).hasClass(CLASS_NAME_SHOW$2);

      if (!isActive && event.which === ESCAPE_KEYCODE) {
        return;
      }

      event.preventDefault();
      event.stopPropagation();

      if (!isActive || event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE) {
        if (event.which === ESCAPE_KEYCODE) {
          $__default['default'](parent.querySelector(SELECTOR_DATA_TOGGLE$2)).trigger('focus');
        }

        $__default['default'](this).trigger('click');
        return;
      }

      var items = [].slice.call(parent.querySelectorAll(SELECTOR_VISIBLE_ITEMS)).filter(function (item) {
        return $__default['default'](item).is(':visible');
      });

      if (items.length === 0) {
        return;
      }

      var index = items.indexOf(event.target);

      if (event.which === ARROW_UP_KEYCODE && index > 0) {
        // Up
        index--;
      }

      if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
        // Down
        index++;
      }

      if (index < 0) {
        index = 0;
      }

      items[index].focus();
    };

    _createClass(Dropdown, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$4;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$2;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$2;
      }
    }]);

    return Dropdown;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$2, Dropdown._dataApiKeydownHandler).on(EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown._dataApiKeydownHandler).on(EVENT_CLICK_DATA_API$4 + " " + EVENT_KEYUP_DATA_API, Dropdown._clearMenus).on(EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$2, function (event) {
    event.preventDefault();
    event.stopPropagation();

    Dropdown._jQueryInterface.call($__default['default'](this), 'toggle');
  }).on(EVENT_CLICK_DATA_API$4, SELECTOR_FORM_CHILD, function (e) {
    e.stopPropagation();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$4] = Dropdown._jQueryInterface;
  $__default['default'].fn[NAME$4].Constructor = Dropdown;

  $__default['default'].fn[NAME$4].noConflict = function () {
    $__default['default'].fn[NAME$4] = JQUERY_NO_CONFLICT$4;
    return Dropdown._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$5 = 'modal';
  var VERSION$5 = '4.6.0';
  var DATA_KEY$5 = 'bs.modal';
  var EVENT_KEY$5 = "." + DATA_KEY$5;
  var DATA_API_KEY$5 = '.data-api';
  var JQUERY_NO_CONFLICT$5 = $__default['default'].fn[NAME$5];
  var ESCAPE_KEYCODE$1 = 27; // KeyboardEvent.which value for Escape (Esc) key

  var Default$3 = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: true
  };
  var DefaultType$3 = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    focus: 'boolean',
    show: 'boolean'
  };
  var EVENT_HIDE$2 = "hide" + EVENT_KEY$5;
  var EVENT_HIDE_PREVENTED = "hidePrevented" + EVENT_KEY$5;
  var EVENT_HIDDEN$2 = "hidden" + EVENT_KEY$5;
  var EVENT_SHOW$2 = "show" + EVENT_KEY$5;
  var EVENT_SHOWN$2 = "shown" + EVENT_KEY$5;
  var EVENT_FOCUSIN = "focusin" + EVENT_KEY$5;
  var EVENT_RESIZE = "resize" + EVENT_KEY$5;
  var EVENT_CLICK_DISMISS = "click.dismiss" + EVENT_KEY$5;
  var EVENT_KEYDOWN_DISMISS = "keydown.dismiss" + EVENT_KEY$5;
  var EVENT_MOUSEUP_DISMISS = "mouseup.dismiss" + EVENT_KEY$5;
  var EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss" + EVENT_KEY$5;
  var EVENT_CLICK_DATA_API$5 = "click" + EVENT_KEY$5 + DATA_API_KEY$5;
  var CLASS_NAME_SCROLLABLE = 'modal-dialog-scrollable';
  var CLASS_NAME_SCROLLBAR_MEASURER = 'modal-scrollbar-measure';
  var CLASS_NAME_BACKDROP = 'modal-backdrop';
  var CLASS_NAME_OPEN = 'modal-open';
  var CLASS_NAME_FADE$1 = 'fade';
  var CLASS_NAME_SHOW$3 = 'show';
  var CLASS_NAME_STATIC = 'modal-static';
  var SELECTOR_DIALOG = '.modal-dialog';
  var SELECTOR_MODAL_BODY = '.modal-body';
  var SELECTOR_DATA_TOGGLE$3 = '[data-toggle="modal"]';
  var SELECTOR_DATA_DISMISS = '[data-dismiss="modal"]';
  var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
  var SELECTOR_STICKY_CONTENT = '.sticky-top';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Modal = /*#__PURE__*/function () {
    function Modal(element, config) {
      this._config = this._getConfig(config);
      this._element = element;
      this._dialog = element.querySelector(SELECTOR_DIALOG);
      this._backdrop = null;
      this._isShown = false;
      this._isBodyOverflowing = false;
      this._ignoreBackdropClick = false;
      this._isTransitioning = false;
      this._scrollbarWidth = 0;
    } // Getters


    var _proto = Modal.prototype;

    // Public
    _proto.toggle = function toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    };

    _proto.show = function show(relatedTarget) {
      var _this = this;

      if (this._isShown || this._isTransitioning) {
        return;
      }

      if ($__default['default'](this._element).hasClass(CLASS_NAME_FADE$1)) {
        this._isTransitioning = true;
      }

      var showEvent = $__default['default'].Event(EVENT_SHOW$2, {
        relatedTarget: relatedTarget
      });
      $__default['default'](this._element).trigger(showEvent);

      if (this._isShown || showEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = true;

      this._checkScrollbar();

      this._setScrollbar();

      this._adjustDialog();

      this._setEscapeEvent();

      this._setResizeEvent();

      $__default['default'](this._element).on(EVENT_CLICK_DISMISS, SELECTOR_DATA_DISMISS, function (event) {
        return _this.hide(event);
      });
      $__default['default'](this._dialog).on(EVENT_MOUSEDOWN_DISMISS, function () {
        $__default['default'](_this._element).one(EVENT_MOUSEUP_DISMISS, function (event) {
          if ($__default['default'](event.target).is(_this._element)) {
            _this._ignoreBackdropClick = true;
          }
        });
      });

      this._showBackdrop(function () {
        return _this._showElement(relatedTarget);
      });
    };

    _proto.hide = function hide(event) {
      var _this2 = this;

      if (event) {
        event.preventDefault();
      }

      if (!this._isShown || this._isTransitioning) {
        return;
      }

      var hideEvent = $__default['default'].Event(EVENT_HIDE$2);
      $__default['default'](this._element).trigger(hideEvent);

      if (!this._isShown || hideEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = false;
      var transition = $__default['default'](this._element).hasClass(CLASS_NAME_FADE$1);

      if (transition) {
        this._isTransitioning = true;
      }

      this._setEscapeEvent();

      this._setResizeEvent();

      $__default['default'](document).off(EVENT_FOCUSIN);
      $__default['default'](this._element).removeClass(CLASS_NAME_SHOW$3);
      $__default['default'](this._element).off(EVENT_CLICK_DISMISS);
      $__default['default'](this._dialog).off(EVENT_MOUSEDOWN_DISMISS);

      if (transition) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        $__default['default'](this._element).one(Util.TRANSITION_END, function (event) {
          return _this2._hideModal(event);
        }).emulateTransitionEnd(transitionDuration);
      } else {
        this._hideModal();
      }
    };

    _proto.dispose = function dispose() {
      [window, this._element, this._dialog].forEach(function (htmlElement) {
        return $__default['default'](htmlElement).off(EVENT_KEY$5);
      });
      /**
       * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`
       * Do not move `document` in `htmlElements` array
       * It will remove `EVENT_CLICK_DATA_API` event that should remain
       */

      $__default['default'](document).off(EVENT_FOCUSIN);
      $__default['default'].removeData(this._element, DATA_KEY$5);
      this._config = null;
      this._element = null;
      this._dialog = null;
      this._backdrop = null;
      this._isShown = null;
      this._isBodyOverflowing = null;
      this._ignoreBackdropClick = null;
      this._isTransitioning = null;
      this._scrollbarWidth = null;
    };

    _proto.handleUpdate = function handleUpdate() {
      this._adjustDialog();
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default$3, config);
      Util.typeCheckConfig(NAME$5, config, DefaultType$3);
      return config;
    };

    _proto._triggerBackdropTransition = function _triggerBackdropTransition() {
      var _this3 = this;

      var hideEventPrevented = $__default['default'].Event(EVENT_HIDE_PREVENTED);
      $__default['default'](this._element).trigger(hideEventPrevented);

      if (hideEventPrevented.isDefaultPrevented()) {
        return;
      }

      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      if (!isModalOverflowing) {
        this._element.style.overflowY = 'hidden';
      }

      this._element.classList.add(CLASS_NAME_STATIC);

      var modalTransitionDuration = Util.getTransitionDurationFromElement(this._dialog);
      $__default['default'](this._element).off(Util.TRANSITION_END);
      $__default['default'](this._element).one(Util.TRANSITION_END, function () {
        _this3._element.classList.remove(CLASS_NAME_STATIC);

        if (!isModalOverflowing) {
          $__default['default'](_this3._element).one(Util.TRANSITION_END, function () {
            _this3._element.style.overflowY = '';
          }).emulateTransitionEnd(_this3._element, modalTransitionDuration);
        }
      }).emulateTransitionEnd(modalTransitionDuration);

      this._element.focus();
    };

    _proto._showElement = function _showElement(relatedTarget) {
      var _this4 = this;

      var transition = $__default['default'](this._element).hasClass(CLASS_NAME_FADE$1);
      var modalBody = this._dialog ? this._dialog.querySelector(SELECTOR_MODAL_BODY) : null;

      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
        // Don't move modal's DOM position
        document.body.appendChild(this._element);
      }

      this._element.style.display = 'block';

      this._element.removeAttribute('aria-hidden');

      this._element.setAttribute('aria-modal', true);

      this._element.setAttribute('role', 'dialog');

      if ($__default['default'](this._dialog).hasClass(CLASS_NAME_SCROLLABLE) && modalBody) {
        modalBody.scrollTop = 0;
      } else {
        this._element.scrollTop = 0;
      }

      if (transition) {
        Util.reflow(this._element);
      }

      $__default['default'](this._element).addClass(CLASS_NAME_SHOW$3);

      if (this._config.focus) {
        this._enforceFocus();
      }

      var shownEvent = $__default['default'].Event(EVENT_SHOWN$2, {
        relatedTarget: relatedTarget
      });

      var transitionComplete = function transitionComplete() {
        if (_this4._config.focus) {
          _this4._element.focus();
        }

        _this4._isTransitioning = false;
        $__default['default'](_this4._element).trigger(shownEvent);
      };

      if (transition) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._dialog);
        $__default['default'](this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);
      } else {
        transitionComplete();
      }
    };

    _proto._enforceFocus = function _enforceFocus() {
      var _this5 = this;

      $__default['default'](document).off(EVENT_FOCUSIN) // Guard against infinite focus loop
      .on(EVENT_FOCUSIN, function (event) {
        if (document !== event.target && _this5._element !== event.target && $__default['default'](_this5._element).has(event.target).length === 0) {
          _this5._element.focus();
        }
      });
    };

    _proto._setEscapeEvent = function _setEscapeEvent() {
      var _this6 = this;

      if (this._isShown) {
        $__default['default'](this._element).on(EVENT_KEYDOWN_DISMISS, function (event) {
          if (_this6._config.keyboard && event.which === ESCAPE_KEYCODE$1) {
            event.preventDefault();

            _this6.hide();
          } else if (!_this6._config.keyboard && event.which === ESCAPE_KEYCODE$1) {
            _this6._triggerBackdropTransition();
          }
        });
      } else if (!this._isShown) {
        $__default['default'](this._element).off(EVENT_KEYDOWN_DISMISS);
      }
    };

    _proto._setResizeEvent = function _setResizeEvent() {
      var _this7 = this;

      if (this._isShown) {
        $__default['default'](window).on(EVENT_RESIZE, function (event) {
          return _this7.handleUpdate(event);
        });
      } else {
        $__default['default'](window).off(EVENT_RESIZE);
      }
    };

    _proto._hideModal = function _hideModal() {
      var _this8 = this;

      this._element.style.display = 'none';

      this._element.setAttribute('aria-hidden', true);

      this._element.removeAttribute('aria-modal');

      this._element.removeAttribute('role');

      this._isTransitioning = false;

      this._showBackdrop(function () {
        $__default['default'](document.body).removeClass(CLASS_NAME_OPEN);

        _this8._resetAdjustments();

        _this8._resetScrollbar();

        $__default['default'](_this8._element).trigger(EVENT_HIDDEN$2);
      });
    };

    _proto._removeBackdrop = function _removeBackdrop() {
      if (this._backdrop) {
        $__default['default'](this._backdrop).remove();
        this._backdrop = null;
      }
    };

    _proto._showBackdrop = function _showBackdrop(callback) {
      var _this9 = this;

      var animate = $__default['default'](this._element).hasClass(CLASS_NAME_FADE$1) ? CLASS_NAME_FADE$1 : '';

      if (this._isShown && this._config.backdrop) {
        this._backdrop = document.createElement('div');
        this._backdrop.className = CLASS_NAME_BACKDROP;

        if (animate) {
          this._backdrop.classList.add(animate);
        }

        $__default['default'](this._backdrop).appendTo(document.body);
        $__default['default'](this._element).on(EVENT_CLICK_DISMISS, function (event) {
          if (_this9._ignoreBackdropClick) {
            _this9._ignoreBackdropClick = false;
            return;
          }

          if (event.target !== event.currentTarget) {
            return;
          }

          if (_this9._config.backdrop === 'static') {
            _this9._triggerBackdropTransition();
          } else {
            _this9.hide();
          }
        });

        if (animate) {
          Util.reflow(this._backdrop);
        }

        $__default['default'](this._backdrop).addClass(CLASS_NAME_SHOW$3);

        if (!callback) {
          return;
        }

        if (!animate) {
          callback();
          return;
        }

        var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
        $__default['default'](this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);
      } else if (!this._isShown && this._backdrop) {
        $__default['default'](this._backdrop).removeClass(CLASS_NAME_SHOW$3);

        var callbackRemove = function callbackRemove() {
          _this9._removeBackdrop();

          if (callback) {
            callback();
          }
        };

        if ($__default['default'](this._element).hasClass(CLASS_NAME_FADE$1)) {
          var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);

          $__default['default'](this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);
        } else {
          callbackRemove();
        }
      } else if (callback) {
        callback();
      }
    } // ----------------------------------------------------------------------
    // the following methods are used to handle overflowing modals
    // todo (fat): these should probably be refactored out of modal.js
    // ----------------------------------------------------------------------
    ;

    _proto._adjustDialog = function _adjustDialog() {
      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      if (!this._isBodyOverflowing && isModalOverflowing) {
        this._element.style.paddingLeft = this._scrollbarWidth + "px";
      }

      if (this._isBodyOverflowing && !isModalOverflowing) {
        this._element.style.paddingRight = this._scrollbarWidth + "px";
      }
    };

    _proto._resetAdjustments = function _resetAdjustments() {
      this._element.style.paddingLeft = '';
      this._element.style.paddingRight = '';
    };

    _proto._checkScrollbar = function _checkScrollbar() {
      var rect = document.body.getBoundingClientRect();
      this._isBodyOverflowing = Math.round(rect.left + rect.right) < window.innerWidth;
      this._scrollbarWidth = this._getScrollbarWidth();
    };

    _proto._setScrollbar = function _setScrollbar() {
      var _this10 = this;

      if (this._isBodyOverflowing) {
        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
        var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT));
        var stickyContent = [].slice.call(document.querySelectorAll(SELECTOR_STICKY_CONTENT)); // Adjust fixed content padding

        $__default['default'](fixedContent).each(function (index, element) {
          var actualPadding = element.style.paddingRight;
          var calculatedPadding = $__default['default'](element).css('padding-right');
          $__default['default'](element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this10._scrollbarWidth + "px");
        }); // Adjust sticky content margin

        $__default['default'](stickyContent).each(function (index, element) {
          var actualMargin = element.style.marginRight;
          var calculatedMargin = $__default['default'](element).css('margin-right');
          $__default['default'](element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this10._scrollbarWidth + "px");
        }); // Adjust body padding

        var actualPadding = document.body.style.paddingRight;
        var calculatedPadding = $__default['default'](document.body).css('padding-right');
        $__default['default'](document.body).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
      }

      $__default['default'](document.body).addClass(CLASS_NAME_OPEN);
    };

    _proto._resetScrollbar = function _resetScrollbar() {
      // Restore fixed content padding
      var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT));
      $__default['default'](fixedContent).each(function (index, element) {
        var padding = $__default['default'](element).data('padding-right');
        $__default['default'](element).removeData('padding-right');
        element.style.paddingRight = padding ? padding : '';
      }); // Restore sticky content

      var elements = [].slice.call(document.querySelectorAll("" + SELECTOR_STICKY_CONTENT));
      $__default['default'](elements).each(function (index, element) {
        var margin = $__default['default'](element).data('margin-right');

        if (typeof margin !== 'undefined') {
          $__default['default'](element).css('margin-right', margin).removeData('margin-right');
        }
      }); // Restore body padding

      var padding = $__default['default'](document.body).data('padding-right');
      $__default['default'](document.body).removeData('padding-right');
      document.body.style.paddingRight = padding ? padding : '';
    };

    _proto._getScrollbarWidth = function _getScrollbarWidth() {
      // thx d.walsh
      var scrollDiv = document.createElement('div');
      scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER;
      document.body.appendChild(scrollDiv);
      var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    } // Static
    ;

    Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
      return this.each(function () {
        var data = $__default['default'](this).data(DATA_KEY$5);

        var _config = _extends({}, Default$3, $__default['default'](this).data(), typeof config === 'object' && config ? config : {});

        if (!data) {
          data = new Modal(this, _config);
          $__default['default'](this).data(DATA_KEY$5, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config](relatedTarget);
        } else if (_config.show) {
          data.show(relatedTarget);
        }
      });
    };

    _createClass(Modal, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$5;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$3;
      }
    }]);

    return Modal;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_CLICK_DATA_API$5, SELECTOR_DATA_TOGGLE$3, function (event) {
    var _this11 = this;

    var target;
    var selector = Util.getSelectorFromElement(this);

    if (selector) {
      target = document.querySelector(selector);
    }

    var config = $__default['default'](target).data(DATA_KEY$5) ? 'toggle' : _extends({}, $__default['default'](target).data(), $__default['default'](this).data());

    if (this.tagName === 'A' || this.tagName === 'AREA') {
      event.preventDefault();
    }

    var $target = $__default['default'](target).one(EVENT_SHOW$2, function (showEvent) {
      if (showEvent.isDefaultPrevented()) {
        // Only register focus restorer if modal will actually get shown
        return;
      }

      $target.one(EVENT_HIDDEN$2, function () {
        if ($__default['default'](_this11).is(':visible')) {
          _this11.focus();
        }
      });
    });

    Modal._jQueryInterface.call($__default['default'](target), config, this);
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$5] = Modal._jQueryInterface;
  $__default['default'].fn[NAME$5].Constructor = Modal;

  $__default['default'].fn[NAME$5].noConflict = function () {
    $__default['default'].fn[NAME$5] = JQUERY_NO_CONFLICT$5;
    return Modal._jQueryInterface;
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.6.0): tools/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  var uriAttrs = ['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href'];
  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  var DefaultWhitelist = {
    // Global attributes allowed on any supplied element below.
    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
    a: ['target', 'href', 'title', 'rel'],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };
  /**
   * A pattern that recognizes a commonly useful subset of URLs that are safe.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */

  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi;
  /**
   * A pattern that matches safe data URLs. Only matches image, video and audio types.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */

  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;

  function allowedAttribute(attr, allowedAttributeList) {
    var attrName = attr.nodeName.toLowerCase();

    if (allowedAttributeList.indexOf(attrName) !== -1) {
      if (uriAttrs.indexOf(attrName) !== -1) {
        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN));
      }

      return true;
    }

    var regExp = allowedAttributeList.filter(function (attrRegex) {
      return attrRegex instanceof RegExp;
    }); // Check if a regular expression validates the attribute.

    for (var i = 0, len = regExp.length; i < len; i++) {
      if (attrName.match(regExp[i])) {
        return true;
      }
    }

    return false;
  }

  function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
    if (unsafeHtml.length === 0) {
      return unsafeHtml;
    }

    if (sanitizeFn && typeof sanitizeFn === 'function') {
      return sanitizeFn(unsafeHtml);
    }

    var domParser = new window.DOMParser();
    var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
    var whitelistKeys = Object.keys(whiteList);
    var elements = [].slice.call(createdDocument.body.querySelectorAll('*'));

    var _loop = function _loop(i, len) {
      var el = elements[i];
      var elName = el.nodeName.toLowerCase();

      if (whitelistKeys.indexOf(el.nodeName.toLowerCase()) === -1) {
        el.parentNode.removeChild(el);
        return "continue";
      }

      var attributeList = [].slice.call(el.attributes);
      var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);
      attributeList.forEach(function (attr) {
        if (!allowedAttribute(attr, whitelistedAttributes)) {
          el.removeAttribute(attr.nodeName);
        }
      });
    };

    for (var i = 0, len = elements.length; i < len; i++) {
      var _ret = _loop(i);

      if (_ret === "continue") continue;
    }

    return createdDocument.body.innerHTML;
  }

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$6 = 'tooltip';
  var VERSION$6 = '4.6.0';
  var DATA_KEY$6 = 'bs.tooltip';
  var EVENT_KEY$6 = "." + DATA_KEY$6;
  var JQUERY_NO_CONFLICT$6 = $__default['default'].fn[NAME$6];
  var CLASS_PREFIX = 'bs-tooltip';
  var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];
  var DefaultType$4 = {
    animation: 'boolean',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string',
    delay: '(number|object)',
    html: 'boolean',
    selector: '(string|boolean)',
    placement: '(string|function)',
    offset: '(number|string|function)',
    container: '(string|element|boolean)',
    fallbackPlacement: '(string|array)',
    boundary: '(string|element)',
    customClass: '(string|function)',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    whiteList: 'object',
    popperConfig: '(null|object)'
  };
  var AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: 'right',
    BOTTOM: 'bottom',
    LEFT: 'left'
  };
  var Default$4 = {
    animation: true,
    template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    selector: false,
    placement: 'top',
    offset: 0,
    container: false,
    fallbackPlacement: 'flip',
    boundary: 'scrollParent',
    customClass: '',
    sanitize: true,
    sanitizeFn: null,
    whiteList: DefaultWhitelist,
    popperConfig: null
  };
  var HOVER_STATE_SHOW = 'show';
  var HOVER_STATE_OUT = 'out';
  var Event = {
    HIDE: "hide" + EVENT_KEY$6,
    HIDDEN: "hidden" + EVENT_KEY$6,
    SHOW: "show" + EVENT_KEY$6,
    SHOWN: "shown" + EVENT_KEY$6,
    INSERTED: "inserted" + EVENT_KEY$6,
    CLICK: "click" + EVENT_KEY$6,
    FOCUSIN: "focusin" + EVENT_KEY$6,
    FOCUSOUT: "focusout" + EVENT_KEY$6,
    MOUSEENTER: "mouseenter" + EVENT_KEY$6,
    MOUSELEAVE: "mouseleave" + EVENT_KEY$6
  };
  var CLASS_NAME_FADE$2 = 'fade';
  var CLASS_NAME_SHOW$4 = 'show';
  var SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
  var SELECTOR_ARROW = '.arrow';
  var TRIGGER_HOVER = 'hover';
  var TRIGGER_FOCUS = 'focus';
  var TRIGGER_CLICK = 'click';
  var TRIGGER_MANUAL = 'manual';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Tooltip = /*#__PURE__*/function () {
    function Tooltip(element, config) {
      if (typeof Popper__default['default'] === 'undefined') {
        throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)');
      } // private


      this._isEnabled = true;
      this._timeout = 0;
      this._hoverState = '';
      this._activeTrigger = {};
      this._popper = null; // Protected

      this.element = element;
      this.config = this._getConfig(config);
      this.tip = null;

      this._setListeners();
    } // Getters


    var _proto = Tooltip.prototype;

    // Public
    _proto.enable = function enable() {
      this._isEnabled = true;
    };

    _proto.disable = function disable() {
      this._isEnabled = false;
    };

    _proto.toggleEnabled = function toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    };

    _proto.toggle = function toggle(event) {
      if (!this._isEnabled) {
        return;
      }

      if (event) {
        var dataKey = this.constructor.DATA_KEY;
        var context = $__default['default'](event.currentTarget).data(dataKey);

        if (!context) {
          context = new this.constructor(event.currentTarget, this._getDelegateConfig());
          $__default['default'](event.currentTarget).data(dataKey, context);
        }

        context._activeTrigger.click = !context._activeTrigger.click;

        if (context._isWithActiveTrigger()) {
          context._enter(null, context);
        } else {
          context._leave(null, context);
        }
      } else {
        if ($__default['default'](this.getTipElement()).hasClass(CLASS_NAME_SHOW$4)) {
          this._leave(null, this);

          return;
        }

        this._enter(null, this);
      }
    };

    _proto.dispose = function dispose() {
      clearTimeout(this._timeout);
      $__default['default'].removeData(this.element, this.constructor.DATA_KEY);
      $__default['default'](this.element).off(this.constructor.EVENT_KEY);
      $__default['default'](this.element).closest('.modal').off('hide.bs.modal', this._hideModalHandler);

      if (this.tip) {
        $__default['default'](this.tip).remove();
      }

      this._isEnabled = null;
      this._timeout = null;
      this._hoverState = null;
      this._activeTrigger = null;

      if (this._popper) {
        this._popper.destroy();
      }

      this._popper = null;
      this.element = null;
      this.config = null;
      this.tip = null;
    };

    _proto.show = function show() {
      var _this = this;

      if ($__default['default'](this.element).css('display') === 'none') {
        throw new Error('Please use show on visible elements');
      }

      var showEvent = $__default['default'].Event(this.constructor.Event.SHOW);

      if (this.isWithContent() && this._isEnabled) {
        $__default['default'](this.element).trigger(showEvent);
        var shadowRoot = Util.findShadowRoot(this.element);
        var isInTheDom = $__default['default'].contains(shadowRoot !== null ? shadowRoot : this.element.ownerDocument.documentElement, this.element);

        if (showEvent.isDefaultPrevented() || !isInTheDom) {
          return;
        }

        var tip = this.getTipElement();
        var tipId = Util.getUID(this.constructor.NAME);
        tip.setAttribute('id', tipId);
        this.element.setAttribute('aria-describedby', tipId);
        this.setContent();

        if (this.config.animation) {
          $__default['default'](tip).addClass(CLASS_NAME_FADE$2);
        }

        var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;

        var attachment = this._getAttachment(placement);

        this.addAttachmentClass(attachment);

        var container = this._getContainer();

        $__default['default'](tip).data(this.constructor.DATA_KEY, this);

        if (!$__default['default'].contains(this.element.ownerDocument.documentElement, this.tip)) {
          $__default['default'](tip).appendTo(container);
        }

        $__default['default'](this.element).trigger(this.constructor.Event.INSERTED);
        this._popper = new Popper__default['default'](this.element, tip, this._getPopperConfig(attachment));
        $__default['default'](tip).addClass(CLASS_NAME_SHOW$4);
        $__default['default'](tip).addClass(this.config.customClass); // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

        if ('ontouchstart' in document.documentElement) {
          $__default['default'](document.body).children().on('mouseover', null, $__default['default'].noop);
        }

        var complete = function complete() {
          if (_this.config.animation) {
            _this._fixTransition();
          }

          var prevHoverState = _this._hoverState;
          _this._hoverState = null;
          $__default['default'](_this.element).trigger(_this.constructor.Event.SHOWN);

          if (prevHoverState === HOVER_STATE_OUT) {
            _this._leave(null, _this);
          }
        };

        if ($__default['default'](this.tip).hasClass(CLASS_NAME_FADE$2)) {
          var transitionDuration = Util.getTransitionDurationFromElement(this.tip);
          $__default['default'](this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
        } else {
          complete();
        }
      }
    };

    _proto.hide = function hide(callback) {
      var _this2 = this;

      var tip = this.getTipElement();
      var hideEvent = $__default['default'].Event(this.constructor.Event.HIDE);

      var complete = function complete() {
        if (_this2._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {
          tip.parentNode.removeChild(tip);
        }

        _this2._cleanTipClass();

        _this2.element.removeAttribute('aria-describedby');

        $__default['default'](_this2.element).trigger(_this2.constructor.Event.HIDDEN);

        if (_this2._popper !== null) {
          _this2._popper.destroy();
        }

        if (callback) {
          callback();
        }
      };

      $__default['default'](this.element).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      $__default['default'](tip).removeClass(CLASS_NAME_SHOW$4); // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support

      if ('ontouchstart' in document.documentElement) {
        $__default['default'](document.body).children().off('mouseover', null, $__default['default'].noop);
      }

      this._activeTrigger[TRIGGER_CLICK] = false;
      this._activeTrigger[TRIGGER_FOCUS] = false;
      this._activeTrigger[TRIGGER_HOVER] = false;

      if ($__default['default'](this.tip).hasClass(CLASS_NAME_FADE$2)) {
        var transitionDuration = Util.getTransitionDurationFromElement(tip);
        $__default['default'](tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }

      this._hoverState = '';
    };

    _proto.update = function update() {
      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    } // Protected
    ;

    _proto.isWithContent = function isWithContent() {
      return Boolean(this.getTitle());
    };

    _proto.addAttachmentClass = function addAttachmentClass(attachment) {
      $__default['default'](this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
    };

    _proto.getTipElement = function getTipElement() {
      this.tip = this.tip || $__default['default'](this.config.template)[0];
      return this.tip;
    };

    _proto.setContent = function setContent() {
      var tip = this.getTipElement();
      this.setElementContent($__default['default'](tip.querySelectorAll(SELECTOR_TOOLTIP_INNER)), this.getTitle());
      $__default['default'](tip).removeClass(CLASS_NAME_FADE$2 + " " + CLASS_NAME_SHOW$4);
    };

    _proto.setElementContent = function setElementContent($element, content) {
      if (typeof content === 'object' && (content.nodeType || content.jquery)) {
        // Content is a DOM node or a jQuery
        if (this.config.html) {
          if (!$__default['default'](content).parent().is($element)) {
            $element.empty().append(content);
          }
        } else {
          $element.text($__default['default'](content).text());
        }

        return;
      }

      if (this.config.html) {
        if (this.config.sanitize) {
          content = sanitizeHtml(content, this.config.whiteList, this.config.sanitizeFn);
        }

        $element.html(content);
      } else {
        $element.text(content);
      }
    };

    _proto.getTitle = function getTitle() {
      var title = this.element.getAttribute('data-original-title');

      if (!title) {
        title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
      }

      return title;
    } // Private
    ;

    _proto._getPopperConfig = function _getPopperConfig(attachment) {
      var _this3 = this;

      var defaultBsConfig = {
        placement: attachment,
        modifiers: {
          offset: this._getOffset(),
          flip: {
            behavior: this.config.fallbackPlacement
          },
          arrow: {
            element: SELECTOR_ARROW
          },
          preventOverflow: {
            boundariesElement: this.config.boundary
          }
        },
        onCreate: function onCreate(data) {
          if (data.originalPlacement !== data.placement) {
            _this3._handlePopperPlacementChange(data);
          }
        },
        onUpdate: function onUpdate(data) {
          return _this3._handlePopperPlacementChange(data);
        }
      };
      return _extends({}, defaultBsConfig, this.config.popperConfig);
    };

    _proto._getOffset = function _getOffset() {
      var _this4 = this;

      var offset = {};

      if (typeof this.config.offset === 'function') {
        offset.fn = function (data) {
          data.offsets = _extends({}, data.offsets, _this4.config.offset(data.offsets, _this4.element) || {});
          return data;
        };
      } else {
        offset.offset = this.config.offset;
      }

      return offset;
    };

    _proto._getContainer = function _getContainer() {
      if (this.config.container === false) {
        return document.body;
      }

      if (Util.isElement(this.config.container)) {
        return $__default['default'](this.config.container);
      }

      return $__default['default'](document).find(this.config.container);
    };

    _proto._getAttachment = function _getAttachment(placement) {
      return AttachmentMap[placement.toUpperCase()];
    };

    _proto._setListeners = function _setListeners() {
      var _this5 = this;

      var triggers = this.config.trigger.split(' ');
      triggers.forEach(function (trigger) {
        if (trigger === 'click') {
          $__default['default'](_this5.element).on(_this5.constructor.Event.CLICK, _this5.config.selector, function (event) {
            return _this5.toggle(event);
          });
        } else if (trigger !== TRIGGER_MANUAL) {
          var eventIn = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSEENTER : _this5.constructor.Event.FOCUSIN;
          var eventOut = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSELEAVE : _this5.constructor.Event.FOCUSOUT;
          $__default['default'](_this5.element).on(eventIn, _this5.config.selector, function (event) {
            return _this5._enter(event);
          }).on(eventOut, _this5.config.selector, function (event) {
            return _this5._leave(event);
          });
        }
      });

      this._hideModalHandler = function () {
        if (_this5.element) {
          _this5.hide();
        }
      };

      $__default['default'](this.element).closest('.modal').on('hide.bs.modal', this._hideModalHandler);

      if (this.config.selector) {
        this.config = _extends({}, this.config, {
          trigger: 'manual',
          selector: ''
        });
      } else {
        this._fixTitle();
      }
    };

    _proto._fixTitle = function _fixTitle() {
      var titleType = typeof this.element.getAttribute('data-original-title');

      if (this.element.getAttribute('title') || titleType !== 'string') {
        this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
        this.element.setAttribute('title', '');
      }
    };

    _proto._enter = function _enter(event, context) {
      var dataKey = this.constructor.DATA_KEY;
      context = context || $__default['default'](event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $__default['default'](event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
      }

      if ($__default['default'](context.getTipElement()).hasClass(CLASS_NAME_SHOW$4) || context._hoverState === HOVER_STATE_SHOW) {
        context._hoverState = HOVER_STATE_SHOW;
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HOVER_STATE_SHOW;

      if (!context.config.delay || !context.config.delay.show) {
        context.show();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HOVER_STATE_SHOW) {
          context.show();
        }
      }, context.config.delay.show);
    };

    _proto._leave = function _leave(event, context) {
      var dataKey = this.constructor.DATA_KEY;
      context = context || $__default['default'](event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $__default['default'](event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = false;
      }

      if (context._isWithActiveTrigger()) {
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HOVER_STATE_OUT;

      if (!context.config.delay || !context.config.delay.hide) {
        context.hide();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HOVER_STATE_OUT) {
          context.hide();
        }
      }, context.config.delay.hide);
    };

    _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
      for (var trigger in this._activeTrigger) {
        if (this._activeTrigger[trigger]) {
          return true;
        }
      }

      return false;
    };

    _proto._getConfig = function _getConfig(config) {
      var dataAttributes = $__default['default'](this.element).data();
      Object.keys(dataAttributes).forEach(function (dataAttr) {
        if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
          delete dataAttributes[dataAttr];
        }
      });
      config = _extends({}, this.constructor.Default, dataAttributes, typeof config === 'object' && config ? config : {});

      if (typeof config.delay === 'number') {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }

      if (typeof config.title === 'number') {
        config.title = config.title.toString();
      }

      if (typeof config.content === 'number') {
        config.content = config.content.toString();
      }

      Util.typeCheckConfig(NAME$6, config, this.constructor.DefaultType);

      if (config.sanitize) {
        config.template = sanitizeHtml(config.template, config.whiteList, config.sanitizeFn);
      }

      return config;
    };

    _proto._getDelegateConfig = function _getDelegateConfig() {
      var config = {};

      if (this.config) {
        for (var key in this.config) {
          if (this.constructor.Default[key] !== this.config[key]) {
            config[key] = this.config[key];
          }
        }
      }

      return config;
    };

    _proto._cleanTipClass = function _cleanTipClass() {
      var $tip = $__default['default'](this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

      if (tabClass !== null && tabClass.length) {
        $tip.removeClass(tabClass.join(''));
      }
    };

    _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(popperData) {
      this.tip = popperData.instance.popper;

      this._cleanTipClass();

      this.addAttachmentClass(this._getAttachment(popperData.placement));
    };

    _proto._fixTransition = function _fixTransition() {
      var tip = this.getTipElement();
      var initConfigAnimation = this.config.animation;

      if (tip.getAttribute('x-placement') !== null) {
        return;
      }

      $__default['default'](tip).removeClass(CLASS_NAME_FADE$2);
      this.config.animation = false;
      this.hide();
      this.show();
      this.config.animation = initConfigAnimation;
    } // Static
    ;

    Tooltip._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $__default['default'](this);
        var data = $element.data(DATA_KEY$6);

        var _config = typeof config === 'object' && config;

        if (!data && /dispose|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Tooltip(this, _config);
          $element.data(DATA_KEY$6, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Tooltip, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$6;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$4;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$6;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY$6;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY$6;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$4;
      }
    }]);

    return Tooltip;
  }();
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $__default['default'].fn[NAME$6] = Tooltip._jQueryInterface;
  $__default['default'].fn[NAME$6].Constructor = Tooltip;

  $__default['default'].fn[NAME$6].noConflict = function () {
    $__default['default'].fn[NAME$6] = JQUERY_NO_CONFLICT$6;
    return Tooltip._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$7 = 'popover';
  var VERSION$7 = '4.6.0';
  var DATA_KEY$7 = 'bs.popover';
  var EVENT_KEY$7 = "." + DATA_KEY$7;
  var JQUERY_NO_CONFLICT$7 = $__default['default'].fn[NAME$7];
  var CLASS_PREFIX$1 = 'bs-popover';
  var BSCLS_PREFIX_REGEX$1 = new RegExp("(^|\\s)" + CLASS_PREFIX$1 + "\\S+", 'g');

  var Default$5 = _extends({}, Tooltip.Default, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
  });

  var DefaultType$5 = _extends({}, Tooltip.DefaultType, {
    content: '(string|element|function)'
  });

  var CLASS_NAME_FADE$3 = 'fade';
  var CLASS_NAME_SHOW$5 = 'show';
  var SELECTOR_TITLE = '.popover-header';
  var SELECTOR_CONTENT = '.popover-body';
  var Event$1 = {
    HIDE: "hide" + EVENT_KEY$7,
    HIDDEN: "hidden" + EVENT_KEY$7,
    SHOW: "show" + EVENT_KEY$7,
    SHOWN: "shown" + EVENT_KEY$7,
    INSERTED: "inserted" + EVENT_KEY$7,
    CLICK: "click" + EVENT_KEY$7,
    FOCUSIN: "focusin" + EVENT_KEY$7,
    FOCUSOUT: "focusout" + EVENT_KEY$7,
    MOUSEENTER: "mouseenter" + EVENT_KEY$7,
    MOUSELEAVE: "mouseleave" + EVENT_KEY$7
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Popover = /*#__PURE__*/function (_Tooltip) {
    _inheritsLoose(Popover, _Tooltip);

    function Popover() {
      return _Tooltip.apply(this, arguments) || this;
    }

    var _proto = Popover.prototype;

    // Overrides
    _proto.isWithContent = function isWithContent() {
      return this.getTitle() || this._getContent();
    };

    _proto.addAttachmentClass = function addAttachmentClass(attachment) {
      $__default['default'](this.getTipElement()).addClass(CLASS_PREFIX$1 + "-" + attachment);
    };

    _proto.getTipElement = function getTipElement() {
      this.tip = this.tip || $__default['default'](this.config.template)[0];
      return this.tip;
    };

    _proto.setContent = function setContent() {
      var $tip = $__default['default'](this.getTipElement()); // We use append for html objects to maintain js events

      this.setElementContent($tip.find(SELECTOR_TITLE), this.getTitle());

      var content = this._getContent();

      if (typeof content === 'function') {
        content = content.call(this.element);
      }

      this.setElementContent($tip.find(SELECTOR_CONTENT), content);
      $tip.removeClass(CLASS_NAME_FADE$3 + " " + CLASS_NAME_SHOW$5);
    } // Private
    ;

    _proto._getContent = function _getContent() {
      return this.element.getAttribute('data-content') || this.config.content;
    };

    _proto._cleanTipClass = function _cleanTipClass() {
      var $tip = $__default['default'](this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX$1);

      if (tabClass !== null && tabClass.length > 0) {
        $tip.removeClass(tabClass.join(''));
      }
    } // Static
    ;

    Popover._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $__default['default'](this).data(DATA_KEY$7);

        var _config = typeof config === 'object' ? config : null;

        if (!data && /dispose|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Popover(this, _config);
          $__default['default'](this).data(DATA_KEY$7, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Popover, null, [{
      key: "VERSION",
      // Getters
      get: function get() {
        return VERSION$7;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$5;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$7;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY$7;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event$1;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY$7;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$5;
      }
    }]);

    return Popover;
  }(Tooltip);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $__default['default'].fn[NAME$7] = Popover._jQueryInterface;
  $__default['default'].fn[NAME$7].Constructor = Popover;

  $__default['default'].fn[NAME$7].noConflict = function () {
    $__default['default'].fn[NAME$7] = JQUERY_NO_CONFLICT$7;
    return Popover._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$8 = 'scrollspy';
  var VERSION$8 = '4.6.0';
  var DATA_KEY$8 = 'bs.scrollspy';
  var EVENT_KEY$8 = "." + DATA_KEY$8;
  var DATA_API_KEY$6 = '.data-api';
  var JQUERY_NO_CONFLICT$8 = $__default['default'].fn[NAME$8];
  var Default$6 = {
    offset: 10,
    method: 'auto',
    target: ''
  };
  var DefaultType$6 = {
    offset: 'number',
    method: 'string',
    target: '(string|element)'
  };
  var EVENT_ACTIVATE = "activate" + EVENT_KEY$8;
  var EVENT_SCROLL = "scroll" + EVENT_KEY$8;
  var EVENT_LOAD_DATA_API$2 = "load" + EVENT_KEY$8 + DATA_API_KEY$6;
  var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
  var CLASS_NAME_ACTIVE$2 = 'active';
  var SELECTOR_DATA_SPY = '[data-spy="scroll"]';
  var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
  var SELECTOR_NAV_LINKS = '.nav-link';
  var SELECTOR_NAV_ITEMS = '.nav-item';
  var SELECTOR_LIST_ITEMS = '.list-group-item';
  var SELECTOR_DROPDOWN = '.dropdown';
  var SELECTOR_DROPDOWN_ITEMS = '.dropdown-item';
  var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
  var METHOD_OFFSET = 'offset';
  var METHOD_POSITION = 'position';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var ScrollSpy = /*#__PURE__*/function () {
    function ScrollSpy(element, config) {
      var _this = this;

      this._element = element;
      this._scrollElement = element.tagName === 'BODY' ? window : element;
      this._config = this._getConfig(config);
      this._selector = this._config.target + " " + SELECTOR_NAV_LINKS + "," + (this._config.target + " " + SELECTOR_LIST_ITEMS + ",") + (this._config.target + " " + SELECTOR_DROPDOWN_ITEMS);
      this._offsets = [];
      this._targets = [];
      this._activeTarget = null;
      this._scrollHeight = 0;
      $__default['default'](this._scrollElement).on(EVENT_SCROLL, function (event) {
        return _this._process(event);
      });
      this.refresh();

      this._process();
    } // Getters


    var _proto = ScrollSpy.prototype;

    // Public
    _proto.refresh = function refresh() {
      var _this2 = this;

      var autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;
      var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
      var offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;
      this._offsets = [];
      this._targets = [];
      this._scrollHeight = this._getScrollHeight();
      var targets = [].slice.call(document.querySelectorAll(this._selector));
      targets.map(function (element) {
        var target;
        var targetSelector = Util.getSelectorFromElement(element);

        if (targetSelector) {
          target = document.querySelector(targetSelector);
        }

        if (target) {
          var targetBCR = target.getBoundingClientRect();

          if (targetBCR.width || targetBCR.height) {
            // TODO (fat): remove sketch reliance on jQuery position/offset
            return [$__default['default'](target)[offsetMethod]().top + offsetBase, targetSelector];
          }
        }

        return null;
      }).filter(function (item) {
        return item;
      }).sort(function (a, b) {
        return a[0] - b[0];
      }).forEach(function (item) {
        _this2._offsets.push(item[0]);

        _this2._targets.push(item[1]);
      });
    };

    _proto.dispose = function dispose() {
      $__default['default'].removeData(this._element, DATA_KEY$8);
      $__default['default'](this._scrollElement).off(EVENT_KEY$8);
      this._element = null;
      this._scrollElement = null;
      this._config = null;
      this._selector = null;
      this._offsets = null;
      this._targets = null;
      this._activeTarget = null;
      this._scrollHeight = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default$6, typeof config === 'object' && config ? config : {});

      if (typeof config.target !== 'string' && Util.isElement(config.target)) {
        var id = $__default['default'](config.target).attr('id');

        if (!id) {
          id = Util.getUID(NAME$8);
          $__default['default'](config.target).attr('id', id);
        }

        config.target = "#" + id;
      }

      Util.typeCheckConfig(NAME$8, config, DefaultType$6);
      return config;
    };

    _proto._getScrollTop = function _getScrollTop() {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    };

    _proto._getScrollHeight = function _getScrollHeight() {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    };

    _proto._getOffsetHeight = function _getOffsetHeight() {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    };

    _proto._process = function _process() {
      var scrollTop = this._getScrollTop() + this._config.offset;

      var scrollHeight = this._getScrollHeight();

      var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

      if (this._scrollHeight !== scrollHeight) {
        this.refresh();
      }

      if (scrollTop >= maxScroll) {
        var target = this._targets[this._targets.length - 1];

        if (this._activeTarget !== target) {
          this._activate(target);
        }

        return;
      }

      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
        this._activeTarget = null;

        this._clear();

        return;
      }

      for (var i = this._offsets.length; i--;) {
        var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

        if (isActiveTarget) {
          this._activate(this._targets[i]);
        }
      }
    };

    _proto._activate = function _activate(target) {
      this._activeTarget = target;

      this._clear();

      var queries = this._selector.split(',').map(function (selector) {
        return selector + "[data-target=\"" + target + "\"]," + selector + "[href=\"" + target + "\"]";
      });

      var $link = $__default['default']([].slice.call(document.querySelectorAll(queries.join(','))));

      if ($link.hasClass(CLASS_NAME_DROPDOWN_ITEM)) {
        $link.closest(SELECTOR_DROPDOWN).find(SELECTOR_DROPDOWN_TOGGLE).addClass(CLASS_NAME_ACTIVE$2);
        $link.addClass(CLASS_NAME_ACTIVE$2);
      } else {
        // Set triggered link as active
        $link.addClass(CLASS_NAME_ACTIVE$2); // Set triggered links parents as active
        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

        $link.parents(SELECTOR_NAV_LIST_GROUP).prev(SELECTOR_NAV_LINKS + ", " + SELECTOR_LIST_ITEMS).addClass(CLASS_NAME_ACTIVE$2); // Handle special case when .nav-link is inside .nav-item

        $link.parents(SELECTOR_NAV_LIST_GROUP).prev(SELECTOR_NAV_ITEMS).children(SELECTOR_NAV_LINKS).addClass(CLASS_NAME_ACTIVE$2);
      }

      $__default['default'](this._scrollElement).trigger(EVENT_ACTIVATE, {
        relatedTarget: target
      });
    };

    _proto._clear = function _clear() {
      [].slice.call(document.querySelectorAll(this._selector)).filter(function (node) {
        return node.classList.contains(CLASS_NAME_ACTIVE$2);
      }).forEach(function (node) {
        return node.classList.remove(CLASS_NAME_ACTIVE$2);
      });
    } // Static
    ;

    ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $__default['default'](this).data(DATA_KEY$8);

        var _config = typeof config === 'object' && config;

        if (!data) {
          data = new ScrollSpy(this, _config);
          $__default['default'](this).data(DATA_KEY$8, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(ScrollSpy, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$8;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$6;
      }
    }]);

    return ScrollSpy;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](window).on(EVENT_LOAD_DATA_API$2, function () {
    var scrollSpys = [].slice.call(document.querySelectorAll(SELECTOR_DATA_SPY));
    var scrollSpysLength = scrollSpys.length;

    for (var i = scrollSpysLength; i--;) {
      var $spy = $__default['default'](scrollSpys[i]);

      ScrollSpy._jQueryInterface.call($spy, $spy.data());
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$8] = ScrollSpy._jQueryInterface;
  $__default['default'].fn[NAME$8].Constructor = ScrollSpy;

  $__default['default'].fn[NAME$8].noConflict = function () {
    $__default['default'].fn[NAME$8] = JQUERY_NO_CONFLICT$8;
    return ScrollSpy._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$9 = 'tab';
  var VERSION$9 = '4.6.0';
  var DATA_KEY$9 = 'bs.tab';
  var EVENT_KEY$9 = "." + DATA_KEY$9;
  var DATA_API_KEY$7 = '.data-api';
  var JQUERY_NO_CONFLICT$9 = $__default['default'].fn[NAME$9];
  var EVENT_HIDE$3 = "hide" + EVENT_KEY$9;
  var EVENT_HIDDEN$3 = "hidden" + EVENT_KEY$9;
  var EVENT_SHOW$3 = "show" + EVENT_KEY$9;
  var EVENT_SHOWN$3 = "shown" + EVENT_KEY$9;
  var EVENT_CLICK_DATA_API$6 = "click" + EVENT_KEY$9 + DATA_API_KEY$7;
  var CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';
  var CLASS_NAME_ACTIVE$3 = 'active';
  var CLASS_NAME_DISABLED$1 = 'disabled';
  var CLASS_NAME_FADE$4 = 'fade';
  var CLASS_NAME_SHOW$6 = 'show';
  var SELECTOR_DROPDOWN$1 = '.dropdown';
  var SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';
  var SELECTOR_ACTIVE$2 = '.active';
  var SELECTOR_ACTIVE_UL = '> li > .active';
  var SELECTOR_DATA_TOGGLE$4 = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]';
  var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
  var SELECTOR_DROPDOWN_ACTIVE_CHILD = '> .dropdown-menu .active';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Tab = /*#__PURE__*/function () {
    function Tab(element) {
      this._element = element;
    } // Getters


    var _proto = Tab.prototype;

    // Public
    _proto.show = function show() {
      var _this = this;

      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $__default['default'](this._element).hasClass(CLASS_NAME_ACTIVE$3) || $__default['default'](this._element).hasClass(CLASS_NAME_DISABLED$1)) {
        return;
      }

      var target;
      var previous;
      var listElement = $__default['default'](this._element).closest(SELECTOR_NAV_LIST_GROUP$1)[0];
      var selector = Util.getSelectorFromElement(this._element);

      if (listElement) {
        var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE$2;
        previous = $__default['default'].makeArray($__default['default'](listElement).find(itemSelector));
        previous = previous[previous.length - 1];
      }

      var hideEvent = $__default['default'].Event(EVENT_HIDE$3, {
        relatedTarget: this._element
      });
      var showEvent = $__default['default'].Event(EVENT_SHOW$3, {
        relatedTarget: previous
      });

      if (previous) {
        $__default['default'](previous).trigger(hideEvent);
      }

      $__default['default'](this._element).trigger(showEvent);

      if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
        return;
      }

      if (selector) {
        target = document.querySelector(selector);
      }

      this._activate(this._element, listElement);

      var complete = function complete() {
        var hiddenEvent = $__default['default'].Event(EVENT_HIDDEN$3, {
          relatedTarget: _this._element
        });
        var shownEvent = $__default['default'].Event(EVENT_SHOWN$3, {
          relatedTarget: previous
        });
        $__default['default'](previous).trigger(hiddenEvent);
        $__default['default'](_this._element).trigger(shownEvent);
      };

      if (target) {
        this._activate(target, target.parentNode, complete);
      } else {
        complete();
      }
    };

    _proto.dispose = function dispose() {
      $__default['default'].removeData(this._element, DATA_KEY$9);
      this._element = null;
    } // Private
    ;

    _proto._activate = function _activate(element, container, callback) {
      var _this2 = this;

      var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? $__default['default'](container).find(SELECTOR_ACTIVE_UL) : $__default['default'](container).children(SELECTOR_ACTIVE$2);
      var active = activeElements[0];
      var isTransitioning = callback && active && $__default['default'](active).hasClass(CLASS_NAME_FADE$4);

      var complete = function complete() {
        return _this2._transitionComplete(element, active, callback);
      };

      if (active && isTransitioning) {
        var transitionDuration = Util.getTransitionDurationFromElement(active);
        $__default['default'](active).removeClass(CLASS_NAME_SHOW$6).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }
    };

    _proto._transitionComplete = function _transitionComplete(element, active, callback) {
      if (active) {
        $__default['default'](active).removeClass(CLASS_NAME_ACTIVE$3);
        var dropdownChild = $__default['default'](active.parentNode).find(SELECTOR_DROPDOWN_ACTIVE_CHILD)[0];

        if (dropdownChild) {
          $__default['default'](dropdownChild).removeClass(CLASS_NAME_ACTIVE$3);
        }

        if (active.getAttribute('role') === 'tab') {
          active.setAttribute('aria-selected', false);
        }
      }

      $__default['default'](element).addClass(CLASS_NAME_ACTIVE$3);

      if (element.getAttribute('role') === 'tab') {
        element.setAttribute('aria-selected', true);
      }

      Util.reflow(element);

      if (element.classList.contains(CLASS_NAME_FADE$4)) {
        element.classList.add(CLASS_NAME_SHOW$6);
      }

      if (element.parentNode && $__default['default'](element.parentNode).hasClass(CLASS_NAME_DROPDOWN_MENU)) {
        var dropdownElement = $__default['default'](element).closest(SELECTOR_DROPDOWN$1)[0];

        if (dropdownElement) {
          var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(SELECTOR_DROPDOWN_TOGGLE$1));
          $__default['default'](dropdownToggleList).addClass(CLASS_NAME_ACTIVE$3);
        }

        element.setAttribute('aria-expanded', true);
      }

      if (callback) {
        callback();
      }
    } // Static
    ;

    Tab._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $this = $__default['default'](this);
        var data = $this.data(DATA_KEY$9);

        if (!data) {
          data = new Tab(this);
          $this.data(DATA_KEY$9, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Tab, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$9;
      }
    }]);

    return Tab;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $__default['default'](document).on(EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$4, function (event) {
    event.preventDefault();

    Tab._jQueryInterface.call($__default['default'](this), 'show');
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $__default['default'].fn[NAME$9] = Tab._jQueryInterface;
  $__default['default'].fn[NAME$9].Constructor = Tab;

  $__default['default'].fn[NAME$9].noConflict = function () {
    $__default['default'].fn[NAME$9] = JQUERY_NO_CONFLICT$9;
    return Tab._jQueryInterface;
  };

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME$a = 'toast';
  var VERSION$a = '4.6.0';
  var DATA_KEY$a = 'bs.toast';
  var EVENT_KEY$a = "." + DATA_KEY$a;
  var JQUERY_NO_CONFLICT$a = $__default['default'].fn[NAME$a];
  var EVENT_CLICK_DISMISS$1 = "click.dismiss" + EVENT_KEY$a;
  var EVENT_HIDE$4 = "hide" + EVENT_KEY$a;
  var EVENT_HIDDEN$4 = "hidden" + EVENT_KEY$a;
  var EVENT_SHOW$4 = "show" + EVENT_KEY$a;
  var EVENT_SHOWN$4 = "shown" + EVENT_KEY$a;
  var CLASS_NAME_FADE$5 = 'fade';
  var CLASS_NAME_HIDE = 'hide';
  var CLASS_NAME_SHOW$7 = 'show';
  var CLASS_NAME_SHOWING = 'showing';
  var DefaultType$7 = {
    animation: 'boolean',
    autohide: 'boolean',
    delay: 'number'
  };
  var Default$7 = {
    animation: true,
    autohide: true,
    delay: 500
  };
  var SELECTOR_DATA_DISMISS$1 = '[data-dismiss="toast"]';
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Toast = /*#__PURE__*/function () {
    function Toast(element, config) {
      this._element = element;
      this._config = this._getConfig(config);
      this._timeout = null;

      this._setListeners();
    } // Getters


    var _proto = Toast.prototype;

    // Public
    _proto.show = function show() {
      var _this = this;

      var showEvent = $__default['default'].Event(EVENT_SHOW$4);
      $__default['default'](this._element).trigger(showEvent);

      if (showEvent.isDefaultPrevented()) {
        return;
      }

      this._clearTimeout();

      if (this._config.animation) {
        this._element.classList.add(CLASS_NAME_FADE$5);
      }

      var complete = function complete() {
        _this._element.classList.remove(CLASS_NAME_SHOWING);

        _this._element.classList.add(CLASS_NAME_SHOW$7);

        $__default['default'](_this._element).trigger(EVENT_SHOWN$4);

        if (_this._config.autohide) {
          _this._timeout = setTimeout(function () {
            _this.hide();
          }, _this._config.delay);
        }
      };

      this._element.classList.remove(CLASS_NAME_HIDE);

      Util.reflow(this._element);

      this._element.classList.add(CLASS_NAME_SHOWING);

      if (this._config.animation) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        $__default['default'](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }
    };

    _proto.hide = function hide() {
      if (!this._element.classList.contains(CLASS_NAME_SHOW$7)) {
        return;
      }

      var hideEvent = $__default['default'].Event(EVENT_HIDE$4);
      $__default['default'](this._element).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      this._close();
    };

    _proto.dispose = function dispose() {
      this._clearTimeout();

      if (this._element.classList.contains(CLASS_NAME_SHOW$7)) {
        this._element.classList.remove(CLASS_NAME_SHOW$7);
      }

      $__default['default'](this._element).off(EVENT_CLICK_DISMISS$1);
      $__default['default'].removeData(this._element, DATA_KEY$a);
      this._element = null;
      this._config = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _extends({}, Default$7, $__default['default'](this._element).data(), typeof config === 'object' && config ? config : {});
      Util.typeCheckConfig(NAME$a, config, this.constructor.DefaultType);
      return config;
    };

    _proto._setListeners = function _setListeners() {
      var _this2 = this;

      $__default['default'](this._element).on(EVENT_CLICK_DISMISS$1, SELECTOR_DATA_DISMISS$1, function () {
        return _this2.hide();
      });
    };

    _proto._close = function _close() {
      var _this3 = this;

      var complete = function complete() {
        _this3._element.classList.add(CLASS_NAME_HIDE);

        $__default['default'](_this3._element).trigger(EVENT_HIDDEN$4);
      };

      this._element.classList.remove(CLASS_NAME_SHOW$7);

      if (this._config.animation) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        $__default['default'](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }
    };

    _proto._clearTimeout = function _clearTimeout() {
      clearTimeout(this._timeout);
      this._timeout = null;
    } // Static
    ;

    Toast._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $__default['default'](this);
        var data = $element.data(DATA_KEY$a);

        var _config = typeof config === 'object' && config;

        if (!data) {
          data = new Toast(this, _config);
          $element.data(DATA_KEY$a, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config](this);
        }
      });
    };

    _createClass(Toast, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$a;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$7;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$7;
      }
    }]);

    return Toast;
  }();
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $__default['default'].fn[NAME$a] = Toast._jQueryInterface;
  $__default['default'].fn[NAME$a].Constructor = Toast;

  $__default['default'].fn[NAME$a].noConflict = function () {
    $__default['default'].fn[NAME$a] = JQUERY_NO_CONFLICT$a;
    return Toast._jQueryInterface;
  };

  exports.Alert = Alert;
  exports.Button = Button;
  exports.Carousel = Carousel;
  exports.Collapse = Collapse;
  exports.Dropdown = Dropdown;
  exports.Modal = Modal;
  exports.Popover = Popover;
  exports.Scrollspy = ScrollSpy;
  exports.Tab = Tab;
  exports.Toast = Toast;
  exports.Tooltip = Tooltip;
  exports.Util = Util;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bootstrap.js.map


/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true&":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".lh[data-v-6e45ef0f] {\n  line-height: 4;\n}\n.mini-flag-img[data-v-6e45ef0f] {\n  opacity: 0.5;\n}\n.mini-flag-img.active[data-v-6e45ef0f] {\n  opacity: 1;\n  width: 5rem;\n  border: 3px solid black;\n  border-radius: 50px;\n}\n.card.card-course-carrousel[data-v-6e45ef0f]:hover {\n  background-color: #31348B;\n  transition: background-color 0.3s linear;\n}\n.card.card-course-carrousel:hover div[data-v-6e45ef0f] {\n  color: white !important;\n}\n.card-body div[data-v-6e45ef0f] {\n  color: #606060;\n}\n.carousel-indicators[data-v-6e45ef0f] {\n  position: absolute;\n  top: 0%;\n  bottom: 100%;\n}\n.carousel-control-icon[data-v-6e45ef0f] {\n  background-color: #31348B;\n  padding: 20px;\n  border-radius: 10px;\n}\n.carousel-indicators li[data-v-6e45ef0f] {\n  background-color: #31348B;\n}", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true&":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".li-benefits[data-v-3a5f66d2] {\n  text-indent: -4px;\n  margin-left: -2em;\n  font-size: 0.8rem;\n  line-height: 40px;\n}\n.span-payment-methods[data-v-3a5f66d2] {\n  font-size: 0.85rem;\n}\n.select-subtitle[data-v-3a5f66d2] {\n  font-size: 0.8rem;\n  font-weight: 500;\n  line-height: 20px;\n}\n.card-membership-web[data-v-3a5f66d2] {\n  background: #FFFFFF;\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\n}\n.card-membership-web .card-header[data-v-3a5f66d2] {\n  background-color: #31348B;\n  color: white;\n  border-radius: 12px 12px 0 0;\n  transition: background-color 0.3s linear;\n}\n.card-membership-web:hover .card-header[data-v-3a5f66d2] {\n  background-color: #FAB500;\n  color: #31348B;\n}\n.price-web[data-v-3a5f66d2] {\n  font-style: normal;\n  font-weight: 500;\n  font-size: 30px;\n  line-height: 48px;\n  margin-bottom: 0;\n}\n.price-mobile[data-v-3a5f66d2] {\n  font-style: normal;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 48px;\n}\n.card-membership-mobile ul li[data-v-3a5f66d2] {\n  margin: 15px 0 0 0;\n}\n.membership-details[data-v-3a5f66d2] {\n  padding: 0;\n}\n.membership-details li[data-v-3a5f66d2] {\n  list-style: none;\n  border-bottom: 1px solid #B5B5BB;\n}\n.membership-details li h4[data-v-3a5f66d2] {\n  font-size: 1rem;\n  font-weight: 500;\n}\n.w-24[data-v-3a5f66d2] {\n  width: 24% !important;\n}\n.w-38[data-v-3a5f66d2] {\n  width: 38% !important;\n}\n.carousel-indicators[data-v-3a5f66d2] {\n  position: absolute;\n  top: 0%;\n  bottom: 100%;\n}\n.carousel-control-icon[data-v-3a5f66d2] {\n  background-color: #31348B;\n  padding: 20px;\n  border-radius: 10px;\n}\n.carousel-indicators li[data-v-3a5f66d2] {\n  background-color: #31348B;\n}", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true&":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".btn-registro[data-v-6feb5108] {\n  transition: ease all 0.3s;\n  transform: scale(1);\n}\ninput[type=radio][data-v-6feb5108] {\n  border: 0.1em solid red;\n  box-sizing: border-box;\n}\n.iz[data-v-6feb5108] {\n  width: 80px;\n  height: 38px;\n}\n.iz-lg[data-v-6feb5108] {\n  width: 115px;\n  height: 50px;\n}", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true&":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".process-dot[data-v-107001ad] {\n  width: 30px;\n}\n.line1[data-v-107001ad] {\n  position: relative;\n  left: -9px;\n  top: 3px;\n  width: 220%;\n}\n.line2[data-v-107001ad] {\n  position: relative;\n  left: -44px;\n  top: 3px;\n  width: 220%;\n}", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css&":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css& ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "\nspan.courses-title[data-v-0a1453e9] {\n    color : #FFF;\n    background-color: #31348B;\n    border-radius: 50px;\n}\nspan > span.courses-span[data-v-0a1453e9] {\n    color : #FAB500;\n}\npath.country.mexico[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}\npath.country.argentina[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}\npath.country.usa[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}\npath.country.uk[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}\npath.country.croatia[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}\npath.country.france[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}\npath.country.Switzerland[data-v-0a1453e9]:hover { fill : #E4032F; stroke : white;\n}    \n\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.6.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						// Support: Chrome 86+
						// In Chrome, if an element having a focusout handler is blurred by
						// clicking outside of it, it invokes the handler synchronously. If
						// that handler calls `.remove()` on the element, the data is cleared,
						// leaving `result` undefined. We need to guard against this.
						return result && result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		// Suppress native focus or blur as it's already being fired
		// in leverageNative.
		_default: function() {
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/popper.js/dist/esm/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';

var timeoutDuration = function () {
  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
      return 1;
    }
  }
  return 0;
}();

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser && window.Promise;

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var window = element.ownerDocument.defaultView;
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;
    case '#document':
      return element.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

/**
 * Returns the reference node of the reference object, or the reference object itself.
 * @method
 * @memberof Popper.Utils
 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
 * @returns {Element} parent
 */
function getReferenceNode(reference) {
  return reference && reference.referenceNode ? reference.referenceNode : reference;
}

var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */
function isIE(version) {
  if (version === 11) {
    return isIE11;
  }
  if (version === 10) {
    return isIE10;
  }
  return isIE11 || isIE10;
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }

  var noOffsetParent = isIE(10) ? document.body : null;

  // NOTE: 1 DOM access here
  var offsetParent = element.offsetParent || null;
  // Skip hidden elements which don't have an offsetParent
  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }

  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  }

  // .offsetParent will return the closest TH, TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);
}

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
}

function getWindowSizes(document) {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE(10) && getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  try {
    if (isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {}

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
  var width = sizes.width || element.clientWidth || result.width;
  var height = sizes.height || element.clientHeight || result.height;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var isIE10 = isIE(10);
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth);

  // In cases where the parent is fixed, we must ignore negative scroll in offset calc
  if (fixedPosition && isHTML) {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }
  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop);
    var marginLeft = parseFloat(styles.marginLeft);

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  var parentNode = getParentNode(element);
  if (!parentNode) {
    return false;
  }
  return isFixed(parentNode);
}

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

function getFixedPositionOffsetParent(element) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element || !element.parentElement || isIE()) {
    return document.documentElement;
  }
  var el = element.parentElement;
  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
    el = el.parentElement;
  }
  return el || document.documentElement;
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  // NOTE: 1 DOM access here

  var boundaries = { top: 0, left: 0 };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(popper.ownerDocument),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  padding = padding || 0;
  var isPaddingNumber = typeof padding === 'number';
  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var window = element.ownerDocument.defaultView;
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  data.positionFixed = this.options.positionFixed;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style.left = '';
    this.popper.style.right = '';
    this.popper.style.bottom = '';
    this.popper.style.willChange = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicitly asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */
function getRoundedOffsets(data, shouldRound) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var round = Math.round,
      floor = Math.floor;

  var noRound = function noRound(v) {
    return v;
  };

  var referenceWidth = round(reference.width);
  var popperWidth = round(popper.width);

  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
  var isVariation = data.placement.indexOf('-') !== -1;
  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
  var verticalToInteger = !shouldRound ? noRound : round;

  return {
    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
    top: verticalToInteger(popper.top),
    bottom: verticalToInteger(popper.bottom),
    right: horizontalToInteger(popper.right)
  };
}

var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
    // and not the bottom of the html element
    if (offsetParent.nodeName === 'HTML') {
      top = -offsetParent.clientHeight + offsets.bottom;
    } else {
      top = -offsetParentRect.height + offsets.bottom;
    }
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    if (offsetParent.nodeName === 'HTML') {
      left = -offsetParent.clientWidth + offsets.right;
    } else {
      left = -offsetParentRect.width + offsets.right;
    }
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  var _data$offsets$arrow;

  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjunction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;

    // flips variation if reference element overflows boundaries
    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    // flips variation if popper content overflows boundaries
    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);

    var flippedVariation = flippedVariationByRef || flippedVariationByContent;

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  // NOTE: DOM access here
  // resets the popper's position so that the document size can be calculated excluding
  // the size of the popper element itself
  var transformProp = getSupportedPropertyName('transform');
  var popperStyles = data.instance.popper.style; // assignment to help minification
  var top = popperStyles.top,
      left = popperStyles.left,
      transform = popperStyles[transformProp];

  popperStyles.top = '';
  popperStyles.left = '';
  popperStyles[transformProp] = '';

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

  // NOTE: DOM access here
  // restores the original style properties after the offsets have been computed
  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform;

  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */
    boundariesElement: 'viewport',
    /**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariations: false,
    /**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariationsByContent: false
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults = {
  /**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */
  positionFixed: false,

  /**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = debounce(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */


    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;

/* harmony default export */ __webpack_exports__["default"] = (Popper);
//# sourceMappingURL=popper.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true&":
/*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true& ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true& */ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true&":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true& */ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true&":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true& */ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true&":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--7-2!./node_modules/sass-loader/dist/cjs.js??ref--7-3!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true& */ "./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css&":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--6-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-2!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../../node_modules/css-loader??ref--6-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--6-2!../../../../node_modules/vue-loader/lib??vue-loader-options!./Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css&");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=template&id=0a1453e9&scoped=true&":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Cursos.vue?vue&type=template&id=0a1453e9&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass: "container text-center",
      staticStyle: { position: "relative" }
    },
    [
      _c("div", { staticClass: "row justify-content-center" }, [
        _vm._m(0),
        _vm._v(" "),
        _c("div", { staticClass: "map" }, [
          _c(
            "svg",
            {
              staticStyle: { width: "100%", height: "100%" },
              attrs: {
                width: "981",
                height: "627",
                viewBox: "0 0 981 627",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg"
              }
            },
            [
              _c("path", {
                attrs: {
                  d:
                    "M341.789 203.767C351.252 194.115 351.273 178.727 361.292 169.588C371.311 160.449 386.629 161.391 399.143 157.293C410.976 153.359 423.572 144.322 423.531 130.655C423.396 126.465 421.733 122.467 418.851 119.405C422.094 115.525 424.551 111.058 426.088 106.25C431.35 92.0326 432.472 76.6282 429.324 61.8055C437.179 63.8545 446.538 59.1007 448.724 51.0887C451.507 40.9662 441.467 31.4379 431.633 32.36C430.63 25.8986 427.674 19.8929 423.158 15.139C418.642 10.3852 412.78 7.10768 406.347 5.74097C399.914 4.37426 393.216 4.98289 387.139 7.48618C381.063 9.98948 375.895 14.2692 372.321 19.7581C361.48 9.37825 347.622 2.65979 332.718 0.558085C320.479 -0.962284 308.052 0.63603 296.606 5.20272C285.159 9.7694 275.069 17.1544 267.284 26.6635C250.791 22.1965 233.412 18.1188 216.28 20.6802C209.329 21.6165 202.64 23.942 196.617 27.5164C190.593 31.0908 185.361 35.8402 181.233 41.4785C177.676 46.5788 175.542 52.5248 175.049 58.7113C150.165 51.6829 121.963 66.6413 112.892 90.4108C108.968 83.7188 104.292 77.4908 98.9557 71.846C92.1434 64.5232 83.5331 59.0861 73.9693 56.068C64.5346 53.2513 54.3933 53.9209 45.4164 57.9532C41.7457 59.7755 38.4793 62.3098 35.8096 65.4067C33.1399 68.5037 31.121 72.1005 29.872 75.9852C29.6659 76.5794 29.5216 77.1942 29.3566 77.8089C27.0276 77.8255 24.7241 78.2918 22.5741 79.1818C14.3256 82.9009 7.84606 89.6496 4.49397 98.0129C2.14376 103.894 2.4324 111.25 6.76172 116.024C2.747 119.902 0.347691 125.14 0.0409414 130.696C-0.536302 143.913 10.3489 155.428 23.007 157.928C30.1272 159.262 37.4849 158.478 44.1589 155.674C45.82 154.987 47.444 154.214 49.0242 153.359C52.1755 157.876 56.4009 161.549 61.3247 164.051C66.2485 166.553 71.7181 167.808 77.2472 167.703C74.1755 182.046 73.021 197.845 79.1233 211.348C82.1503 218.178 87.2359 223.906 93.678 227.741C90.2835 229.564 87.1264 231.794 84.2772 234.38C81.5163 237.331 79.4712 240.87 78.2986 244.728C74.3404 255.568 73.8456 267.862 74.4022 279.276C75.8453 308.516 86.9985 340.339 110.418 359.702C117.367 365.476 125.317 369.941 133.879 372.878C142.517 375.849 152.165 376.239 161.298 376.034C162.928 380.042 165.959 383.331 169.833 385.296C173.708 387.261 178.166 387.771 182.388 386.73C188.243 399.906 204.797 402.754 217.93 398.287C216.04 402.175 215.454 406.563 216.26 410.807C212.353 411.527 208.724 413.307 205.773 415.951C202.822 418.594 200.665 421.998 199.54 425.786C198.787 428.094 198.541 430.536 198.819 432.947C199.096 435.357 199.89 437.681 201.148 439.761C201.743 440.646 202.434 441.464 203.21 442.199C202.316 445.594 201.92 449.1 202.035 452.608C202.049 458.056 203.348 463.425 205.828 468.284C208.509 473.28 212.39 477.541 217.127 480.687C221.864 483.833 227.309 485.766 232.979 486.316C227.108 505.328 228.004 525.77 235.515 544.203C237.196 548.663 239.433 552.897 242.174 556.805C240.956 558.427 239.952 560.196 239.184 562.071C237.535 566.518 237.554 571.408 239.24 575.842C240.925 580.276 244.163 583.957 248.359 586.209C245.39 593.238 242.854 600.696 243.741 608.36C244.586 615.655 248.338 622.703 255.45 625.613C261.491 628.093 269.139 627.068 272.933 621.331C274.22 619.386 274.946 617.128 275.034 614.801C275.121 612.475 274.565 610.169 273.427 608.134C275.545 607.102 277.314 605.478 278.519 603.462C279.723 601.446 280.311 599.125 280.21 596.782C280.007 594.568 279.18 592.454 277.824 590.685C276.467 588.917 274.636 587.564 272.541 586.783C277.905 580.397 281.406 572.672 282.663 564.448C286.684 565.341 290.871 565.162 294.799 563.927C298.728 562.693 302.258 560.448 305.031 557.419C308.116 553.944 310.071 549.622 310.639 545.022C312.317 544.581 313.901 543.846 315.319 542.85C326.596 534.92 329.008 518.528 323.565 506.438C328.24 505.712 332.703 503.995 336.652 501.404C340.6 498.812 343.941 495.407 346.449 491.418C348.819 487.44 350.288 482.995 350.755 478.395C351.221 473.795 350.673 469.148 349.149 464.78C351.37 465.072 353.63 464.8 355.717 463.991C357.804 463.181 359.651 461.859 361.086 460.149C366.838 453.285 365.209 443.592 361.436 436.236C355.251 423.942 341.624 416.852 328.1 416.216C321.392 415.72 314.697 417.341 308.969 420.847C305.712 408.553 293.363 398.021 280.231 401.299C279.707 398.443 278.48 395.76 276.66 393.489C274.84 391.218 272.483 389.43 269.8 388.284C267.116 387.138 264.188 386.669 261.278 386.92C258.368 387.171 255.566 388.133 253.121 389.722C253.199 386.352 252.154 383.052 250.148 380.335C248.142 377.618 245.287 375.637 242.029 374.702C233.062 372.448 224.774 380.193 224.444 388.8C217.187 391.115 207.766 392.754 201.602 387.652C203.21 385.365 204.037 382.625 203.959 379.835C203.881 377.046 202.903 374.356 201.169 372.161C199.385 370.064 196.947 368.622 194.242 368.063C195.164 365.876 195.526 363.496 195.296 361.136C195.065 358.776 194.25 356.509 192.923 354.539C186.243 345.195 172.678 349.867 165.648 356.588C162.085 352.891 159.845 348.132 159.271 343.044C158.697 337.957 159.822 332.823 162.473 328.433C167.391 333.034 173.352 336.388 179.851 338.211C186.351 340.033 193.197 340.271 199.808 338.904C206.794 337.318 213.23 333.915 218.457 329.043C223.685 324.172 227.515 318.007 229.557 311.18C229.928 309.889 230.258 308.537 230.526 307.205C236.484 306.467 242.009 302.758 246.318 298.783C252.229 293.248 256.628 286.309 259.099 278.62C260.943 273.171 262.032 267.497 262.336 261.756C265.821 264.12 269.951 265.364 274.17 265.321C277.211 265.331 280.203 264.56 282.857 263.085C285.511 261.61 287.738 259.48 289.322 256.9C295.999 257.456 302.698 256.138 308.657 253.095C314.617 250.052 319.596 245.406 323.029 239.687C325.576 235.098 327.032 229.989 327.285 224.754C327.539 219.519 326.584 214.295 324.493 209.484C325.382 209.678 326.285 209.801 327.193 209.852C329.924 209.944 332.642 209.448 335.162 208.397C337.681 207.347 339.942 205.767 341.789 203.767Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M975.604 68.1558C971.337 59.2832 963.234 53.2998 954.164 49.7139C945.093 46.128 934.063 42.9929 924.353 44.5502C916.107 45.9026 907.86 53.2384 909.365 61.947C899.992 62.0891 890.818 64.66 882.75 69.4057C877.98 65.4705 872.023 63.2323 865.827 63.0466C859.63 62.861 853.549 64.7386 848.549 68.3812C846.363 64.8186 843.206 61.9443 839.444 60.0912C835.683 58.2381 831.47 57.4819 827.294 57.9103C823.201 58.4776 819.345 60.1546 816.148 62.7572C812.952 65.3598 810.538 68.7874 809.173 72.6638C802.986 73.8453 797.124 76.3253 791.979 79.938C791.289 76.7981 789.686 73.9289 787.369 71.6873C785.052 69.4456 782.124 67.9303 778.947 67.3299C775.771 66.7294 772.486 67.0703 769.503 68.3101C766.52 69.5499 763.969 71.6339 762.168 74.303C757.154 72.3083 751.71 71.619 746.353 72.3003C740.995 72.9816 735.902 75.011 731.554 78.1963C731.554 66.0247 727.431 53.4638 715.061 48.6484C712.131 47.4275 708.927 47.0005 705.776 47.4108C702.626 47.8211 699.641 49.0542 697.125 50.9844C695.131 52.4913 693.502 54.4246 692.36 56.6414C691.218 58.8581 690.592 61.3016 690.528 63.7912C678.592 65.0821 669.418 77.6431 671.376 89.3229C669.407 90.1848 667.716 91.571 666.49 93.3285C665.264 95.086 664.551 97.1462 664.429 99.2815C664.224 102.362 665.082 105.419 666.861 107.949C662.674 108.881 658.994 111.347 656.554 114.855C654.182 112.556 651.258 110.898 648.06 110.039C644.702 109.087 641.112 109.366 637.945 110.826C634.777 112.285 632.243 114.828 630.804 117.99C629.923 119.972 629.46 122.113 629.444 124.28C627.033 122.632 624.323 121.463 621.465 120.838C618.772 120.278 615.981 120.381 613.336 121.138C610.692 121.895 608.274 123.284 606.292 125.182C604.676 126.741 603.57 128.748 603.118 130.941C602.666 133.134 602.888 135.411 603.756 137.477C600.355 137.931 597.137 139.283 594.438 141.39C591.75 143.573 589.665 146.4 588.381 149.605C587.097 152.81 586.656 156.288 587.099 159.709C583.557 159.678 580.048 160.375 576.791 161.758C576.933 162.196 576.923 162.668 576.762 163.099C576.601 163.531 576.299 163.895 575.904 164.135C574.441 164.975 572.874 165.631 571.41 166.471L570.379 167.106L569.864 167.455C570.008 167.352 569.864 167.455 569.72 167.578C569.402 167.849 569.1 168.136 568.813 168.438C568.665 168.579 568.527 168.729 568.4 168.889L568.235 169.094C567.99 169.468 567.635 169.759 567.219 169.928C566.803 170.096 566.345 170.134 565.906 170.037C565.46 169.913 565.069 169.643 564.796 169.271C564.523 168.9 564.384 168.447 564.401 167.988C564.425 166.891 564.649 165.808 565.061 164.791C565.231 164.271 565.504 163.79 565.865 163.377C566.187 163.052 566.61 162.843 567.065 162.783C567.521 162.724 567.984 162.817 568.38 163.049L568.648 163.254L569.225 162.885C570.751 162.004 572.379 161.308 573.925 160.447C574.361 160.203 574.871 160.125 575.36 160.226C575.849 160.328 576.284 160.603 576.585 161C577.64 159.927 578.446 158.637 578.945 157.221C579.443 155.805 579.623 154.297 579.471 152.804C579.068 149.873 577.925 147.092 576.147 144.72C574.37 142.348 572.017 140.462 569.307 139.239C563.391 136.493 556.464 136.514 549.99 137.456C549.289 131.309 543.146 126.555 536.837 126.227C528.158 125.756 520.18 132.087 513.603 136.944C507.027 141.8 500.286 147.988 498.286 156.349C497.62 159.245 497.494 162.239 497.915 165.18C494.098 167.291 490.658 170.012 487.731 173.233C482.226 179.217 478.907 187.577 482.721 195.343C485.896 201.798 493.317 204.994 500.265 205.015C512.16 205.015 519.458 197.372 525.643 188.294C526.784 190.607 528.373 192.674 530.319 194.375C532.264 196.077 534.529 197.381 536.982 198.212C534.899 200.308 533.418 202.921 532.693 205.778C531.968 208.635 532.025 211.633 532.859 214.461C533.531 216.474 534.612 218.329 536.033 219.912C533.166 221.668 530.796 224.122 529.148 227.042C525.335 224.018 520.872 221.908 516.105 220.877C511.339 219.845 506.397 219.92 501.664 221.096C496.932 222.271 492.536 224.516 488.818 227.654C485.1 230.793 482.16 234.742 480.226 239.194C476.196 237.688 471.771 237.586 467.674 238.903C463.578 240.221 460.052 242.88 457.673 246.447C456.078 249.143 455.209 252.202 455.152 255.328C455.094 258.455 455.849 261.543 457.343 264.295C447.035 264.295 436.871 274.54 439.758 285.442C441.592 292.49 448.004 297.736 454.993 299.396C457.539 300.03 460.186 300.169 462.785 299.806C458.764 301.761 455.077 304.334 451.859 307.428C449.137 310 446.927 313.059 445.344 316.444C444.047 316.064 442.696 315.898 441.345 315.953C431.449 316.362 422.193 324.764 416.606 332.345C405.061 347.918 402.587 369.413 412.875 386.277C423.162 403.141 442.706 410.703 461.734 409.022C465.193 408.753 468.606 408.064 471.898 406.973C475.913 411.526 481.524 414.384 487.586 414.965C489.834 415.18 492.101 415.098 494.328 414.719C493.297 417.956 493.148 421.406 493.895 424.718C495.956 433.857 504.904 439.82 513.975 439.943L510.14 460.229C508.717 467.831 506.924 475.454 506.017 483.158C505.295 489.449 505.666 496.17 509.315 501.6C511.322 504.648 514.191 507.036 517.562 508.465C515.873 511.464 514.847 514.785 514.552 518.209C514.257 521.633 514.7 525.08 515.851 528.32C517.486 532.873 520.328 536.902 524.077 539.982C527.825 543.062 532.341 545.079 537.147 545.82C557.371 549.385 576.77 536.517 585.017 518.567C589.012 510.077 590.444 500.617 589.14 491.334C595.123 490.443 600.739 487.917 605.362 484.038C609.985 480.16 613.433 475.081 615.322 469.368C616.912 463.875 616.986 458.058 615.535 452.528C614.084 446.997 611.162 441.957 607.076 437.935C620.558 432.997 634.474 426.419 639.937 412.301C641.35 409.011 641.996 405.447 641.828 401.874C641.66 398.301 640.683 394.811 638.968 391.667C637.42 389.318 635.363 387.343 632.948 385.886C630.534 384.429 627.822 383.527 625.011 383.245C621.191 382.714 617.303 383.487 613.982 385.437C613.308 380.175 610.876 375.29 607.076 371.565C601.303 365.643 593.469 362.057 588.13 355.643C586.647 354.079 585.499 352.232 584.755 350.214C584.011 348.196 583.686 346.048 583.8 343.902C584.037 341.975 584.84 340.16 586.109 338.684C587.377 337.208 589.055 336.137 590.933 335.603C594.562 334.866 596.83 338.185 596.994 341.197C596.108 340.992 595.201 340.808 594.294 340.665C594.02 340.607 593.737 340.61 593.465 340.675C593.193 340.739 592.939 340.864 592.722 341.039C592.505 341.213 592.329 341.434 592.209 341.685C592.088 341.936 592.026 342.21 592.026 342.488C592.026 344.128 592.026 345.767 592.026 347.427C592.042 347.912 592.251 348.372 592.606 348.706C592.961 349.039 593.434 349.22 593.923 349.209C595.048 349.117 596.132 348.75 597.082 348.143C598.031 347.535 598.815 346.705 599.365 345.726C605.362 347.88 610.552 351.807 614.238 356.98C617.923 362.152 619.927 368.321 619.981 374.659C620.004 375.087 620.162 375.498 620.432 375.832C620.702 376.167 621.07 376.409 621.486 376.524C635.257 378.839 654.018 381.503 663.996 369.106C670.181 361.504 671.727 349.25 664.779 342.468C671.509 342.598 678.18 341.196 684.282 338.37C684 340.833 684.325 343.327 685.23 345.637C686.136 347.947 687.593 350.003 689.477 351.627C691.914 353.503 694.828 354.668 697.893 354.994C700.959 355.32 704.054 354.793 706.836 353.471C706.599 362.004 708.739 370.436 713.02 377.835C718.38 387.261 728.606 395.334 739.45 388.695C745.635 384.884 744.336 376.954 740.563 371.524C748.802 367.242 755.576 360.623 760.024 352.508C762.629 356.957 766.287 360.707 770.681 363.432C775.075 366.157 780.072 367.774 785.237 368.143C783.432 381.8 786.701 395.643 794.432 407.076C792.856 407.768 791.471 408.828 790.394 410.166C789.317 411.503 788.581 413.079 788.247 414.76C786.619 423.694 793.587 433.202 799.194 439.492C805.193 446.257 812.717 451.516 821.15 454.84C825.088 456.377 829.685 457.36 833.726 455.639C835.52 454.874 837.042 453.593 838.096 451.961C839.151 450.328 839.69 448.419 839.643 446.48C839.569 444.209 838.921 441.993 837.757 440.037C836.593 438.081 834.951 436.449 832.984 435.292C829.257 433.316 825.084 432.321 820.862 432.402C820.091 420.181 816.203 408.355 809.564 398.039C814.561 398.3 819.522 397.074 823.814 394.519C828.107 391.965 831.536 388.196 833.664 383.696C835.417 379.252 835.838 374.399 834.876 369.722C833.914 365.046 831.61 360.747 828.242 357.344C834.446 356.517 840.419 354.458 845.806 351.29C851.193 348.122 855.883 343.909 859.599 338.902C863.969 332.792 866.695 325.672 867.518 318.22C868.341 310.767 867.233 303.229 864.299 296.322C861.928 290.622 858.421 285.458 853.991 281.138C856.621 280.252 859.112 279.004 861.392 277.43C861.737 279.104 862.372 280.705 863.268 282.163C864.979 284.871 867.571 286.915 870.613 287.955C873.655 288.995 876.963 288.969 879.988 287.88C883.224 286.829 886.066 284.83 888.141 282.146C890.216 279.463 891.427 276.219 891.615 272.84C891.68 270.181 891.197 267.538 890.198 265.071C889.198 262.605 887.702 260.367 885.802 258.496C891.364 254.484 895.811 249.135 898.728 242.95C901.645 236.764 902.936 229.945 902.48 223.129V222.739C902.83 223.272 903.201 223.764 903.531 224.317C904.629 226.359 905.566 228.483 906.335 230.669C907.799 234.296 910.169 237.411 914.354 237.78C916.293 237.902 918.229 237.507 919.961 236.635C921.694 235.763 923.161 234.446 924.209 232.821C926.401 229.064 927.134 224.64 926.27 220.383C925.498 215.88 923.597 211.642 920.744 208.061C917.891 204.48 914.176 201.671 909.943 199.892C909.86 198.987 909.591 198.108 909.151 197.311C908.711 196.514 908.11 195.816 907.386 195.261C906 194.196 904.286 193.641 902.535 193.689C900.784 193.738 899.103 194.387 897.779 195.527C895.766 197.085 894.383 199.311 893.883 201.798C890.22 197.247 885.642 193.506 880.441 190.814C883.788 182.588 885.712 173.859 886.131 164.996C890.268 165.967 894.577 165.964 898.712 164.987C902.848 164.01 906.697 162.087 909.953 159.371C913.208 156.654 915.781 153.219 917.465 149.34C919.149 145.461 919.898 141.244 919.653 137.026C922.945 137.62 926.318 137.62 929.61 137.026C924.827 148.378 921.013 160.898 923.075 172.844C923.605 176.54 925.173 180.014 927.597 182.866C930.022 185.718 933.206 187.834 936.784 188.97C939.234 189.729 941.811 189.996 944.365 189.755C946.92 189.514 949.4 188.77 951.663 187.566C953.925 186.363 955.923 184.724 957.542 182.745C959.161 180.766 960.367 178.487 961.09 176.04C964.636 164.053 955.565 153.091 947.381 144.894C962.101 136.104 967.069 115.244 958.142 100.777C961.273 100.695 964.343 99.8999 967.116 98.4541C969.889 97.0084 972.292 94.9502 974.14 92.4375C979.665 85.5116 979.377 76.0038 975.604 68.1558ZM580.275 301.22C578.443 305.745 577.263 310.505 576.77 315.358C576.781 315.679 576.717 315.997 576.582 316.288C576.446 316.579 576.244 316.835 575.992 317.034C575.739 317.233 575.443 317.371 575.127 317.436C574.811 317.501 574.484 317.491 574.173 317.407C567.615 315.902 560.831 315.638 554.175 316.629C547.584 317.262 541.203 319.281 535.456 322.551C535.222 322.687 534.963 322.776 534.695 322.813C534.426 322.849 534.152 322.833 533.89 322.765C533.628 322.696 533.381 322.577 533.166 322.413C532.95 322.25 532.768 322.046 532.632 321.813C532.632 321.813 532.632 321.813 532.302 321.424L531.601 320.706C530.962 320.092 530.282 319.518 529.54 318.944C527.808 317.53 525.994 316.239 524.159 314.969C514.973 308.566 505.116 303.173 494.761 298.884C490.407 296.922 485.788 295.603 481.051 294.97C479.137 294.638 477.166 294.896 475.402 295.707L474.784 296.896C474.671 297.163 474.49 297.397 474.259 297.573C474.027 297.749 473.753 297.862 473.464 297.9C472.063 299.252 469.341 297.388 470.331 295.277C470.784 294.341 471.439 293.516 472.248 292.859C475.835 286.056 480.309 279.766 480.804 271.836C480.787 271.376 480.926 270.923 481.199 270.552C481.472 270.18 481.863 269.91 482.309 269.786C485.434 269.526 488.401 268.309 490.802 266.303C491.059 266.05 491.377 265.869 491.726 265.777C492.075 265.685 492.442 265.686 492.791 265.779C493.139 265.872 493.457 266.055 493.712 266.309C493.968 266.563 494.151 266.879 494.245 267.225C495.791 273.946 501.09 281.856 509.171 279.52C512.614 278.557 514.675 275.155 518.139 274.172C522.056 273.065 526.385 274.458 530.323 274.54C530.87 274.54 531.394 274.756 531.781 275.141C532.167 275.525 532.385 276.046 532.385 276.589C532.261 284.274 543.187 290.933 549.887 286.835C550.356 286.564 550.912 286.488 551.437 286.622C551.962 286.756 552.412 287.09 552.691 287.552C555.005 291.948 558.749 295.436 563.313 297.445C567.877 299.455 572.991 299.868 577.822 298.617C579.224 298.31 580.955 299.703 580.275 301.22ZM647.07 337.058L646.926 337.448C646.926 337.591 646.926 337.55 646.699 337.755L646.555 337.96C646.437 338.091 646.297 338.202 646.143 338.288L645.648 338.493H645.504L643.834 339.312C643.515 339.5 643.152 339.599 642.782 339.599C642.509 339.609 642.238 339.546 641.999 339.415C641.748 339.335 641.521 339.194 641.339 339.005C641.082 338.75 640.897 338.432 640.803 338.083C640.706 337.777 640.651 337.46 640.638 337.14V336.956C640.638 336.771 640.638 336.566 640.638 336.362V336.218C640.701 336.042 640.777 335.871 640.865 335.706C640.854 335.673 640.854 335.637 640.865 335.603L641.215 335.152C641.35 335.025 641.495 334.909 641.648 334.804L641.937 334.681L642.226 334.579C642.464 334.537 642.709 334.537 642.947 334.579C643.094 334.501 643.255 334.452 643.421 334.435C643.691 334.363 643.976 334.363 644.246 334.435L645.05 334.62H645.194C645.465 334.685 645.713 334.819 645.916 335.009C645.442 334.64 646.081 335.112 646.122 335.173L646.452 335.583C646.55 335.733 646.62 335.9 646.658 336.075C646.91 336.352 647.081 336.692 647.153 337.058H647.07Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M879.39 428.349C879.359 427.939 879.205 427.548 878.948 427.226C878.69 426.905 878.342 426.667 877.947 426.545C873.824 425.48 869.701 428.39 867.928 431.914C867.018 433.593 866.727 435.535 867.103 437.406C867.479 439.276 868.5 440.957 869.989 442.159C871.332 443.198 872.924 443.872 874.608 444.117C876.291 444.361 878.01 444.167 879.596 443.553C881.169 442.91 882.487 441.773 883.347 440.314C884.207 438.856 884.563 437.158 884.358 435.479C884.233 433.962 883.708 432.504 882.836 431.252C881.964 430 880.775 428.999 879.39 428.349Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M934.496 458.839C940.289 460.888 946.123 458.695 950.762 455.13C951.464 457.364 952.914 459.293 954.872 460.594C956.83 461.895 959.177 462.49 961.523 462.281C969.378 461.359 973.501 452.958 971.831 445.888C969.935 437.364 962.121 432.467 954.431 429.68C947.175 427.037 938.413 425.008 931.301 428.901C931.019 428.442 930.638 428.05 930.185 427.756C929.732 427.462 929.219 427.272 928.682 427.201C927.889 427.112 927.087 427.255 926.373 427.61C925.818 426.346 924.967 425.23 923.891 424.357C922.816 423.484 921.547 422.879 920.189 422.59C915.426 421.627 911.221 425.336 909.881 429.66C909.305 431.982 909.424 434.421 910.222 436.678C911.02 438.934 912.464 440.91 914.375 442.364C918.129 445.159 922.604 446.836 927.28 447.2C926.907 449.674 927.426 452.201 928.747 454.331C930.067 456.461 932.104 458.058 934.496 458.839Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M924.106 257.29C926.132 257.153 928.055 256.356 929.58 255.022C931.104 253.689 932.143 251.893 932.538 249.913C932.852 247.527 932.264 245.111 930.888 243.131C930.179 242.098 929.292 241.196 928.27 240.467C927.136 239.668 925.301 238.828 924.003 239.729C923.734 239.916 923.507 240.157 923.337 240.436C923.167 240.714 923.056 241.025 923.013 241.348C922.192 241.323 921.372 241.42 920.58 241.635C918.728 242.231 917.176 243.512 916.248 245.213C915.319 246.914 915.084 248.905 915.591 250.774C915.993 252.692 917.072 254.404 918.634 255.6C920.196 256.795 922.137 257.395 924.106 257.29Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M892.976 290.239C889.368 298.62 895.037 306.755 903.057 309.665C906.244 310.912 909.729 311.2 913.08 310.493C916.43 309.786 919.497 308.116 921.9 305.689C926.007 301.03 928.665 295.285 929.548 289.153C930.145 286.102 930.436 283 930.414 279.891C930.45 277.825 929.715 275.818 928.352 274.256C928.362 274.195 928.362 274.133 928.352 274.072C926.992 268.621 922.168 262.966 915.983 265.671C909.798 268.375 909.345 274.728 909.798 280.465C906.313 280.107 902.804 280.861 899.779 282.619C896.755 284.376 894.372 287.045 892.976 290.239Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M976.882 507.75C973.793 500.796 968.79 494.851 962.451 490.599C963.797 486.531 963.599 482.114 961.895 478.181C960.808 475.26 958.836 472.745 956.252 470.984C953.667 469.222 950.597 468.301 947.464 468.346C944.065 468.686 940.837 469.991 938.164 472.106C935.492 474.221 933.488 477.055 932.393 480.271C932.19 480.875 932.025 481.491 931.899 482.115C930.281 480.631 928.41 479.444 926.374 478.612C925.396 478.252 924.398 477.951 923.384 477.71C924.272 475.772 924.669 473.648 924.539 471.522C924.41 469.397 923.759 467.335 922.642 465.518C916.911 456.994 905.263 457.321 897.594 462.793C893.39 465.807 889.998 469.804 887.719 474.431C887.558 474.782 887.427 475.145 887.327 475.517C877.72 477.566 870.134 486.316 867.701 495.496C853.662 493.447 838.839 502.996 836.777 517.36C834.468 532.933 846.054 547.604 859.949 553.444C869.083 556.984 878.964 558.189 888.688 556.948C893.803 556.389 898.873 555.478 903.861 554.223L905.613 553.793C906.308 559.405 908.918 564.61 913.007 568.54C917.097 572.471 922.419 574.889 928.085 575.39C945.175 577.439 961.689 566.825 971.378 553.506C981.067 540.187 983.789 522.933 976.882 507.75Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M865.866 408.717C865.942 407.18 865.474 405.664 864.544 404.433C863.614 403.202 862.28 402.332 860.774 401.976C857.125 400.992 853.538 402.631 850.569 404.598C847.472 406.477 844.626 408.735 842.096 411.319C839.886 413.632 838.579 416.653 838.409 419.838C838.239 423.023 839.217 426.164 841.168 428.696C843.171 431.121 845.983 432.752 849.094 433.289C852.204 433.827 855.405 433.237 858.114 431.626C859.632 430.719 860.94 429.504 861.953 428.059C862.965 426.615 863.659 424.975 863.99 423.245C864.527 419.986 864.008 416.642 862.505 413.696C863.461 413.239 864.276 412.536 864.867 411.661C865.457 410.785 865.802 409.769 865.866 408.717Z",
                  fill: "#00A53F"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M116.419 96.4565C111.63 87.562 105.736 79.3009 98.8748 71.8674C92.0607 64.5468 83.451 59.1101 73.8884 56.0894C64.4551 53.2756 54.3173 53.9377 45.3355 57.9541C41.6747 59.7871 38.4171 62.3252 35.752 65.4208C33.087 68.5165 31.0678 72.1079 29.8118 75.9861C28.2897 80.1152 27.9095 84.5744 28.7108 88.8992C29.5122 93.224 31.4657 97.256 34.3679 100.575C34.866 101.036 35.5015 101.324 36.1784 101.394C36.8554 101.464 37.5369 101.313 38.12 100.965C44.0367 97.768 44.3047 90.1863 41.4803 84.8177C37.7489 77.7893 29.5438 76.273 22.4932 79.1417C14.2447 82.8608 7.76523 89.6095 4.41314 97.9729C1.71247 104.735 2.51645 113.505 8.94858 117.972C15.3807 122.439 25.0908 118.792 25.4412 110.78C25.4353 110.514 25.3411 110.257 25.1733 110.049C25.0056 109.842 24.7737 109.695 24.5136 109.632C12.1441 108.116 0.557971 118.361 0.0219596 130.656C-0.555283 143.873 10.3298 155.388 22.988 157.888C30.1081 159.222 37.4659 158.438 44.1398 155.634C49.7473 153.319 56.9422 149.487 58.5709 143.053C59.8284 137.93 55.1074 131.557 49.4381 133.402C43.109 135.451 44.5933 143.811 46.49 148.422C52.1387 162.335 68.4046 169.773 82.8769 167.048L78.3827 162.806C74.5687 178.318 72.3629 196.227 79.1455 211.267C84.4025 222.906 96.3597 232.865 109.842 230.836C110.266 230.807 110.672 230.658 111.013 230.407C111.355 230.156 111.616 229.813 111.768 229.419C111.92 229.025 111.955 228.596 111.869 228.183C111.784 227.769 111.581 227.389 111.286 227.086C106.626 222.742 100.978 223.726 95.6794 226.512C91.5694 228.591 87.7506 231.195 84.32 234.258C81.5534 237.208 79.5015 240.747 78.3208 244.606C74.3832 255.446 73.8678 267.74 74.4451 279.154C75.8882 308.394 87.0413 340.217 110.44 359.581C117.401 365.332 125.349 369.789 133.901 372.736C143.199 375.932 153.672 376.158 163.382 375.83L160.784 373.965C163.093 384.661 175.854 390.235 185.523 385.665L181.627 384.19C187.647 403.534 214.406 404.025 228.012 392.878C230.074 391.219 227.703 387.94 225.415 388.78C217.375 391.444 206.283 393.554 200.078 386.198C200.078 387.387 200.078 388.555 200.078 389.743C202.43 387.589 203.879 384.633 204.136 381.464C204.393 378.296 203.44 375.147 201.467 372.646C199.494 370.144 196.645 368.473 193.487 367.966C190.33 367.458 187.096 368.152 184.43 369.908C183.982 370.202 183.641 370.632 183.459 371.134C183.276 371.636 183.261 372.183 183.416 372.694C183.571 373.205 183.888 373.653 184.32 373.97C184.751 374.288 185.275 374.459 185.812 374.457C195.377 373.842 197.913 361.63 193.027 354.786C185.894 344.807 170.968 350.687 164.454 358.085H167.113C162.773 354.281 160.011 349.008 159.367 343.293C158.723 337.577 160.242 331.827 163.629 327.164H161.155C166.062 332.256 172.195 336.02 178.973 338.099C185.751 340.179 192.951 340.506 199.892 339.049C206.884 337.476 213.328 334.078 218.557 329.204C223.786 324.331 227.613 318.159 229.641 311.324C231.826 304.357 232.033 296.926 230.239 289.85C229.27 286.346 225.291 285.752 222.322 287.207C221.099 287.822 220.02 288.688 219.156 289.748C218.293 290.807 217.665 292.036 217.313 293.354C216.79 294.834 216.606 296.411 216.775 297.971C216.944 299.53 217.462 301.032 218.29 302.368C219.117 303.703 220.235 304.838 221.56 305.689C222.886 306.54 224.386 307.086 225.951 307.288C233.682 308.517 241 303.948 246.422 298.948C252.328 293.408 256.725 286.471 259.204 278.785C261.946 270.992 262.972 262.704 262.214 254.483L257.39 255.917C260.317 262.331 267.471 265.486 274.274 265.486C277.916 265.492 281.472 264.387 284.462 262.321C287.452 260.254 289.732 257.325 290.994 253.929L286.396 256.675C293.512 257.872 300.825 256.906 307.38 253.905C313.935 250.903 319.425 246.006 323.134 239.852C326.553 233.592 327.958 226.441 327.162 219.363C326.366 212.284 323.406 205.618 318.681 200.264C316.887 198.214 313.96 200.94 315.155 203.091C316.424 205.171 318.204 206.896 320.329 208.104C322.453 209.312 324.851 209.964 327.298 209.997C330.023 210.074 332.733 209.565 335.242 208.504C337.751 207.443 339.999 205.855 341.832 203.849C351.295 194.198 351.295 178.81 361.335 169.691C371.643 160.265 386.672 161.495 399.185 157.397C411.019 153.483 423.595 144.426 423.574 130.758C423.574 119.57 409.823 108.69 399.453 116.107C398.934 116.448 398.565 116.973 398.423 117.575C398.281 118.177 398.377 118.811 398.691 119.345C401.845 124.509 408.999 125.595 414.173 123.054C420.626 119.919 423.739 112.644 426.11 106.354C431.898 90.6722 432.668 73.5958 428.316 57.4623L425.1 60.0442C433.346 65.5768 446.148 60.7204 448.746 51.1921C451.756 40.209 439.675 29.902 429.14 32.9142L432.006 34.9633C430.625 21.0295 419.966 8.42755 405.906 5.76373C398.834 4.5585 391.559 5.62511 385.138 8.80873C378.718 11.9923 373.485 17.1273 370.2 23.4679L375.23 22.7097C368.081 15.1887 359.371 9.30362 349.705 5.46276C340.039 1.6219 329.648 -0.0827819 319.253 0.466971C308.857 1.01672 298.707 3.80775 289.505 8.64642C280.304 13.4851 272.272 20.2556 265.966 28.4882L269.718 27.4021C252.483 22.7097 234.3 18.0788 216.344 20.7836C209.391 21.7153 202.7 24.0388 196.676 27.6136C190.653 31.1884 185.421 35.9403 181.297 41.5819C176.9 47.7489 174.649 55.1738 174.885 62.7285L178.411 59.9212C151.218 49.8397 118.625 67.5643 111.327 95.0837C111.249 95.546 111.35 96.0204 111.609 96.4123C111.867 96.8043 112.265 97.0851 112.722 97.1988C113.18 97.3124 113.664 97.2507 114.077 97.0258C114.491 96.8009 114.805 96.4294 114.955 95.9853C121.532 71.1708 152.332 55.7206 176.349 65.1259C176.785 65.3373 177.267 65.4355 177.751 65.4113C178.235 65.387 178.705 65.2412 179.117 64.9874C179.529 64.7335 179.869 64.38 180.106 63.9599C180.343 63.5398 180.469 63.0667 180.472 62.5851C180.184 46.5816 193.811 34.0822 208.221 29.4102C227.724 23.099 248.834 29.5537 267.76 34.8608C268.42 35.0383 269.117 35.0329 269.775 34.8451C270.433 34.6573 271.026 34.2942 271.491 33.7953C280.332 22.1555 292.853 13.807 307.041 10.0908C321.23 6.37459 336.264 7.50637 349.728 13.3044C357.581 16.5925 364.716 21.3667 370.736 27.3612C371.093 27.6944 371.521 27.9427 371.989 28.0873C372.457 28.232 372.952 28.2692 373.436 28.1962C373.92 28.1232 374.382 27.9419 374.785 27.6659C375.189 27.3899 375.524 27.0265 375.766 26.603C378.283 21.2871 382.436 16.9049 387.625 14.0906C392.813 11.2762 398.768 10.1756 404.628 10.9479C410.547 12.0113 415.968 14.9304 420.097 19.2777C424.226 23.6251 426.846 29.1722 427.573 35.1067C427.588 35.4441 427.68 35.7739 427.841 36.071C428.003 36.3682 428.23 36.625 428.506 36.8223C428.782 37.0195 429.099 37.152 429.434 37.2098C429.769 37.2676 430.112 37.2491 430.439 37.1558C437.943 34.9838 447.055 42.8728 444.272 50.7003C443.615 52.2556 442.628 53.6516 441.378 54.793C440.128 55.9343 438.646 56.794 437.031 57.3134C435.416 57.8328 433.708 57.9997 432.022 57.8026C430.336 57.6055 428.714 57.0491 427.264 56.1714C425.553 55.0239 423.595 57.0115 424.048 58.7327C427.619 72.0153 427.527 86.0086 423.78 99.2433C422.131 105.063 419.987 111.743 415.802 116.292C412.544 119.857 405.638 122.152 402.731 116.866C402.463 117.952 402.216 119.038 401.948 120.124C403.742 119.087 405.829 118.664 407.888 118.919C409.948 119.175 411.866 120.094 413.349 121.537C415.03 122.897 416.291 124.702 416.984 126.743C417.677 128.785 417.775 130.979 417.266 133.074C414.689 144.713 402.134 149.344 391.764 151.639C386.062 152.873 380.438 154.44 374.921 156.331C369.712 157.928 364.782 160.312 360.304 163.4C350.553 170.757 348.574 182.15 343.626 192.559C341.152 197.743 337.441 203.337 331.669 205.058C326.948 206.452 321.361 205.407 319.052 200.776L315.526 203.604C319.276 208.278 321.501 213.977 321.907 219.941C322.312 225.906 320.877 231.851 317.794 236.983C314.659 241.733 310.176 245.45 304.913 247.665C299.65 249.879 293.844 250.49 288.231 249.421C287.418 249.233 286.565 249.311 285.8 249.643C285.035 249.975 284.398 250.544 283.984 251.265C280.521 259.462 266.667 260.917 261.822 253.315C261.475 252.823 260.967 252.466 260.385 252.305C259.803 252.143 259.182 252.187 258.629 252.428C258.075 252.669 257.623 253.093 257.348 253.629C257.074 254.164 256.994 254.777 257.122 255.364C259.046 262.164 258.867 269.383 256.606 276.08C254.223 282.709 250.287 288.679 245.123 293.497C240.629 297.595 232.61 303.476 226.074 300.751C225.106 300.393 224.308 299.687 223.839 298.773C223.369 297.858 223.262 296.802 223.539 295.813C223.807 294.419 224.508 292.801 225.992 293.231L223.621 290.956C224.958 296.68 224.907 302.637 223.473 308.337C222.039 314.037 219.264 319.317 215.375 323.742C211.255 328.27 206.002 331.633 200.151 333.49C194.299 335.347 188.058 335.632 182.06 334.315C175.093 332.937 168.686 329.561 163.629 324.602C163.301 324.277 162.856 324.094 162.392 324.094C161.928 324.094 161.484 324.277 161.155 324.602C157.105 329.947 155.211 336.602 155.844 343.263C156.477 349.924 159.592 356.109 164.577 360.605C164.935 360.947 165.411 361.138 165.907 361.138C166.403 361.138 166.88 360.947 167.237 360.605C171.896 355.441 183.42 349.212 189.09 356.507C191.852 360.093 191.605 369.027 185.75 369.396L187.11 373.945C187.923 373.332 188.848 372.885 189.834 372.629C190.82 372.372 191.848 372.311 192.857 372.449C193.867 372.587 194.84 372.921 195.72 373.433C196.6 373.944 197.369 374.623 197.985 375.43C198.601 376.237 199.051 377.157 199.309 378.138C199.568 379.118 199.629 380.139 199.49 381.142C199.351 382.146 199.015 383.113 198.501 383.987C197.986 384.862 197.303 385.627 196.491 386.239C196.051 386.728 195.816 387.366 195.835 388.022C195.854 388.678 196.126 389.301 196.594 389.764C203.954 398.534 217.21 396.772 226.878 393.575L224.281 389.477C213.602 398.165 191.296 398.083 186.636 382.797C186.516 382.417 186.31 382.069 186.035 381.779C185.759 381.489 185.422 381.264 185.047 381.123C184.672 380.981 184.27 380.925 183.871 380.959C183.471 380.994 183.085 381.117 182.74 381.321C175.895 384.518 167.34 379.58 165.835 372.531C165.664 371.976 165.317 371.492 164.844 371.152C164.371 370.811 163.8 370.634 163.217 370.646C147.458 370.952 132.014 366.242 119.14 357.204C107.976 348.851 99.1011 337.845 93.3291 325.197C87.5522 312.863 83.661 299.74 81.7843 286.264C79.8469 274.88 79.8051 263.257 81.6606 251.86C82.2722 247.499 83.7885 243.313 86.1136 239.565C86.5146 238.959 86.9775 238.396 87.4949 237.885L88.2989 237.147C87.8659 237.516 88.2989 237.147 88.402 237.147C89.0823 236.614 89.8245 236.143 90.4636 235.631C94.9784 232.393 102.689 225.508 108.173 230.488L109.038 226.82C96.8751 228.869 85.9899 218.787 81.8462 208.214C76.3624 194.219 82.0729 178.564 85.2065 164.773C85.3483 164.166 85.3285 163.533 85.149 162.936C84.9695 162.338 84.6364 161.798 84.1827 161.368C83.729 160.938 83.1704 160.632 82.5618 160.482C81.9532 160.332 81.3157 160.342 80.7122 160.511C76.2052 161.29 71.5732 160.922 67.2477 159.442C62.9221 157.963 59.0436 155.419 55.9733 152.048C53.1489 149.036 49.7886 144.815 49.4381 140.594C49.1907 138.074 50.8193 135.984 53.252 137.807C54.2533 138.632 54.8928 139.811 55.0351 141.096C55.1775 142.381 54.8116 143.671 54.0148 144.692C51.211 149.323 44.9232 152.233 39.9548 153.872C34.454 155.754 28.5489 156.15 22.8436 155.02C12.7831 152.848 3.98015 144.487 2.68136 134.098C1.19702 122.48 11.608 110.267 23.8332 112.255L22.9055 111.087C22.6211 112.84 21.705 114.43 20.3281 115.561C18.9512 116.692 17.2075 117.287 15.422 117.234C13.5989 117.117 11.8544 116.453 10.4189 115.33C8.98339 114.207 7.92436 112.678 7.38176 110.944C4.49554 103.382 9.44335 95.6779 14.5355 90.4527C18.906 85.9652 27.9151 79.6335 34.203 84.3054C37.0067 86.3545 40.1816 93.6903 35.5843 95.6369L39.1095 96.9688C31.3992 86.498 37.2747 70.7609 48.3042 65.1874C63.3743 57.5853 81.7843 65.6997 93.2054 76.0886C100.483 83.0536 107.126 90.6443 113.058 98.772C113.39 99.0535 113.804 99.223 114.239 99.2563C114.674 99.2895 115.108 99.1846 115.479 98.9568C115.851 98.729 116.14 98.39 116.305 97.9886C116.47 97.5872 116.503 97.144 116.398 96.7229L116.419 96.4565Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M90.9995 330.646C94.6345 324.048 100.01 318.561 106.549 314.773C113.087 310.986 120.541 309.042 128.108 309.151C135.39 309.393 142.474 311.573 148.621 315.462C150.126 316.405 151.507 317.511 152.991 318.495C154.541 319.396 156.023 320.41 157.424 321.527C160.227 324.048 161.547 327.921 164.433 330.277C165.402 331.076 167.237 330.564 167.113 329.109C166.824 326.097 164.598 323.372 162.784 321.097C160.938 318.602 158.941 316.221 156.805 313.966C151.809 309.611 145.766 306.611 139.261 305.258C133.083 303.757 126.639 303.698 120.434 305.085C114.229 306.471 108.431 309.265 103.493 313.249C97.8202 317.826 93.3021 323.657 90.2985 330.277C90.2661 330.365 90.2664 330.461 90.2995 330.548C90.3325 330.636 90.3961 330.708 90.4786 330.753C90.5611 330.798 90.6569 330.812 90.7487 330.792C90.8406 330.772 90.9222 330.72 90.9788 330.646H90.9995Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M226.672 389.333C224.359 390.531 222.307 392.172 220.633 394.161C218.96 396.15 217.698 398.448 216.92 400.924C216.142 403.399 215.864 406.002 216.101 408.584C216.338 411.166 217.086 413.677 218.302 415.971L222.199 410.643C217.232 410.084 212.226 411.295 208.074 414.061C203.921 416.826 200.89 420.967 199.521 425.745C198.774 428.051 198.531 430.488 198.808 432.895C199.086 435.301 199.877 437.621 201.129 439.699C203.356 443.162 207.829 446.605 212.138 444.576C215.189 443.162 217.189 438.675 215.272 435.622C212.715 431.523 207.768 434.003 205.582 436.974C202.428 441.277 201.892 447.404 201.933 452.547C201.948 457.997 203.255 463.368 205.747 468.223C208.764 473.914 213.352 478.632 218.971 481.822C224.591 485.012 231.01 486.543 237.475 486.234L234.279 482.279C226.944 502.322 227.348 524.357 235.413 544.121C237.163 548.92 239.592 553.447 242.629 557.563C244.958 560.391 250.03 562.399 252.05 558.096C253.349 555.309 251.597 550.863 247.927 551.949C243.804 553.199 240.526 558.26 239.062 561.948C237.264 566.806 237.444 572.169 239.566 576.896C241.688 581.624 245.583 585.34 250.422 587.254C250.071 586.086 249.741 584.898 249.391 583.73C246.03 591.455 242.711 599.774 243.701 608.319C244.546 615.614 248.319 622.663 255.411 625.552C261.451 628.031 269.079 627.007 272.872 621.29C276.109 616.393 275.82 609.139 271.017 605.348C270.728 606.598 270.419 607.868 270.11 609.118C273.004 608.678 275.629 607.182 277.473 604.922C279.317 602.661 280.248 599.799 280.083 596.894C279.918 593.988 278.67 591.248 276.582 589.208C274.494 587.168 271.716 585.975 268.79 585.861C269.306 587.009 269.801 588.136 270.316 589.263C277.793 581.509 282.294 571.393 283.036 560.678L279.531 563.464C283.904 565.088 288.666 565.371 293.201 564.275C297.737 563.179 301.837 560.755 304.971 557.317C308.176 553.745 310.165 549.259 310.653 544.498C311.142 539.736 310.106 534.943 307.692 530.802C307.433 530.384 307.068 530.042 306.634 529.808C306.2 529.574 305.712 529.458 305.219 529.47C299.467 529.613 297.405 536.089 299.384 540.74C302.126 547.215 310.476 546.129 315.258 542.789C327.422 534.224 329.298 515.823 322.206 503.59L320.495 506.725C325.745 506.405 330.843 504.841 335.362 502.164C339.88 499.487 343.689 495.774 346.471 491.336C349.344 486.453 350.876 480.905 350.912 475.248C350.948 469.591 349.488 464.023 346.677 459.104L342.987 462.075C345.649 464.204 349.051 465.196 352.448 464.835C355.845 464.474 358.959 462.789 361.108 460.149C366.88 453.305 365.231 443.613 361.458 436.277C355.274 423.983 341.667 416.893 328.143 416.258C320.57 415.636 313.034 417.826 306.991 422.405L309.486 422.979C307.053 409.25 292.993 396.894 278.562 401.832L280.624 403.328C280.364 399.831 279.071 396.488 276.907 393.719C274.743 390.949 271.804 388.877 268.46 387.761C265.115 386.645 261.514 386.535 258.107 387.445C254.7 388.355 251.639 390.245 249.308 392.877L252.153 394.927C252.918 392.946 253.261 390.83 253.163 388.712C253.064 386.593 252.526 384.517 251.581 382.616C250.636 380.714 249.305 379.027 247.672 377.662C246.039 376.297 244.14 375.282 242.093 374.682C232.342 372.243 223.394 381.587 224.569 391.074C224.817 392.898 227.703 392.857 227.476 391.074C226.569 383.943 233.95 376.628 241.206 378.39C242.726 378.835 244.14 379.58 245.363 380.58C246.587 381.58 247.594 382.816 248.326 384.213C249.057 385.609 249.498 387.138 249.62 388.708C249.743 390.278 249.546 391.857 249.04 393.349C248.36 395.07 250.422 397.037 251.885 395.398C253.737 393.233 256.191 391.659 258.938 390.874C261.686 390.088 264.605 390.125 267.332 390.98C270.058 391.835 272.47 393.47 274.266 395.681C276.062 397.892 277.162 400.581 277.428 403.41C277.441 403.652 277.508 403.888 277.625 404.101C277.742 404.313 277.905 404.497 278.103 404.639C278.301 404.781 278.528 404.876 278.768 404.919C279.008 404.961 279.255 404.95 279.49 404.885C290.89 400.787 308.352 409.414 306.662 423.061C306.517 424.044 307.363 425.294 308.517 424.823C314.798 422.022 321.703 420.892 328.556 421.544C335.168 422.356 341.43 424.957 346.656 429.064C352.26 433.203 356.188 439.201 357.727 445.969C358.449 449.781 358.366 454.535 355.253 457.342C353.027 459.391 348.903 460.866 346.306 458.694C345.878 458.326 345.333 458.119 344.767 458.11C344.201 458.101 343.649 458.29 343.209 458.644C342.769 458.999 342.469 459.495 342.36 460.048C342.252 460.6 342.342 461.173 342.616 461.666C344.933 465.886 346.129 470.625 346.089 475.434C346.05 480.242 344.776 484.961 342.389 489.144C340.1 492.977 336.918 496.207 333.112 498.564C329.306 500.921 324.986 502.335 320.515 502.688C320.151 502.695 319.794 502.797 319.482 502.986C319.17 503.174 318.914 503.441 318.74 503.76C318.566 504.079 318.48 504.438 318.492 504.8C318.503 505.163 318.611 505.516 318.804 505.823C321.316 510.194 322.576 515.164 322.449 520.195C322.322 525.227 320.812 530.128 318.083 534.367C315.753 537.912 309.836 543.978 305.012 541.293C304.375 540.869 303.877 540.268 303.58 539.565C303.283 538.862 303.201 538.088 303.342 537.339C303.342 536.744 303.817 534.962 304.744 535.085L302.683 533.179C304.072 536.424 304.543 539.985 304.046 543.477C303.548 546.969 302.1 550.26 299.858 552.994C297.485 555.484 294.466 557.274 291.133 558.167C287.801 559.06 284.286 559.021 280.974 558.055C280.552 557.959 280.113 557.959 279.691 558.056C279.269 558.153 278.874 558.343 278.537 558.614C278.2 558.884 277.928 559.227 277.743 559.616C277.559 560.005 277.465 560.432 277.47 560.862C277.596 570.382 274.013 579.582 267.471 586.537C267.212 586.83 267.042 587.191 266.982 587.577C266.922 587.963 266.974 588.358 267.132 588.715C267.29 589.072 267.548 589.377 267.874 589.594C268.201 589.811 268.583 589.931 268.976 589.939C270.819 590.146 272.53 590.99 273.811 592.323C275.092 593.656 275.862 595.394 275.985 597.234C275.962 599.045 275.299 600.79 274.111 602.165C272.924 603.54 271.289 604.456 269.491 604.754C267.76 605 266.296 607.274 267.986 608.647C268.748 609.354 269.36 610.205 269.785 611.151C270.21 612.096 270.439 613.117 270.461 614.152C270.482 615.188 270.294 616.217 269.908 617.179C269.522 618.141 268.945 619.016 268.213 619.753C264.647 623.462 258.359 622.417 254.607 619.589C250.154 616.249 248.566 610.286 248.669 605C248.669 598.422 251.452 592.172 254.05 586.23C254.23 585.88 254.329 585.495 254.341 585.102C254.353 584.709 254.278 584.318 254.12 583.958C253.962 583.598 253.726 583.277 253.429 583.017C253.132 582.758 252.781 582.568 252.401 582.46C249.227 581.427 246.516 579.323 244.739 576.512C242.962 573.701 242.23 570.361 242.67 567.071C243.168 563.751 244.746 560.685 247.164 558.342C247.934 557.838 248.659 557.269 249.329 556.641C248.899 556.337 248.436 556.083 247.948 555.883C247.948 555.883 247.824 556.19 247.948 556.211C247.461 555.764 247.013 555.277 246.608 554.756C245.911 553.878 245.297 552.938 244.773 551.949C238.806 541.839 235.307 530.48 234.555 518.783C233.803 507.086 235.82 495.377 240.444 484.595C240.708 484.099 240.838 483.544 240.822 482.984C240.805 482.423 240.642 481.876 240.349 481.397C240.056 480.918 239.643 480.522 239.15 480.25C238.657 479.977 238.101 479.836 237.537 479.841C229.914 480.393 222.344 478.212 216.199 473.694C213.055 471.222 210.445 468.143 208.529 464.643C206.612 461.142 205.427 457.293 205.046 453.326C204.658 449.215 205.229 445.071 206.716 441.216C207.438 439.371 208.778 436.728 211.107 436.605C213.437 436.482 213.169 438.49 212.509 439.904C210.448 443.818 205.974 440.375 204.655 437.712C203.954 436.183 203.569 434.531 203.523 432.852C203.477 431.173 203.77 429.501 204.386 427.937C206.737 421.667 213.643 416.217 220.611 417.692C221.298 417.841 222.014 417.789 222.672 417.541C223.33 417.294 223.901 416.861 224.316 416.297C224.731 415.732 224.972 415.06 225.01 414.362C225.047 413.664 224.88 412.97 224.528 412.364C222.894 409.154 222.466 405.469 223.32 401.972C224.174 398.476 226.254 395.396 229.187 393.287C229.696 392.975 230.059 392.474 230.196 391.896C230.333 391.318 230.234 390.709 229.919 390.203C229.605 389.698 229.101 389.337 228.519 389.201C227.938 389.065 227.325 389.164 226.817 389.476L226.672 389.333Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M565.843 173.625C565.926 170.926 565.864 168.224 565.658 165.532C565.116 163.321 563.942 161.314 562.277 159.753C561.597 159.015 560.442 160.019 560.937 160.839C562.139 162.569 563.911 163.828 565.948 164.397C567.985 164.965 570.157 164.809 572.09 163.954C574.384 163.198 576.35 161.688 577.665 159.673C578.98 157.658 579.566 155.258 579.326 152.868C578.924 149.94 577.78 147.161 576.003 144.792C574.225 142.423 571.872 140.542 569.163 139.324C562.112 136.025 553.598 136.68 546.155 138.156L549.557 141.352C551.618 133.463 544.259 126.701 536.693 126.291C528.013 125.841 520.056 132.172 513.459 137.008C506.862 141.844 500.161 148.053 498.162 156.434C496.574 163.073 497.791 172.826 504.449 176.494C511.562 180.49 516.345 168.441 510.139 164.527C502.718 159.835 492.389 168.093 487.586 173.298C482.081 179.281 478.783 187.641 482.597 195.407C485.772 201.841 493.173 205.038 500.12 205.059C522.055 205.059 528.364 178.994 540.795 166.126C541.271 165.597 541.562 164.93 541.626 164.224C541.691 163.518 541.524 162.81 541.152 162.205C540.779 161.6 540.22 161.13 539.558 160.866C538.896 160.602 538.166 160.556 537.476 160.737C526.88 164.589 520.571 177.314 525.251 187.846C527.597 192.719 531.773 196.481 536.882 198.325C541.99 200.168 547.622 199.944 552.567 197.702C555.412 196.411 553.412 192.743 551.021 192.539C539.723 191.576 529.23 203.604 532.879 214.607C533.771 216.955 535.15 219.089 536.925 220.873C538.701 222.657 540.834 224.049 543.186 224.961C545.538 225.873 548.056 226.284 550.578 226.166C553.099 226.049 555.568 225.406 557.824 224.279C558.159 224.046 558.43 223.735 558.614 223.373C558.798 223.01 558.89 222.608 558.879 222.202C558.869 221.797 558.758 221.4 558.556 221.047C558.354 220.694 558.067 220.397 557.721 220.181C547.413 212.784 531.374 218.705 527.704 230.611L531.827 229.443C527.965 225.677 523.202 222.949 517.987 221.515C512.772 220.082 507.276 219.99 502.015 221.248C496.755 222.506 491.902 225.073 487.914 228.707C483.926 232.341 480.932 236.924 479.216 242.024L482.803 240.487C478.621 238.195 473.724 237.554 469.088 238.694C464.453 239.833 460.42 242.669 457.796 246.635C452.601 254.933 455.734 266.265 463.671 271.572C466.001 273.129 468.846 269.339 466.599 267.597C454.6 258.335 436.108 271.285 439.798 285.629C441.654 292.657 448.045 297.821 455.054 299.563C458.753 300.479 462.635 300.364 466.273 299.228C469.91 298.093 473.162 295.982 475.67 293.129C478.602 289.764 480.67 285.744 481.697 281.411C482.724 277.079 482.679 272.564 481.566 268.253L478.515 271.449C482.577 272.019 486.717 271.358 490.395 269.552C494.073 267.746 497.118 264.879 499.131 261.327C500.491 258.888 496.822 255.978 495.008 258.335C488.823 266.408 493.234 278.314 502.409 282.022C504.83 282.94 507.446 283.233 510.013 282.874C512.579 282.516 515.013 281.518 517.087 279.973C522.2 276.101 520.963 270.384 516.551 266.531C516.043 266.127 515.401 265.926 514.751 265.97C514.102 266.014 513.492 266.298 513.044 266.767C512.595 267.236 512.34 267.855 512.329 268.502C512.318 269.149 512.552 269.777 512.984 270.261C515.793 273.489 519.545 275.765 523.718 276.772C527.89 277.779 532.275 277.465 536.26 275.875L534.198 271.203C531.188 273.416 526.673 276.551 528.013 280.916C529.292 284.809 534.672 288.088 538.321 289.112C542.519 290.255 546.998 289.753 550.834 287.709C554.67 285.665 557.571 282.236 558.937 278.129C559.054 277.629 559.02 277.105 558.84 276.623C558.66 276.142 558.342 275.723 557.925 275.42C557.507 275.116 557.01 274.942 556.493 274.917C555.977 274.892 555.465 275.019 555.02 275.281C547.165 279.85 548.32 290.649 553.495 296.817C561.37 306.181 575.574 302.964 585.738 300.177L583.058 295.833C580.003 298.759 577.7 302.369 576.34 306.363C574.98 310.356 574.605 314.616 575.244 318.783L578.543 316.16C570.672 314.09 562.462 313.618 554.404 314.773C546.345 315.928 538.604 318.685 531.642 322.881L535.332 323.742C518.984 297.104 476.268 283.887 451.673 307.493C448.385 310.464 445.911 314.218 444.483 318.401C443.055 322.584 442.72 327.059 443.509 331.406C443.769 332.193 444.329 332.848 445.069 333.231C445.808 333.614 446.669 333.694 447.467 333.455C449.391 332.687 450.954 331.228 451.844 329.368C452.734 327.507 452.886 325.381 452.271 323.414C451.631 321.085 450.184 319.055 448.185 317.683C446.185 316.31 443.763 315.684 441.344 315.914C431.469 316.324 422.192 324.746 416.605 332.307C405.081 347.88 402.607 369.355 412.874 386.219C423.141 403.083 442.705 410.644 461.734 408.964C469.341 408.308 481.319 405.521 482.597 396.3C482.714 395.462 482.65 394.608 482.409 393.796C482.169 392.983 481.757 392.231 481.201 391.59C480.645 390.948 479.958 390.431 479.186 390.074C478.413 389.717 477.573 389.527 476.721 389.518C474.711 389.585 472.794 390.38 471.332 391.754C469.87 393.127 468.964 394.985 468.784 396.977C467.733 407.222 478.659 414.066 487.586 414.886C496.512 415.705 505.996 411.812 510.449 403.738C510.616 403.389 510.679 402.999 510.633 402.615C510.586 402.23 510.43 401.867 510.184 401.567C509.939 401.267 509.612 401.042 509.243 400.919C508.874 400.795 508.477 400.778 508.099 400.87C503.173 402.354 498.984 405.616 496.356 410.015C493.727 414.413 492.849 419.63 493.894 424.639C496.306 435.008 507.459 441.298 517.664 439.557L514.593 436.647C513.108 444.474 511.631 452.309 510.16 460.15C508.738 467.752 506.944 475.375 506.037 483.079C505.336 489.37 505.707 496.091 509.356 501.521C510.874 503.962 513 505.972 515.528 507.358C518.056 508.743 520.9 509.457 523.787 509.431C522.962 507.607 522.158 505.783 521.354 503.96C514.531 509.943 513.108 519.922 515.953 528.221C517.583 532.777 520.423 536.809 524.173 539.89C527.922 542.971 532.441 544.986 537.249 545.72C557.453 549.285 576.852 536.417 585.078 518.467C589.74 508.706 590.953 497.668 588.521 487.137L585.284 491.604C591.981 491.408 598.455 489.17 603.828 485.192C609.201 481.215 613.214 475.692 615.321 469.371C617.162 463.033 616.987 456.284 614.821 450.049C612.655 443.813 608.603 438.395 603.22 434.536C603.034 436.176 602.869 437.815 602.684 439.454C617.445 434.311 633.958 427.918 640.019 412.242C641.433 408.952 642.078 405.386 641.907 401.812C641.735 398.238 640.752 394.75 639.03 391.608C637.485 389.26 635.432 387.285 633.021 385.828C630.61 384.371 627.901 383.468 625.093 383.186C622.03 382.66 618.878 383.067 616.052 384.354C613.227 385.642 610.859 387.749 609.26 390.399L613.26 391.977C615.878 384.6 612.311 376.854 607.075 371.486C601.303 365.543 593.448 361.958 588.129 355.544C586.647 353.979 585.499 352.132 584.755 350.114C584.01 348.096 583.686 345.949 583.8 343.803C584.037 341.876 584.84 340.061 586.108 338.585C587.377 337.109 589.055 336.037 590.933 335.504C597.118 334.233 599.385 344.868 593.922 345.442L595.819 347.225C595.819 345.585 595.819 343.946 595.674 342.286L593.407 344.089C600.764 345.188 607.486 348.86 612.362 354.446C617.237 360.032 619.946 367.165 620.001 374.559C620.024 374.988 620.182 375.398 620.452 375.732C620.722 376.067 621.091 376.309 621.506 376.424C635.277 378.74 654.038 381.403 663.995 368.986C671.335 359.888 672.242 344.028 659.583 339.049C651.337 335.791 642.06 339.356 634.618 343.147L638.452 347.839C648.904 338.987 644.513 320.709 632.041 316.283C629.34 315.341 627.34 318.783 628.619 320.955C631.911 326.578 636.442 331.386 641.873 335.018C647.304 338.649 653.493 341.009 659.974 341.92C666.455 342.831 673.06 342.27 679.291 340.279C685.522 338.287 691.218 334.917 695.95 330.422C698.712 327.881 694.981 323.537 691.827 325.422C683.044 330.77 681.292 344.725 689.476 351.466C691.432 352.953 693.693 353.992 696.099 354.51C698.505 355.028 700.996 355.011 703.395 354.461C705.794 353.911 708.041 352.841 709.975 351.328C711.91 349.815 713.484 347.896 714.587 345.708L709.165 342.737C704.464 353.843 707.103 367.47 713.02 377.695C718.359 387.1 728.585 395.173 739.408 388.534C747.366 383.657 742.954 371.916 736.831 367.511L736.213 373.371C742.682 370.845 748.507 366.926 753.269 361.895C758.032 356.863 761.613 350.846 763.755 344.274L757.035 344.438C758.805 351.631 763.1 357.96 769.147 362.288C775.193 366.615 782.595 368.656 790.02 368.043L786.33 363.474C784.359 372.427 784.609 381.722 787.058 390.557C789.508 399.393 794.083 407.503 800.39 414.189C803.152 417.099 808.265 413.062 805.894 409.763C800.761 402.611 789.999 406.894 788.556 414.763C786.948 423.697 793.916 433.204 799.503 439.475C805.515 446.24 813.043 451.504 821.48 454.843C825.417 456.38 829.994 457.363 834.035 455.622C835.821 454.855 837.337 453.576 838.387 451.947C839.438 450.319 839.975 448.416 839.931 446.483C839.86 444.213 839.214 441.999 838.054 440.043C836.894 438.088 835.256 436.454 833.292 435.295C828.716 432.549 823.191 432.385 817.995 432.344L821.273 435.458C821.007 419.835 815.614 404.725 805.915 392.428L802.946 396.526C808.759 398.79 815.229 398.717 820.989 396.324C826.749 393.93 831.346 389.403 833.807 383.701C836.269 377.998 836.402 371.568 834.178 365.77C831.954 359.972 827.548 355.261 821.892 352.634L820.655 357.654C828.226 357.976 835.76 356.44 842.592 353.18C849.423 349.921 855.342 345.039 859.825 338.967C864.195 332.856 866.922 325.737 867.744 318.284C868.567 310.831 867.459 303.294 864.525 296.387C861.303 288.533 855.941 281.728 849.043 276.736C848.548 278.785 848.074 280.67 847.579 282.637C852.151 282.197 856.565 280.737 860.491 278.368C864.417 275.998 867.755 272.778 870.257 268.949C872.318 265.794 867.556 262.515 865.02 265.138C862.954 267.452 861.705 270.374 861.463 273.459C861.221 276.544 862 279.623 863.68 282.227C865.393 284.932 867.985 286.974 871.026 288.014C874.067 289.054 877.375 289.029 880.4 287.944C883.629 286.885 886.464 284.883 888.534 282.201C890.604 279.519 891.814 276.279 892.006 272.904C892.058 269.306 891.141 265.76 889.35 262.633C887.56 259.506 884.961 256.911 881.822 255.118L881.987 261.265C888.74 257.549 894.289 251.999 897.987 245.265C901.685 238.531 903.379 230.889 902.871 223.234C902.107 215.684 899.249 208.492 894.615 202.461C889.982 196.43 883.754 191.796 876.627 189.076L879.101 194.711C884.276 183.755 886.81 171.75 886.502 159.651L880.585 163.237C885.422 165.531 890.826 166.378 896.139 165.673C901.452 164.969 906.443 162.743 910.506 159.268C914.568 155.793 917.526 151.218 919.018 146.101C920.51 140.985 920.473 135.547 918.91 130.451L913.282 134.959C917.36 136.866 921.841 137.769 926.344 137.591C930.848 137.412 935.242 136.158 939.155 133.935L933.733 128.812C927.548 142.131 920.827 158.052 923.425 173.031C923.948 176.725 925.51 180.197 927.932 183.046C930.354 185.896 933.537 188.007 937.114 189.137C939.561 189.896 942.135 190.163 944.687 189.923C947.239 189.683 949.717 188.941 951.977 187.739C954.238 186.538 956.235 184.901 957.852 182.925C959.47 180.949 960.676 178.672 961.399 176.228C965.357 162.909 953.709 150.84 945.01 142.459C944.659 143.955 944.288 145.471 943.938 146.967C963.234 139.016 969.295 112.009 955.235 96.6616L953.318 100.145C961.152 102.768 969.666 98.9975 974.47 92.6249C979.871 85.453 979.582 76.0067 975.81 68.1587C971.542 59.2861 963.44 53.3028 954.369 49.7169C945.298 46.131 934.269 42.9958 924.559 44.5531C915.591 46.008 906.623 54.5322 910.128 64.204L911.777 61.9295C901.199 61.6782 890.78 64.5289 881.822 70.1258L883.884 70.3512C878.873 65.788 872.35 63.2127 865.555 63.1145C858.76 63.0163 852.165 65.402 847.023 69.8184L849.6 70.0848C847.577 66.0775 844.376 62.7766 840.421 60.6209C836.466 58.4651 831.945 57.5565 827.458 58.0157C823.148 58.604 819.103 60.4208 815.81 63.2464C812.517 66.0719 810.118 69.7852 808.904 73.9371L810.203 72.5847C802.465 73.8978 795.215 77.2282 789.195 82.2359L792.617 83.4654C792.519 79.455 790.971 75.6141 788.255 72.6466C785.539 69.6791 781.838 67.7839 777.83 67.3084C773.823 66.8329 769.777 67.8089 766.435 70.0576C763.092 72.3062 760.677 75.6769 759.632 79.5516C759.495 80.1086 759.585 80.6968 759.882 81.1882C760.179 81.6795 760.66 82.0341 761.22 82.1745L768.414 83.0351C770.476 83.281 772.311 80.986 770.476 79.3058C758.107 68.507 737.656 69.9004 727.183 82.5228L731.306 84.7768C732.955 70.8635 729.78 54.3683 715.102 48.6513C712.17 47.4388 708.968 47.0163 705.819 47.4264C702.67 47.8365 699.685 49.0648 697.166 50.9873C694.682 52.8593 692.782 55.3929 691.688 58.2943C690.593 61.1957 690.348 64.346 690.981 67.38L693.641 63.7122C678.983 62.913 667.17 79.5721 672.489 93.0551L676.612 88.7725C670.098 87.8095 665.109 93.0142 664.573 99.2844C663.954 106.313 669.747 112.009 674.881 115.984L679.56 109.632C677.622 108.434 675.462 107.636 673.207 107.285C670.953 106.935 668.65 107.038 666.437 107.591C664.223 108.143 662.144 109.132 660.324 110.499C658.503 111.867 656.978 113.585 655.839 115.55C654.7 117.516 653.97 119.689 653.694 121.941C653.418 124.192 653.6 126.476 654.231 128.656C654.861 130.836 655.926 132.868 657.363 134.63C658.8 136.392 660.578 137.849 662.593 138.914L665.397 131.824C655.502 128.259 643.812 137.541 645.194 147.95C645.524 150.45 648.451 152.991 650.987 151.065C658.243 145.512 663.686 137.09 662.841 127.664C662.478 123.595 660.881 119.731 658.26 116.584C655.638 113.437 652.117 111.156 648.162 110.042C644.811 109.101 641.23 109.386 638.072 110.844C634.913 112.303 632.386 114.839 630.948 117.993C628.289 123.955 629.278 131.086 634.886 134.939C637.071 136.434 638.865 133.197 637.421 131.496C633.298 126.619 628.021 122.152 621.589 120.861C618.9 120.299 616.113 120.399 613.472 121.152C610.831 121.906 608.415 123.29 606.436 125.185C604.556 126.968 603.369 129.353 603.082 131.92C602.795 134.487 603.428 137.072 604.869 139.221C606.132 141.318 608.117 142.889 610.456 143.642C612.794 144.396 615.329 144.281 617.589 143.319C618.991 142.684 618.62 140.635 617.589 140C614.18 137.911 610.219 136.885 606.217 137.056C602.215 137.226 598.357 138.584 595.14 140.955C591.922 143.326 589.493 146.6 588.167 150.357C586.84 154.113 586.676 158.178 587.696 162.028L589.346 159.774C584.344 159.315 579.316 160.296 574.86 162.6C570.404 164.903 566.709 168.432 564.215 172.765C563.143 174.589 566.029 176.166 567.08 174.343C569.265 170.595 572.49 167.553 576.37 165.58C580.249 163.606 584.618 162.786 588.954 163.216C589.25 163.276 589.558 163.259 589.846 163.167C590.134 163.075 590.394 162.912 590.601 162.692C590.807 162.472 590.954 162.204 591.026 161.911C591.099 161.619 591.095 161.314 591.015 161.024C590.198 157.855 590.362 154.515 591.486 151.44C592.61 148.366 594.641 145.7 597.314 143.792C599.987 141.883 603.177 140.821 606.467 140.744C609.757 140.667 612.994 141.579 615.754 143.36L616.125 139.836C612.373 141.475 608.477 138.709 607.364 135.041C606.25 131.373 608.992 127.603 612.353 125.943C620.908 121.681 629.299 128.259 634.556 134.57L637.092 131.127C633.216 128.402 633.443 122.746 635.525 118.997C638.226 114.14 643.771 113.177 648.492 115.657C660.862 122.029 656.306 137.664 647.111 144.59L652.904 147.725C652.791 146.381 653.014 145.03 653.553 143.792C654.092 142.554 654.929 141.467 655.992 140.628C657.054 139.789 658.308 139.223 659.644 138.981C660.979 138.74 662.353 138.829 663.645 139.242C667.912 140.799 670.036 134.303 666.449 132.131C665.418 131.519 664.52 130.711 663.804 129.754C663.088 128.796 662.569 127.708 662.276 126.551C661.983 125.395 661.922 124.192 662.097 123.011C662.271 121.831 662.679 120.697 663.294 119.673C663.91 118.649 664.723 117.756 665.686 117.044C666.65 116.332 667.744 115.816 668.908 115.525C670.072 115.234 671.282 115.174 672.47 115.347C673.657 115.521 674.799 115.926 675.829 116.538C679.663 118.587 684.075 112.993 680.509 110.186C677.478 107.85 673.644 105.493 672.262 101.723C671.623 99.9401 672.262 95.0223 675.066 95.3296C677.293 95.5755 680.344 93.7314 679.189 91.047C674.922 81.2319 683.147 69.0808 693.93 69.3676C694.368 69.3499 694.797 69.2337 695.183 69.0277C695.57 68.8218 695.905 68.5315 696.163 68.1786C696.421 67.8258 696.595 67.4194 696.672 66.9901C696.75 66.5608 696.728 66.1197 696.61 65.6998C696.183 63.4507 696.484 61.1252 697.47 59.0565C698.455 56.9879 700.073 55.2822 702.093 54.1839C704.244 53.0156 706.673 52.4464 709.122 52.5366C711.572 52.6267 713.951 53.3729 716.009 54.6962C726.317 60.6385 727.884 73.4658 726.709 84.2031C726.743 84.6618 726.907 85.1014 727.183 85.4712C727.458 85.8411 727.833 86.126 728.264 86.2931C728.695 86.4602 729.165 86.5027 729.619 86.4157C730.074 86.3287 730.494 86.1157 730.832 85.8014C735.309 80.5881 741.66 77.3208 748.527 76.6968C755.395 76.0728 762.236 78.1415 767.59 82.4613L769.651 78.732L762.436 77.9329C762.972 78.7935 763.508 79.6746 764.023 80.5557C764.953 77.8387 766.794 75.5217 769.237 73.9925C771.68 72.4634 774.578 71.815 777.445 72.1559C780.312 72.4967 782.974 73.8062 784.985 75.8651C786.997 77.9239 788.236 80.6071 788.494 83.4654C788.525 83.8496 788.665 84.2174 788.897 84.5263C789.129 84.8353 789.444 85.073 789.805 85.2121C790.167 85.3512 790.561 85.386 790.942 85.3127C791.322 85.2393 791.674 85.0607 791.958 84.7973C797.468 80.2384 804.087 77.1997 811.151 75.9862C811.465 75.8932 811.749 75.719 811.974 75.4814C812.198 75.2439 812.355 74.9514 812.429 74.6338C813.436 71.1146 815.462 67.9675 818.256 65.5846C821.049 63.2017 824.486 61.6883 828.138 61.2327C831.92 60.9179 835.709 61.7376 839.017 63.586C842.325 65.4344 844.998 68.2264 846.693 71.6012C846.826 71.8107 847.005 71.9874 847.217 72.1181C847.429 72.2488 847.668 72.3301 847.916 72.3557C848.164 72.3813 848.415 72.3507 848.649 72.2662C848.884 72.1816 849.096 72.0453 849.27 71.8675C853.792 68.0687 859.556 66.0447 865.476 66.1768C871.396 66.3089 877.063 68.588 881.41 72.5847C881.685 72.8355 882.033 72.9926 882.403 73.0331C882.774 73.0737 883.148 72.9956 883.471 72.8101C891.94 67.6109 901.767 65.0159 911.715 65.3514C911.988 65.3443 912.255 65.2745 912.497 65.1477C912.738 65.0208 912.947 64.8403 913.106 64.6202C913.266 64.4 913.372 64.1462 913.417 63.8786C913.462 63.6109 913.444 63.3366 913.364 63.077C910.457 55.024 918.663 48.7333 925.878 47.9137C933.836 46.9506 942.68 49.4505 950.143 52.0118C957.606 54.5732 965.296 59.0812 969.934 65.9252C974.057 72.0725 976.242 80.2688 972.841 87.2562C969.439 94.2436 961.564 98.5057 954.122 96.0058C952.06 95.2887 950.947 98.0549 952.204 99.4688C963.687 111.989 958.018 135.553 942.185 141.66C941.737 141.803 941.334 142.058 941.014 142.401C940.694 142.744 940.468 143.164 940.358 143.619C940.248 144.074 940.258 144.549 940.387 144.999C940.516 145.449 940.759 145.858 941.093 146.188C947.628 152.786 956.534 161.495 955.771 171.638C955.578 173.624 954.918 175.538 953.845 177.224C952.771 178.911 951.315 180.323 949.592 181.348C947.869 182.372 945.928 182.981 943.925 183.124C941.923 183.266 939.914 182.94 938.062 182.17C925.816 177.088 930.352 159.774 933.258 150.266C935.181 144.136 937.545 138.151 940.33 132.357C940.705 131.61 940.829 130.763 940.683 129.94C940.537 129.118 940.129 128.364 939.519 127.79C938.909 127.216 938.129 126.852 937.295 126.752C936.462 126.652 935.617 126.821 934.887 127.234C932.157 128.765 929.102 129.632 925.97 129.764C922.838 129.896 919.719 129.289 916.869 127.992C916.187 127.644 915.417 127.5 914.654 127.579C913.891 127.657 913.167 127.955 912.571 128.434C911.975 128.914 911.532 129.556 911.295 130.281C911.059 131.007 911.04 131.785 911.241 132.521C912.267 136.147 912.255 139.986 911.206 143.606C910.158 147.226 908.113 150.483 905.303 153.012C902.428 155.417 898.934 156.975 895.214 157.511C891.495 158.047 887.699 157.539 884.255 156.044C883.634 155.746 882.948 155.607 882.26 155.64C881.571 155.674 880.902 155.878 880.313 156.235C879.725 156.591 879.236 157.089 878.89 157.682C878.545 158.275 878.355 158.945 878.338 159.63C878.653 170.329 876.539 180.96 872.153 190.735C871.88 191.26 871.728 191.838 871.708 192.429C871.688 193.019 871.8 193.606 872.037 194.148C872.274 194.689 872.63 195.172 873.078 195.56C873.526 195.948 874.055 196.232 874.627 196.391C880.311 198.64 885.257 202.409 888.918 207.281C892.579 212.153 894.811 217.937 895.367 223.992C895.727 230.252 894.303 236.487 891.258 241.978C888.212 247.47 883.67 251.996 878.152 255.036C877.621 255.363 877.185 255.822 876.887 256.369C876.589 256.915 876.44 257.529 876.454 258.151C876.469 258.772 876.647 259.378 876.97 259.91C877.293 260.442 877.75 260.881 878.297 261.183C885.718 265.507 888.007 277.166 878.936 281.121C877.343 281.933 875.512 282.154 873.77 281.745C872.028 281.335 870.49 280.322 869.432 278.887C868.402 277.522 867.865 275.852 867.906 274.146C867.947 272.44 868.564 270.797 869.659 269.482L864.319 265.835C862.442 268.73 859.943 271.178 857.003 273.002C854.063 274.827 850.753 275.983 847.311 276.387C846.627 276.424 845.972 276.678 845.444 277.112C844.916 277.546 844.542 278.137 844.378 278.799C844.214 279.46 844.269 280.157 844.533 280.785C844.798 281.413 845.258 281.941 845.848 282.289C852.518 287.265 857.461 294.186 859.989 302.086C862.516 309.986 862.502 318.473 859.949 326.365C854.444 342.553 837.271 353.228 820.346 352.347C819.765 352.382 819.211 352.6 818.765 352.97C818.318 353.34 818.002 353.843 817.864 354.404C817.726 354.965 817.772 355.556 817.996 356.089C818.22 356.623 818.61 357.071 819.109 357.368C823.53 359.444 827.013 363.087 828.874 367.582C830.735 372.077 830.84 377.101 829.169 381.67C827.122 386.094 823.458 389.578 818.922 391.416C814.385 393.254 809.315 393.308 804.74 391.567C802.513 390.645 799.276 392.96 801.091 395.378C809.917 406.959 814.689 421.093 814.676 435.622C814.709 436.467 815.072 437.265 815.688 437.847C816.304 438.429 817.125 438.748 817.975 438.737C821.809 438.86 826.098 438.901 829.52 440.889C831.746 442.179 834.096 445.54 832.695 448.204C829.747 453.736 817.398 445.622 814.326 443.573C808.152 439.409 802.961 433.963 799.111 427.61C797.235 424.516 794.988 420.623 795.194 416.873C795.186 416.177 795.375 415.493 795.74 414.899C796.104 414.304 796.63 413.824 797.256 413.513C797.895 413.205 799.215 412.816 799.709 413.513L805.214 409.066C799.839 403.255 795.959 396.237 793.906 388.611C791.852 380.986 791.686 372.98 793.421 365.277C793.554 364.727 793.557 364.154 793.433 363.603C793.308 363.051 793.058 362.535 792.702 362.094C792.346 361.653 791.893 361.299 791.378 361.059C790.863 360.819 790.3 360.698 789.731 360.708C783.91 361.274 778.077 359.741 773.298 356.39C768.518 353.038 765.109 348.091 763.693 342.45C762.848 338.926 757.9 339.561 756.973 342.614C755.271 348.118 752.383 353.188 748.509 357.47C744.635 361.752 739.869 365.143 734.543 367.408C733.955 367.61 733.437 367.973 733.049 368.456C732.662 368.94 732.42 369.522 732.353 370.137C732.286 370.751 732.396 371.372 732.671 371.926C732.945 372.481 733.373 372.946 733.904 373.268C735.35 374.331 736.437 375.805 737.023 377.496C737.608 379.186 737.663 381.013 737.181 382.735C737.759 382.53 737.717 382.612 737.078 382.981L736.11 383.637C735.644 383.936 735.155 384.197 734.646 384.416C733.77 384.804 732.837 385.053 731.883 385.153C727.183 385.625 723.142 381.998 720.544 378.514C714.215 370.051 710.381 355.974 714.772 345.872C716.318 342.266 711.02 339.274 709.35 342.901C706.856 348.352 699.042 350.892 694.074 346.999C689.105 343.106 690.239 334.295 695.455 331.098C694.074 329.438 692.713 327.758 691.332 326.098C687.178 329.972 682.186 332.849 676.74 334.508C671.294 336.167 665.538 336.563 659.913 335.668C654.571 334.71 649.499 332.621 645.041 329.541C640.584 326.461 636.846 322.464 634.082 317.82L630.66 322.472C639.195 325.463 640.638 338.229 634.144 343.782C631.361 346.159 635.071 349.929 637.978 348.474C644.348 345.155 653.914 340.79 660.532 345.913C665.088 349.438 665.006 355.954 663.15 360.872C657.11 377.018 636.35 374.682 622.599 372.695C623.094 373.309 623.588 373.945 624.104 374.559C623.816 366.383 620.709 358.554 615.304 352.384C609.899 346.213 602.525 342.077 594.417 340.667C594.143 340.609 593.86 340.613 593.588 340.678C593.317 340.742 593.063 340.867 592.845 341.041C592.628 341.216 592.452 341.437 592.332 341.688C592.212 341.939 592.149 342.213 592.149 342.491C592.149 344.13 592.149 345.77 592.149 347.429C592.165 347.915 592.374 348.375 592.729 348.708C593.084 349.042 593.557 349.223 594.046 349.212C599.179 348.7 601.385 343.68 600.499 338.967C600.293 337.659 599.79 336.415 599.026 335.331C598.262 334.246 597.258 333.35 596.092 332.711C594.926 332.073 593.627 331.708 592.297 331.645C590.967 331.582 589.64 331.822 588.418 332.348C581.676 334.909 578.666 342.594 580.295 349.233C582.357 357.429 589.284 362.798 595.654 367.511C602.911 372.879 612.724 380.727 609.034 390.973C608.188 393.309 611.858 394.6 613.033 392.53C616.064 387.182 622.97 386.485 628.289 388.534C634.906 391.034 637.875 397.55 637.215 404.333C635.463 422.549 616.022 429.496 601.096 434.352C600.646 434.493 600.24 434.747 599.919 435.091C599.597 435.435 599.371 435.856 599.263 436.313C599.155 436.77 599.169 437.247 599.302 437.697C599.435 438.147 599.684 438.555 600.024 438.88C604.363 442.127 607.591 446.62 609.273 451.752C610.955 456.883 611.008 462.405 609.425 467.568C607.634 472.58 604.327 476.92 599.957 479.99C595.587 483.061 590.368 484.712 585.016 484.719C584.484 484.739 583.964 484.879 583.494 485.129C583.024 485.378 582.617 485.73 582.303 486.157C581.99 486.585 581.778 487.078 581.684 487.599C581.59 488.12 581.615 488.655 581.759 489.165C583.216 496.73 582.61 504.544 580.004 511.797C577.397 519.051 572.885 525.478 566.936 530.413C560.829 535.509 553.195 538.449 545.228 538.774C537.455 539.02 528.735 536.335 524.467 529.491C520.344 522.975 520.2 513.857 526.096 508.386C526.531 507.919 526.818 507.336 526.924 506.709C527.029 506.081 526.947 505.437 526.689 504.855C526.43 504.274 526.006 503.78 525.468 503.435C524.931 503.09 524.303 502.909 523.663 502.915C518.839 503.263 514.861 499.759 513.026 495.517C510.552 489.8 511.603 483.223 512.593 477.239C514.847 464.084 517.101 450.936 519.355 437.794C519.437 437.389 519.416 436.97 519.294 436.575C519.171 436.18 518.952 435.822 518.655 435.533C518.358 435.244 517.993 435.033 517.593 434.92C517.193 434.807 516.771 434.795 516.365 434.885C512.448 435.497 508.44 434.659 505.103 432.529C501.767 430.398 499.333 427.124 498.265 423.328C497.51 419.408 498.221 415.348 500.262 411.912C502.304 408.475 505.538 405.897 509.356 404.661L507.026 401.792C501.13 412.877 483.236 414.845 475.093 405.152C472.371 401.915 469.815 394.907 475.278 392.858C475.711 392.648 476.186 392.539 476.667 392.539C477.149 392.539 477.624 392.647 478.057 392.857C478.49 393.066 478.869 393.37 479.167 393.747C479.464 394.123 479.671 394.562 479.772 395.03C479.766 396.017 479.558 396.993 479.161 397.898C478.764 398.804 478.187 399.619 477.463 400.296C472.949 405.357 463.486 407.161 456.848 406.669C449.651 406.197 442.654 404.126 436.37 400.608C430.087 397.09 424.678 392.215 420.543 386.342C412.833 374.785 412.297 359.703 417.1 346.815C419.745 339.552 424.302 333.127 430.294 328.209C433.428 325.73 437.407 322.984 441.509 322.656C442.338 322.472 443.204 322.56 443.977 322.908C444.75 323.255 445.389 323.843 445.798 324.582C446.086 325.197 446.54 327.102 445.633 327.492L449.591 329.541C446.395 315.074 462.373 304.071 474.783 301.612C488.505 299.203 502.635 302.075 514.304 309.644C521.067 313.927 526.757 319.688 530.941 326.488C531.33 327.077 531.932 327.496 532.623 327.656C533.314 327.816 534.04 327.706 534.652 327.348C540.999 323.517 548.06 320.997 555.41 319.941C562.761 318.885 570.25 319.313 577.43 321.201C579.491 321.775 580.934 319.767 580.625 317.882C580.135 314.519 580.466 311.088 581.589 307.879C582.712 304.669 584.594 301.775 587.078 299.44C587.465 299.015 587.703 298.478 587.756 297.907C587.81 297.337 587.675 296.765 587.373 296.277C587.07 295.789 586.617 295.412 586.08 295.203C585.543 294.993 584.953 294.963 584.398 295.116C576.749 297.165 565.328 300.587 558.628 294.44C554.773 290.874 552.443 282.863 557.968 279.707L554.051 276.859C553.15 279.324 551.439 281.415 549.195 282.795C546.95 284.174 544.303 284.761 541.682 284.461C538.761 283.966 536.086 282.525 534.075 280.363C533.415 279.748 532.961 279.482 533.229 278.662C533.642 277.412 535.992 276.121 536.94 275.424C539.125 273.826 537.723 269.564 534.878 270.773C531.77 272.076 528.322 272.351 525.045 271.558C521.767 270.765 518.833 268.945 516.675 266.367C515.479 267.617 514.283 268.847 513.108 270.097C514.366 271.183 516.159 272.679 515.273 274.502C514.281 275.87 512.81 276.82 511.15 277.166C509.752 277.656 508.26 277.822 506.788 277.651C505.316 277.481 503.903 276.978 502.656 276.182C498.141 273.273 495.172 266.347 498.718 261.613L494.595 258.642C493.143 261.253 490.943 263.376 488.274 264.74C485.605 266.105 482.589 266.65 479.607 266.306C479.171 266.207 478.717 266.223 478.289 266.352C477.861 266.481 477.474 266.718 477.166 267.04C476.858 267.363 476.64 267.76 476.533 268.191C476.426 268.623 476.434 269.075 476.556 269.503C477.518 273.248 477.476 277.179 476.435 280.903C475.393 284.628 473.388 288.016 470.619 290.731C467.986 293.135 464.621 294.596 461.058 294.882C457.495 295.168 453.938 294.262 450.952 292.309C445.158 288.743 441.922 281.469 445.983 275.404C449.426 270.322 457.487 266.777 462.909 270.978L465.836 267.003C462.848 265.101 460.743 262.096 459.983 258.651C459.223 255.206 459.871 251.602 461.785 248.632C463.699 245.663 466.721 243.57 470.187 242.815C473.653 242.06 477.279 242.704 480.267 244.606C480.599 244.782 480.968 244.881 481.344 244.896C481.72 244.911 482.095 244.841 482.44 244.691C482.785 244.541 483.092 244.315 483.337 244.031C483.582 243.747 483.759 243.411 483.854 243.049C485.357 238.774 487.924 234.947 491.315 231.923C494.707 228.9 498.812 226.778 503.25 225.756C507.688 224.733 512.314 224.843 516.698 226.075C521.082 227.308 525.081 229.622 528.323 232.803C528.635 233.104 529.021 233.318 529.442 233.423C529.864 233.529 530.306 233.522 530.724 233.404C531.142 233.285 531.521 233.059 531.823 232.749C532.126 232.439 532.34 232.054 532.446 231.635C535.291 222.394 547.701 218.767 555.391 224.238V220.14C553.791 220.898 552.049 221.317 550.276 221.369C548.503 221.422 546.739 221.106 545.096 220.443C543.454 219.78 541.968 218.783 540.734 217.517C539.5 216.252 538.545 214.744 537.93 213.091C535.373 205.079 543.475 197.292 551.289 198.071C551 196.247 550.691 194.424 550.402 192.6C543.434 195.633 534.26 192.846 531.044 185.695C530.355 183.912 530.027 182.012 530.079 180.104C530.131 178.195 530.562 176.316 531.348 174.573C532.133 172.831 533.258 171.26 534.656 169.951C536.055 168.642 537.699 167.62 539.496 166.945L536.177 161.577C527.106 170.634 522.983 183.4 513.603 192.149C511.762 194.057 509.549 195.573 507.101 196.605C504.652 197.638 502.017 198.164 499.357 198.153C495.234 197.948 490.513 195.94 488.699 191.903C486.369 186.658 489.75 181.105 493.379 177.416C495.305 175.45 497.481 173.741 499.852 172.335C501.079 171.525 502.411 170.884 503.81 170.429C504.473 170.203 505.174 170.113 505.872 170.162C506.511 170.162 506.202 170.162 506.326 170.162C506.449 170.162 506.326 170.88 506.078 170.818L508.14 170.449C507.852 170.211 507.583 169.951 507.336 169.671C506.862 168.708 505.975 167.908 505.542 166.863C504.597 164.561 504.27 162.055 504.594 159.589C505.295 153.913 508.903 149.344 513.005 145.573C515.625 143.264 518.379 141.109 521.251 139.119C524.066 136.905 527.114 135.001 530.343 133.443C531.788 132.689 533.371 132.235 534.998 132.108C536.625 131.981 538.26 132.184 539.806 132.705C542.733 133.935 545.331 136.803 544.465 140.082C544.358 140.539 544.373 141.016 544.508 141.466C544.643 141.915 544.893 142.323 545.234 142.647C545.575 142.972 545.995 143.202 546.453 143.317C546.911 143.431 547.391 143.425 547.846 143.299C557.288 141.414 570.317 139.426 575.43 150.102C576.466 151.959 576.748 154.139 576.219 156.196C575.69 158.253 574.39 160.032 572.585 161.167C569.389 163.073 564.875 163.216 562.545 159.958L561.205 161.044C563.059 162.557 564.273 164.707 564.607 167.068C564.854 169.261 564.771 171.474 565.039 173.666C565.039 174.261 566.008 174.261 565.967 173.666L565.843 173.625Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M877.493 429.106C878.641 429.526 879.639 430.275 880.359 431.258C880.724 431.745 881.029 432.275 881.266 432.835C881.483 433.365 881.648 433.914 881.761 434.475C881.848 435.155 881.848 435.844 881.761 436.524C881.761 436.196 881.761 437.036 881.761 436.708C881.761 436.872 881.761 437.036 881.761 437.18C881.693 437.499 881.604 437.814 881.493 438.122C881.493 438.266 881.493 438.122 881.493 438.122C881.493 438.122 881.493 438.286 881.39 438.388C881.329 438.516 881.26 438.639 881.183 438.757L880.936 439.167C880.936 439.29 880.936 439.167 880.936 439.167C880.886 439.246 880.831 439.321 880.771 439.393C880.418 439.853 879.968 440.231 879.452 440.499L879.019 440.724H878.813L877.823 441.011C877.72 441.011 877.411 441.011 877.679 441.011H877.205C876.875 441.032 876.545 441.032 876.215 441.011H876.009H875.597C875.269 440.958 874.945 440.883 874.628 440.786L874.153 440.622C873.968 440.622 874.153 440.622 874.153 440.622L873.885 440.52C873.587 440.366 873.298 440.195 873.02 440.007L872.648 439.782L872.422 439.638C872.422 439.638 872.649 439.802 872.422 439.638C872.195 439.475 871.927 439.229 871.7 439.003L871.37 438.634C871.597 438.901 871.37 438.634 871.37 438.491L871.144 438.143C871.144 438.143 870.876 437.61 870.958 437.794L870.834 437.487L870.711 437.036V436.79C870.711 436.524 870.711 437.077 870.711 436.79V436.237C870.7 436.053 870.7 435.868 870.711 435.684V435.438C870.711 435.438 870.711 435.807 870.711 435.438C870.768 435.069 870.858 434.705 870.979 434.352V434.126C871.082 433.84 870.793 434.495 870.979 434.126L871.226 433.614C871.329 433.43 871.453 433.245 871.576 433.061L871.7 432.856C871.906 432.549 871.7 432.856 871.7 432.856C871.948 432.532 872.224 432.23 872.525 431.954C872.525 431.852 873.081 431.483 872.752 431.729L873.226 431.401L873.782 431.053L873.988 430.95C873.988 430.95 874.463 430.745 874.195 430.848L874.483 430.725L875.102 430.561C875.308 430.561 875.803 430.459 875.349 430.561H875.988C876.421 430.561 876.875 430.561 877.287 430.561C877.762 430.532 878.213 430.341 878.562 430.02C878.912 429.699 879.139 429.267 879.204 428.799C879.248 428.327 879.126 427.855 878.859 427.463C878.592 427.071 878.197 426.783 877.741 426.647C875.709 426.319 873.625 426.668 871.813 427.639C870.001 428.61 868.563 430.149 867.721 432.016C866.812 433.695 866.52 435.637 866.897 437.507C867.273 439.378 868.294 441.059 869.783 442.261C871.126 443.3 872.717 443.974 874.401 444.219C876.085 444.463 877.804 444.268 879.39 443.655C880.963 443.012 882.281 441.875 883.141 440.416C884.001 438.958 884.356 437.259 884.152 435.581C884.044 433.765 883.331 432.036 882.125 430.667C880.92 429.298 879.29 428.367 877.493 428.02C877.342 428 877.188 428.037 877.062 428.123C876.936 428.209 876.847 428.338 876.811 428.485C876.775 428.633 876.796 428.788 876.868 428.922C876.941 429.055 877.061 429.158 877.205 429.209L877.493 429.106Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M932.455 431.094C931.816 429.291 930.888 427.446 928.765 427.18C926.641 426.914 924.374 428.901 922.766 430.377L926.662 432.426C926.947 431.352 927.004 430.232 926.829 429.135C926.654 428.039 926.251 426.991 925.645 426.058C925.04 425.125 924.246 424.327 923.314 423.716C922.381 423.105 921.331 422.693 920.23 422.508C915.468 421.545 911.262 425.254 909.922 429.578C909.353 431.892 909.473 434.321 910.267 436.57C911.061 438.818 912.496 440.788 914.396 442.241C919.096 446.155 925.219 446.892 931.094 447.528L929.033 443.081C928.102 444.398 927.497 445.914 927.266 447.506C927.034 449.099 927.184 450.723 927.702 452.248C928.22 453.773 929.092 455.154 930.247 456.282C931.402 457.409 932.809 458.25 934.352 458.736C941.938 461.42 949.607 456.83 954.576 451.4L950.453 449.167C949.988 450.772 949.925 452.465 950.269 454.099C950.614 455.734 951.355 457.26 952.428 458.544C953.501 459.829 954.873 460.834 956.426 461.471C957.979 462.108 959.665 462.358 961.338 462.199C969.172 461.277 973.295 452.876 971.646 445.806C969.749 437.303 961.936 432.405 954.267 429.619C946.597 426.832 937.424 424.721 930.146 429.414C927.734 430.971 930.146 434.741 932.476 433.184C937.547 429.864 943.753 430.95 949.216 432.59C954.679 434.229 960.967 436.688 964.616 441.647C967.914 446.073 969.028 452.527 964.307 456.462C963.368 457.368 962.157 457.945 960.858 458.105C959.559 458.264 958.243 457.996 957.112 457.343C955.05 455.99 953.463 453.245 954.823 450.929C955.978 448.88 953.421 446.257 951.463 447.732C947.69 450.601 943.588 454.29 938.516 454.064C934.393 453.9 930.641 450.171 933.177 446.196C933.395 445.788 933.502 445.331 933.489 444.869C933.476 444.408 933.342 443.957 933.101 443.563C932.86 443.168 932.519 442.843 932.113 442.618C931.707 442.393 931.25 442.278 930.785 442.282C924.972 442.118 916.354 440.909 914.622 434.086C914.344 432.943 914.422 431.743 914.845 430.645C915.268 429.547 916.018 428.603 916.993 427.938C917.551 427.666 918.173 427.547 918.793 427.596C919.414 427.645 920.009 427.858 920.517 428.215C921.026 428.571 921.428 429.057 921.682 429.621C921.936 430.186 922.033 430.808 921.962 431.422C921.878 431.899 921.948 432.39 922.161 432.825C922.375 433.26 922.722 433.616 923.152 433.844C923.582 434.071 924.073 434.157 924.555 434.09C925.038 434.023 925.486 433.807 925.837 433.471C926.503 432.541 927.302 431.712 928.208 431.012C929.321 430.397 929.775 431.012 930.662 431.975C930.779 432.211 930.986 432.392 931.238 432.476C931.489 432.561 931.764 432.543 932.001 432.426C932.239 432.309 932.421 432.103 932.506 431.853C932.591 431.603 932.573 431.33 932.455 431.094Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M909.242 203.664C910.028 202.307 910.286 200.71 909.967 199.177C909.648 197.643 908.774 196.28 907.51 195.344C906.126 194.286 904.418 193.732 902.673 193.777C900.927 193.822 899.25 194.462 897.924 195.59C890.193 201.84 894.811 211.983 899.511 218.417C900.954 220.466 902.438 222.29 903.634 224.38C904.744 226.416 905.682 228.541 906.438 230.732C907.902 234.359 910.272 237.474 914.457 237.843C916.393 237.966 918.326 237.57 920.056 236.698C921.785 235.826 923.248 234.509 924.291 232.884C926.492 229.13 927.226 224.703 926.353 220.446C925.575 215.945 923.672 211.71 920.82 208.129C917.967 204.549 914.255 201.738 910.025 199.955C909.711 199.8 909.367 199.711 909.016 199.695C908.666 199.679 908.316 199.735 907.988 199.86C907.66 199.985 907.362 200.177 907.113 200.423C906.864 200.668 906.668 200.963 906.539 201.287C906.41 201.612 906.351 201.959 906.364 202.308C906.377 202.657 906.463 202.999 906.617 203.313C906.77 203.627 906.987 203.906 907.254 204.132C907.522 204.358 907.833 204.527 908.17 204.627C910.941 205.572 913.477 207.094 915.61 209.09C917.743 211.086 919.423 213.512 920.539 216.204C922.601 221.04 923.879 229.544 918.477 232.843C917.921 233.242 917.29 233.525 916.621 233.676C915.952 233.827 915.259 233.843 914.584 233.723C913.909 233.602 913.265 233.348 912.691 232.975C912.116 232.602 911.623 232.118 911.241 231.552C909.53 228.991 908.974 225.753 907.489 223.048C904.294 217.249 898.027 212.106 897.676 205.098C897.542 203.547 897.876 201.991 898.637 200.629C899.397 199.268 900.548 198.163 901.944 197.455C905.015 196.185 909.757 199.832 908.128 203.09C908.06 203.215 908.044 203.362 908.085 203.498C908.126 203.635 908.219 203.749 908.345 203.817C908.471 203.885 908.618 203.901 908.756 203.86C908.893 203.82 909.008 203.727 909.077 203.602L909.242 203.664Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M929.28 245.631C928.573 244.022 927.297 242.727 925.694 241.99C924.09 241.254 922.271 241.128 920.58 241.636C918.728 242.231 917.178 243.513 916.253 245.215C915.328 246.917 915.098 248.908 915.611 250.774C916.017 252.685 917.095 254.39 918.652 255.581C920.209 256.772 922.143 257.371 924.105 257.27C926.127 257.136 928.047 256.343 929.568 255.012C931.089 253.682 932.126 251.89 932.516 249.914C932.841 247.528 932.253 245.107 930.867 243.131C930.157 242.105 929.271 241.21 928.249 240.488C927.689 239.969 926.991 239.622 926.238 239.487C925.485 239.353 924.708 239.437 924.002 239.73C923.553 240.017 923.234 240.465 923.111 240.981C922.988 241.497 923.071 242.04 923.342 242.496C923.755 243.357 924.847 243.664 925.631 244.094L926.105 244.381C926.6 244.668 925.775 244.094 926.229 244.381L927.136 245.242C927.548 245.652 926.93 244.894 927.259 245.365L927.527 245.734C927.709 246.007 927.868 246.295 928.002 246.594C927.795 246.164 928.002 246.594 928.002 246.758C928.002 246.922 928.002 247.107 928.167 247.271L928.29 247.803C928.29 248.049 928.29 248.029 928.29 247.803C928.29 247.926 928.29 248.049 928.29 248.152C928.3 248.329 928.3 248.507 928.29 248.684C928.29 248.684 928.29 249.361 928.29 248.848C928.253 249.195 928.184 249.538 928.084 249.873L927.96 250.201C928.146 249.729 927.96 250.201 927.96 250.324C927.886 250.478 927.803 250.629 927.713 250.774L927.527 251.061C927.672 250.856 927.692 250.836 927.527 251.061C927.363 251.287 927.074 251.574 926.806 251.82C926.538 252.065 926.311 252.209 926.703 251.922L926.27 252.209C925.979 252.399 925.676 252.57 925.363 252.721C925.755 252.537 925.487 252.721 925.363 252.721L924.703 252.947L924.208 253.069C923.672 253.213 924.641 253.069 924.085 253.069H923.075C922.518 253.069 923.487 253.172 922.951 253.069L922.456 252.967L921.961 252.824C922.435 252.988 921.796 252.824 921.693 252.701C921.59 252.578 920.93 252.168 921.322 252.496L920.601 251.84C920.601 251.84 920.25 251.348 920.601 251.84L920.436 251.492L920.188 251.061C920.188 251.061 919.858 250.324 920.065 250.836C919.936 250.535 919.826 250.227 919.735 249.914C919.735 249.75 919.735 249.607 919.632 249.443C919.528 249.279 919.632 249.074 919.632 249.443C919.611 249.122 919.611 248.8 919.632 248.48C919.621 248.323 919.621 248.165 919.632 248.008C919.632 248.561 919.632 247.865 919.632 247.762L919.755 247.291C919.755 247.291 920.003 246.758 919.755 247.189L920.209 246.348C919.982 246.738 920.209 246.348 920.209 246.246L920.436 246.021C920.535 245.901 920.645 245.792 920.765 245.693C920.436 246 920.91 245.59 920.992 245.529L921.405 245.303L921.673 245.16C921.466 245.16 921.466 245.16 921.673 245.16C922.016 245.036 922.367 244.933 922.724 244.853C922.312 244.853 922.724 244.853 922.889 244.853H924.559C925.181 244.836 925.799 244.969 926.358 245.24C926.918 245.511 927.404 245.913 927.775 246.41C928.311 247.107 929.713 246.656 929.321 245.713L929.28 245.631Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M928.25 274.03C926.889 268.579 922.065 262.924 915.88 265.629C908.768 268.784 909.159 277.595 910.314 283.948C911.18 283.025 912.046 282.124 912.932 281.222C905.181 278.272 896.192 282.8 893.038 290.197C889.451 298.558 895.202 306.59 903.119 309.623C906.307 310.859 909.79 311.142 913.138 310.435C916.486 309.729 919.553 308.065 921.962 305.647C926.07 300.988 928.727 295.243 929.61 289.111C930.19 286.058 930.473 282.956 930.456 279.849C930.469 278.735 930.261 277.63 929.843 276.596C929.426 275.562 928.807 274.621 928.023 273.825C927.951 273.753 927.861 273.701 927.762 273.675C927.663 273.649 927.559 273.65 927.46 273.677C927.362 273.704 927.272 273.757 927.201 273.83C927.129 273.902 927.079 273.993 927.054 274.091C926.597 275.498 926.245 276.936 926.003 278.395C926.003 280.444 926.003 282.616 925.858 284.747C925.519 289.66 924.186 294.454 921.941 298.844C920.955 300.942 919.452 302.758 917.57 304.123C915.689 305.488 913.49 306.358 911.18 306.652C904.727 307.164 896.522 303.066 896.089 295.914C895.594 288.046 904.974 282.841 911.86 285.423C913.592 286.058 914.746 284.112 914.478 282.698C913.654 278.21 912.293 272.288 916.54 269.03C920.787 265.772 925.322 270.71 926.848 274.44C926.902 274.625 927.029 274.78 927.199 274.872C927.369 274.965 927.569 274.986 927.755 274.932C927.941 274.877 928.097 274.752 928.19 274.583C928.283 274.414 928.304 274.215 928.25 274.03Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M936.929 488.346C934.514 484.058 930.778 480.653 926.27 478.633C921.427 476.738 916.097 476.451 911.076 477.814C906.809 478.941 908.479 484.391 912.19 484.781C922.147 485.867 927.61 473.039 922.498 465.519C916.787 457.016 905.139 457.323 897.491 462.815C893.271 465.809 889.87 469.802 887.595 474.433C886.09 477.834 886.42 482.465 890.44 483.879C891.018 484.156 891.659 484.279 892.299 484.237C892.939 484.194 893.557 483.988 894.093 483.637C894.629 483.286 895.064 482.803 895.356 482.235C895.648 481.667 895.787 481.033 895.759 480.396C895.594 476.298 891.512 474.761 887.966 475.355C877.658 477.076 869.412 486.83 867.35 496.665L868.979 495.682C854.548 492.752 838.859 502.567 836.653 517.361C834.344 532.934 845.91 547.585 859.805 553.425C868.938 556.965 878.82 558.17 888.543 556.929C893.652 556.37 898.715 555.459 903.696 554.204C908.409 553.179 913.04 551.809 917.55 550.106C921.405 548.528 924.786 545.803 925.363 541.479C925.524 540.526 925.49 539.551 925.264 538.611C925.038 537.671 924.624 536.785 924.048 536.008C923.471 535.23 922.742 534.575 921.906 534.082C921.069 533.589 920.142 533.269 919.178 533.139C912.107 532.32 906.685 540.537 905.593 546.54C905.031 549.897 905.173 553.334 906.009 556.634C906.845 559.934 908.357 563.027 910.451 565.72C912.544 568.413 915.175 570.647 918.177 572.283C921.179 573.919 924.489 574.921 927.899 575.228C944.989 577.277 961.482 566.683 971.192 553.343C980.902 540.004 983.747 522.791 976.861 507.608C973.669 500.459 968.464 494.382 961.874 490.108C957.318 487.199 946.02 482.978 944.474 491.563C944.293 493.312 944.789 495.063 945.861 496.46C946.934 497.857 948.502 498.795 950.247 499.083C952.04 499.274 953.852 499.009 955.514 498.314C957.176 497.619 958.634 496.516 959.75 495.108C961.65 492.732 962.849 489.878 963.213 486.864C963.577 483.85 963.092 480.795 961.812 478.039C960.729 475.117 958.758 472.601 956.172 470.842C953.586 469.084 950.514 468.168 947.381 468.224C943.987 468.564 940.764 469.867 938.096 471.978C935.427 474.089 933.426 476.919 932.331 480.129C931.159 483.375 931.203 486.933 932.455 490.149C933.403 492.588 937.258 491.502 936.393 488.981C932.867 478.511 946.927 466.872 955.359 476.011C956.925 477.743 958.022 479.841 958.549 482.11C959.075 484.379 959.013 486.743 958.369 488.981C957.67 491.273 956.103 493.205 953.999 494.371C952.576 495.108 949.875 495.518 949.298 493.428C948.824 491.789 950.535 491.522 951.772 491.584C957.132 491.768 962.616 496.686 965.976 500.436C969.928 504.928 972.754 510.285 974.223 516.07C977.356 528.242 973.79 541.172 966.471 551.192C959.153 561.212 946.845 569.982 933.733 570.761C927.627 571.365 921.529 569.545 916.766 565.699C913.072 562.341 910.698 557.788 910.066 552.852C909.655 550.551 909.834 548.184 910.587 545.971C911.341 543.757 912.643 541.769 914.375 540.188C915.715 539.123 919.508 537.934 918.498 540.967C917.488 543.999 912.313 544.573 909.778 545.311C895.347 549.553 879.431 553.056 864.67 548.344C852.734 544.512 841.333 532.893 841.395 519.841C841.395 506.317 855.269 495.661 868.463 498.141C868.81 498.216 869.173 498.156 869.476 497.973C869.779 497.79 870 497.498 870.092 497.157C870.828 493.436 872.376 489.92 874.628 486.858C876.879 483.795 879.778 481.261 883.121 479.433C885.014 478.297 887.118 477.552 889.306 477.24C890.138 477.108 890.989 477.193 891.777 477.488C892.566 477.783 893.263 478.276 893.8 478.92C895.099 480.846 893.677 483.469 891.244 482.486C885.719 480.232 891.615 473.654 894.089 471.4C899.284 466.646 907.221 462.794 913.983 466.708C915.153 467.278 916.113 468.202 916.723 469.346C917.334 470.49 917.566 471.797 917.385 473.08C917.23 474.348 916.597 475.51 915.613 476.331C914.63 477.153 913.369 477.573 912.087 477.506L913.2 484.494C916.861 483.428 920.753 483.428 924.415 484.494C928.31 485.326 931.886 487.245 934.723 490.026C935.857 491.235 937.795 489.617 936.949 488.223L936.929 488.346Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c("path", {
                attrs: {
                  d:
                    "M860.506 414.311C861.908 414.128 863.205 413.473 864.181 412.456C865.156 411.438 865.751 410.118 865.866 408.717C865.942 407.18 865.474 405.664 864.544 404.433C863.615 403.202 862.281 402.332 860.774 401.976C857.125 400.992 853.538 402.631 850.569 404.598C847.477 406.483 844.631 408.741 842.096 411.319C839.893 413.637 838.592 416.658 838.426 419.842C838.26 423.026 839.239 426.164 841.189 428.696C843.192 431.121 846.004 432.752 849.115 433.289C852.225 433.827 855.426 433.237 858.135 431.626C859.653 430.719 860.961 429.504 861.974 428.059C862.986 426.615 863.68 424.975 864.011 423.245C864.582 419.722 863.936 416.11 862.176 413C861.063 410.787 857.455 413.225 859.372 415.254C862.609 418.655 861.434 424.925 858.259 427.958C856.511 429.576 854.252 430.54 851.868 430.686C849.484 430.831 847.123 430.15 845.188 428.757C843.393 427.325 842.12 425.346 841.565 423.125C841.01 420.904 841.204 418.564 842.117 416.463C843.385 414.101 845.167 412.051 847.332 410.459C849.555 408.625 851.943 407 854.466 405.603C857.001 404.291 860.65 403.43 863.001 405.746C863.566 406.369 863.953 407.132 864.121 407.954C864.289 408.776 864.232 409.628 863.956 410.421C863.681 411.214 863.196 411.919 862.553 412.463C861.91 413.007 861.132 413.369 860.3 413.512C859.784 413.635 859.908 414.496 860.444 414.414L860.506 414.311Z",
                  fill: "#2F6A69"
                }
              }),
              _vm._v(" "),
              _c(
                "g",
                {
                  staticStyle: { "mix-blend-mode": "multiply" },
                  attrs: { opacity: "0.45" }
                },
                [
                  _c("path", {
                    attrs: {
                      d:
                        "M289.792 515.225C277.423 502.931 250.622 509.078 246.499 531.618C244.561 539.302 242.211 546.966 241.056 554.629C241.448 555.203 241.798 555.777 242.211 556.33C241.609 557.135 241.058 557.977 240.561 558.851C239.746 566.383 241.09 573.99 244.437 580.796C241.09 573.99 239.746 566.383 240.561 558.851C240.056 559.736 239.609 560.654 239.221 561.596C237.562 566.073 237.594 570.996 239.312 575.451C241.03 579.905 244.316 583.589 248.56 585.817C245.592 592.845 243.056 600.304 243.943 607.967C244.788 615.262 248.54 622.311 255.652 625.221C261.693 627.7 269.341 626.675 273.134 620.938C274.422 618.993 275.148 616.735 275.235 614.409C275.323 612.082 274.767 609.777 273.629 607.742C275.747 606.709 277.516 605.085 278.721 603.069C279.925 601.053 280.513 598.732 280.412 596.39C280.209 594.175 279.382 592.062 278.026 590.293C276.669 588.524 274.838 587.171 272.743 586.39C278.107 580.005 281.608 572.28 282.865 564.055C286.886 564.949 291.073 564.769 295.001 563.535C298.93 562.3 302.46 560.055 305.233 557.027C306.091 556.063 306.863 555.028 307.542 553.933C307.699 546.57 306.185 539.267 303.112 532.565C300.039 525.864 295.486 519.937 289.792 515.225Z",
                      fill: "#00A53F"
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _c(
                "g",
                {
                  staticStyle: { "mix-blend-mode": "multiply" },
                  attrs: { opacity: "0.45" }
                },
                [
                  _c("path", {
                    attrs: {
                      d:
                        "M106.904 312.049C98.8941 316.467 91.8003 322.356 86 329.405C91.5266 340.685 99.3466 350.705 108.966 358.83C115.915 364.603 123.865 369.068 132.427 372.005C141.065 374.976 150.713 375.366 159.846 375.161C161.45 379.238 164.497 382.593 168.416 384.593C172.334 386.593 176.853 387.101 181.121 386.021C186.873 398.992 202.974 401.942 216.024 397.762C216.568 395.96 217.337 394.232 218.312 392.619C218.89 391.431 219.508 390.263 220.147 389.115C213.447 390.857 205.716 391.513 200.335 387.066C201.944 384.779 202.77 382.039 202.692 379.249C202.614 376.46 201.636 373.77 199.902 371.575C198.119 369.478 195.68 368.036 192.976 367.477C193.897 365.29 194.259 362.91 194.029 360.549C193.799 358.189 192.984 355.923 191.656 353.953C184.977 344.609 171.411 349.281 164.381 356.002C160.819 352.305 158.578 347.546 158.004 342.458C157.431 337.371 158.556 332.237 161.207 327.847C161.887 328.503 162.588 329.118 163.268 329.732C156.651 307.971 127.52 299.037 106.904 312.049Z",
                      fill: "#00A53F"
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _c(
                "g",
                {
                  staticStyle: { "mix-blend-mode": "multiply" },
                  attrs: { opacity: "0.45" }
                },
                [
                  _c("path", {
                    attrs: {
                      d:
                        "M243.229 245.026C224.674 240.928 201.997 245.026 197.874 265.517C193.751 247.075 181.381 230.683 162.827 226.585C140.789 218.859 112.236 216.81 91.0014 226.585C91.4755 226.892 91.9703 227.22 92.4651 227.507C89.0705 229.33 85.9134 231.559 83.0643 234.146C80.3033 237.097 78.2583 240.636 77.0857 244.494C73.1275 255.333 72.6326 267.628 73.1893 279.041C73.9809 296.753 78.4299 314.114 86.2597 330.043C92.0562 322.981 99.1502 317.077 107.164 312.646C127.78 299.635 156.828 308.548 163.548 330.248C168.413 334.187 174.098 337 180.192 338.485C186.285 339.97 192.635 340.089 198.781 338.834C205.767 337.248 212.203 333.845 217.43 328.973C222.657 324.102 226.488 317.937 228.53 311.11C228.901 309.819 229.23 308.466 229.499 307.134C235.456 306.397 240.981 302.688 245.29 298.713C251.202 293.178 255.6 286.239 258.072 278.55C259.834 273.335 260.901 267.913 261.247 262.423C259.648 258.425 257.215 254.807 254.11 251.809C251.005 248.811 247.296 246.499 243.229 245.026Z",
                      fill: "#00A53F"
                    }
                  })
                ]
              ),
              _vm._v(" "),
              _vm.idiomas.some(function(i) {
                return i.diminutivo === "en"
              })
                ? _c(
                    "a",
                    {
                      staticClass: "USA",
                      attrs: {
                        href:
                          "/cursos/" +
                          _vm.idiomas.find(function(i) {
                            return i.diminutivo === "en"
                          }).nombreURL
                      }
                    },
                    [
                      _c("g", { attrs: { transform: "translate(110,190)" } }, [
                        _c("path", {
                          attrs: {
                            d:
                              "M50.663 44.7804L28.5194 74.9585L6.33699 44.7804C3.32729 40.6831 1.51225 35.8318 1.09347 30.7653C0.674695 25.6987 1.66858 20.6152 3.96473 16.0795C6.26088 11.5437 9.76941 7.7332 14.1006 5.07122C18.4318 2.40925 23.4162 1 28.5 1C33.5838 1 38.5682 2.40925 42.8994 5.07122C47.2306 7.7332 50.7391 11.5437 53.0353 16.0795C55.3314 20.6152 56.3253 25.6987 55.9065 30.7653C55.4878 35.8318 53.6727 40.6831 50.663 44.7804Z",
                            fill: "#FAB500"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M50.663 44.7804L28.5194 74.9585L6.33699 44.7804C3.32729 40.6831 1.51225 35.8318 1.09347 30.7653C0.674695 25.6987 1.66858 20.6152 3.96473 16.0795C6.26088 11.5437 9.76941 7.7332 14.1006 5.07122C18.4318 2.40925 23.4162 1 28.5 1C33.5838 1 38.5682 2.40925 42.8994 5.07122C47.2306 7.7332 50.7391 11.5437 53.0353 16.0795C55.3314 20.6152 56.3253 25.6987 55.9065 30.7653C55.4878 35.8318 53.6727 40.6831 50.663 44.7804V44.7804Z",
                            stroke: "#2F6A69",
                            "stroke-width": "0.83",
                            "stroke-miterlimit": "10"
                          }
                        }),
                        _vm._v(" "),
                        _c(
                          "g",
                          {
                            staticStyle: { "mix-blend-mode": "multiply" },
                            attrs: { opacity: "0.2" }
                          },
                          [
                            _c("path", {
                              attrs: {
                                d:
                                  "M38.4934 84.2352C38.4934 85.6908 34.0298 86.8552 28.5181 86.8552C23.0065 86.8552 18.5234 85.6908 18.5234 84.2352C18.5234 82.7797 23.0065 81.6541 28.5181 81.6541C34.0298 81.6541 38.4934 82.7797 38.4934 84.2352Z",
                                fill: "#00792D"
                              }
                            })
                          ]
                        ),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M50.4684 23.4772H6.95117C6.95117 23.4772 6.95117 23.342 6.95117 23.284C6.95117 23.0909 7.04795 22.8978 7.106 22.7047C7.16405 22.5116 7.10602 22.3764 7.24146 22.2026L7.41566 21.7005C7.41566 21.7005 7.4156 21.546 7.95739 21.1791L7.80256 20.735C7.79788 20.6707 7.79788 20.6062 7.80256 20.5419C7.79531 20.4712 7.79531 20.4001 7.80256 20.3294C7.82644 20.249 7.85897 20.1713 7.8994 20.0977H48.9978C48.9978 20.2329 49.1139 20.3874 49.1913 20.5419C49.1913 20.7929 49.3848 21.0247 49.4622 21.2757C49.7323 22.0036 49.9647 22.7448 50.1588 23.4965C50.1588 23.4965 50.4684 23.4192 50.4684 23.4772Z",
                            fill: "#FD2A2A"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M47.2745 16.2727H10.1426C11.0333 14.9722 12.058 13.7684 13.1998 12.6808H44.1592C45.2845 13.7732 46.2958 14.9767 47.1777 16.2727H47.2745Z",
                            fill: "#FD2A2A"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M39.3016 9.09045H18.1719C18.2751 9.02108 18.3853 8.9628 18.5008 8.91663H18.6749L19.4876 8.53042L19.8165 8.37592L20.4745 8.10557C20.8475 7.95028 21.2286 7.81493 21.616 7.70005C22.8776 7.28766 24.1724 6.98401 25.486 6.79243V6.50275V6.7731C26.3909 6.65294 27.3017 6.58205 28.2143 6.56071H28.5626C32.249 6.5587 35.8786 7.4676 39.1274 9.20631L39.3016 9.09045Z",
                            fill: "#FD2A2A"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M51.1247 28.6125V29.5008C51.134 29.6809 51.134 29.8614 51.1247 30.0415C51.1247 30.2346 51.1247 30.447 51.1247 30.6594H6.42716C6.42716 30.2732 6.42716 29.887 6.42716 29.5008V29.3849C6.42716 29.1918 6.42716 28.9987 6.42716 28.8249V28.7091C6.41811 28.671 6.41811 28.6313 6.42716 28.5932V28.4387C6.41752 28.265 6.41752 28.091 6.42716 27.9173C6.41751 27.7695 6.41751 27.6211 6.42716 27.4732C6.42716 27.4732 6.42716 27.2801 6.42716 27.1835H51.1053C51.1053 27.1835 51.1053 27.6084 51.1053 27.8208C51.1053 28.0332 51.1053 28.2263 51.1053 28.4387V28.7091L51.1247 28.6125Z",
                            fill: "#FD2A2A"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M50.5248 34.2516C50.37 34.8889 50.1765 35.5454 49.9637 36.1827V36.3372C49.9174 36.5021 49.8591 36.6634 49.7895 36.82C49.6927 37.0903 49.6154 37.3414 49.4993 37.5924C49.4687 37.6796 49.4299 37.7637 49.3832 37.8435H8.09122C7.95577 37.5345 7.8203 37.2255 7.70421 36.8972L7.53013 36.4144C7.53879 36.3633 7.53879 36.3111 7.53013 36.2599C7.33663 35.642 7.14308 34.9854 6.98828 34.3288H50.6021L50.5248 34.2516Z",
                            fill: "#FD2A2A"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M47.3896 41.4554C46.5375 42.7573 45.5446 43.9618 44.429 45.0473H13.0247C11.9024 43.9628 10.9031 42.7582 10.0449 41.4554H47.3896Z",
                            fill: "#FD2A2A"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M39.593 48.6392C36.6302 50.2758 33.3346 51.2216 29.9533 51.4055C26.572 51.5894 23.1928 51.0068 20.0693 49.7013L19.5082 49.4502C18.9406 49.2056 18.3988 48.9353 17.8828 48.6392H39.6124H39.593Z",
                            fill: "#FD2A2A"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M49.2688 19.8842H8.20898C8.38313 19.4786 8.57658 19.0924 8.77008 18.7062C8.84014 18.567 8.91764 18.4316 9.00227 18.3007C9.04623 18.2002 9.09802 18.1034 9.1571 18.011L9.31193 17.4703V17.6634C9.56347 17.2193 9.83431 16.7944 10.1052 16.3696H47.2371C47.835 17.2523 48.3717 18.175 48.8431 19.1311C48.9786 19.4014 49.1141 19.6911 49.2301 19.9614L49.2688 19.8842Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M44.2563 12.6812H13.2969C14.5895 11.4329 16.0323 10.3497 17.5924 9.45624H17.6893L18.2891 9.12793H39.4382C41.2385 10.0965 42.8984 11.3049 44.3723 12.7198L44.2563 12.6812Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M51.0474 27.0683H6.36923C6.35983 27.0237 6.35983 26.9777 6.36923 26.9331V26.7593C6.36923 26.5276 6.36923 26.2765 6.36923 26.0255L6.17578 26.18L6.48532 25.3689C6.476 25.279 6.476 25.1884 6.48532 25.0986C6.47621 25.028 6.47621 24.9567 6.48532 24.8861C6.48532 24.6544 6.48534 24.4227 6.62078 24.2103C6.66105 23.9825 6.71275 23.7569 6.77561 23.5344H50.2928C50.3013 23.6243 50.3013 23.7148 50.2928 23.8047C50.2928 24.2103 50.4669 24.6158 50.5443 25.0213V25.4462C50.5443 25.6586 50.5443 25.871 50.641 26.0834C50.7378 26.2958 50.641 26.5662 50.641 26.8172C50.7879 26.881 50.9248 26.9655 51.0474 27.0683Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M51.0687 30.6593C50.9873 31.863 50.806 33.058 50.5268 34.2318H6.91294C6.62443 33.0598 6.44303 31.8641 6.37109 30.6593H51.0687Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M49.3257 37.8625C48.7965 39.1184 48.1486 40.3211 47.3908 41.4543H10.0268C9.28359 40.3124 8.63639 39.111 8.0918 37.8625H49.3257Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M44.4109 45.0468C42.9744 46.4414 41.361 47.6425 39.6121 48.6193H17.8825C16.1233 47.6493 14.5028 46.4477 13.0645 45.0468H44.4495H44.4109Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.3706 6.44464V27.3777H6.27353C6.27353 27.3777 6.27353 27.1846 6.27353 27.088C6.26413 27.0434 6.26413 26.9974 6.27353 26.9529V26.779C6.27353 26.5473 6.27353 26.2963 6.27353 26.0452L6.08008 26.1997L6.38962 25.3887C6.3803 25.2988 6.3803 25.2082 6.38962 25.1183C6.38051 25.0478 6.38051 24.9764 6.38962 24.9059C6.38962 24.6742 6.38963 24.4424 6.52508 24.23C6.56535 24.0023 6.61705 23.7767 6.67991 23.5541C6.67991 23.5541 6.67991 23.419 6.67991 23.361C6.67991 23.1679 6.77657 22.9748 6.83462 22.7817C6.89267 22.5886 6.83463 22.4534 6.97008 22.2796L7.14428 21.7775C7.14428 21.7775 7.14428 21.623 7.14428 21.5458L7.39583 20.8699C7.39115 20.8056 7.39115 20.7411 7.39583 20.6768C7.38858 20.6062 7.38858 20.535 7.39583 20.4644C7.41971 20.3839 7.45212 20.3062 7.49255 20.2326C7.6667 19.8271 7.86015 19.4409 8.05365 19.0547C8.1237 18.9154 8.2012 18.7801 8.28583 18.6492C8.32979 18.5487 8.38158 18.4519 8.44066 18.3595L8.59549 17.8188V18.0119C8.84703 17.5677 9.11787 17.1429 9.38876 16.7181C10.2795 15.4176 11.3042 14.2138 12.446 13.1262C13.7386 11.878 15.1815 10.7947 16.7415 9.90131H16.8384L17.4382 9.57303C17.5414 9.50366 17.6516 9.44538 17.7671 9.39921H17.9413L18.754 9.013L19.0829 8.85851L19.7408 8.58815C20.1139 8.43287 20.4949 8.29752 20.8824 8.18264C22.144 7.77025 23.4387 7.4666 24.7523 7.27503V6.98534V7.2557C25.9367 6.89686 27.1461 6.62577 28.3706 6.44464Z",
                            fill: "#194396"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M23.7253 9.92037L24.0155 10.7701L23.2996 10.2487V10.2294V10.2487L22.5837 10.7701L22.8933 9.92037L22.1387 9.41829H23.0287L23.2802 8.5686L23.5511 9.41829H24.4413L23.706 9.92037H23.7253Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M23.7253 14.3224L24.0155 15.1721L23.2996 14.6314L22.5837 15.1721L22.8933 14.3224L22.1387 13.8203H23.0287L23.2802 12.9706L23.5511 13.8203H24.4413L23.706 14.3224H23.7253Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M23.7253 18.7255L24.0155 19.5752L23.2996 19.0345L22.5837 19.5752L22.8933 18.7255L22.1387 18.2234H23.0287L23.2802 17.3738L23.5511 18.2234H24.4413L23.706 18.7255H23.7253Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M23.7253 23.128L24.0155 23.9584L23.2996 23.437L22.5837 23.9584L22.8933 23.128L22.1387 22.6259H23.0287L23.2802 21.7762L23.5511 22.6259H24.4413L23.706 23.128H23.7253Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M19.276 10.5757V10.7688L19.1019 10.6529L18.8891 10.4984L18.6762 10.3439L17.941 10.8653V10.7109L18.1732 10.0736L17.6895 9.74533H18.5794V9.53291V9.41705H18.7536L18.8697 9.74533H19.8178L19.0825 10.2474V10.5177V10.7495L19.276 10.5757Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M19.0243 14.3224L19.3339 15.1721L18.618 14.6314L17.902 15.1721L18.1922 14.3224L17.457 13.8203H18.347L18.5986 12.9706L18.8695 13.8203H19.7595L19.0243 14.3224Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M19.0243 18.7255L19.3339 19.5752L18.618 19.0345L17.902 19.5752L18.1922 18.7255L17.457 18.2234H18.347L18.5986 17.3738L18.8695 18.2234H19.7595L19.0243 18.7255Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M19.0243 23.128L19.3339 23.9584L18.618 23.437L17.902 23.9584L18.1922 23.128L17.457 22.6259H18.347L18.5986 21.7762L18.8695 22.6259H19.7595L19.0243 23.128Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M14.3407 14.3224L14.6504 15.1721L13.9151 14.6314L13.1992 15.1721L13.5087 14.3224L12.7734 13.8203H13.6636L13.8957 12.9706L14.186 13.8203H14.1667H14.186H15.076L14.3407 14.3224H14.3214H14.3407Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M14.3407 18.7255L14.6504 19.5752L13.9151 19.0345L13.1992 19.5752L13.5087 18.7255L12.7734 18.2234H13.6636L13.8957 17.3738L14.186 18.2234H14.1667H14.186H15.076L14.3407 18.7255H14.3214H14.3407Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M14.3407 23.128L14.6504 23.9584L13.9151 23.437L13.1992 23.9584L13.5087 23.128L12.7734 22.6259H13.6636L13.8957 21.7762L14.186 22.6259H14.1667H14.186H15.076L14.3407 23.128H14.3214H14.3407Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M9.92993 19.3051L10.0266 19.5754L9.85246 19.4402L9.31075 19.0347L8.71094 19.4788L9.0011 18.6292C9.07116 18.49 9.14877 18.3546 9.2334 18.2236V18.0112L9.3881 17.4705V17.6636V17.8374L9.48482 18.1657H10.3943L9.63965 18.6678L9.92993 19.3051Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M9.73727 23.128L10.0276 23.9584L9.31163 23.437L8.59568 23.9584L8.88586 23.128H8.90523L8.16992 22.6259H9.0407L9.29226 21.7762L9.56319 22.6259H10.4726L9.71802 23.128H9.73727Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.9912 12.1216L26.2815 12.9713L25.5654 12.4305L24.8495 12.9713L25.1591 12.1216L24.4238 11.6195H25.314L25.5462 10.7698L25.817 11.6195H25.8363H26.7265L25.9912 12.1216H25.9718H25.9912Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.9912 16.5237L26.2815 17.3733L25.5654 16.8326L24.8495 17.3733L25.1591 16.5237V16.5044L24.4238 16.0216H25.314L25.5462 15.1719L25.817 16.0216H25.8363H26.7265L25.9912 16.5044H25.9718L25.9912 16.5237Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.9912 20.9267L26.2815 21.7764L25.5654 21.2357L24.8495 21.7764L25.1591 20.9267L24.4238 20.4246H25.314L25.5462 19.575L25.817 20.4246H25.8363H26.7265L25.9912 20.9267H25.9718H25.9912Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.9912 25.3299L26.2815 26.1795L25.5654 25.6582V25.6388V25.6582L24.8495 26.1795L25.1591 25.3299L24.4238 24.8278H25.314L25.5462 23.9781L25.817 24.8278H25.8363H26.7265L25.9912 25.3299H25.9718H25.9912Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.7265 7.23592L26.4556 7.42904L26.3782 7.46764L25.9912 7.738L26.1073 8.10491H26.1266L26.1846 8.27873L26.2234 8.39459L26.2815 8.58768L26.0685 8.41389H26.0492L25.9331 8.31733L25.7009 8.16284L25.5848 8.06631H25.5654L25.372 8.22077L25.0237 8.47182H25.0043L24.8495 8.58768L24.8882 8.49115L24.9656 8.27873L25.1591 7.738L25.101 7.69939L24.9849 7.62213L24.4238 7.23592H25.314L25.3913 6.96557L25.4301 6.84971V6.79177H25.4493L25.4687 6.67591L25.5462 6.38623L25.6429 6.65658L25.6623 6.75314L25.6816 6.81108L25.7202 6.90764L25.8363 7.23592H26.7265Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M21.4033 12.1216L21.7128 12.9713L20.9969 12.4305H20.9775L20.281 12.9713L20.5712 12.1216L19.8359 11.6195H20.726L20.9583 10.7698L21.2485 11.6195H22.1386L21.4033 12.1216Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M21.4033 16.5237L21.7128 17.3733L20.9969 16.8326H20.9775L20.281 17.3733L20.5712 16.5237V16.5044L19.8359 16.0216H20.726L20.9583 15.1719L21.2485 16.0216H22.1386L21.4033 16.5044V16.5237Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M21.4033 20.9267L21.7128 21.7764L20.9969 21.2357H20.9775L20.281 21.7764L20.5712 20.9267L19.8359 20.4246H20.726L20.9583 19.575L21.2485 20.4246H22.1386L21.4033 20.9267Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M21.4033 25.3299L21.7128 26.1795L20.9969 25.6582V25.6388L20.9775 25.6582L20.281 26.1795L20.5712 25.3299L19.8359 24.8278H20.726L20.9583 23.9781L21.2485 24.8278H22.1386L21.4033 25.3299Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M21.7529 8.5872L21.5981 8.49067L21.0564 8.08512L20.3984 8.5679V8.29754V8.20098V8.08512C20.7715 7.92983 21.1526 7.79444 21.5401 7.67957L21.3273 7.81476L21.5208 8.35547L21.7529 8.5872Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M16.6455 12.1216L16.9358 12.9713L16.2198 12.4305L15.5039 12.9713L15.7941 12.1216H15.8134L15.0781 11.6195H15.9489L16.2005 10.7698L16.4714 11.6195H17.3808L16.6455 12.1216H16.6261H16.6455Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M16.6455 16.5237L16.9358 17.3733L16.2198 16.8326L15.5039 17.3733L15.7941 16.5237L15.8134 16.5044L15.0781 16.0216H15.9489L16.2005 15.1719L16.4714 16.0216H17.3808L16.6455 16.5044H16.6261L16.6455 16.5237Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M16.6455 20.9267L16.9358 21.7764L16.2198 21.2357L15.5039 21.7764L15.7941 20.9267H15.8134L15.0781 20.4246H15.9489L16.2005 19.575L16.4714 20.4246H17.3808L16.6455 20.9267H16.6261H16.6455Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M16.6455 25.3299L16.9358 26.1795L16.2198 25.6582V25.6388V25.6582L15.5039 26.1795L15.7941 25.3299H15.8134L15.0781 24.8278H15.9489L16.2005 23.9781L16.4714 24.8278H17.3808L16.6455 25.3299H16.6261H16.6455Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M11.9813 16.5237L12.2715 17.3733L11.575 16.8326H11.5556L10.8397 17.3733L11.1493 16.5237V16.5044L10.4141 16.0216H11.304L11.5362 15.1719L11.8071 16.0216H12.7166L11.9813 16.5044V16.5237Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M11.9813 20.9267L12.2715 21.7764L11.575 21.2357H11.5556L10.8397 21.7764L11.1493 20.9267L10.4141 20.4246H11.304L11.5362 19.575L11.8071 20.4246H12.7166L11.9813 20.9267Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M11.9813 25.3299L12.2715 26.1795L11.575 25.6582V25.6388L11.5556 25.6582L10.8397 26.1795L11.1493 25.3299L10.4141 24.8278H11.304L11.5362 23.9781L11.8071 24.8278H12.7166L11.9813 25.3299Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M7.62766 21.5253V21.7764L7.49219 21.6605C7.49219 21.6605 7.49219 21.506 7.49219 21.4288L7.62766 21.5253Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M8.20587 20.4238L8.05231 20.5197C8.04767 20.4558 8.04767 20.3917 8.05231 20.3278L8.20587 20.4238Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M7.41513 25.2533L7.70529 26.103L7.06676 25.6203L6.67988 25.9099L6.48633 26.0644L6.79597 25.2533C6.78665 25.1635 6.78665 25.0729 6.79597 24.983C6.78686 24.9125 6.78686 24.8411 6.79597 24.7706L7.02814 23.9209L7.18284 24.3457L7.29904 24.6933H8.20836L7.97619 24.8478L7.41513 25.2533Z",
                            fill: "white"
                          }
                        })
                      ])
                    ]
                  )
                : _vm._e(),
              _vm._v(" "),
              _vm.idiomas.some(function(i) {
                return i.diminutivo === "mx"
              })
                ? _c(
                    "a",
                    {
                      staticClass: "Mexico",
                      attrs: {
                        href:
                          "/cursos/" +
                          _vm.idiomas.find(function(i) {
                            return i.diminutivo === "mx"
                          }).nombreURL
                      }
                    },
                    [
                      _c("g", { attrs: { transform: "translate(110,280)" } }, [
                        _c("path", {
                          attrs: {
                            d:
                              "M50.663 44.7804L28.5194 74.9585L6.33699 44.7804C3.32729 40.6831 1.51225 35.8318 1.09347 30.7653C0.674695 25.6987 1.66858 20.6152 3.96473 16.0795C6.26088 11.5437 9.76941 7.7332 14.1006 5.07122C18.4318 2.40925 23.4162 1 28.5 1C33.5838 1 38.5682 2.40925 42.8994 5.07122C47.2306 7.7332 50.7391 11.5437 53.0353 16.0795C55.3314 20.6152 56.3253 25.6987 55.9065 30.7653C55.4878 35.8318 53.6727 40.6831 50.663 44.7804Z",
                            fill: "#FAB500"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M50.663 44.7804L28.5194 74.9585L6.33699 44.7804C3.32729 40.6831 1.51225 35.8318 1.09347 30.7653C0.674695 25.6987 1.66858 20.6152 3.96473 16.0795C6.26088 11.5437 9.76941 7.7332 14.1006 5.07122C18.4318 2.40925 23.4162 1 28.5 1C33.5838 1 38.5682 2.40925 42.8994 5.07122C47.2306 7.7332 50.7391 11.5437 53.0353 16.0795C55.3314 20.6152 56.3253 25.6987 55.9065 30.7653C55.4878 35.8318 53.6727 40.6831 50.663 44.7804V44.7804Z",
                            stroke: "#2F6A69",
                            "stroke-width": "0.83",
                            "stroke-miterlimit": "10"
                          }
                        }),
                        _vm._v(" "),
                        _c(
                          "g",
                          {
                            staticStyle: { "mix-blend-mode": "multiply" },
                            attrs: { opacity: "0.2" }
                          },
                          [
                            _c("path", {
                              attrs: {
                                d:
                                  "M38.4934 84.2352C38.4934 85.6907 34.0298 86.8551 28.5181 86.8551C23.0065 86.8551 18.5234 85.6907 18.5234 84.2352C18.5234 82.7796 23.0065 81.654 28.5181 81.654C34.0298 81.654 38.4934 82.7796 38.4934 84.2352Z",
                                fill: "#00792D"
                              }
                            })
                          ]
                        ),
                        _vm._v(" "),
                        _c(
                          "mask",
                          {
                            attrs: {
                              id: "mask0",
                              "mask-type": "alpha",
                              maskUnits: "userSpaceOnUse",
                              x: "6",
                              y: "6",
                              width: "46",
                              height: "46"
                            }
                          },
                          [
                            _c("rect", {
                              attrs: {
                                x: "6.38672",
                                y: "6.38623",
                                width: "45.0524",
                                height: "45.0524",
                                rx: "22.5262",
                                fill: "#C4C4C4"
                              }
                            })
                          ]
                        ),
                        _vm._v(" "),
                        _c("g", { attrs: { mask: "url(#mask0)" } }, [
                          _c("path", {
                            attrs: {
                              d:
                                "M6.38672 6.3866V29.0471V51.4386H21.441V29.0471V6.3866H6.38672Z",
                              fill: "#006847"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M21.3867 6.38623V29.0467V51.4382H36.441V29.0467V6.38623H21.3867Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M36.3848 6.38623V29.0467V51.4382H51.4391V29.0467V6.38623H36.3848Z",
                              fill: "#CE1126"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.2188 32.6179V33.0021L31.3484 32.9061L31.2373 32.5988L31.2188 32.6179Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.2188 33.0226V32.6193L31.3299 32.9458L31.2188 33.0226ZM31.2188 32.6385V32.9842H31.3299L31.2373 32.6961L31.2188 32.6385Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.2014 32.4069C31.2309 32.4069 31.2592 32.4191 31.28 32.4407C31.3009 32.4623 31.3126 32.4916 31.3126 32.5221C31.3126 32.5527 31.3009 32.582 31.28 32.6036C31.2592 32.6252 31.2309 32.6373 31.2014 32.6373C31.1719 32.6373 31.1437 32.6252 31.1228 32.6036C31.102 32.582 31.0903 32.5527 31.0903 32.5221C31.0867 32.5063 31.0871 32.4897 31.0915 32.474C31.0958 32.4584 31.1039 32.4441 31.115 32.4325C31.1262 32.421 31.1399 32.4126 31.1551 32.4082C31.1702 32.4037 31.1861 32.4032 31.2014 32.4069Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.1999 32.6568C31.1743 32.6568 31.1492 32.6489 31.1279 32.6341C31.1066 32.6193 31.09 32.5983 31.0802 32.5738C31.0703 32.5492 31.0678 32.5221 31.0728 32.4961C31.0778 32.47 31.0902 32.4461 31.1083 32.4273C31.1264 32.4085 31.1495 32.3956 31.1746 32.3905C31.1998 32.3853 31.2258 32.388 31.2495 32.3981C31.2732 32.4083 31.2935 32.4255 31.3077 32.4477C31.322 32.4698 31.3295 32.4957 31.3295 32.5223C31.3295 32.558 31.3159 32.5922 31.2916 32.6174C31.2673 32.6426 31.2343 32.6568 31.1999 32.6568ZM31.1999 32.4071C31.1779 32.4071 31.1565 32.4138 31.1382 32.4265C31.1199 32.4392 31.1057 32.4572 31.0973 32.4782C31.0889 32.4993 31.0867 32.5225 31.091 32.5448C31.0952 32.5672 31.1058 32.5877 31.1214 32.6038C31.1369 32.6199 31.1567 32.6309 31.1783 32.6353C31.1998 32.6398 31.2222 32.6375 31.2425 32.6288C31.2628 32.62 31.2801 32.6053 31.2923 32.5863C31.3045 32.5674 31.3111 32.5451 31.3111 32.5223C31.3111 32.4918 31.2993 32.4625 31.2785 32.4409C31.2577 32.4192 31.2294 32.4071 31.1999 32.4071Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.6448 33.2138L31.3855 32.945L31.2559 33.041L31.6263 33.2714L31.6448 33.2138Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.6271 33.2711L31.2383 33.0407L31.3864 32.9255L31.6642 33.2135L31.6271 33.2711ZM31.2753 33.0407L31.6271 33.2519L31.3864 33.0023L31.2753 33.0407Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.6279 33.3477C31.6097 33.3266 31.5996 33.2992 31.5996 33.2709C31.5996 33.2426 31.6097 33.2152 31.6279 33.1941C31.6384 33.1819 31.6512 33.172 31.6656 33.1653C31.68 33.1586 31.6956 33.1551 31.7113 33.1551C31.7271 33.1551 31.7427 33.1586 31.7571 33.1653C31.7714 33.172 31.7842 33.1819 31.7947 33.1941C31.8062 33.2031 31.8155 33.2147 31.822 33.228C31.8284 33.2413 31.8317 33.256 31.8317 33.2709C31.8317 33.2858 31.8284 33.3005 31.822 33.3139C31.8155 33.3272 31.8062 33.3388 31.7947 33.3477C31.7842 33.36 31.7714 33.3698 31.7571 33.3766C31.7427 33.3833 31.7271 33.3868 31.7113 33.3868C31.6956 33.3868 31.68 33.3833 31.6656 33.3766C31.6512 33.3698 31.6384 33.36 31.6279 33.3477Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.7174 33.407H31.6248C31.6125 33.3944 31.6027 33.3795 31.5961 33.363C31.5894 33.3465 31.5859 33.3288 31.5859 33.311C31.5859 33.2931 31.5894 33.2753 31.5961 33.2589C31.6027 33.2424 31.6125 33.2274 31.6248 33.2149H31.736C31.757 33.2421 31.7685 33.2761 31.7685 33.311C31.7685 33.3459 31.757 33.3797 31.736 33.407H31.7174ZM31.7174 33.1765C31.6992 33.1976 31.6892 33.225 31.6892 33.2533C31.6892 33.2817 31.6992 33.3091 31.7174 33.3302C31.7174 33.3302 31.7175 33.3302 31.8101 33.3302C31.8283 33.3091 31.8384 33.2817 31.8384 33.2533C31.8384 33.225 31.8283 33.1976 31.8101 33.1765C31.8101 33.1765 31.7545 33.1765 31.7174 33.1765Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M33.6836 29.2766L33.9613 29.5647V29.4111L33.7206 29.2383L33.6836 29.2766Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M33.9604 29.5845L33.6641 29.2772L33.9233 29.45L33.9604 29.5845ZM33.7011 29.2772L33.9418 29.5461V29.4308L33.7011 29.258V29.2772Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M33.6442 29.3156C33.7056 29.3156 33.7553 29.2641 33.7553 29.2004C33.7553 29.1368 33.7056 29.0852 33.6442 29.0852C33.5829 29.0852 33.5332 29.1368 33.5332 29.2004C33.5332 29.2641 33.5829 29.3156 33.6442 29.3156Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M33.5332 29.2004C33.5332 29.3349 33.6443 29.3349 33.6443 29.3349C33.6787 29.3349 33.7116 29.3207 33.7359 29.2955C33.7602 29.2703 33.7739 29.2361 33.7739 29.2004C33.7694 29.1682 33.7538 29.1388 33.73 29.1176C33.7061 29.0964 33.6757 29.0849 33.6443 29.0852C33.6148 29.0852 33.5866 29.0974 33.5657 29.119C33.5449 29.1406 33.5332 29.1699 33.5332 29.2004Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M34.4045 29.4498L33.9785 29.5651V29.4306H34.3304L34.4045 29.4498Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M33.9785 29.585V29.4122H34.3488L33.9785 29.585ZM33.9785 29.4313V29.5466L34.3674 29.4313H34.0156H33.9785Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M34.4597 29.5053C34.5206 29.5053 34.5699 29.4542 34.5699 29.3911C34.5699 29.328 34.5206 29.2769 34.4597 29.2769C34.3989 29.2769 34.3496 29.328 34.3496 29.3911C34.3496 29.4542 34.3989 29.5053 34.4597 29.5053Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M34.3822 29.4739C34.403 29.4955 34.4312 29.5077 34.4607 29.5077C34.4921 29.508 34.5225 29.4965 34.5463 29.4753C34.5701 29.4541 34.5858 29.4247 34.5903 29.3924C34.5903 29.3568 34.5766 29.3226 34.5523 29.2974C34.528 29.2722 34.495 29.258 34.4607 29.258C34.4296 29.2626 34.4012 29.2789 34.3808 29.3036C34.3604 29.3283 34.3493 29.3599 34.3496 29.3924C34.3496 29.423 34.3613 29.4523 34.3822 29.4739Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.9965 31.5627L32.7559 31.1594L33.0336 31.505L32.9965 31.5627Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.9976 31.5818L32.7383 31.1594L33.0346 31.5242L32.9976 31.5818ZM32.7753 31.1594L33.0161 31.5434L32.7383 31.217L32.7753 31.1594Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.7205 30.9475C32.7205 30.9475 32.8502 30.9475 32.8502 31.0627C32.8457 31.095 32.8301 31.1244 32.8062 31.1456C32.7824 31.1668 32.7519 31.1783 32.7205 31.1779C32.691 31.1779 32.6628 31.1659 32.6419 31.1442C32.6211 31.1226 32.6094 31.0933 32.6094 31.0627C32.6094 31.0322 32.6211 31.0029 32.6419 30.9813C32.6628 30.9597 32.691 30.9475 32.7205 30.9475Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.7195 31.1989C32.6851 31.1989 32.6522 31.1847 32.6278 31.1595C32.6035 31.1343 32.5898 31.1001 32.5898 31.0644C32.5898 31.0288 32.6035 30.9946 32.6278 30.9694C32.6522 30.9441 32.6851 30.93 32.7195 30.93C32.7539 30.93 32.7869 30.9441 32.8112 30.9694C32.8356 30.9946 32.8492 31.0288 32.8492 31.0644C32.8492 31.1001 32.8356 31.1343 32.8112 31.1595C32.7869 31.1847 32.7539 31.1989 32.7195 31.1989ZM32.7195 30.9492C32.6901 30.9492 32.6618 30.9613 32.641 30.983C32.6201 31.0046 32.6084 31.0339 32.6084 31.0644C32.6084 31.095 32.6201 31.1243 32.641 31.146C32.6618 31.1676 32.6901 31.1797 32.7195 31.1797C32.749 31.1797 32.7773 31.1676 32.7981 31.146C32.819 31.1243 32.8307 31.095 32.8307 31.0644C32.8307 31.0339 32.819 31.0046 32.7981 30.983C32.7773 30.9613 32.749 30.9492 32.7195 30.9492Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M33.0156 31.5817H33.3489L33.0897 31.4665L33.0156 31.5817Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M33.348 31.6583H32.9961L33.0887 31.543L33.3665 31.6583H33.348ZM33.0332 31.6583H33.3295L33.0702 31.5623L33.0332 31.6583Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M33.4431 31.5233C33.4726 31.5233 33.5008 31.5354 33.5217 31.557C33.5425 31.5787 33.5542 31.608 33.5542 31.6386C33.5542 31.6691 33.5425 31.6984 33.5217 31.7201C33.5008 31.7417 33.4726 31.7538 33.4431 31.7538C33.4137 31.7538 33.3854 31.7417 33.3645 31.7201C33.3437 31.6984 33.332 31.6691 33.332 31.6386C33.332 31.608 33.3437 31.5787 33.3645 31.557C33.3854 31.5354 33.4137 31.5233 33.4431 31.5233Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M33.4421 31.7738C33.4165 31.7738 33.3914 31.7659 33.3701 31.7511C33.3488 31.7364 33.3322 31.7153 33.3224 31.6908C33.3126 31.6662 33.31 31.6392 33.315 31.6131C33.32 31.5871 33.3323 31.5631 33.3505 31.5443C33.3686 31.5255 33.3917 31.5127 33.4168 31.5075C33.4419 31.5023 33.468 31.505 33.4917 31.5152C33.5154 31.5254 33.5356 31.5426 33.5499 31.5647C33.5641 31.5868 33.5717 31.6128 33.5717 31.6394C33.5717 31.675 33.5581 31.7092 33.5338 31.7344C33.5094 31.7597 33.4765 31.7738 33.4421 31.7738ZM33.4421 31.5242C33.4201 31.5242 33.3986 31.5309 33.3804 31.5436C33.3621 31.5562 33.3479 31.5742 33.3394 31.5953C33.331 31.6163 33.3288 31.6395 33.3331 31.6618C33.3374 31.6842 33.348 31.7047 33.3635 31.7208C33.3791 31.737 33.3989 31.7479 33.4204 31.7524C33.442 31.7568 33.4643 31.7545 33.4846 31.7458C33.5049 31.7371 33.5222 31.7223 33.5344 31.7034C33.5466 31.6844 33.5532 31.6622 33.5532 31.6394C33.5532 31.6088 33.5415 31.5795 33.5206 31.5579C33.4998 31.5363 33.4716 31.5242 33.4421 31.5242Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.3672 32.6184C25.3672 32.6184 25.3672 32.6184 25.3672 32.5032C25.3672 32.388 25.3672 32.388 25.3672 32.388C25.3933 32.3926 25.417 32.4067 25.434 32.4278C25.451 32.449 25.4601 32.4757 25.4597 32.5032C25.4597 32.5032 25.4227 32.6184 25.3672 32.6184ZM25.3672 32.4072V32.5032C25.3917 32.5032 25.4153 32.4931 25.4326 32.4751C25.45 32.4571 25.4597 32.4327 25.4597 32.4072C25.4597 32.3817 25.45 32.3573 25.4326 32.3393C25.4153 32.3213 25.3917 32.3112 25.3672 32.3112V32.4072Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.4607 32.6957V33.1182H25.3496V32.7533L25.4607 32.6957Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.5535 33.1377H25.4238V32.7536L25.5535 33.1377ZM25.4424 33.1377V32.7536V33.1377Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.553 32.5613C25.553 32.5613 25.553 32.7149 25.4234 32.7341C25.2938 32.7533 25.2383 32.7341 25.2383 32.6381C25.2383 32.5421 25.3679 32.6381 25.3864 32.6381C25.4049 32.6381 25.4975 32.5421 25.553 32.6381V32.5613Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.8492 33.0992C24.8736 33.0992 24.897 33.1092 24.9142 33.1271C24.9314 33.1449 24.9411 33.1692 24.9411 33.1944C24.9411 33.2196 24.9314 33.2438 24.9142 33.2617C24.897 33.2795 24.8736 33.2896 24.8492 33.2896C24.8492 33.2896 24.7207 33.2896 24.7207 33.1944C24.7207 33.0992 24.7758 33.0992 24.8492 33.0992Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.8512 33.2912C24.8512 33.2912 24.7031 33.2913 24.7031 33.1952C24.7031 33.0992 24.7031 33.0992 24.8512 33.0992C24.9993 33.0992 24.9808 33.0992 24.9808 33.1952C24.9808 33.2913 24.9253 33.2912 24.8512 33.2912ZM24.8512 33.1184H24.7216C24.7216 33.1184 24.7216 33.1184 24.8512 33.1184C24.9808 33.1184 24.9623 33.1184 24.9623 33.1184C24.9623 33.1184 24.9068 33.1184 24.8512 33.1184Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.0352 33.1952V33.0992H25.3685V33.1952H25.0352ZM25.0352 33.1952H25.3871H25.0352Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.092 33.118C25.092 33.2332 25.092 33.3676 25.092 33.3484C25.092 33.3292 24.9994 33.2332 24.9809 33.1948C24.9624 33.1564 24.9809 33.0603 24.9809 32.9835C24.9809 32.9067 25.1291 32.9835 25.1661 33.118H25.092Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.0353 33.3683C25.019 33.3685 25.0028 33.3651 24.988 33.3581C24.9731 33.3512 24.96 33.3409 24.9494 33.3281C24.9387 33.3153 24.931 33.3001 24.9266 33.2838C24.9223 33.2676 24.9214 33.2505 24.9241 33.2339C24.9111 33.2105 24.9043 33.184 24.9043 33.157C24.9043 33.1301 24.9111 33.1036 24.9241 33.0802C24.9241 33.0802 25.0538 33.0802 25.0723 33.2339C25.0908 33.3875 25.0723 33.4067 25.0723 33.4451L25.0353 33.3683ZM24.9427 32.9842C24.9427 32.9842 24.9427 32.9842 24.9427 33.1186C24.9427 33.1186 24.9427 33.2147 25.0353 33.2339C25.0486 33.2037 25.0555 33.171 25.0555 33.1379C25.0555 33.1047 25.0486 33.0719 25.0353 33.0418C25.0353 33.0418 24.9983 32.9842 24.9427 32.9842Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.8133 30.8141C23.8133 30.8141 23.9059 30.8141 23.9059 30.9294C23.9063 30.9569 23.8971 30.9836 23.8802 31.0047C23.8632 31.0258 23.8395 31.04 23.8133 31.0446C23.8133 31.0446 23.8133 31.0446 23.8133 30.9294C23.8133 30.8141 23.7763 30.8141 23.8133 30.8141Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.8145 31.0631C23.8145 31.0631 23.8145 31.0632 23.8145 30.9287C23.8145 30.7943 23.8145 30.7943 23.8145 30.7943C23.8145 30.7943 23.9071 30.7943 23.9071 30.9287C23.9071 31.0632 23.87 31.0631 23.8145 31.0631ZM23.8145 30.8134C23.8145 30.8134 23.8145 30.8135 23.8145 30.9287C23.8145 31.0439 23.8145 31.0439 23.8145 31.0439C23.8145 31.0439 23.8145 31.0439 23.8145 30.9287C23.8145 30.8135 23.8515 30.8134 23.8145 30.8134Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.8113 31.1975V31.5816L23.7188 31.4855V31.1783L23.8113 31.1975Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.8484 31.6004L23.7188 31.4852V31.1587H23.8299L23.8484 31.6004ZM23.7372 31.4852V31.1203V31.4852Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.9604 31.0634C23.9604 31.1594 23.8678 31.217 23.7752 31.1978C23.6826 31.1786 23.627 31.1978 23.627 31.0442C23.627 30.8906 23.7566 31.0442 23.7936 31.0442C23.8307 31.0442 23.9419 30.9482 23.9604 31.0634Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.8118 31.2176C23.7007 31.2176 23.6451 31.2176 23.6637 31.0639C23.6822 30.9103 23.6636 31.0639 23.7562 31.0639H23.9229C23.9229 31.0639 23.9229 31.0639 24.0155 31.0639C24.1081 31.0639 24.0155 31.0639 24.0155 31.0639C24.0005 31.1079 23.9731 31.1462 23.9367 31.1736C23.9003 31.201 23.8567 31.2164 23.8118 31.2176ZM23.8118 31.0063C23.8118 31.0063 23.9044 31.1408 23.9414 31.1408C23.9835 31.1554 24.029 31.1554 24.0711 31.1408H23.9044L23.8118 31.0063Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.1647 31.6012C23.2363 31.6012 23.2944 31.5755 23.2944 31.5436C23.2944 31.5118 23.2363 31.486 23.1647 31.486C23.0931 31.486 23.0352 31.5118 23.0352 31.5436C23.0352 31.5755 23.0931 31.6012 23.1647 31.6012Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.1637 31.6012C23.0711 31.6012 23.0156 31.6012 23.0156 31.6012C23.0156 31.6012 23.0156 31.6012 23.1637 31.6012C23.3118 31.6012 23.2933 31.6012 23.2933 31.6012C23.2933 31.6012 23.2377 31.6012 23.1637 31.6012ZM23.1637 31.486H23.0342C23.0342 31.486 23.0341 31.486 23.1637 31.486C23.2933 31.486 23.2747 31.486 23.2747 31.486C23.2747 31.486 23.2192 31.486 23.1637 31.486Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.3867 31.543H23.6831L23.8127 31.6583H23.3867V31.543Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.2757 31.3706C23.2971 31.3726 23.3178 31.3795 23.3364 31.3907C23.355 31.4019 23.3711 31.4172 23.3834 31.4355C23.3957 31.4537 23.4041 31.4746 23.4079 31.4965C23.4116 31.5185 23.4108 31.5411 23.4053 31.5626C23.4053 31.5626 23.4053 31.7355 23.2572 31.7162C23.1091 31.697 23.2572 31.7163 23.2572 31.6202C23.2572 31.6202 23.2572 31.6202 23.2572 31.4858C23.2572 31.3514 23.2572 31.4858 23.2572 31.4858L23.2757 31.3706Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.0526 28.9882C23.0526 28.9882 22.9425 29.0834 22.9242 28.9882C22.9058 28.893 22.9242 28.893 22.9242 28.8359C22.9429 28.8219 22.9654 28.8145 22.9884 28.8145C23.0114 28.8145 23.0339 28.8219 23.0526 28.8359C23.0624 28.8566 23.0674 28.8794 23.0674 28.9025C23.0674 28.9256 23.0624 28.9484 23.0526 28.9692V28.9882Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.9434 28.9312V29.0834C22.9801 29.0834 23.0352 29.1977 23.0352 29.0644V28.9312C23.0056 28.9195 22.9729 28.9195 22.9434 28.9312Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.7197 29.6034L22.8865 29.2L22.7012 29.4881L22.7197 29.6034Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.7207 29.642V29.4692L22.906 29.1619L22.7207 29.642ZM22.7207 29.4692V29.5844L22.8689 29.2003L22.7207 29.4692Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.9426 29.2388H22.85C22.7574 29.2388 22.7389 29.1044 22.85 29.0275C22.9612 28.9507 22.85 29.0275 22.85 29.0275L22.9426 29.2388ZM22.8315 28.9891C22.8315 28.9891 22.8315 29.1044 22.8315 29.162H23.0167L22.8315 28.9891Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.1655 29.1435C22.1655 29.1435 22.2581 29.2395 22.1655 29.2779C22.0729 29.3163 22.0729 29.2779 22.0173 29.2779C21.9618 29.2779 21.9247 29.1819 22.0173 29.1435C22.1099 29.1051 22.11 29.1435 22.1655 29.1435Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.1658 29.3145C22.1658 29.3145 22.074 29.2194 22.1658 29.1813C22.2577 29.1432 22.1658 29.1813 22.1658 29.1813C22.1839 29.2022 22.1939 29.2293 22.1939 29.2574C22.1939 29.2855 22.1839 29.3126 22.1658 29.3336V29.3145ZM22.1658 29.1432V29.2574C22.1658 29.2574 22.1658 29.2574 22.1658 29.1432Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.331 29.3344L22.6458 29.5265V29.6609L22.3125 29.3728L22.331 29.3344Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.721 29.6993L22.3691 29.3728L22.684 29.5648L22.721 29.6993ZM22.3877 29.3728L22.7024 29.6417V29.5265L22.4062 29.3344L22.3877 29.3728Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.202 29.4499C22.202 29.4499 22.202 29.5652 22.202 29.642C22.181 29.6147 22.1695 29.5809 22.1695 29.546C22.1695 29.5111 22.181 29.4772 22.202 29.4499ZM22.202 29.3347C22.202 29.3347 22.3132 29.3347 22.3872 29.3347C22.4032 29.2783 22.4032 29.2183 22.3872 29.1619C22.3686 29.2125 22.3356 29.2561 22.2926 29.2869C22.2497 29.3177 22.1987 29.3344 22.1465 29.3347H22.202Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.6468 33.1954L31.3691 33.0609L31.6838 33.253L31.6468 33.1954Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8297 33.2904C31.8297 33.2904 31.7195 33.2904 31.7012 33.2904V33.4046L31.8297 33.2904Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M33.8284 29.1813C33.8284 29.1813 33.8284 29.3146 33.6999 29.2955C33.6818 29.2746 33.6719 29.2474 33.6719 29.2194C33.6719 29.1913 33.6818 29.1641 33.6999 29.1432V29.2574H33.81L33.8284 29.1813Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M34.5706 29.3344C34.5706 29.3344 34.5706 29.4688 34.4595 29.4496C34.3484 29.4304 34.4595 29.4496 34.4595 29.3344H34.5706V29.2V29.3344Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.902 31.2727L32.7734 31.0633L32.8653 31.1775L32.902 31.2727Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.8299 31.0822C32.8299 31.0822 32.7198 31.0822 32.683 31.0822C32.6463 31.0822 32.5913 30.9681 32.683 30.93V31.0442H32.7932C32.7932 31.0442 32.7932 30.93 32.7932 31.0442L32.8299 31.0822Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M33.5519 31.6203C33.5575 31.6381 33.5578 31.6572 33.5529 31.6753C33.548 31.6933 33.538 31.7094 33.5243 31.7216C33.5105 31.7338 33.4936 31.7415 33.4757 31.7438C33.4577 31.7461 33.4396 31.7429 33.4234 31.7345C33.412 31.7256 33.4028 31.7141 33.3964 31.7009C33.39 31.6877 33.3867 31.6731 33.3867 31.6583C33.3867 31.6435 33.39 31.629 33.3964 31.6158C33.4028 31.6026 33.412 31.5911 33.4234 31.5822V31.7154H33.5336L33.5519 31.6203Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.5323 32.5613C25.5323 32.5613 25.5323 32.6755 25.5323 32.7136C25.5323 32.7516 25.3855 32.7136 25.3672 32.7136H25.514V32.6184L25.5323 32.5613Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.1073 33.1934C25.1073 33.1934 25.1073 33.1934 25.0154 33.0982C24.9236 33.003 25.0154 33.0982 25.0154 33.0982V33.1934H25.1624V33.0602L25.1073 33.1934Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.9604 31.0633C23.9378 31.0768 23.9123 31.0839 23.8863 31.0839C23.8603 31.0839 23.8347 31.0768 23.8122 31.0633C23.8122 31.0633 23.6826 31.0633 23.6641 31.0633H23.7566H23.9604Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.4045 31.543C23.4045 31.543 23.4044 31.6763 23.2759 31.6573C23.1473 31.6382 23.2759 31.6573 23.2759 31.6573H23.4045V31.543Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.8125 29.2385C22.8157 29.2765 22.8157 29.3148 22.8125 29.3528V29.1814V29.2385Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.3866 29.3724L22.5903 29.5837L22.3125 29.3533L22.3866 29.3724Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M22.293 29.3924C22.293 29.3924 22.293 29.3924 22.2012 29.3924V29.4876H22.3664L22.293 29.3924Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M34.7736 28.4899C34.7736 28.8163 34.4403 28.97 34.2921 29.1044C34.1926 29.1731 34.1101 29.2652 34.0514 29.3732V29.5461V29.7189C34.0697 29.775 34.0697 29.8357 34.0514 29.8918C34.0514 30.0454 34.0514 30.2374 34.0514 30.2374L34.2736 30.0838H34.4218C34.3158 30.1848 34.2334 30.3096 34.181 30.4487C34.181 30.6407 33.9773 31.044 33.7551 31.1784C33.5329 31.3128 33.3663 31.1784 33.2922 31.332L33.1996 31.428V31.5625L33.107 31.6777C33.1146 31.7222 33.1146 31.7677 33.107 31.8121C33.1022 31.8761 33.1022 31.9403 33.107 32.0042H33.1996H33.3107V32.1194C33.3126 32.2336 33.2864 32.3464 33.2345 32.4472C33.1827 32.548 33.107 32.6335 33.0144 32.6955C32.6737 32.8366 32.3065 32.8957 31.9405 32.8683H31.7923L31.6627 32.9835L31.5331 33.118C31.4879 33.1854 31.4314 33.2439 31.3664 33.2908L31.1442 33.4445H31.3294L31.6071 33.5597C31.5091 33.5421 31.4089 33.5421 31.3109 33.5597C31.023 33.7276 30.7101 33.8444 30.385 33.9053C30.1258 33.9053 29.7554 33.5021 29.7554 33.5021L29.5887 33.3869H29.311H28.9592C29.0638 33.375 29.1694 33.375 29.274 33.3869H29.6258C29.7234 33.4093 29.8245 33.4093 29.9221 33.3869L30.385 32.9835L30.8664 32.8107H31.0331H31.1997V32.9068C31.157 32.9161 31.1129 32.9161 31.0702 32.9068H31.3664H31.4775C31.4688 32.8754 31.4688 32.8421 31.4775 32.8107C31.5619 32.7181 31.6549 32.6345 31.7553 32.5611H31.8664C31.9082 32.4671 31.9453 32.371 31.9775 32.273V32.1386L32.3108 31.8121L32.533 31.5625L32.6256 31.2936C32.6437 31.3326 32.653 31.3752 32.653 31.4184C32.653 31.4616 32.6437 31.5043 32.6256 31.5433C32.6406 31.6193 32.6406 31.6977 32.6256 31.7737C32.7382 31.6953 32.8558 31.6247 32.9774 31.5625H33.1626C33.234 31.5252 33.297 31.4729 33.3477 31.4089C33.3477 31.3129 33.3477 31.2744 33.3477 31.236C33.3477 31.1976 33.3477 31.0056 33.3477 31.0056V30.4103L33.5329 29.9686L33.8107 29.6997C33.8068 29.7316 33.8068 29.7638 33.8107 29.7957V29.9109C33.8669 29.8239 33.9357 29.7462 34.0144 29.6805C34.0117 29.6229 34.0117 29.5653 34.0144 29.5077C34.0204 29.4182 34.0204 29.3284 34.0144 29.2389V29.0084V28.8164L33.8848 28.4515V27.9714L33.7737 27.8177C33.7737 27.8177 33.8662 27.8177 33.9959 27.9906C34.0699 28.1208 34.1201 28.264 34.144 28.4131L34.4032 27.5489C34.4601 27.6308 34.5038 27.7215 34.5329 27.8177C34.546 27.9133 34.546 28.0103 34.5329 28.1058L34.644 27.8753C34.6995 27.9441 34.7413 28.0237 34.7667 28.1095C34.7921 28.1952 34.8008 28.2854 34.7921 28.3747L34.7736 28.4899ZM29.3295 34.0206C29.3295 34.0206 29.3295 33.8861 29.0332 33.7517C28.8884 33.6737 28.7319 33.6218 28.5703 33.5981V33.6941L28.9777 33.8861L29.1814 34.0589H29.3295V34.0206Z",
                              fill: "#9CA168"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.1842 33.1371C31.2873 33.0238 31.4058 32.9268 31.536 32.8491C31.6221 32.8367 31.7093 32.8367 31.7953 32.8491C31.9903 32.8346 32.177 32.7612 32.3323 32.6378C32.5322 32.5197 32.7033 32.3554 32.8322 32.1577C32.8934 32.1458 32.9562 32.1458 33.0174 32.1577L32.7397 32.4842C32.6062 32.6372 32.4499 32.7668 32.2767 32.8683C32.0851 32.9616 31.8772 33.0138 31.6656 33.0219C31.5377 33.0347 31.4189 33.0963 31.3323 33.1947L31.1657 33.3676L31.1842 33.1371ZM32.1656 32.0809C31.9784 32.2443 31.8268 32.4473 31.7212 32.6762L32.1656 32.2729C32.3126 32.1534 32.4673 32.0443 32.6286 31.9465C32.6286 31.9465 32.6285 31.7928 32.7767 31.7352L32.8878 31.6392C32.8878 31.6392 32.7397 31.524 32.1656 32.0809ZM31.462 32.7914C31.5502 32.7553 31.6226 32.6871 31.6656 32.5994C31.6603 32.5227 31.6603 32.4457 31.6656 32.369L32.1286 31.8889C32.1911 31.8294 32.2351 31.752 32.2549 31.6664C32.2747 31.5809 32.2694 31.4912 32.2397 31.4088C32.2576 31.4444 32.2668 31.4839 32.2668 31.524C32.2668 31.5641 32.2576 31.6037 32.2397 31.6392C32.2397 31.7545 31.7027 32.0617 31.6471 32.2346C31.6342 32.3301 31.6342 32.427 31.6471 32.5226C31.6277 32.6314 31.5679 32.7279 31.4805 32.7914H31.462ZM31.2398 33.6748C31.1289 33.6039 30.9995 33.5703 30.8694 33.5788C30.4805 33.5788 30.1472 33.8477 29.888 33.8477C29.6287 33.8477 29.5362 33.7324 29.3325 33.5788C29.0957 33.4885 28.8437 33.4492 28.5918 33.4636C28.7641 33.4431 28.938 33.4431 29.1103 33.4636C29.4066 33.4636 29.5547 33.8669 29.888 33.8477C30.2207 33.7656 30.5485 33.663 30.8694 33.5404C30.9907 33.507 31.1184 33.507 31.2398 33.5404V33.6748ZM29.2954 33.4828C29.4838 33.5011 29.6728 33.4538 29.8324 33.3483C30.0732 33.1755 30.3509 32.9259 30.5176 32.9259C30.6219 32.9098 30.728 32.9098 30.8324 32.9259C30.7165 32.8993 30.5964 32.8993 30.4805 32.9259C30.3128 32.9163 30.1458 32.9563 29.9991 33.0411C29.8695 33.0411 29.7954 33.2908 29.6288 33.3868C29.5266 33.4567 29.4139 33.5086 29.2954 33.5404V33.4828ZM29.2954 33.9053L29.0547 33.7324C28.9493 33.6783 28.8371 33.6395 28.7214 33.6172L29.0362 33.7324C29.1159 33.7815 29.1852 33.8468 29.2399 33.9245C29.2604 33.9335 29.2824 33.9381 29.3047 33.9381C29.3269 33.9381 29.349 33.9335 29.3695 33.9245C29.3695 33.9245 29.4806 33.9245 29.4621 33.9245C29.4436 33.9245 29.4621 33.9245 29.3695 33.9245L29.2954 33.9053ZM29.5177 33.598C29.6214 33.6208 29.7286 33.6208 29.8324 33.598C30.2583 33.598 30.5175 33.2907 30.7953 33.1755C30.8619 33.143 30.9347 33.1261 31.0083 33.1261C31.0819 33.1261 31.1546 33.143 31.2212 33.1755C31.1251 33.1182 31.0172 33.0854 30.9065 33.0795C30.5201 33.1257 30.1477 33.2566 29.8139 33.4636C29.7205 33.5155 29.6209 33.5543 29.5177 33.5788V33.598ZM34.0358 30.2566C33.8715 30.5021 33.723 30.7587 33.5914 31.0247C33.5062 31.1106 33.4132 31.1877 33.3137 31.2551L33.073 31.6008C33.073 31.6008 33.073 31.6008 32.9804 31.6008C32.8878 31.6008 32.9804 31.6008 32.9804 31.6008C32.9804 31.6008 32.9804 31.6008 33.1285 31.4856C33.165 31.3958 33.2223 31.3167 33.2952 31.2551C33.4063 31.1399 33.61 31.0247 33.7211 30.9095C33.8322 30.7943 34.0359 30.2757 34.1285 30.1605C34.2259 30.0692 34.339 29.9976 34.4618 29.9493C34.4618 29.9493 34.2951 29.9493 34.0358 30.1797V30.2566ZM33.3137 31.1783C33.3115 31.138 33.3188 31.0977 33.3349 31.0609C33.351 31.0241 33.3755 30.9919 33.4063 30.9671C33.5174 30.8327 33.5544 30.8519 33.6285 30.6598C33.7026 30.4678 33.7581 30.2758 33.8322 30.0837C33.8741 29.9405 33.9366 29.8045 34.0174 29.6804C33.9253 29.7077 33.8462 29.7692 33.7952 29.8532C33.6245 30.0704 33.4928 30.3176 33.4063 30.583C33.3473 30.7756 33.3162 30.9762 33.3137 31.1783ZM33.1656 31.3704C33.1656 31.3704 33.1656 31.3704 33.1656 31.1015C33.1258 30.8471 33.1258 30.5877 33.1656 30.3333C33.2897 30.1278 33.4323 29.9349 33.5914 29.7573C33.4617 29.8024 33.342 29.8743 33.2396 29.9685C33.1508 30.03 33.0776 30.1126 33.0261 30.2095C32.9745 30.3064 32.9461 30.4147 32.9433 30.5254C32.9433 30.679 33.0359 30.8711 33.0544 31.0439V31.3704H33.1656ZM34.0358 29.6804C34.0649 29.5375 34.102 29.3964 34.147 29.2579C34.1959 29.1273 34.2717 29.0093 34.3692 28.9123C34.4854 28.8167 34.5748 28.6908 34.6284 28.5474C34.6424 28.3364 34.6424 28.1247 34.6284 27.9137L34.5358 28.0289C34.5358 28.1249 34.5358 28.4322 34.5358 28.5666C34.4534 28.755 34.3542 28.935 34.2396 29.1043C34.2234 28.9447 34.2234 28.7838 34.2396 28.6242C34.264 28.4656 34.3076 28.3108 34.3692 28.1634C34.3859 27.9717 34.3859 27.7789 34.3692 27.5872C34.2912 27.6708 34.2284 27.7684 34.184 27.8753C34.122 28.0803 34.0908 28.2941 34.0915 28.509C34.0768 28.6751 34.0768 28.8422 34.0915 29.0083C34.1094 29.1035 34.1094 29.2013 34.0915 29.2964C34.0861 29.3539 34.0861 29.4117 34.0915 29.4692C34.1011 29.5393 34.1011 29.6104 34.0915 29.6804H34.0358ZM33.7396 27.8561C33.8023 27.9451 33.8349 28.0532 33.8322 28.1634C33.7952 28.347 33.7952 28.5366 33.8322 28.7202C33.8322 28.8739 33.9988 28.8931 34.0174 28.9891C34.0239 29.085 34.0239 29.1813 34.0174 29.2772C34.0389 29.1243 34.0389 28.9691 34.0174 28.8163C34.0174 28.7203 34.0173 28.8163 33.9247 28.6626C33.8322 28.509 33.9247 28.2786 33.9247 28.1058C33.9027 28.0032 33.8429 27.9136 33.7581 27.8561H33.7396Z",
                              fill: "#717732"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.2383 34.02C27.2383 34.02 27.2383 33.924 27.4975 33.8088C27.6841 33.6999 27.8832 33.616 28.09 33.5591V33.7127H27.8678L27.7012 33.8279L27.4975 33.9432L27.2383 34.02Z",
                              fill: "#9CA168"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.8117 33.3101C27.6427 33.3271 27.4755 33.3592 27.3118 33.4061C27.3118 33.4061 27.3117 33.4061 27.2192 33.4061C27.1711 33.3666 27.1276 33.3215 27.0895 33.2716V33.4829L26.6822 33.0988V33.3485V33.4637L26.2748 33.0604V33.3677H26.1637L25.8674 33.1564L25.96 33.3485H25.5896L25.4971 33.4445H25.6452V33.5405C25.6452 33.5405 25.8674 33.3869 25.997 33.4445C26.1266 33.5021 25.8119 33.6173 25.8489 33.7133C25.8859 33.8094 26.1081 33.7133 26.1637 33.7133C26.2192 33.7133 26.3859 33.4637 26.46 33.5405C26.534 33.6173 26.2563 33.7518 26.3118 33.867C26.3674 33.9822 26.534 33.867 26.6266 33.867C26.7192 33.867 26.8858 33.5213 26.9229 33.5789C26.9599 33.6365 26.7748 33.8094 26.8303 33.8862C26.8859 33.963 27.0155 33.8862 27.1081 33.8862C27.2006 33.8862 27.2192 33.675 27.3303 33.6174C27.4414 33.5597 27.4414 33.6174 27.4784 33.6174C27.5155 33.6174 27.6081 33.5213 27.6081 33.5213L27.8858 33.4061H28.2376V33.2909C28.1519 33.2746 28.0641 33.2746 27.9784 33.2909L27.8117 33.3101ZM25.5896 33.3101V33.214L25.4045 33.0604C25.3578 33.005 25.3011 32.9593 25.2378 32.926L25.0527 32.8108V32.5803H24.9416L24.812 32.081V31.985L24.7009 32.2923L24.5712 32.1002V31.6777L24.4787 31.7737L24.2935 31.3897C24.284 31.4662 24.284 31.5436 24.2935 31.6201C24.199 31.5687 24.1118 31.5041 24.0342 31.4281C23.9427 31.3636 23.8667 31.2782 23.812 31.1784L23.7195 30.9864L23.812 30.7944V30.5831H23.6268V30.1798V30.0262L23.4046 30.3527V30.2182V29.911L23.3121 30.0838C23.2818 30.0098 23.2446 29.939 23.201 29.8726C23.2167 29.7451 23.2167 29.616 23.201 29.4885C23.201 29.3157 23.0899 29.2388 23.201 29.0852C23.3121 28.9316 23.201 28.9316 23.201 28.874C23.201 28.8164 23.1084 28.874 23.201 28.874C23.2936 28.874 23.5158 28.6051 23.4417 28.5091C23.3676 28.4131 23.1269 28.6627 23.1824 28.5091C23.238 28.3555 23.4972 28.3363 23.5157 28.1058C23.5343 27.8754 23.275 28.2019 23.2565 28.1058C23.238 28.0098 23.4046 27.8754 23.4046 27.7793C23.4046 27.6833 23.4046 27.6834 23.4046 27.6257C23.4046 27.5681 23.201 27.837 23.201 27.837H23.0343V28.0866V28.2978L22.8306 28.1826V28.4323V28.7012H22.627L22.7381 28.9124L22.8862 29.066L22.9788 29.2004V29.2965V29.4309V29.5845V30.0646C22.9788 30.0646 22.8677 30.0646 22.8491 30.0646C22.8306 30.0646 22.9602 30.2374 22.9417 30.2758C22.9232 30.3142 22.6825 30.2758 22.6825 30.2758C22.6825 30.2758 22.6825 30.4487 22.8306 30.4871C22.9788 30.5255 23.2565 30.5831 23.201 30.6599C23.1454 30.7367 22.8306 30.4679 22.8491 30.6599C22.8432 30.7255 22.8607 30.791 22.8982 30.8441C22.9357 30.8972 22.9907 30.9342 23.0528 30.948C23.0528 30.948 23.4602 30.948 23.4417 30.948C23.4232 30.948 23.1825 30.948 23.1454 31.044C23.1084 31.1401 23.3306 31.1784 23.3676 31.1784C23.447 31.1613 23.529 31.1613 23.6084 31.1784L23.9602 31.5241L24.3305 31.793C24.3305 31.793 24.1454 31.793 24.1268 31.793C24.1083 31.793 24.6268 32.0426 24.4787 32.1002C24.3305 32.1578 24.1639 31.9466 24.1268 32.1002C24.0898 32.2539 24.2194 32.3499 24.2935 32.4075C24.3675 32.4651 24.849 32.4075 24.7564 32.5227C24.6638 32.6379 24.3305 32.5227 24.3305 32.5227C24.3305 32.5227 24.5527 32.8492 24.6638 32.8492C24.7749 32.8492 24.9045 32.6379 24.9601 32.7532C25.0156 32.8684 24.8675 32.8876 24.9601 32.926C25.0527 32.9644 25.1453 32.8108 25.2749 32.83C25.4367 32.864 25.5888 32.9363 25.7193 33.0412L25.96 33.2716L25.5896 33.3101Z",
                              fill: "#9CA168"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.3864 33.8485C27.3864 33.8485 27.3865 33.8485 27.4791 33.8485L27.7568 33.6565C27.855 33.6007 27.9614 33.5618 28.0716 33.5412C27.9553 33.5708 27.8432 33.616 27.7383 33.6757L27.4791 33.8485C27.4791 33.8485 27.479 33.8485 27.3494 33.8485C27.2198 33.8485 27.2383 33.8485 27.2383 33.8485C27.2383 33.8485 27.2383 33.8485 27.3864 33.8485ZM28.0716 33.5028C28.0355 33.5146 27.9966 33.5146 27.9605 33.5028C27.8942 33.4808 27.823 33.4808 27.7568 33.5028C27.6966 33.5028 27.6372 33.5165 27.5828 33.5431C27.5284 33.5696 27.4803 33.6083 27.442 33.6565L27.3124 33.7524C27.3124 33.7524 27.3124 33.7524 27.4791 33.7524C27.5185 33.7137 27.5651 33.6836 27.616 33.6638C27.6669 33.644 27.721 33.635 27.7753 33.6372C27.7753 33.6372 27.9049 33.6372 27.942 33.6372H28.0716V33.5028ZM23.9793 31.7745L23.8127 31.6592C23.6637 31.5677 23.5213 31.465 23.3868 31.352L23.6275 31.5825L23.9423 31.8129L23.9793 31.7745ZM26.868 33.8869L26.9791 33.6948C27.0236 33.6269 27.0802 33.5682 27.1458 33.522V33.4068C27.1395 33.3687 27.1395 33.3297 27.1458 33.2916C27.1355 33.3292 27.1355 33.3691 27.1458 33.4068H27.2383H27.3494H27.2569C27.1643 33.4068 27.1087 33.1956 27.0531 33.1956C26.9976 33.1956 27.0531 33.3684 27.0531 33.3684C27.0531 33.3684 26.8865 33.0035 26.6643 32.9843C26.4421 32.9651 26.4791 32.9843 26.4606 32.9843C26.4421 32.9843 26.6643 33.2531 26.5902 33.2724C26.5162 33.2916 26.3125 32.9267 26.1458 32.9267C25.9792 32.9267 25.9791 32.9267 25.9977 33.0228C26.0162 33.1188 26.1643 33.0227 26.1273 33.1956C26.0903 33.3684 25.9236 33.0227 25.794 33.0419C25.6644 33.0611 25.6273 33.0419 25.6088 33.0419C25.5903 33.0419 25.6088 33.1379 25.6088 33.1571H25.4236C25.3552 33.2209 25.2932 33.2917 25.2385 33.3684C25.2986 33.2853 25.383 33.2247 25.4792 33.1956H25.9236C25.8869 33.1555 25.8557 33.1102 25.831 33.0611L25.9792 33.1764L26.1273 33.2916H26.2755C26.2899 33.3285 26.2899 33.3698 26.2755 33.4068L26.1273 33.5412L26.2939 33.426L26.405 33.3108H26.4236C26.4236 33.3108 26.4236 33.3108 26.4236 33.1764L26.2939 32.9651L26.4606 33.1571C26.4606 33.2724 26.4606 33.3108 26.5717 33.33H26.6828C26.6828 33.33 26.6828 33.33 26.6828 33.4644C26.6456 33.5316 26.6146 33.6024 26.5902 33.6757C26.6249 33.6173 26.6687 33.5654 26.7199 33.522C26.7199 33.522 26.8124 33.3684 26.831 33.3684H26.9606V33.234C26.9535 33.1573 26.9535 33.0802 26.9606 33.0035C26.9829 33.0813 27.0207 33.1532 27.0717 33.2147C27.0717 33.3108 27.1643 33.3684 27.1828 33.3684H27.3124C27.3124 33.3684 27.3124 33.3684 27.3124 33.522V33.6948L26.868 33.8869ZM25.1274 32.8307H25.257C25.1835 32.7863 25.1252 32.7191 25.0904 32.6387C25.0904 32.5042 25.0904 32.2738 25.0904 32.2738C25.0904 32.2738 24.9978 32.4466 24.9422 32.4082C24.8867 32.3698 24.9422 32.0433 24.9422 31.9089C24.9422 31.7745 24.7385 31.6592 24.7015 31.7168C24.6645 31.7745 24.7015 32.0818 24.5904 32.005C24.4793 31.9281 24.5904 31.6785 24.5904 31.5632C24.5904 31.448 24.4793 31.352 24.4238 31.3904C24.3682 31.4288 24.4238 31.6401 24.4238 31.6401C24.4238 31.6401 24.4237 31.4864 24.3126 31.4672C24.2015 31.448 24.3126 31.4672 24.3126 31.4672V31.3328C24.3126 31.3328 24.3126 31.4288 24.3126 31.4864C24.3021 31.537 24.3021 31.5894 24.3126 31.6401V31.7361C24.3126 31.7361 24.3126 31.7361 24.2201 31.7361H24.0904H24.2386C24.2386 31.7361 24.3497 31.7361 24.3682 31.7361L24.4793 31.9089C24.4841 31.845 24.4841 31.7808 24.4793 31.7168C24.4902 31.6404 24.4902 31.5628 24.4793 31.4864C24.4856 31.5631 24.4856 31.6402 24.4793 31.7168C24.4868 31.7999 24.4868 31.8835 24.4793 31.9665C24.4793 31.9665 24.5719 31.9665 24.4793 32.0626H24.2571H23.9979C24.0773 32.0796 24.1592 32.0796 24.2386 32.0626H24.5349L24.683 32.2162C24.701 32.1405 24.701 32.0614 24.683 31.9857C24.6938 31.8965 24.6938 31.8061 24.683 31.7168C24.6931 31.7933 24.6931 31.8709 24.683 31.9473C24.6886 32.0561 24.6886 32.165 24.683 32.2738H24.5163H24.2386C24.3367 32.2906 24.4368 32.2906 24.5349 32.2738C24.6645 32.2738 24.683 32.2738 24.72 32.2738H24.8311C24.8311 32.2738 24.8311 32.2738 24.7385 32.2738H24.6274H24.8126H24.9422V32.1586V32.005V32.1393C24.947 32.184 24.947 32.2291 24.9422 32.2738H25.0533L25.1274 32.8307ZM22.6091 29.8541C22.6144 29.7517 22.6144 29.6492 22.6091 29.5469C22.6008 29.3934 22.5631 29.2432 22.498 29.1051V28.9899H22.4054C22.3753 29.0002 22.3429 29.0002 22.3128 28.9899H22.4054V28.8363L22.2573 28.7403C22.1828 28.6991 22.1143 28.6474 22.0536 28.5867L22.2758 28.721H22.4054H22.535L22.6646 28.6251H22.535H22.4054V28.433L22.3128 28.337C22.2701 28.2567 22.2329 28.1732 22.2017 28.0873C22.2378 28.1446 22.2814 28.1963 22.3313 28.241C22.3733 28.2739 22.4107 28.3127 22.4424 28.3562H22.5721C22.6507 28.3051 22.725 28.2473 22.7943 28.1833L22.5721 28.2986H22.4424C22.4358 28.254 22.4358 28.2087 22.4424 28.1642C22.4527 28.12 22.4527 28.0739 22.4424 28.0297V27.8185V27.9145V28.0105C22.4424 28.0105 22.7017 27.7801 22.7387 27.7417C22.7758 27.7033 22.7387 27.5881 22.7387 27.6265C22.7387 27.6649 22.7387 27.7801 22.5721 27.7609C22.4054 27.7417 22.572 27.6457 22.4795 27.6649C22.3869 27.6841 22.3498 27.7801 22.3498 27.8569C22.3498 27.9337 22.3498 28.0873 22.3498 28.1257C22.3498 28.1641 22.3499 27.9721 22.1647 28.0105C21.9795 28.0489 22.0536 28.1642 22.0536 28.2218C22.0536 28.2794 22.2758 28.5098 22.2202 28.5482C22.1647 28.5866 21.998 28.337 21.9054 28.5482C21.8128 28.7595 22.1832 28.8747 22.2202 28.9131C22.2573 28.9515 22.2202 28.9131 22.2202 29.0475C22.2202 29.182 22.3683 29.1435 22.4054 29.2011C22.4917 29.3478 22.5485 29.5111 22.5721 29.6812V29.9309L22.6091 29.8541ZM23.5535 31.2752C23.5324 31.2338 23.5214 31.1876 23.5214 31.1408C23.5214 31.0939 23.5324 31.0477 23.5535 31.0063C23.5535 30.8335 23.7016 30.5262 23.6646 30.4878C23.6275 30.4494 23.4979 30.6607 23.4609 30.6223C23.4238 30.5839 23.4609 30.2574 23.4609 30.123C23.4609 29.9885 23.4609 29.9309 23.2942 29.9309C23.1276 29.9309 23.1461 30.2958 23.109 30.2382C23.072 30.1806 23.109 30.0077 23.109 29.9309C23.109 29.8541 23.109 29.8157 23.0165 29.8349C22.9239 29.8541 23.0165 30.0077 22.9054 30.0077C22.7943 30.0077 22.7943 29.8157 22.7202 29.8349C22.6461 29.8541 22.9054 30.2189 22.9054 30.2189V30.1037V29.9885C22.9149 30.0392 22.9149 30.0914 22.9054 30.1422C22.8983 30.1931 22.8983 30.2448 22.9054 30.2958H22.7202H22.5165H22.7016H22.9238L23.0165 30.4302V30.2574C23.0382 30.1585 23.0692 30.062 23.109 29.9693C23.109 29.9693 23.109 30.1805 23.109 30.2766C23.1021 30.366 23.1021 30.456 23.109 30.5454H22.8868H22.6091L22.8868 30.6607H23.1276L23.2387 30.8143V30.699V30.5454C23.2459 30.6092 23.2459 30.6737 23.2387 30.7375C23.2467 30.7754 23.2467 30.8148 23.2387 30.8527H22.9054H23.109H23.2572V30.9679L23.3683 31.0639L23.5535 31.2752Z",
                              fill: "#717732"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.8677 34.425H27.7566H27.6641V34.2522L28.127 33.8105V33.3688H28.4047V33.9834H28.4973L28.9973 34.2906V34.425H28.8121L28.4788 34.1754L28.2751 34.0218L28.0158 34.3674H27.8677V34.425Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2767 33.2333V33.3293C28.2767 33.3293 28.2767 33.7518 28.2767 33.8094C28.2767 33.867 28.0175 33.963 27.8693 34.0782C27.7212 34.1935 27.7397 34.2895 27.7397 34.2895H27.6101C27.5674 34.2796 27.5231 34.2796 27.4805 34.2895C27.5332 34.1191 27.6291 33.9666 27.7582 33.8478C27.9804 33.6558 28.0915 33.6365 28.11 33.5981C28.1193 33.4447 28.1193 33.2907 28.11 33.1373L28.2767 33.2333Z",
                              fill: "#016848"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.7935 34.5589H28.6824C28.5713 34.5589 28.4973 34.5589 28.4047 34.4629L28.238 34.29L28.127 34.386C28.1591 34.4517 28.2031 34.5104 28.2565 34.5589C28.2565 34.5589 28.4787 34.5589 28.5343 34.6933H28.6639L28.7935 34.5589Z",
                              fill: "#016848"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.4423 33.2336H28.5905C28.5979 33.3807 28.5979 33.5281 28.5905 33.6753C28.5756 33.7731 28.5374 33.8654 28.4794 33.9441L28.1646 34.2513C28.0888 34.3202 28.0204 34.3974 27.9609 34.4818C28.0177 34.3611 28.108 34.2607 28.2202 34.1937C28.3798 34.1029 28.4992 33.9515 28.5534 33.7713C28.5636 33.6242 28.5636 33.4766 28.5534 33.3296L28.4423 33.2336Z",
                              fill: "#CD202A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.3312 34.3469C29.2833 34.3293 29.231 34.3293 29.183 34.3469C29.072 34.3469 29.072 34.3469 29.072 34.3469L28.9053 34.1932C28.8079 34.1601 28.7146 34.115 28.6276 34.0588C28.5568 34.0194 28.4989 33.9593 28.4609 33.8859V33.7131C28.5148 33.7905 28.5769 33.8614 28.6461 33.9244C28.7796 33.9868 28.9095 34.0573 29.0349 34.1356L29.2571 34.3661L29.3312 34.3469Z",
                              fill: "#CD202A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.3295 32.3687C30.3295 32.3687 30.0517 32.2534 30.0703 32.1382C30.0888 32.023 30.7368 31.8694 30.7368 31.8694V31.6774C30.6571 31.6641 30.5759 31.6641 30.4962 31.6774C30.2699 31.7603 30.0324 31.8057 29.7925 31.8118C29.6882 31.829 29.582 31.829 29.4777 31.8118L27.1261 31.6581H27.015C26.7187 31.6581 26.515 31.1589 26.515 31.1589H26.3854C26.3854 31.1589 26.3854 31.3893 26.3854 31.4085C25.992 31.2868 25.613 31.1193 25.2559 30.9092V31.1204C25.2559 31.1204 25.8484 31.4469 25.8299 31.5814C25.8114 31.7158 25.6447 31.6966 25.6447 31.6966V31.831C25.6447 31.831 26.6261 31.831 26.6446 32.1958C26.6631 32.5607 26.4039 32.3687 26.4039 32.3687V32.4839C26.629 32.4878 26.8529 32.52 27.0705 32.5799C27.2187 32.5799 27.2927 32.7912 27.4779 32.8872C28.0055 32.9735 28.5428 32.9735 29.0703 32.8872C29.2925 32.8872 29.4222 32.5607 29.774 32.4647C29.9229 32.4058 30.0785 32.3671 30.2369 32.3495L30.3295 32.3687Z",
                              fill: "#30C2DC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2737 33.0795C28.0036 33.121 27.7291 33.121 27.459 33.0795C27.3775 33.0329 27.3027 32.9747 27.2368 32.9067L27.0701 32.7722C26.8489 32.742 26.6248 32.742 26.4035 32.7722L26.2924 32.657C26.2924 32.657 26.5146 32.657 26.5146 32.5034C26.5146 32.3497 25.9962 32.1961 25.5518 32.1769L25.4592 31.9849C25.4592 31.9849 25.6258 31.9849 25.6258 31.8889C25.6258 31.7929 25.3481 31.6008 25.0703 31.4472V31.1783C25.4184 31.3803 25.7842 31.5475 26.1628 31.6776C26.1628 31.6776 26.1628 31.524 26.1628 31.4472H26.348C26.348 31.4472 26.5517 31.9081 26.8294 31.9273H26.9405L29.3106 32.0809H29.6069C29.8395 32.0773 30.0703 32.0385 30.292 31.9657C30.3777 31.9499 30.4655 31.9499 30.5513 31.9657V32.1769C30.3245 32.2266 30.1062 32.3107 29.9032 32.4266C29.9032 32.4266 30.0513 32.5802 30.1624 32.6378V32.7914C30.0039 32.809 29.8483 32.8478 29.6995 32.9067C29.5421 32.9577 29.397 33.0428 29.2736 33.1563C29.1925 33.2318 29.0983 33.2905 28.9959 33.3291L28.2737 33.0795ZM26.422 32.561C26.6477 32.5577 26.8724 32.5901 27.0886 32.657C27.1581 32.6973 27.2206 32.7492 27.2738 32.8106C27.3371 32.8768 27.4127 32.9291 27.496 32.9643C27.7528 33.0156 28.0168 33.0156 28.2737 32.9643H29.0699C29.1643 32.9206 29.2517 32.8623 29.3292 32.7914C29.4601 32.6742 29.6107 32.5831 29.7735 32.5226L30.2179 32.4074C30.2179 32.4074 29.9402 32.2922 29.9587 32.1769C29.9772 32.0617 30.4586 31.9273 30.6253 31.8889V31.7545H30.4031C30.1757 31.8328 29.9389 31.878 29.6995 31.8889C29.5952 31.9061 29.489 31.9061 29.3847 31.8889L27.0331 31.7352H26.922C26.6257 31.7352 26.4591 31.3319 26.4035 31.2359H26.422C26.422 31.2359 26.422 31.4856 26.422 31.5048C26.0392 31.3864 25.6722 31.2186 25.3296 31.0055V31.1975C25.4592 31.1975 25.9221 31.524 25.9036 31.6584C25.8914 31.6989 25.8666 31.734 25.8331 31.7583C25.7996 31.7826 25.7592 31.7948 25.7184 31.7928V31.8889C26.0147 31.8889 26.6998 31.9849 26.7183 32.2537C26.7368 32.5225 26.5702 32.4458 26.4961 32.465L26.422 32.561Z",
                              fill: "#0872A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.44 31.7168C25.473 31.7168 25.5051 31.7269 25.5325 31.7459C25.5599 31.7649 25.5813 31.7919 25.5939 31.8235C25.6065 31.8551 25.6098 31.8899 25.6034 31.9234C25.5969 31.9569 25.5811 31.9877 25.5578 32.0119C25.5345 32.0361 25.5048 32.0525 25.4725 32.0592C25.4402 32.0659 25.4067 32.0624 25.3762 32.0494C25.3458 32.0363 25.3198 32.0141 25.3015 31.9857C25.2832 31.9573 25.2734 31.9239 25.2734 31.8897C25.2734 31.8439 25.291 31.7999 25.3222 31.7674C25.3535 31.735 25.3958 31.7168 25.44 31.7168Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.44 32.1007C25.386 32.1007 25.3342 32.0785 25.296 32.0389C25.2578 31.9993 25.2363 31.9456 25.2363 31.8896C25.2363 31.8335 25.2578 31.7798 25.296 31.7402C25.3342 31.7006 25.386 31.6783 25.44 31.6783C25.494 31.6783 25.5458 31.7006 25.584 31.7402C25.6222 31.7798 25.6436 31.8335 25.6436 31.8896C25.6436 31.9456 25.6222 31.9993 25.584 32.0389C25.5458 32.0785 25.494 32.1007 25.44 32.1007ZM25.44 31.7551C25.4056 31.7551 25.3727 31.7693 25.3484 31.7945C25.3241 31.8197 25.3104 31.8539 25.3104 31.8896C25.3104 31.9252 25.3241 31.9593 25.3484 31.9845C25.3727 32.0098 25.4056 32.0239 25.44 32.0239C25.4744 32.0239 25.5074 32.0098 25.5317 31.9845C25.556 31.9593 25.5696 31.9252 25.5696 31.8896C25.5696 31.8539 25.556 31.8197 25.5317 31.7945C25.5074 31.7693 25.4744 31.7551 25.44 31.7551Z",
                              fill: "#0872A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4225 31.2362C26.5145 31.2362 26.5891 31.1588 26.5891 31.0633C26.5891 30.9679 26.5145 30.8905 26.4225 30.8905C26.3305 30.8905 26.2559 30.9679 26.2559 31.0633C26.2559 31.1588 26.3305 31.2362 26.4225 31.2362Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4233 31.2939C26.3644 31.2939 26.3079 31.2696 26.2663 31.2264C26.2246 31.1832 26.2012 31.1245 26.2012 31.0634C26.2011 31.034 26.2069 31.0049 26.2182 30.9779C26.2296 30.9509 26.2463 30.9267 26.2672 30.9068C26.2881 30.8869 26.3128 30.8718 26.3397 30.8624C26.3666 30.853 26.3951 30.8495 26.4233 30.8522C26.4774 30.8522 26.5292 30.8744 26.5674 30.9141C26.6056 30.9537 26.627 31.0074 26.627 31.0634C26.6296 31.0927 26.6262 31.1223 26.6171 31.1501C26.6081 31.178 26.5935 31.2037 26.5743 31.2254C26.5551 31.2471 26.5318 31.2644 26.5058 31.2762C26.4798 31.288 26.4517 31.294 26.4233 31.2939ZM26.4233 30.9482C26.3919 30.9478 26.3615 30.9593 26.3377 30.9805C26.3138 31.0017 26.2982 31.0312 26.2937 31.0634C26.2937 31.0991 26.3074 31.1333 26.3317 31.1585C26.356 31.1837 26.389 31.1979 26.4233 31.1979C26.4544 31.1932 26.4828 31.177 26.5032 31.1523C26.5237 31.1276 26.5347 31.096 26.5344 31.0634C26.5344 31.0328 26.5227 31.0035 26.5019 30.9819C26.481 30.9603 26.4528 30.9482 26.4233 30.9482Z",
                              fill: "#0872A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.4588 32.1964C30.4831 32.1964 30.5072 32.2014 30.5297 32.211C30.5521 32.2207 30.5726 32.2348 30.5898 32.2526C30.607 32.2704 30.6206 32.2916 30.63 32.3149C30.6393 32.3382 30.644 32.3632 30.644 32.3884C30.6394 32.4359 30.6179 32.48 30.5837 32.5119C30.5494 32.5439 30.5049 32.5615 30.4588 32.5612C30.4146 32.5612 30.3722 32.5431 30.3409 32.5107C30.3096 32.4782 30.292 32.4342 30.292 32.3884C30.2894 32.3641 30.2918 32.3396 30.299 32.3164C30.3062 32.2931 30.3181 32.2718 30.3338 32.2536C30.3496 32.2355 30.3689 32.221 30.3904 32.2111C30.412 32.2013 30.4352 32.1962 30.4588 32.1964Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.4604 32.6009C30.4064 32.6009 30.3545 32.5786 30.3163 32.539C30.2781 32.4994 30.2567 32.4456 30.2567 32.3896C30.2541 32.3603 30.2575 32.3308 30.2665 32.3029C30.2756 32.275 30.2902 32.2494 30.3094 32.2277C30.3286 32.206 30.3519 32.1887 30.3779 32.1769C30.4039 32.1651 30.432 32.1591 30.4604 32.1592C30.5193 32.1592 30.5759 32.1835 30.6176 32.2267C30.6593 32.2699 30.6826 32.3285 30.6826 32.3896C30.6827 32.419 30.6769 32.4482 30.6656 32.4752C30.6542 32.5021 30.6375 32.5263 30.6166 32.5462C30.5957 32.5661 30.5709 32.5812 30.544 32.5906C30.5171 32.6 30.4887 32.6036 30.4604 32.6009ZM30.4604 32.2552C30.4348 32.2552 30.4097 32.2631 30.3884 32.2779C30.3671 32.2926 30.3504 32.3136 30.3406 32.3382C30.3308 32.3627 30.3283 32.3898 30.3333 32.4159C30.3383 32.4419 30.3506 32.4659 30.3687 32.4847C30.3869 32.5035 30.41 32.5163 30.4351 32.5215C30.4603 32.5267 30.4863 32.524 30.51 32.5138C30.5337 32.5036 30.5539 32.4864 30.5682 32.4643C30.5824 32.4422 30.59 32.4162 30.59 32.3896C30.59 32.354 30.5764 32.3198 30.5521 32.2946C30.5278 32.2693 30.4948 32.2552 30.4604 32.2552Z",
                              fill: "#0872A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.6816 30.8141C24.6816 30.9485 24.8483 31.1982 24.9965 31.2174C25.1446 31.2366 25.2372 31.2174 25.2742 31.2174C25.2891 31.1843 25.2968 31.1482 25.2968 31.1117C25.2968 31.0752 25.2891 31.0392 25.2742 31.0061C25.1816 30.8717 24.7742 30.7565 24.7187 30.8909L24.6816 30.8141Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.1628 31.0058C25.1628 31.0058 25.0332 30.8522 24.9591 30.8522C24.885 30.8522 24.7925 30.8522 24.811 30.8522C24.8295 30.8522 25.0332 30.9675 25.0332 30.9867C25.0332 31.0059 25.0332 30.9867 25.0332 30.9867H25.1443C25.1443 30.9867 25.1443 30.9866 25.1443 30.8906L25.1628 31.0058Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.5153 32.5227C26.5153 32.6379 26.5153 32.6955 26.3486 32.7531C26.182 32.8107 25.9968 32.7531 25.9598 32.7531C25.9227 32.7531 25.9598 32.5035 26.182 32.4651C26.2441 32.4523 26.3085 32.4582 26.3675 32.482C26.4265 32.5058 26.4778 32.5466 26.5153 32.5995V32.5227Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2749 32.6002C26.2749 32.6002 26.2749 32.6002 26.3675 32.6002C26.46 32.6002 26.3675 32.6002 26.3675 32.485C26.3588 32.4528 26.3388 32.425 26.3113 32.4072C26.2839 32.3894 26.2511 32.3829 26.2194 32.389C26.2194 32.389 25.9786 32.5618 25.9971 32.6002C26.0156 32.6387 25.9971 32.6002 26.0897 32.6002C26.1823 32.6002 26.0897 32.6002 26.2194 32.6002H26.2749Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.681 31.9268C30.7921 32.0612 30.9773 31.9268 31.0144 31.9268C31.0514 31.9268 31.2181 31.7924 31.1625 31.6964C31.1254 31.6762 31.0841 31.6656 31.0421 31.6656C31.0002 31.6656 30.9589 31.6762 30.9217 31.6964C30.825 31.7126 30.7385 31.7678 30.681 31.85C30.6672 31.8834 30.6602 31.9193 30.6602 31.9556C30.6602 31.9919 30.6672 32.0279 30.681 32.0613V31.9268Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.7179 31.8305C30.7176 31.7878 30.7326 31.7466 30.76 31.7147C30.7873 31.6828 30.8251 31.6625 30.866 31.6577C30.866 31.6577 30.866 31.6577 30.9956 31.6577V31.7729C30.9956 31.7729 30.9957 31.7729 30.829 31.7729C30.6623 31.7729 30.7179 31.869 30.7179 31.869V31.8305Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.4599 31.5233H27.9414L28.2192 32.3491L28.5525 32.8484H28.6821H28.9413V32.7332L28.8488 31.9266L28.4784 31.5425L28.4599 31.5233Z",
                              fill: "#F9AA51"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.6264 32.8681H28.5153L28.1821 32.388L27.9043 31.543H28.4413L28.8116 31.9271L28.9042 32.7145V32.8489H28.6264V32.8681ZM28.5153 32.8681H28.6264H28.8671V32.7528V31.9847L28.5153 31.6006H28.0525L28.3116 32.4072L28.5153 32.8681Z",
                              fill: "#953220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.5536 31.5812V31.4851H27.8684C27.9733 31.5986 28.0607 31.7282 28.1277 31.8692C28.1277 32.0228 28.2758 32.2916 28.3499 32.4453C28.427 32.5859 28.5136 32.7207 28.6091 32.8486H28.2758H28.1277L27.6648 32.0996L27.5352 31.6195L27.5536 31.5812Z",
                              fill: "#F9AA51"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2758 32.8868H28.1277L27.6648 32.1378L27.5352 31.6577V31.5617H27.887C27.9908 31.6832 28.078 31.8189 28.1462 31.965C28.1566 32.035 28.1566 32.1063 28.1462 32.1763C28.1462 32.2915 28.1462 32.4259 28.2944 32.5219C28.4425 32.618 28.5536 32.9252 28.5536 32.9444H28.2758V32.8868ZM28.1462 32.7908H28.2758H28.5721C28.4793 32.6717 28.3987 32.543 28.3314 32.4067C28.3084 32.3052 28.2899 32.2027 28.2758 32.0994C28.2789 32.0355 28.2789 31.9714 28.2758 31.9074C28.2134 31.7683 28.1323 31.639 28.0351 31.5233H27.7388L27.8499 31.9842L28.1462 32.7908Z",
                              fill: "#953220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.3659 31.4831H27.5696C27.7005 31.6083 27.8074 31.7582 27.8844 31.9248C27.9252 32.1001 27.9747 32.2731 28.0325 32.4432C28.1008 32.5952 28.188 32.7372 28.2918 32.8657C28.1255 32.8826 27.958 32.8826 27.7918 32.8657C27.6251 32.8657 27.551 32.8657 27.514 32.8657C27.4775 32.8199 27.4336 32.7809 27.3844 32.7505H27.1992V32.4817V31.9055V31.6175H27.3659V31.4831Z",
                              fill: "#F9AA51"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.1056 32.8863H27.6797C27.5871 32.8863 27.5315 32.8863 27.4945 32.8863L27.3649 32.7903H27.1797V32.5214V31.9453V31.6188H27.3463H27.5685C27.7029 31.7484 27.8101 31.9052 27.8834 32.0797C27.8962 32.1559 27.8962 32.2339 27.8834 32.3101C27.9056 32.4089 27.9366 32.5054 27.9759 32.5983C28.0469 32.7427 28.1339 32.8781 28.2352 33.0015L28.1056 32.8863ZM27.2167 32.6367H27.3834C27.4395 32.6648 27.4898 32.7039 27.5315 32.7519C27.5315 32.7519 27.5315 32.7519 27.6982 32.7519H28.2537C28.159 32.6343 28.0781 32.5054 28.013 32.3678C27.9729 32.2686 27.942 32.1657 27.9204 32.0605C27.9329 31.9907 27.9329 31.9191 27.9204 31.8493C27.8543 31.6811 27.7531 31.5303 27.6241 31.4076H27.4204H27.2723V31.6764V32.2525L27.2167 32.6367Z",
                              fill: "#953220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.256 31.6383L28.9598 31.5038H28.4043V31.8111C28.4436 32.0373 28.512 32.2569 28.6079 32.464C28.6761 32.6058 28.7567 32.7408 28.8487 32.8673H29.219H29.4227V32.6176V31.9263V31.8303L29.256 31.6383Z",
                              fill: "#F9AA51"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.9238 32.8677C28.8644 32.7914 28.8146 32.7075 28.7756 32.6181L28.6831 32.4453C28.5847 32.2392 28.516 32.0192 28.4794 31.7924C28.4794 31.6579 28.4794 31.4851 28.4794 31.4851H29.0349L29.3312 31.6003H29.4978V31.6964V32.3493V32.5989H29.2941C29.1839 32.7068 29.0592 32.7973 28.9238 32.8677ZM28.4238 31.5043C28.4238 31.5043 28.4238 31.6579 28.4238 31.7731C28.4606 31.9938 28.5293 32.2075 28.6275 32.4069C28.6653 32.4602 28.6964 32.5183 28.7201 32.5797C28.753 32.6666 28.8036 32.7452 28.8683 32.8101C28.9766 32.7919 29.0823 32.7597 29.183 32.7141H29.3867V32.5029V31.8308V31.7348H29.2571L28.9608 31.6003L28.4238 31.5043Z",
                              fill: "#953220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.2747 31.6385C27.2747 31.6385 27.2748 31.6385 27.3673 31.6385C27.4599 31.6385 27.4599 31.6385 27.4599 31.5041C27.4599 31.3697 27.4599 31.3313 27.2747 31.3121C27.0896 31.2928 27.0711 31.4657 27.0711 31.5617C27.0711 31.6577 27.0711 31.7154 27.0711 31.7538C27.0414 31.8407 27.0414 31.9356 27.0711 32.0226C27.0903 32.1379 27.1418 32.2447 27.2192 32.3298C27.2192 32.3298 27.0711 32.4451 27.0711 32.5603C27.0757 32.6129 27.0992 32.6619 27.1369 32.6974C27.1746 32.733 27.2238 32.7525 27.2747 32.7523C27.3858 32.7523 27.5155 32.7524 27.5155 32.5987C27.5155 32.558 27.4998 32.5189 27.4721 32.4901C27.4443 32.4613 27.4066 32.4451 27.3673 32.4451H27.2747",
                              fill: "#F9AA51"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.3496 31.6768C29.3496 31.6768 29.257 31.6768 29.257 31.5616C29.257 31.4463 29.3681 31.4271 29.4422 31.4271C29.4964 31.4357 29.5461 31.4633 29.5831 31.5052C29.6202 31.5471 29.6423 31.6008 29.6458 31.6576C29.6454 31.6975 29.6369 31.7369 29.621 31.7733C29.605 31.8097 29.582 31.8422 29.5533 31.8688C29.5533 31.8688 29.5533 31.8688 29.5533 32.0609C29.5506 32.1584 29.5183 32.2525 29.4607 32.3297C29.5011 32.3515 29.5348 32.3847 29.5577 32.4255C29.5806 32.4663 29.5919 32.5129 29.5903 32.5601C29.5929 32.5869 29.5901 32.614 29.5819 32.6395C29.5738 32.6651 29.5606 32.6886 29.5431 32.7085C29.5257 32.7284 29.5043 32.7443 29.4806 32.7552C29.4568 32.766 29.4311 32.7715 29.4051 32.7714C29.3126 32.7714 29.183 32.7714 29.183 32.6177C29.1803 32.5986 29.1817 32.579 29.187 32.5604C29.1923 32.5418 29.2014 32.5246 29.2137 32.51C29.226 32.4954 29.2412 32.4838 29.2583 32.4759C29.2754 32.4679 29.2939 32.4639 29.3126 32.4641C29.3387 32.4687 29.3625 32.4829 29.3794 32.504C29.3964 32.5251 29.4055 32.5519 29.4051 32.5794",
                              fill: "#F9AA51"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.3853 32.8685C29.2742 32.8685 29.1445 32.8685 29.1445 32.6956C29.1445 32.5228 29.1445 32.5036 29.2927 32.5036C29.3272 32.5116 29.3584 32.5308 29.3817 32.5584C29.4051 32.5861 29.4192 32.6207 29.4223 32.6572V32.5612C29.4223 32.5612 29.3112 32.5612 29.3112 32.6956C29.3112 32.8301 29.4409 32.8301 29.515 32.8301C29.589 32.8301 29.6631 32.8301 29.6631 32.638C29.6651 32.5956 29.6559 32.5535 29.6363 32.5162C29.6166 32.4789 29.5875 32.448 29.552 32.4268C29.6107 32.3578 29.6435 32.2692 29.6446 32.1772C29.6446 32.0427 29.6446 32.0043 29.6446 32.0043C29.6719 31.9806 29.6942 31.9513 29.7102 31.9183C29.7261 31.8853 29.7353 31.8492 29.7372 31.8123C29.7309 31.7617 29.7097 31.7143 29.6765 31.6765C29.6434 31.6387 29.6 31.6124 29.552 31.601C29.552 31.601 29.3853 31.601 29.3853 31.7162C29.3853 31.8315 29.3853 31.8123 29.3853 31.8123V31.9083C29.3853 31.9083 29.2742 31.9083 29.2742 31.7738C29.2742 31.6394 29.3853 31.6202 29.4779 31.6202C29.537 31.629 29.5914 31.6586 29.6318 31.704C29.6723 31.7495 29.6964 31.8081 29.7001 31.8699C29.7166 31.9393 29.7166 32.0117 29.7001 32.0811C29.7199 32.1435 29.7199 32.2108 29.7001 32.2732C29.6988 32.3709 29.6663 32.4655 29.6075 32.542C29.6495 32.5618 29.6846 32.5945 29.7078 32.6358C29.731 32.6771 29.7413 32.7249 29.7372 32.7725C29.7294 32.8107 29.7114 32.8459 29.6854 32.8743C29.6593 32.9026 29.6262 32.9229 29.5897 32.9328C29.5533 32.9428 29.5148 32.9421 29.4787 32.9307C29.4426 32.9193 29.4103 32.8978 29.3853 32.8685Z",
                              fill: "#953220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.4785 32.5602C27.4785 32.5602 27.4785 32.6562 27.4785 32.6754C27.718 32.7524 27.9688 32.7849 28.2192 32.7715C28.459 32.8016 28.7015 32.8016 28.9413 32.7715C28.9413 32.7715 28.9413 32.6178 29.0895 32.5794V32.6946C29.0292 32.7139 28.9646 32.7139 28.9043 32.6946C28.9043 32.6946 27.8303 32.6946 27.6637 32.6946C27.497 32.6946 27.5155 32.6946 27.4785 32.6946V32.5025V32.5602Z",
                              fill: "#953220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.0899 31.5617H29.1825C29.1108 31.6033 29.0577 31.6722 29.0343 31.7538C29.0343 31.9266 29.0343 31.965 29.0343 31.9842C28.8739 31.9939 28.7131 31.9939 28.5527 31.9842V31.8114L29.201 31.5233L29.0899 31.5617Z",
                              fill: "#953220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.4582 31.5049C30.4148 31.4817 30.3769 31.4489 30.3471 31.4089C30.3471 31.4089 30.3471 31.2744 30.3471 31.2552C30.3471 31.236 30.3471 31.2552 30.3471 31.2552C30.3374 31.3124 30.3374 31.3709 30.3471 31.428L30.4582 31.5049Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.2927 31.254V31.3692H31.4039C31.4039 31.3692 31.2742 31.3692 31.2372 31.3692L31.1445 31.2348L31.2927 31.254Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.5506 31.3497C31.5089 31.3642 31.4638 31.3642 31.422 31.3497C31.422 31.3497 31.3118 31.3498 31.3302 31.2546C31.3486 31.1595 31.3302 31.2546 31.3302 31.2546C31.3787 31.2649 31.4287 31.2649 31.4771 31.2546L31.5506 31.3497Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.3291 30.1803C31.3291 30.1803 31.3291 30.1803 31.2189 30.1803C31.1087 30.1803 31.2189 30.2945 31.2189 30.2945V30.1803H31.3291Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.9218 30.333C30.8914 30.3272 30.8604 30.3272 30.8301 30.333V30.4662C30.8301 30.4662 30.8301 30.4662 30.8301 30.3711V30.2569L30.9218 30.333Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.1255 30.8523L29.8848 31.102C30.1725 31.2786 30.4957 31.3838 30.8292 31.4092C31.1688 31.3781 31.4884 31.2292 31.7366 30.9868C31.7809 30.8366 31.7809 30.676 31.7366 30.5258C31.6215 30.3795 31.4667 30.2724 31.2921 30.2186C31.1063 30.2902 30.9407 30.4091 30.8107 30.5643C30.644 30.7371 30.6625 30.8907 30.4218 30.8715L30.1255 30.8523Z",
                              fill: "#8CBEBF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.8497 31.4286C30.5226 31.4002 30.206 31.2951 29.9238 31.1213L30.183 30.8332H30.4608C30.6089 30.8332 30.646 30.8333 30.7201 30.6796L30.8312 30.526C30.9733 30.3765 31.1434 30.2589 31.3311 30.1803C31.4422 30.1803 31.7385 30.4108 31.794 30.5068C31.8388 30.6635 31.8388 30.8302 31.794 30.9869C31.5358 31.2249 31.2119 31.3727 30.8682 31.4094L30.8497 31.4286ZM29.9608 31.1021C30.2417 31.2601 30.5502 31.358 30.8682 31.3902C31.198 31.3561 31.5091 31.215 31.757 30.9869C31.7923 30.8419 31.7923 30.6901 31.757 30.5452C31.6455 30.4035 31.4979 30.2971 31.3311 30.2379C31.1523 30.313 30.9935 30.4315 30.8682 30.5836C30.8163 30.6212 30.7773 30.675 30.7571 30.7372C30.7301 30.7924 30.6868 30.8372 30.6334 30.8649C30.5801 30.8925 30.5195 30.9016 30.4608 30.8908H30.1275L29.9608 31.1021Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.1257 30.948C30.1257 30.948 30.6998 31.044 30.8479 30.948C30.996 30.852 31.1997 30.5064 31.3108 30.4488C31.3656 30.4349 31.4227 30.4349 31.4775 30.4488L31.607 30.5448L31.7552 30.66V30.948V31.1017L31.5886 31.2553L31.2552 31.4089L30.9405 31.5049H30.6812L30.1443 31.3513L29.9961 31.236L30.1257 31.1017V30.948Z",
                              fill: "#0C8489"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.9764 30.6218H31.0683C31.0683 30.6218 31.0682 30.755 30.9764 30.755C30.8845 30.755 30.9764 30.6599 30.9764 30.6218Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.1992 30.7562C31.1992 30.7562 31.1993 30.7562 31.2911 30.7562C31.3142 30.7599 31.3355 30.7712 31.352 30.7883C31.3685 30.8054 31.3793 30.8275 31.3829 30.8514L31.2911 30.9465C31.2911 30.9465 31.1992 30.9465 31.1992 30.8133V30.7562Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.8301 31.0055C30.8301 31.0055 30.8301 31.0055 30.9218 31.0055C30.951 31.0055 30.979 31.0175 30.9997 31.0389C31.0203 31.0604 31.0319 31.0894 31.0319 31.1197C31.0319 31.15 31.0203 31.1791 30.9997 31.2005C30.979 31.2219 30.951 31.2339 30.9218 31.2339C30.9218 31.2339 30.8301 31.1387 30.8301 31.0816V31.0055Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.3477 31.0627C30.3477 31.0322 30.3594 31.0029 30.3802 30.9813C30.4011 30.9597 30.4293 30.9475 30.4588 30.9475C30.4883 30.9475 30.5165 30.9597 30.5374 30.9813C30.5582 31.0029 30.5699 31.0322 30.5699 31.0627C30.5699 31.0627 30.5699 31.1972 30.4588 31.1972C30.4277 31.1925 30.3993 31.1764 30.3789 31.1516C30.3584 31.1269 30.3473 31.0953 30.3477 31.0627Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.1997 30.7562C31.1997 30.7562 31.1997 30.7562 31.2915 30.7562V30.9085C31.2729 30.9128 31.2536 30.9111 31.236 30.9035C31.2185 30.8959 31.2037 30.8828 31.1936 30.866C31.1835 30.8493 31.1787 30.8298 31.1798 30.8101C31.1809 30.7905 31.1879 30.7716 31.1997 30.7562Z",
                              fill: "#8CBEBF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.8301 31.0055C30.8301 31.0055 30.8301 31.0055 30.9403 31.0055C31.0504 31.0055 30.9403 31.0055 30.9403 31.0055V31.1007C30.9403 31.1007 30.9403 31.1006 30.9403 31.0055H30.8301Z",
                              fill: "#8CBEBF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.3477 31.044C30.3477 31.0134 30.3594 30.9841 30.3802 30.9625C30.401 30.9409 30.4293 30.9288 30.4588 30.9288H30.5884C30.5816 30.9669 30.5638 31.002 30.5373 31.0294C30.5109 31.0568 30.4771 31.0753 30.4403 31.0824C30.4403 31.0824 30.3477 31.0824 30.3477 30.9672V31.044Z",
                              fill: "#8CBEBF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.568 30.9465C30.5261 30.9333 30.4814 30.9333 30.4395 30.9465C30.4395 30.9465 30.4395 31.0417 30.4395 31.0607L30.5313 30.9656L30.568 30.9465Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.9395 30.8522C30.9002 30.8818 30.8687 30.9211 30.8477 30.9664C30.8477 30.9664 30.8477 30.9664 30.8477 30.9664C30.8477 30.9664 30.8477 30.9664 30.8477 30.8712L30.9395 30.8522Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.7728 30.7754C31.7843 30.8218 31.7816 30.8708 31.765 30.9156C31.7484 30.9603 31.7187 30.9986 31.6802 31.025C31.4204 31.2203 31.1118 31.3337 30.7914 31.3515C30.52 31.3162 30.2568 31.2317 30.0137 31.1019L30.2914 31.2171L30.6247 31.3131H30.9951L31.3099 31.1979L31.5876 31.0634L31.7172 30.9482V30.7562L31.7728 30.7754Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.6638 28.6625C24.6638 28.6625 24.7556 28.6625 24.6638 28.7958C24.5721 28.929 24.6638 28.891 24.6638 28.7958C24.6638 28.7006 24.6638 28.7958 24.6638 28.7006C24.6642 28.6879 24.6642 28.6752 24.6638 28.6625Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.1816 29.834C24.2181 29.8401 24.2553 29.8401 24.2918 29.834C24.3086 29.8441 24.3276 29.8495 24.3469 29.8495C24.3663 29.8495 24.3853 29.8441 24.402 29.834H24.2918H24.1816Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.5703 30.1788C24.5703 30.1788 24.6805 30.1788 24.6989 30.1788C24.7085 30.1614 24.7136 30.1417 24.7136 30.1216C24.7136 30.1016 24.7085 30.0819 24.6989 30.0645C24.6989 30.0645 24.6989 30.0645 24.6989 30.0645H24.607L24.5703 30.1788Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.2929 29.9107C25.3084 29.7512 25.288 29.5902 25.2334 29.4403C25.1788 29.2903 25.0914 29.1556 24.9781 29.0465C24.5707 28.6817 24.3115 28.7776 24.1819 28.8929C24.0522 29.0081 23.9226 29.469 24.3485 29.8531C24.478 29.9652 24.63 30.0458 24.7934 30.089C24.9569 30.1322 25.1275 30.1369 25.2929 30.1028V29.9107Z",
                              fill: "#8CBEBF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.0883 30.1795C24.8121 30.1893 24.5419 30.0936 24.3291 29.9106C24.2415 29.8392 24.1697 29.7491 24.1185 29.6464C24.0674 29.5437 24.0382 29.4308 24.0328 29.3153C24.0251 29.2517 24.0302 29.1871 24.0478 29.1257C24.0655 29.0643 24.0954 29.0074 24.1354 28.9586C24.1755 28.9098 24.2249 28.8702 24.2806 28.8424C24.3363 28.8145 24.397 28.799 24.4587 28.7968C24.6566 28.8208 24.84 28.916 24.9772 29.0657C25.0966 29.1748 25.1891 29.3119 25.247 29.4655C25.305 29.6192 25.3268 29.7849 25.3105 29.9491V30.1795H25.0883ZM24.4587 28.8544C24.3682 28.8261 24.2716 28.8261 24.181 28.8544C24.1021 28.9578 24.0625 29.0877 24.0699 29.2193C24.0758 29.3272 24.1036 29.4325 24.1515 29.5285C24.1993 29.6245 24.2662 29.7089 24.3476 29.7762C24.5556 29.9548 24.8184 30.0501 25.0883 30.0451H25.2735V29.8722C25.2905 29.7155 25.2708 29.5568 25.216 29.4097C25.1612 29.2626 25.0729 29.1314 24.9587 29.0273C24.8217 28.8972 24.6444 28.8223 24.4587 28.816V28.8544Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0703 29.3735C24.0703 29.3735 24.0703 29.0854 24.1999 29.0086C24.333 28.9403 24.4865 28.9281 24.6281 28.9746C24.7697 29.0212 24.8883 29.1228 24.9591 29.2582C25.0385 29.381 25.0926 29.5194 25.1181 29.6647C25.1436 29.8101 25.1399 29.9594 25.1073 30.1032H24.8851L24.5517 29.9496L24.2554 29.7383L24.0703 29.3735Z",
                              fill: "#0C8489"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.2378 29.987C25.172 30.012 25.0999 30.012 25.0341 29.987C24.8156 29.9569 24.609 29.866 24.4363 29.724C24.2635 29.582 24.131 29.3942 24.0527 29.1805V29.3533V29.4878L24.2008 29.699L24.3675 29.8526L24.5897 29.9679H24.7564H24.96H25.0897L25.1822 29.8142L25.2378 29.987Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.9219 29.4886H25.0688C25.0688 29.4886 24.9219 29.5273 24.9219 29.4886Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.5701 29.4502H24.6619C24.6619 29.4502 24.6619 29.5644 24.5701 29.5644C24.4783 29.5644 24.5701 29.4693 24.5701 29.4122V29.4502Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.3117 29.5264V29.4122C24.3409 29.4122 24.369 29.4242 24.3896 29.4456C24.4103 29.4671 24.4219 29.4961 24.4219 29.5264C24.4219 29.5516 24.4122 29.5758 24.395 29.5937C24.3778 29.6115 24.3544 29.6215 24.3301 29.6215C24.3057 29.6215 24.2824 29.6115 24.2652 29.5937C24.248 29.5758 24.2383 29.5516 24.2383 29.5264H24.3117Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.366 29.1809H24.4578C24.4534 29.2078 24.4399 29.2322 24.4197 29.2496C24.3995 29.2671 24.3739 29.2764 24.3477 29.2761C24.3477 29.2761 24.3477 29.2761 24.3477 29.1619L24.366 29.1809Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.6629 29.142C24.6629 29.142 24.6629 29.142 24.7547 29.142C24.8465 29.142 24.7547 29.142 24.7547 29.142C24.7379 29.1521 24.7189 29.1574 24.6996 29.1574C24.6803 29.1574 24.6613 29.1521 24.6445 29.142C24.6445 29.142 24.6445 29.1421 24.6445 29.0088L24.6629 29.142Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.5707 29.834C24.5707 29.834 24.5707 29.834 24.4605 29.834C24.3504 29.834 24.5707 29.8725 24.5707 29.834Z",
                              fill: "#8CBEBF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.9764 29.2769V29.372V29.4672C24.9662 29.4299 24.9662 29.3903 24.9764 29.353V29.2769Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.4219 29.0276C24.4284 29.0589 24.4284 29.0914 24.4219 29.1228V29.0276Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.9414 29.6226C24.9465 29.6605 24.9465 29.6989 24.9414 29.7368C24.9414 29.7368 24.9414 29.7368 24.9414 29.7368C24.9414 29.7368 24.9414 29.7368 24.9414 29.6417V29.5465V29.6226Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.442 28.7968C24.442 28.7968 24.1827 28.7968 24.1271 29.0273C24.1165 29.1551 24.1165 29.2836 24.1271 29.4114V29.1809V29.0273L24.2197 28.8928H24.3309H24.442V28.7968Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.274 29.8529C25.2968 29.7583 25.2968 29.6594 25.274 29.5649C25.2061 29.3924 25.1256 29.2255 25.0332 29.0657L25.1629 29.2V29.3729V29.5265V29.6609V29.8529H25.274Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.5332 29.4886L25.6434 29.5837V29.4886H25.5332Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.1445 30.5826C25.1445 30.5826 25.1445 30.5826 25.2547 30.4684C25.3648 30.3542 25.3465 30.4684 25.3648 30.4684C25.3832 30.4684 25.3648 30.4684 25.3648 30.4684H25.218L25.1445 30.5826Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8125 30.8308H25.9043C25.9043 30.8308 25.9043 30.8308 25.9043 30.7357C25.9043 30.6405 25.9044 30.7357 25.8125 30.7357C25.8073 30.7735 25.8073 30.812 25.8125 30.8499V30.8308Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.7371 30.7732C25.7319 30.7353 25.7319 30.6968 25.7371 30.659H25.627L25.7371 30.7732Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.8296 30.1802C26.7091 30.0052 26.5546 29.8584 26.376 29.7493C26.1974 29.6401 25.9986 29.571 25.7926 29.5465C25.7128 29.5357 25.6317 29.5425 25.5546 29.5663C25.4774 29.5901 25.4059 29.6305 25.3448 29.6848C25.2837 29.7392 25.2343 29.8062 25.1998 29.8816C25.1653 29.9571 25.1465 30.0392 25.1445 30.1226C25.1445 30.2571 25.3482 30.5644 26.0148 30.622C26.6814 30.6796 26.7926 30.2955 26.8296 30.2762C26.8666 30.257 26.8296 30.2762 26.8296 30.2762V30.1802Z",
                              fill: "#8CBEBF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.0147 30.7173H26.1444C26.278 30.7294 26.4123 30.7037 26.533 30.6428C26.6536 30.5819 26.7561 30.4882 26.8294 30.3716V30.2372C26.7083 30.061 26.554 29.9123 26.3757 29.8001C26.1975 29.6878 25.9991 29.6144 25.7926 29.5842C25.6945 29.5749 25.5957 29.5911 25.5052 29.6313C25.4147 29.6716 25.3353 29.7346 25.2741 29.8147C25.2234 29.8632 25.1838 29.9229 25.1581 29.9893C25.1325 30.0558 25.1215 30.1273 25.126 30.1988C25.1445 30.3716 25.3482 30.7173 26.0147 30.7173Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4221 29.834C26.5122 29.9064 26.5931 29.9903 26.6629 30.0837C26.6629 30.1797 26.6629 30.2565 26.6629 30.2757C26.6629 30.2949 26.2555 29.93 25.9592 29.8532C25.6629 29.7763 25.4037 29.8532 25.3481 30.0068C25.312 30.0834 25.3016 30.1703 25.3183 30.2537C25.3351 30.3372 25.3781 30.4124 25.4407 30.4677C25.692 30.5623 25.953 30.6268 26.2185 30.6598H26.5147L26.6999 30.5445V30.4485V30.3141L26.5518 30.1413L26.274 29.93L26.4221 29.834Z",
                              fill: "#0C8489"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.458 30.0644H25.5498C25.5498 30.0644 25.5498 30.0644 25.4396 30.0644C25.3294 30.0644 25.4396 30.0645 25.4396 29.9693L25.458 30.0644Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8477 30.2941C25.8477 30.2688 25.8573 30.2446 25.8746 30.2268C25.8918 30.2089 25.9151 30.1989 25.9394 30.1989L26.0313 30.2941C26.0313 30.2941 26.0313 30.3892 25.9211 30.3892C25.8109 30.3892 25.9211 30.3892 25.9211 30.2941H25.8477Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.5525 30.3716H25.6443C25.6443 30.3716 25.6443 30.3716 25.5525 30.3716C25.4607 30.3716 25.5525 30.4286 25.5525 30.3716Z",
                              fill: "#8CBEBF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4219 30.3716C26.4219 30.3716 26.4219 30.3716 26.5137 30.3716C26.5219 30.3894 26.5261 30.4089 26.5261 30.4287C26.5261 30.4484 26.5219 30.4679 26.5137 30.4858L26.4219 30.3716Z",
                              fill: "#8CBEBF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.793 30.1788C25.793 30.1788 25.9215 30.1788 25.9399 30.1788C25.9582 30.1788 25.9399 30.1788 25.9399 30.1788V30.0645L25.793 30.1788Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.4961 30.2941C25.4961 30.2941 25.5879 30.2941 25.6063 30.2941C25.6246 30.2941 25.6063 30.2941 25.6063 30.2941V30.1989L25.4961 30.2941Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.6074 29.7567C25.6074 29.7567 25.7175 29.7567 25.7359 29.7567C25.7542 29.7567 25.7359 29.7567 25.7359 29.7567V29.6426L25.6074 29.7567Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.6999 30.4677C26.5154 30.5974 26.2913 30.6521 26.0704 30.6214C25.8952 30.6289 25.7206 30.5948 25.5601 30.5216C25.3997 30.4483 25.2575 30.338 25.1445 30.1989V30.2949L25.2371 30.4293L25.5519 30.6021H25.8852H26.1629H26.4222L26.6258 30.4869L26.6999 30.4677Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.7749 30.1797L26.5897 29.9876C26.4304 29.8497 26.2635 29.7215 26.0898 29.6036L26.4046 29.7572L26.6267 29.9492L26.7749 30.1221V30.1797Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.7734 29.8526H26.902V29.7574L26.7734 29.8526Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.1074 29.6614H27.2543V29.7756H27.1625C27.1658 29.7376 27.1658 29.6994 27.1625 29.6614H27.1074Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.2188 29.6426L27.3288 29.7567C27.3288 29.7567 27.3288 29.7567 27.2371 29.7567C27.2283 29.7192 27.2221 29.681 27.2188 29.6426Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.7734 29.776C27.7837 29.8134 27.7837 29.8529 27.7734 29.8902V29.7379V29.776Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.9219 31.2556H28.0136V31.3698L27.9219 31.2556Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.6816 30.5066C26.6816 30.2954 26.9779 29.8153 27.2927 29.8345C27.5044 29.8553 27.7111 29.9138 27.9037 30.0073C28.0889 30.0073 28.1444 30.1802 28.2555 30.1994C28.3536 30.2162 28.4537 30.2162 28.5518 30.1994H28.9592L28.6444 30.6795L28.5333 30.7947C28.4433 30.942 28.3053 31.051 28.1444 31.1019C27.8233 31.1935 27.4842 31.1935 27.163 31.1019C27.0389 31.0752 26.9259 31.0091 26.8396 30.9127C26.7534 30.8164 26.6982 30.6946 26.6816 30.5643V30.5066Z",
                              fill: "#8CBEBF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.7731 31.1403C27.5638 31.1617 27.3529 31.1617 27.1436 31.1403C27.0167 31.1124 26.9017 31.0435 26.8151 30.9434C26.7286 30.8433 26.675 30.7172 26.6621 30.5834C26.6621 30.3722 26.9399 29.8921 27.2917 29.8921C27.5092 29.9137 27.7219 29.972 27.9212 30.0649L28.1064 30.1801C28.1607 30.1978 28.2188 30.1978 28.2731 30.1801H28.5508H28.9953L28.6619 30.6986L28.5508 30.7947C28.4641 30.9492 28.3258 31.0653 28.162 31.1211C28.0342 31.149 27.9029 31.1555 27.7731 31.1403ZM27.2917 29.8537C26.9769 29.8537 26.7177 30.3146 26.7177 30.5066C26.7177 30.6987 26.9398 30.9675 27.162 31.0251C27.3652 31.0469 27.57 31.0469 27.7731 31.0251C27.8956 31.0481 28.021 31.0481 28.1434 31.0251C28.2974 30.9702 28.4284 30.8616 28.5138 30.7178L28.6249 30.6026L28.9212 30.1801H28.5508H28.2731C28.2179 30.1902 28.1616 30.1902 28.1064 30.1801L27.9212 30.0649C27.7253 29.9559 27.5121 29.8843 27.2917 29.8537Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.6806 30.5066C26.6649 30.4436 26.6649 30.3775 26.6806 30.3146C26.7425 30.2032 26.8171 30.1001 26.9028 30.0073C26.9845 29.9156 27.0974 29.8604 27.2176 29.8536H27.4953L27.8287 29.9881L28.0138 30.1033H28.1805H28.4767H28.8471L28.5508 30.545L28.4397 30.641C28.3532 30.7837 28.2227 30.892 28.0694 30.9483C27.9467 30.9684 27.8217 30.9684 27.699 30.9483C27.4961 30.9731 27.2909 30.9731 27.0879 30.9483C26.9666 30.919 26.8568 30.852 26.7732 30.7562C26.6847 30.6715 26.6316 30.5544 26.625 30.4298C26.6327 30.5692 26.6926 30.7001 26.7917 30.7947C26.8753 30.8905 26.9851 30.9575 27.1065 30.9867C27.3157 31.0113 27.5269 31.0113 27.7361 30.9867C27.8865 30.9963 28.0368 30.966 28.1728 30.8989C28.3089 30.8317 28.4262 30.7298 28.5138 30.6026L28.6249 30.4874L28.9582 29.9689H28.5138H28.2731C28.2251 29.9865 28.1729 29.9865 28.125 29.9689L27.9212 29.8536L27.5694 29.7192H27.2917C27.2137 29.6914 27.1289 29.6914 27.0509 29.7192C26.9366 29.7897 26.8411 29.8887 26.7732 30.0073C26.7148 30.107 26.677 30.2181 26.6621 30.3337L26.6806 30.5066Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.6448 30.5629H28.5337C28.1485 30.3336 27.7382 30.1531 27.3116 30.0251C27.0339 30.0251 26.7746 30.1787 26.7561 30.4668C26.7376 30.7549 26.7561 30.7741 26.8857 30.8509C27.0153 30.9277 27.4782 31.0621 27.4782 31.0621H27.8115H28.0893L28.33 30.9277L28.4596 30.8317V30.7165L28.5707 30.582L28.6448 30.5629Z",
                              fill: "#0C8489"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.2168 30.4109V30.5061H27.125C27.125 30.5061 27.125 30.5061 27.2168 30.5061C27.3087 30.5061 27.2168 30.5061 27.2168 30.5061V30.4109Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.8477 30.3137C27.8477 30.3137 27.8477 30.3137 27.9396 30.3137C27.9396 30.3137 27.8477 30.3523 27.8477 30.3137Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.959 30.6393L28.0508 30.5442H28.1426V30.6584C28.1426 30.6584 28.0325 30.6584 28.0325 30.5632L27.959 30.6393Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.6992 30.8699C27.6992 30.8447 27.7089 30.8205 27.7261 30.8026C27.7433 30.7848 27.7667 30.7747 27.791 30.7747C27.8154 30.7747 27.8388 30.7848 27.856 30.8026C27.8732 30.8205 27.8829 30.8447 27.8829 30.8699H27.791C27.791 30.8699 27.6992 30.908 27.6992 30.8699Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.9946 30.2758H27.8477C27.8477 30.2758 27.9946 30.1806 27.9946 30.2758Z",
                              fill: "#8CBEBF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.7168 30.506V30.6012H27.625C27.625 30.6012 27.625 30.6012 27.7168 30.6012C27.8086 30.6012 27.7168 30.6012 27.7168 30.6012V30.506Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.7559 30.1796C27.8038 30.1648 27.8548 30.1648 27.9028 30.1796C27.9094 30.1945 27.9128 30.2108 27.9128 30.2272C27.9128 30.2436 27.9094 30.2598 27.9028 30.2748L27.7926 30.1225L27.7559 30.1796Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.459 30.3324L27.606 30.4467L27.5141 30.2753L27.459 30.3324Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.4031 30.4285H27.5683H27.4766L27.3848 30.3333L27.4031 30.4285Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.2578 30.0251H27.4231C27.4231 30.0251 27.4231 30.1203 27.4231 30.1394C27.4231 30.1584 27.4231 30.1394 27.4231 30.1394L27.3312 30.0441L27.2578 30.0251Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.959 30.1803C27.0209 30.2064 27.0771 30.2453 27.1242 30.2945L26.959 30.1803Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.5333 30.717C28.4432 30.8185 28.3366 30.903 28.2185 30.9667C28.024 31.0171 27.8205 31.0171 27.626 30.9667C27.4274 30.9675 27.2311 30.9215 27.052 30.8323C26.9201 30.7656 26.8058 30.6668 26.7188 30.5442L26.8669 30.7554L27.0706 30.8515H27.3483H27.6075H27.8112H28.0519H28.2H28.3111L28.4222 30.6786L28.5333 30.717Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2744 30.1798C28.2744 30.1798 28.2745 30.1798 28.0522 30.1798C27.8421 30.0213 27.5898 29.9341 27.33 29.9302C27.2297 29.9287 27.1307 29.9545 27.043 30.005C26.9553 30.0556 26.8819 30.1291 26.8301 30.2182L26.9967 29.9878L27.1634 29.8918H27.4041H27.5708H27.7189H27.8856L28.0337 29.9878L28.2004 30.0838L28.2744 30.1798Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.7738 30.3333H28.4219V30.1989H28.7182H28.8664L28.7738 30.3333Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.3666 31.8704C28.3964 31.8822 28.4294 31.8822 28.4592 31.8704H28.885L28.9776 31.7552V31.4863V31.3711L29.2368 31.2175H29.4776H29.6257H29.8294H29.9775V31.1214V30.9678V30.7566L29.8108 30.5261L29.5331 30.4109H29.3109L29.0702 30.5069L28.6258 30.6222C28.482 30.6865 28.3596 30.7934 28.274 30.9294C28.1942 31.0893 28.1559 31.268 28.1629 31.4479C28.1629 31.6976 28.1629 32.0433 28.1629 32.0433L28.3666 31.8704Z",
                              fill: "#0C8489"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.4958 31.9646C28.4958 31.9646 28.4032 31.9646 28.3847 31.8686V31.254C28.3733 31.0799 28.412 30.9061 28.4958 30.7547C28.5813 30.6187 28.7037 30.5118 28.8476 30.4475L29.292 30.3323L29.5512 30.2363H29.7919L30.0697 30.3515L30.2363 30.6011V30.8123V30.966V31.0812H30.0697H29.866H29.7179H29.4957L29.2364 31.2348V31.5037L29.1253 31.6381H28.7365L28.4958 31.9646ZM28.4032 31.8686H28.8106L28.9031 31.7534V31.4845V31.3885L29.1809 31.2157H29.4216H29.5697H29.7734H29.903V31.1196V30.9852V30.774L29.7364 30.5628L29.4771 30.4667H29.2549H29.0142L28.5698 30.5819C28.4328 30.6493 28.3172 30.7559 28.2366 30.8892C28.1587 31.029 28.1203 31.1887 28.1255 31.35C28.2094 31.5277 28.3021 31.7008 28.4032 31.8686Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.5332 31.1203C28.5472 31.1283 28.563 31.1326 28.5791 31.1326C28.5952 31.1326 28.611 31.1283 28.625 31.1203C28.625 31.1203 28.7167 31.1203 28.7167 31.1203H28.5332Z",
                              fill: "#8CBEBF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.902 31.4479H28.7734C28.7902 31.4581 28.8092 31.4634 28.8285 31.4634C28.8478 31.4634 28.8668 31.4581 28.8836 31.4479H28.902Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.9972 30.755C29.9838 30.7356 29.9766 30.7124 29.9766 30.6884C29.9766 30.6645 29.9838 30.6412 29.9972 30.6218C29.9972 30.6218 29.9973 30.7551 30.0891 30.736C30.1244 30.7508 30.1639 30.7508 30.1992 30.736L29.9972 30.755Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.2165 30.986C29.2165 30.986 29.2165 30.9859 29.2165 31.0812H29.0879L29.2165 30.986Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.459 31.9277C28.459 31.9277 28.8848 31.9277 28.9219 31.9277C28.9589 31.9277 28.9219 31.6397 29.1441 31.4476C29.3129 31.3118 29.5232 31.2437 29.7366 31.2556C29.8662 31.2556 30.1624 31.1403 30.2179 30.8715C30.2735 30.6026 30.0328 30.6987 29.9402 30.5451C29.8476 30.3914 29.6625 30.5451 29.644 30.5451C29.53 30.5041 29.4061 30.5041 29.2922 30.5451C29.2922 30.5451 29.2922 30.6987 29.1996 30.7371C29.107 30.7755 28.8848 30.7371 28.8663 30.7371C28.8478 30.7371 28.8663 30.8907 28.8663 30.9099C28.8663 30.9291 28.7737 30.9099 28.7737 30.9099V30.6795L29.1441 30.4491L29.5514 30.2186H29.8291L30.1068 30.353C30.1665 30.3909 30.2152 30.4449 30.2478 30.5091C30.2804 30.5733 30.2957 30.6454 30.292 30.7179C30.3025 30.7685 30.3025 30.8209 30.292 30.8715C30.2595 30.9932 30.1894 31.1005 30.0924 31.1769C29.9954 31.2532 29.8768 31.2943 29.755 31.294C29.5503 31.3161 29.3535 31.3885 29.1811 31.5052C29.0849 31.654 29.0275 31.826 29.0144 32.0046C28.8359 32.0237 28.656 32.0237 28.4775 32.0046L28.459 31.9277Z",
                              fill: "#04534E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.6431 31.0614C28.6268 30.9991 28.6268 30.9333 28.6431 30.871C28.6431 30.871 28.6431 30.9852 28.6431 31.0043V31.0614Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.9023 31.0032C28.9023 31.0032 28.9023 31.0032 28.9023 30.908L29.0308 30.7747V30.908C29.0421 30.9387 29.0421 30.9725 29.0308 31.0032H28.9023Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.793 31.4459L28.8848 31.3126C28.8818 31.3442 28.8818 31.3762 28.8848 31.4078L28.793 31.4459Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.3665 30.7935C29.3596 30.8248 29.3596 30.8573 29.3665 30.8886V31.0029C29.3665 31.0029 29.3665 31.0029 29.3665 30.9077V30.7935Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.4219 30.6012C29.4271 30.5697 29.4271 30.5375 29.4219 30.506H29.3301V30.6012H29.4219Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.9767 30.6015H29.8848C29.8848 30.6015 29.8848 30.6015 29.8848 30.6967C29.8848 30.7919 29.8848 30.6967 29.8848 30.6967V30.5824L29.9767 30.6015Z",
                              fill: "#231F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4598 29.3344H25.9414V30.0834H26.4598V29.3344Z",
                              fill: "#F15770"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4212 29.8334C26.4521 29.7543 26.452 29.6658 26.4209 29.5869C26.3898 29.5079 26.33 29.4447 26.2545 29.4109C26.2185 29.3923 26.179 29.3821 26.1388 29.3809C26.0986 29.3797 26.0586 29.3876 26.0216 29.4041C25.9846 29.4205 25.9515 29.4451 25.9246 29.4761C25.8977 29.5071 25.8776 29.5438 25.8657 29.5837C25.8475 29.6198 25.8368 29.6596 25.8345 29.7003C25.8321 29.7411 25.8382 29.7818 25.8522 29.82C25.8662 29.8581 25.8878 29.8927 25.9157 29.9215C25.9435 29.9503 25.977 29.9726 26.0138 29.987C26.05 30.0062 26.0897 30.0174 26.1303 30.02C26.1709 30.0226 26.2115 30.0165 26.2497 30.0021C26.288 29.9877 26.3229 29.9653 26.3524 29.9362C26.3819 29.9072 26.4053 29.8722 26.4212 29.8334Z",
                              fill: "#F15770"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4212 29.8141C26.4467 29.7374 26.4438 29.6536 26.413 29.5791C26.3822 29.5046 26.3257 29.4446 26.2546 29.4109C26.2185 29.3923 26.1791 29.3821 26.1388 29.3809C26.0986 29.3797 26.0586 29.3876 26.0216 29.4041C25.9847 29.4205 25.9515 29.4451 25.9246 29.4761C25.8977 29.5071 25.8776 29.5438 25.8657 29.5837C25.8475 29.6198 25.8368 29.6596 25.8345 29.7003C25.8321 29.741 25.8382 29.7818 25.8522 29.8199C25.8662 29.858 25.8878 29.8927 25.9157 29.9215C25.9436 29.9503 25.977 29.9725 26.0138 29.9869C26.0512 30.0056 26.092 30.0159 26.1335 30.0172C26.1749 30.0185 26.2162 30.0108 26.2546 29.9945C26.293 29.9782 26.3277 29.9537 26.3564 29.9226C26.3851 29.8916 26.4072 29.8546 26.4212 29.8141Z",
                              fill: "#F15871"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4224 29.8148C26.4479 29.7381 26.445 29.6543 26.4142 29.5798C26.3833 29.5052 26.3269 29.4452 26.2557 29.4115C26.2193 29.396 26.1803 29.3881 26.1409 29.3884C26.1015 29.3887 26.0625 29.3971 26.0263 29.4132C25.9901 29.4293 25.9573 29.4527 25.9299 29.4821C25.9026 29.5115 25.8812 29.5462 25.8669 29.5843C25.849 29.6217 25.8391 29.6626 25.838 29.7044C25.8369 29.7461 25.8445 29.7876 25.8603 29.8259C25.8762 29.8643 25.8999 29.8986 25.9298 29.9265C25.9597 29.9544 25.9951 29.9753 26.0335 29.9876C26.0696 30.0062 26.1091 30.0164 26.1493 30.0176C26.1895 30.0187 26.2295 30.0108 26.2665 29.9944C26.3035 29.978 26.3365 29.9534 26.3635 29.9224C26.3904 29.8914 26.4105 29.8546 26.4224 29.8148Z",
                              fill: "#F15972"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4224 29.8145C26.4479 29.7378 26.445 29.6541 26.4142 29.5795C26.3833 29.5049 26.3269 29.445 26.2557 29.4112C26.1818 29.3848 26.101 29.3878 26.0291 29.4198C25.9572 29.4517 25.8994 29.5103 25.8669 29.5841C25.849 29.6214 25.8391 29.6624 25.838 29.7041C25.8369 29.7458 25.8445 29.7873 25.8603 29.8257C25.8762 29.864 25.8999 29.8983 25.9298 29.9262C25.9597 29.9542 25.9951 29.975 26.0335 29.9874C26.0696 30.0059 26.1091 30.0161 26.1493 30.0173C26.1895 30.0185 26.2295 30.0106 26.2665 29.9942C26.3035 29.9777 26.3365 29.9531 26.3635 29.9221C26.3904 29.8911 26.4105 29.8544 26.4224 29.8145Z",
                              fill: "#F15A73"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4224 29.8145C26.4479 29.7378 26.445 29.6541 26.4142 29.5795C26.3833 29.5049 26.3269 29.445 26.2557 29.4112C26.1818 29.3848 26.101 29.3878 26.0291 29.4198C25.9572 29.4517 25.8994 29.5103 25.8669 29.5841C25.849 29.6214 25.8391 29.6624 25.838 29.7041C25.8369 29.7458 25.8445 29.7873 25.8603 29.8257C25.8762 29.864 25.8999 29.8983 25.9298 29.9262C25.9597 29.9542 25.9951 29.975 26.0335 29.9874C26.07 30.0029 26.109 30.0108 26.1484 30.0105C26.1878 30.0102 26.2268 30.0018 26.263 29.9857C26.2992 29.9696 26.3319 29.9461 26.3593 29.9167C26.3867 29.8874 26.4081 29.8526 26.4224 29.8145Z",
                              fill: "#F15B73"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4225 29.8145C26.4539 29.7406 26.4559 29.6569 26.4282 29.5814C26.4005 29.5059 26.3452 29.4448 26.2744 29.4112C26.2005 29.3848 26.1197 29.3878 26.0478 29.4198C25.976 29.4517 25.9181 29.5103 25.8856 29.5841C25.8706 29.6219 25.863 29.6624 25.8633 29.7032C25.8636 29.7441 25.8717 29.7845 25.8872 29.822C25.9028 29.8596 25.9253 29.8936 25.9536 29.922C25.982 29.9504 26.0155 29.9726 26.0522 29.9874C26.0873 30.0027 26.1251 30.0103 26.1631 30.0098C26.2012 30.0093 26.2388 30.0007 26.2736 29.9844C26.3083 29.9682 26.3394 29.9447 26.365 29.9155C26.3907 29.8863 26.4102 29.8519 26.4225 29.8145Z",
                              fill: "#F15C74"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4233 29.8145C26.4546 29.7406 26.4567 29.6568 26.429 29.5814C26.4013 29.5059 26.346 29.4448 26.2752 29.4112C26.2012 29.3848 26.1205 29.3878 26.0486 29.4198C25.9767 29.4517 25.9188 29.5103 25.8863 29.5841C25.8608 29.6607 25.8638 29.7445 25.8946 29.8191C25.9254 29.8936 25.9818 29.9536 26.0529 29.9873C26.1243 30.0129 26.2023 30.0092 26.2712 29.9771C26.34 29.945 26.3944 29.8868 26.4233 29.8145Z",
                              fill: "#F25D75"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4233 29.8145C26.4546 29.7406 26.4567 29.6568 26.429 29.5814C26.4013 29.5059 26.346 29.4448 26.2752 29.4112C26.2012 29.3848 26.1205 29.3878 26.0486 29.4198C25.9767 29.4517 25.9188 29.5103 25.8863 29.5841C25.8608 29.6607 25.8638 29.7445 25.8946 29.8191C25.9254 29.8936 25.9818 29.9536 26.0529 29.9873C26.1243 30.0129 26.2023 30.0092 26.2712 29.9771C26.34 29.945 26.3944 29.8868 26.4233 29.8145Z",
                              fill: "#F25E76"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4234 29.8143C26.4386 29.7791 26.4468 29.741 26.4475 29.7025C26.4482 29.6639 26.4415 29.6255 26.4277 29.5897C26.4139 29.5539 26.3933 29.5214 26.3671 29.494C26.3409 29.4666 26.3097 29.4449 26.2752 29.4302C26.204 29.3977 26.1232 29.3956 26.0504 29.4244C25.9776 29.4531 25.9187 29.5104 25.8863 29.5839C25.8608 29.6605 25.8638 29.7443 25.8946 29.8188C25.9254 29.8934 25.9818 29.9533 26.053 29.9871C26.1243 30.0126 26.2024 30.0089 26.2712 29.9768C26.3401 29.9447 26.3945 29.8866 26.4234 29.8143Z",
                              fill: "#F25F77"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4234 29.8143C26.4386 29.7791 26.4468 29.741 26.4475 29.7025C26.4482 29.6639 26.4415 29.6255 26.4277 29.5897C26.4139 29.5539 26.3933 29.5214 26.3671 29.494C26.3409 29.4666 26.3097 29.4449 26.2752 29.4302C26.204 29.3977 26.1232 29.3956 26.0504 29.4244C25.9776 29.4531 25.9187 29.5104 25.8863 29.5839C25.8608 29.6605 25.8638 29.7443 25.8946 29.8188C25.9254 29.8934 25.9818 29.9533 26.053 29.9871C26.1243 30.0126 26.2024 30.0089 26.2712 29.9768C26.3401 29.9447 26.3945 29.8866 26.4234 29.8143Z",
                              fill: "#F26078"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4222 29.814C26.4374 29.7787 26.4456 29.7407 26.4463 29.7022C26.4471 29.6636 26.4404 29.6252 26.4265 29.5894C26.4127 29.5536 26.3921 29.521 26.3659 29.4936C26.3397 29.4662 26.3085 29.4445 26.2741 29.4299C26.24 29.4148 26.2034 29.4067 26.1663 29.4063C26.1293 29.4058 26.0926 29.4129 26.0582 29.4272C26.0238 29.4415 25.9924 29.4626 25.9659 29.4894C25.9394 29.5163 25.9182 29.5482 25.9037 29.5835C25.8891 29.6188 25.8813 29.6568 25.8809 29.6952C25.8804 29.7336 25.8872 29.7717 25.901 29.8074C25.9148 29.8431 25.9351 29.8755 25.961 29.903C25.9869 29.9305 26.0177 29.9525 26.0518 29.9676C26.0853 29.9865 26.1223 29.9974 26.1604 29.9997C26.1984 30.002 26.2364 29.9956 26.2717 29.9809C26.3071 29.9663 26.3389 29.9437 26.3649 29.9148C26.3909 29.886 26.4105 29.8515 26.4222 29.814Z",
                              fill: "#F26179"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4222 29.8154C26.448 29.7438 26.4471 29.6647 26.4197 29.5937C26.3923 29.5226 26.3404 29.4647 26.274 29.4313C26.2401 29.4156 26.2034 29.4071 26.1662 29.4063C26.129 29.4055 26.092 29.4125 26.0575 29.4269C26.0229 29.4412 25.9915 29.4626 25.9651 29.4898C25.9387 29.5169 25.9178 29.5493 25.9037 29.585C25.8891 29.6203 25.8813 29.6582 25.8809 29.6966C25.8804 29.7351 25.8872 29.7732 25.901 29.8089C25.9288 29.8809 25.983 29.9386 26.0518 29.9691C26.1205 29.9997 26.1982 30.0006 26.2677 29.9718C26.3371 29.943 26.3927 29.8867 26.4222 29.8154Z",
                              fill: "#F26279"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4222 29.8154C26.448 29.7438 26.4471 29.6647 26.4197 29.5937C26.3923 29.5226 26.3404 29.4647 26.274 29.4313C26.2401 29.4156 26.2034 29.4071 26.1662 29.4063C26.129 29.4055 26.092 29.4125 26.0575 29.4269C26.0229 29.4412 25.9915 29.4626 25.9651 29.4898C25.9387 29.5169 25.9178 29.5493 25.9037 29.585C25.8891 29.6203 25.8813 29.6582 25.8809 29.6966C25.8804 29.7351 25.8872 29.7732 25.901 29.8089C25.9288 29.8809 25.983 29.9386 26.0518 29.9691C26.1205 29.9997 26.1982 30.0006 26.2677 29.9718C26.3371 29.943 26.3927 29.8867 26.4222 29.8154Z",
                              fill: "#F2637A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.423 29.8154C26.4488 29.7438 26.448 29.6647 26.4206 29.5937C26.3932 29.5226 26.3412 29.4647 26.2749 29.4313C26.2409 29.4156 26.2042 29.4071 26.167 29.4063C26.1298 29.4055 26.0928 29.4125 26.0583 29.4269C26.0237 29.4412 25.9923 29.4626 25.9659 29.4898C25.9395 29.5169 25.9186 29.5493 25.9045 29.585C25.8863 29.6197 25.8757 29.6582 25.8735 29.6976C25.8713 29.737 25.8775 29.7764 25.8916 29.8131C25.9058 29.8498 25.9275 29.8827 25.9553 29.9097C25.9831 29.9366 26.0163 29.957 26.0526 29.9691C26.0865 29.9849 26.1232 29.9934 26.1604 29.9941C26.1976 29.9949 26.2346 29.9879 26.2691 29.9736C26.3037 29.9592 26.3351 29.9378 26.3616 29.9107C26.388 29.8835 26.4089 29.8511 26.423 29.8154Z",
                              fill: "#F2647B"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4235 29.8147C26.4482 29.7407 26.4446 29.6598 26.4137 29.5884C26.3827 29.5171 26.3266 29.4606 26.2569 29.4306C26.2243 29.4151 26.1889 29.4068 26.153 29.4063C26.1171 29.4057 26.0815 29.4129 26.0484 29.4273C26.0153 29.4418 25.9856 29.4632 25.9609 29.4902C25.9362 29.5172 25.9172 29.5492 25.905 29.5843C25.8899 29.6195 25.8817 29.6575 25.8809 29.6961C25.8802 29.7347 25.8869 29.773 25.9007 29.8088C25.9145 29.8447 25.9351 29.8772 25.9613 29.9046C25.9875 29.932 26.0187 29.9537 26.0532 29.9684C26.0871 29.9841 26.1238 29.9926 26.161 29.9934C26.1982 29.9942 26.2352 29.9871 26.2697 29.9728C26.3043 29.9585 26.3357 29.9371 26.3621 29.9099C26.3885 29.8828 26.4094 29.8504 26.4235 29.8147Z",
                              fill: "#F2657C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4219 29.8153C26.4466 29.7413 26.443 29.6604 26.4121 29.589C26.3811 29.5177 26.325 29.4612 26.2553 29.4312C26.1866 29.4032 26.1099 29.4047 26.0422 29.4353C25.9745 29.4659 25.9213 29.5232 25.8943 29.5945C25.8673 29.6658 25.8687 29.7452 25.8982 29.8155C25.9277 29.8857 25.9829 29.9409 26.0516 29.969C26.0856 29.9847 26.1223 29.9932 26.1594 29.994C26.1966 29.9948 26.2336 29.9877 26.2682 29.9734C26.3027 29.9591 26.3341 29.9377 26.3605 29.9105C26.3869 29.8834 26.4078 29.851 26.4219 29.8153Z",
                              fill: "#F2667D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.423 29.8153C26.4411 29.7806 26.4517 29.7422 26.4539 29.7027C26.4562 29.6633 26.4499 29.6239 26.4358 29.5872C26.4217 29.5506 26.3999 29.5176 26.3721 29.4906C26.3443 29.4637 26.3111 29.4434 26.2749 29.4312C26.2061 29.4032 26.1295 29.4047 26.0617 29.4353C25.994 29.4659 25.9408 29.5232 25.9138 29.5945C25.8868 29.6658 25.8882 29.7453 25.9177 29.8155C25.9472 29.8857 26.0024 29.941 26.0712 29.969C26.1038 29.9845 26.1392 29.9927 26.175 29.9933C26.2109 29.9939 26.2466 29.9867 26.2796 29.9723C26.3127 29.9578 26.3425 29.9364 26.3671 29.9094C26.3918 29.8824 26.4108 29.8503 26.423 29.8153Z",
                              fill: "#F2677E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.423 29.8146C26.4382 29.7794 26.4464 29.7414 26.4472 29.7028C26.4479 29.6642 26.4412 29.6259 26.4274 29.5901C26.4136 29.5542 26.3929 29.5217 26.3667 29.4943C26.3406 29.4669 26.3093 29.4452 26.2749 29.4305C26.2085 29.4047 26.1349 29.4062 26.0695 29.4348C26.0041 29.4633 25.9517 29.5168 25.9231 29.5842C25.8972 29.6558 25.8981 29.7349 25.9255 29.8059C25.9529 29.877 26.0048 29.9349 26.0712 29.9683C26.1377 29.9942 26.2112 29.9926 26.2766 29.9641C26.342 29.9355 26.3944 29.882 26.423 29.8146Z",
                              fill: "#F2687F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.423 29.8146C26.4382 29.7794 26.4464 29.7414 26.4472 29.7028C26.4479 29.6642 26.4412 29.6259 26.4274 29.5901C26.4136 29.5542 26.3929 29.5217 26.3667 29.4943C26.3406 29.4669 26.3093 29.4452 26.2749 29.4305C26.2085 29.4047 26.1349 29.4062 26.0695 29.4348C26.0041 29.4633 25.9517 29.5168 25.9231 29.5842C25.8972 29.6558 25.8981 29.7349 25.9255 29.8059C25.9529 29.877 26.0048 29.9349 26.0712 29.9683C26.1377 29.9942 26.2112 29.9926 26.2766 29.9641C26.342 29.9355 26.3944 29.882 26.423 29.8146Z",
                              fill: "#F3697F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.423 29.8139C26.4388 29.7482 26.4317 29.6787 26.4031 29.6179C26.3744 29.557 26.326 29.5085 26.2663 29.481C26.2066 29.4535 26.1395 29.4487 26.0767 29.4674C26.014 29.4862 25.9596 29.5273 25.9231 29.5835C25.8972 29.6551 25.8981 29.7342 25.9255 29.8052C25.9529 29.8763 26.0048 29.9342 26.0712 29.9676C26.1377 29.9934 26.2112 29.9919 26.2766 29.9633C26.342 29.9348 26.3944 29.8813 26.423 29.8139Z",
                              fill: "#F36A80"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.423 29.815C26.438 29.7811 26.4459 29.7445 26.4465 29.7073C26.447 29.6701 26.4401 29.6331 26.4262 29.5988C26.4123 29.5645 26.3917 29.5336 26.3656 29.508C26.3396 29.4824 26.3087 29.4627 26.2749 29.4501C26.2107 29.4229 26.1389 29.4216 26.0738 29.4465C26.0087 29.4714 25.9549 29.5206 25.9231 29.5845C25.8972 29.6562 25.8981 29.7353 25.9255 29.8063C25.9529 29.8773 26.0048 29.9352 26.0712 29.9686C26.1377 29.9945 26.2112 29.993 26.2766 29.9644C26.342 29.9358 26.3944 29.8824 26.423 29.815Z",
                              fill: "#F36B81"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4234 29.815C26.4383 29.7812 26.4463 29.7445 26.4468 29.7073C26.4474 29.6701 26.4405 29.6332 26.4266 29.5989C26.4126 29.5646 26.392 29.5336 26.366 29.508C26.3399 29.4824 26.3091 29.4627 26.2753 29.4501C26.2437 29.4362 26.2097 29.429 26.1754 29.4287C26.1411 29.4285 26.1071 29.4352 26.0753 29.4485C26.0435 29.4619 26.0145 29.4817 25.99 29.5067C25.9656 29.5316 25.9461 29.5614 25.9327 29.5942C25.9194 29.627 25.9124 29.6621 25.9121 29.6977C25.9119 29.7333 25.9184 29.7687 25.9313 29.8016C25.9442 29.8346 25.9632 29.8647 25.9873 29.89C26.0113 29.9154 26.04 29.9356 26.0716 29.9495C26.1031 29.9654 26.1374 29.9746 26.1724 29.9765C26.2074 29.9783 26.2424 29.9728 26.2752 29.9602C26.3081 29.9477 26.3382 29.9284 26.3637 29.9034C26.3891 29.8784 26.4094 29.8483 26.4234 29.815Z",
                              fill: "#F36C82"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4227 29.8137C26.4477 29.7447 26.4462 29.6685 26.4187 29.6006C26.3911 29.5327 26.3396 29.4784 26.2746 29.4487C26.2433 29.4334 26.2092 29.4252 26.1746 29.4248C26.14 29.4244 26.1057 29.4317 26.0741 29.4463C26.0424 29.4609 26.0142 29.4824 25.9913 29.5093C25.9684 29.5363 25.9514 29.568 25.9414 29.6024C25.916 29.6663 25.9154 29.7378 25.9395 29.8022C25.9636 29.8665 26.0107 29.9188 26.071 29.9481C26.1024 29.9641 26.1367 29.9733 26.1717 29.9751C26.2067 29.977 26.2417 29.9715 26.2746 29.9589C26.3075 29.9463 26.3375 29.927 26.363 29.902C26.3885 29.8771 26.4088 29.847 26.4227 29.8137Z",
                              fill: "#F36D83"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4227 29.8137C26.4477 29.7447 26.4462 29.6685 26.4187 29.6006C26.3911 29.5327 26.3396 29.4784 26.2746 29.4487C26.2433 29.4334 26.2092 29.4252 26.1746 29.4248C26.14 29.4244 26.1057 29.4317 26.0741 29.4463C26.0424 29.4609 26.0142 29.4824 25.9913 29.5093C25.9684 29.5363 25.9514 29.568 25.9414 29.6024C25.916 29.6663 25.9154 29.7378 25.9395 29.8022C25.9636 29.8665 26.0107 29.9188 26.071 29.9481C26.1024 29.9641 26.1367 29.9733 26.1717 29.9751C26.2067 29.977 26.2417 29.9715 26.2746 29.9589C26.3075 29.9463 26.3375 29.927 26.363 29.902C26.3885 29.8771 26.4088 29.847 26.4227 29.8137Z",
                              fill: "#F36E84"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4227 29.8137C26.4477 29.7447 26.4462 29.6685 26.4187 29.6006C26.3911 29.5327 26.3396 29.4784 26.2746 29.4487C26.2433 29.4334 26.2092 29.4252 26.1746 29.4248C26.14 29.4244 26.1057 29.4317 26.0741 29.4463C26.0424 29.4609 26.0142 29.4824 25.9913 29.5093C25.9684 29.5363 25.9514 29.568 25.9414 29.6024C25.916 29.6663 25.9154 29.7378 25.9395 29.8022C25.9636 29.8665 26.0107 29.9188 26.071 29.9481C26.1024 29.9641 26.1367 29.9733 26.1717 29.9751C26.2067 29.977 26.2417 29.9715 26.2746 29.9589C26.3075 29.9463 26.3375 29.927 26.363 29.902C26.3885 29.8771 26.4088 29.847 26.4227 29.8137Z",
                              fill: "#F36F85"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4227 29.8137C26.4477 29.7447 26.4462 29.6685 26.4187 29.6006C26.3911 29.5327 26.3396 29.4784 26.2746 29.4487C26.2433 29.4334 26.2092 29.4252 26.1746 29.4248C26.14 29.4244 26.1057 29.4317 26.0741 29.4463C26.0424 29.4609 26.0142 29.4824 25.9913 29.5093C25.9684 29.5363 25.9514 29.568 25.9414 29.6024C25.916 29.6663 25.9154 29.7378 25.9395 29.8022C25.9636 29.8665 26.0107 29.9188 26.071 29.9481C26.1024 29.9641 26.1367 29.9733 26.1717 29.9751C26.2067 29.977 26.2417 29.9715 26.2746 29.9589C26.3075 29.9463 26.3375 29.927 26.363 29.902C26.3885 29.8771 26.4088 29.847 26.4227 29.8137Z",
                              fill: "#F37085"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4227 29.814C26.4434 29.7448 26.44 29.6703 26.4129 29.6036C26.3858 29.5368 26.3368 29.4821 26.2746 29.4491C26.2108 29.424 26.1399 29.4261 26.0775 29.4549C26.0151 29.4836 25.9662 29.5368 25.9414 29.6028C25.916 29.6667 25.9154 29.7382 25.9395 29.8025C25.9636 29.8669 26.0107 29.9191 26.071 29.9485C26.1024 29.9644 26.1367 29.9736 26.1717 29.9755C26.2067 29.9773 26.2417 29.9718 26.2746 29.9592C26.3074 29.9467 26.3375 29.9274 26.363 29.9024C26.3884 29.8774 26.4087 29.8474 26.4227 29.814Z",
                              fill: "#F37186"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4218 29.7948C26.4472 29.7309 26.4478 29.6594 26.4237 29.5951C26.3996 29.5307 26.3525 29.4785 26.2922 29.4491C26.2284 29.424 26.1575 29.4261 26.0951 29.4549C26.0327 29.4836 25.9838 29.5368 25.9589 29.6028C25.9336 29.6667 25.9329 29.7382 25.9571 29.8025C25.9812 29.8669 26.0283 29.9191 26.0886 29.9485C26.1199 29.9638 26.154 29.972 26.1886 29.9724C26.2232 29.9728 26.2575 29.9654 26.2892 29.9509C26.3208 29.9363 26.349 29.9148 26.3719 29.8879C26.3948 29.8609 26.4118 29.8292 26.4218 29.7948Z",
                              fill: "#F37287"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4218 29.7948C26.4472 29.7309 26.4478 29.6594 26.4237 29.595C26.3996 29.5307 26.3525 29.4785 26.2922 29.4491C26.2284 29.424 26.1575 29.4261 26.0951 29.4549C26.0327 29.4836 25.9838 29.5368 25.9589 29.6028C25.9336 29.6666 25.9329 29.7381 25.9571 29.8025C25.9812 29.8668 26.0283 29.9191 26.0886 29.9484C26.1524 29.9735 26.2233 29.9714 26.2857 29.9427C26.3481 29.9139 26.397 29.8607 26.4218 29.7948Z",
                              fill: "#F37388"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.423 29.795C26.4484 29.7312 26.449 29.6597 26.4249 29.5953C26.4008 29.531 26.3537 29.4787 26.2934 29.4494C26.2293 29.429 26.1604 29.4333 26.0991 29.4615C26.0379 29.4898 25.9885 29.54 25.9602 29.603C25.936 29.6693 25.938 29.7427 25.9657 29.8074C25.9934 29.8722 26.0446 29.9229 26.1083 29.9487C26.1386 29.9608 26.171 29.9664 26.2035 29.9652C26.2359 29.964 26.2679 29.9559 26.2973 29.9416C26.3267 29.9272 26.353 29.9069 26.3746 29.8817C26.3962 29.8565 26.4127 29.827 26.423 29.795Z",
                              fill: "#F37489"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4231 29.7949C26.4381 29.7651 26.4467 29.7322 26.4482 29.6986C26.4497 29.665 26.4441 29.6315 26.4317 29.6003C26.4193 29.5692 26.4006 29.5413 26.3767 29.5185C26.3528 29.4958 26.3244 29.4787 26.2935 29.4685C26.2319 29.4422 26.1629 29.4415 26.1009 29.4666C26.0388 29.4916 25.9885 29.5404 25.9602 29.6029C25.936 29.6692 25.938 29.7426 25.9657 29.8073C25.9934 29.8721 26.0447 29.9228 26.1083 29.9486C26.1386 29.9607 26.171 29.9663 26.2035 29.9651C26.236 29.9639 26.268 29.9558 26.2974 29.9415C26.3268 29.9271 26.3531 29.9068 26.3747 29.8816C26.3963 29.8564 26.4128 29.8269 26.4231 29.7949Z",
                              fill: "#F4758A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4224 29.7949C26.4374 29.7651 26.446 29.7322 26.4475 29.6986C26.449 29.665 26.4433 29.6315 26.431 29.6003C26.4186 29.5692 26.3999 29.5413 26.376 29.5185C26.3521 29.4958 26.3237 29.4787 26.2928 29.4685C26.2312 29.4422 26.1623 29.4415 26.1002 29.4666C26.0382 29.4916 25.9878 29.5404 25.9595 29.6029C25.9398 29.6694 25.944 29.7409 25.9712 29.8045C25.9984 29.868 26.0469 29.9192 26.1076 29.9486C26.1691 29.968 26.2354 29.963 26.2936 29.9346C26.3517 29.9062 26.3976 29.8564 26.4224 29.7949Z",
                              fill: "#F4768B"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4244 29.7949C26.4394 29.7651 26.448 29.7322 26.4494 29.6986C26.4509 29.665 26.4453 29.6315 26.4329 29.6003C26.4206 29.5692 26.4018 29.5413 26.378 29.5185C26.3541 29.4957 26.3256 29.4787 26.2947 29.4685C26.2331 29.4422 26.1642 29.4415 26.1021 29.4666C26.0401 29.4916 25.9897 29.5404 25.9614 29.6029C25.9497 29.6344 25.9443 29.668 25.9455 29.7017C25.9466 29.7354 25.9544 29.7684 25.9682 29.799C25.9821 29.8295 26.0017 29.8567 26.026 29.8791C26.0503 29.9015 26.0787 29.9186 26.1095 29.9293C26.1685 29.9548 26.2348 29.955 26.2938 29.9298C26.3528 29.9045 26.3998 29.856 26.4244 29.7949Z",
                              fill: "#F4778B"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4239 29.795C26.4361 29.7648 26.4424 29.7323 26.4425 29.6996C26.4425 29.6668 26.4364 29.6343 26.4243 29.604C26.4123 29.5737 26.3946 29.5461 26.3723 29.5229C26.35 29.4996 26.3235 29.4812 26.2943 29.4686C26.2651 29.456 26.2338 29.4494 26.2022 29.4494C26.1706 29.4493 26.1393 29.4557 26.11 29.4682C26.0808 29.4807 26.0542 29.499 26.0318 29.5222C26.0094 29.5453 25.9916 29.5728 25.9795 29.603C25.9673 29.6333 25.961 29.6657 25.9609 29.6985C25.9609 29.7313 25.967 29.7638 25.9791 29.7941C25.9911 29.8244 26.0088 29.852 26.0311 29.8752C26.0534 29.8984 26.0799 29.9169 26.1091 29.9295C26.168 29.9549 26.2343 29.9551 26.2934 29.9299C26.3524 29.9047 26.3994 29.8561 26.4239 29.795Z",
                              fill: "#F4788C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4228 29.7942C26.4428 29.7327 26.4407 29.6659 26.4169 29.6059C26.3931 29.5459 26.3491 29.4968 26.2932 29.4678C26.2644 29.4522 26.2327 29.4433 26.2003 29.4418C26.1679 29.4402 26.1356 29.4461 26.1056 29.4589C26.0756 29.4717 26.0487 29.4911 26.0267 29.5159C26.0047 29.5407 25.9883 29.5702 25.9784 29.6022C25.9634 29.632 25.9548 29.6649 25.9534 29.6985C25.9519 29.7321 25.9575 29.7657 25.9699 29.7968C25.9822 29.8279 26.001 29.8558 26.0248 29.8786C26.0487 29.9014 26.0771 29.9185 26.108 29.9286C26.1669 29.9541 26.2332 29.9543 26.2923 29.929C26.3513 29.9038 26.3982 29.8553 26.4228 29.7942Z",
                              fill: "#F4798D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4229 29.7942C26.4393 29.7326 26.4354 29.6671 26.412 29.608C26.3885 29.5489 26.3467 29.4996 26.2932 29.4678C26.2645 29.4522 26.2328 29.4433 26.2004 29.4418C26.168 29.4402 26.1356 29.4461 26.1056 29.4589C26.0756 29.4717 26.0487 29.4911 26.0267 29.5159C26.0047 29.5407 25.9883 29.5702 25.9784 29.6022C25.9634 29.632 25.9548 29.6649 25.9534 29.6985C25.9519 29.7321 25.9575 29.7657 25.9699 29.7968C25.9822 29.8279 26.001 29.8558 26.0248 29.8786C26.0487 29.9014 26.0771 29.9185 26.108 29.9286C26.167 29.9541 26.2333 29.9543 26.2923 29.929C26.3514 29.9038 26.3983 29.8553 26.4229 29.7942Z",
                              fill: "#F47A8E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4229 29.7942C26.4393 29.7326 26.4354 29.6671 26.412 29.608C26.3885 29.5489 26.3467 29.4996 26.2932 29.4678C26.2645 29.4522 26.2328 29.4433 26.2004 29.4418C26.168 29.4402 26.1356 29.4461 26.1056 29.4589C26.0756 29.4717 26.0487 29.4911 26.0267 29.5159C26.0047 29.5407 25.9883 29.5702 25.9784 29.6022C25.9634 29.632 25.9548 29.6649 25.9534 29.6985C25.9519 29.7321 25.9575 29.7657 25.9699 29.7968C25.9822 29.8279 26.001 29.8558 26.0248 29.8786C26.0487 29.9014 26.0771 29.9185 26.108 29.9286C26.167 29.9541 26.2333 29.9543 26.2923 29.929C26.3514 29.9038 26.3983 29.8553 26.4229 29.7942Z",
                              fill: "#F47B8F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4229 29.795C26.4393 29.7334 26.4354 29.6679 26.412 29.6088C26.3885 29.5497 26.3467 29.5004 26.2932 29.4686C26.2641 29.456 26.2328 29.4494 26.2012 29.4494C26.1696 29.4493 26.1382 29.4557 26.109 29.4682C26.0798 29.4807 26.0532 29.499 26.0308 29.5222C26.0084 29.5453 25.9906 29.5728 25.9784 29.603C25.9634 29.6328 25.9548 29.6657 25.9534 29.6993C25.9519 29.7329 25.9575 29.7665 25.9699 29.7976C25.9822 29.8287 26.001 29.8566 26.0248 29.8794C26.0487 29.9022 26.0771 29.9193 26.108 29.9295C26.167 29.9549 26.2333 29.9551 26.2923 29.9299C26.3514 29.9047 26.3983 29.8561 26.4229 29.795Z",
                              fill: "#F47C90"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4219 29.7957C26.4477 29.7369 26.4505 29.6701 26.4298 29.6093C26.409 29.5484 26.3664 29.4982 26.3108 29.4693C26.2515 29.4485 26.187 29.4506 26.1291 29.4753C26.0713 29.5001 26.024 29.5457 25.996 29.6037C25.981 29.6335 25.9724 29.6664 25.9709 29.7C25.9695 29.7336 25.9751 29.7671 25.9874 29.7982C25.9998 29.8294 26.0186 29.8573 26.0425 29.8801C26.0663 29.9028 26.0947 29.9199 26.1256 29.9301C26.153 29.9458 26.1835 29.9547 26.2148 29.9562C26.246 29.9577 26.2771 29.9517 26.3058 29.9387C26.3344 29.9257 26.3598 29.9061 26.3799 29.8813C26.4001 29.8565 26.4144 29.8272 26.4219 29.7957Z",
                              fill: "#F47D91"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4219 29.7957C26.4477 29.7369 26.4505 29.6701 26.4298 29.6093C26.409 29.5484 26.3664 29.4982 26.3108 29.4693C26.2515 29.4485 26.187 29.4506 26.1291 29.4753C26.0713 29.5001 26.024 29.5457 25.996 29.6037C25.981 29.6335 25.9724 29.6664 25.9709 29.7C25.9695 29.7336 25.9751 29.7671 25.9874 29.7982C25.9998 29.8294 26.0186 29.8573 26.0425 29.8801C26.0663 29.9028 26.0947 29.9199 26.1256 29.9301C26.153 29.9458 26.1835 29.9547 26.2148 29.9562C26.246 29.9577 26.2771 29.9517 26.3058 29.9387C26.3344 29.9257 26.3598 29.9061 26.3799 29.8813C26.4001 29.8565 26.4144 29.8272 26.4219 29.7957Z",
                              fill: "#F47E91"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4229 29.7947C26.4351 29.7645 26.4414 29.7321 26.4415 29.6993C26.4415 29.6665 26.4354 29.634 26.4233 29.6037C26.4113 29.5734 26.3936 29.5458 26.3713 29.5226C26.349 29.4993 26.3225 29.4809 26.2933 29.4683C26.2365 29.4526 26.1763 29.4573 26.1225 29.4817C26.0686 29.5062 26.0244 29.5488 25.997 29.6028C25.9725 29.6639 25.9724 29.7326 25.9967 29.7938C26.021 29.855 26.0677 29.9037 26.1266 29.9292C26.1833 29.9489 26.245 29.9461 26.2998 29.9213C26.3546 29.8964 26.3985 29.8513 26.4229 29.7947Z",
                              fill: "#F47F92"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.422 29.7957C26.4371 29.7673 26.4457 29.7357 26.4472 29.7034C26.4486 29.671 26.4428 29.6387 26.4303 29.6089C26.4177 29.5792 26.3988 29.5529 26.3749 29.532C26.351 29.5111 26.3227 29.4963 26.2923 29.4885C26.2656 29.4757 26.2367 29.4684 26.2073 29.4673C26.1779 29.4662 26.1486 29.4711 26.121 29.4818C26.0934 29.4925 26.0682 29.5088 26.0467 29.5298C26.0253 29.5507 26.008 29.5758 25.996 29.6037C25.976 29.6652 25.9781 29.7321 26.002 29.7921C26.0258 29.8521 26.0697 29.9011 26.1257 29.9302C26.1823 29.9499 26.2441 29.9471 26.2988 29.9222C26.3536 29.8974 26.3975 29.8523 26.422 29.7957Z",
                              fill: "#F48093"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.422 29.7957C26.4371 29.7673 26.4457 29.7357 26.4472 29.7034C26.4486 29.671 26.4428 29.6387 26.4303 29.6089C26.4177 29.5792 26.3988 29.5529 26.3749 29.532C26.351 29.5111 26.3227 29.4963 26.2923 29.4885C26.2656 29.4757 26.2367 29.4684 26.2073 29.4673C26.1779 29.4662 26.1486 29.4711 26.121 29.4818C26.0934 29.4925 26.0682 29.5088 26.0467 29.5298C26.0253 29.5507 26.008 29.5758 25.996 29.6037C25.976 29.6652 25.9781 29.7321 26.002 29.7921C26.0258 29.8521 26.0697 29.9011 26.1257 29.9302C26.1823 29.9499 26.2441 29.9471 26.2988 29.9222C26.3536 29.8974 26.3975 29.8523 26.422 29.7957Z",
                              fill: "#F58194"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4229 29.7957C26.438 29.7673 26.4466 29.7357 26.4481 29.7034C26.4495 29.671 26.4437 29.6387 26.4312 29.6089C26.4186 29.5792 26.3997 29.5529 26.3758 29.532C26.3519 29.5111 26.3236 29.4963 26.2932 29.4885C26.2665 29.4757 26.2376 29.4684 26.2082 29.4673C26.1787 29.4662 26.1494 29.4711 26.1219 29.4818C26.0943 29.4925 26.069 29.5088 26.0476 29.5298C26.0261 29.5507 26.0089 29.5758 25.9969 29.6037C25.9779 29.6625 25.9806 29.7265 26.0046 29.7833C26.0285 29.8401 26.072 29.8855 26.1265 29.9109C26.1533 29.9238 26.1822 29.931 26.2116 29.9321C26.241 29.9333 26.2704 29.9283 26.298 29.9176C26.3255 29.9069 26.3508 29.8906 26.3722 29.8697C26.3937 29.8487 26.4109 29.8236 26.4229 29.7957Z",
                              fill: "#F58295"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4217 29.7948C26.4336 29.766 26.4396 29.7349 26.4395 29.7035C26.4393 29.6721 26.433 29.641 26.4209 29.6122C26.4087 29.5835 26.391 29.5575 26.3689 29.5361C26.3467 29.5147 26.3206 29.4982 26.2921 29.4876C26.2667 29.4751 26.2391 29.4682 26.211 29.4672C26.183 29.4663 26.155 29.4714 26.1289 29.4822C26.1028 29.4931 26.0792 29.5094 26.0595 29.5301C26.0398 29.5509 26.0244 29.5756 26.0143 29.6029C25.999 29.63 25.9897 29.6603 25.9871 29.6916C25.9845 29.7229 25.9886 29.7545 25.9993 29.7839C26.0099 29.8134 26.0268 29.8399 26.0486 29.8618C26.0704 29.8836 26.0967 29.9001 26.1254 29.9101C26.1521 29.9229 26.1811 29.9301 26.2105 29.9313C26.2399 29.9324 26.2693 29.9275 26.2968 29.9168C26.3244 29.906 26.3496 29.8897 26.3711 29.8688C26.3925 29.8479 26.4097 29.8227 26.4217 29.7948Z",
                              fill: "#F58396"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4217 29.7948C26.4369 29.736 26.4323 29.6735 26.4088 29.6177C26.3852 29.5619 26.344 29.516 26.2921 29.4876C26.2667 29.4751 26.2391 29.4682 26.211 29.4672C26.1829 29.4663 26.155 29.4714 26.1289 29.4822C26.1028 29.4931 26.0792 29.5094 26.0595 29.5301C26.0398 29.5509 26.0244 29.5756 26.0143 29.6029C25.999 29.63 25.9897 29.6603 25.9871 29.6916C25.9845 29.7229 25.9886 29.7545 25.9993 29.7839C26.0099 29.8134 26.0268 29.8399 26.0486 29.8618C26.0704 29.8836 26.0967 29.9001 26.1254 29.9101C26.1521 29.9229 26.181 29.9301 26.2105 29.9313C26.2399 29.9324 26.2692 29.9275 26.2968 29.9168C26.3244 29.906 26.3496 29.8897 26.3711 29.8688C26.3925 29.8479 26.4097 29.8227 26.4217 29.7948Z",
                              fill: "#F58497"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4217 29.7948C26.4369 29.736 26.4323 29.6735 26.4088 29.6177C26.3852 29.5619 26.344 29.516 26.2921 29.4876C26.2667 29.4751 26.2391 29.4682 26.211 29.4672C26.1829 29.4663 26.155 29.4714 26.1289 29.4822C26.1028 29.4931 26.0792 29.5094 26.0595 29.5301C26.0398 29.5509 26.0244 29.5756 26.0143 29.6029C25.999 29.63 25.9897 29.6603 25.9871 29.6916C25.9845 29.7229 25.9886 29.7545 25.9993 29.7839C26.0099 29.8134 26.0268 29.8399 26.0486 29.8618C26.0704 29.8836 26.0967 29.9001 26.1254 29.9101C26.1521 29.9229 26.181 29.9301 26.2105 29.9313C26.2399 29.9324 26.2692 29.9275 26.2968 29.9168C26.3244 29.906 26.3496 29.8897 26.3711 29.8688C26.3925 29.8479 26.4097 29.8227 26.4217 29.7948Z",
                              fill: "#F58597"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4243 29.795C26.4395 29.7361 26.4349 29.6736 26.4114 29.6178C26.3878 29.562 26.3467 29.5162 26.2947 29.4878C26.2427 29.474 26.1877 29.4802 26.1398 29.5052C26.092 29.5302 26.0544 29.5723 26.0341 29.6238C26.0138 29.6753 26.0122 29.7326 26.0294 29.7852C26.0467 29.8379 26.0817 29.8822 26.128 29.9102C26.1547 29.923 26.1837 29.9303 26.2131 29.9314C26.2425 29.9325 26.2719 29.9276 26.2994 29.9169C26.327 29.9062 26.3522 29.8899 26.3737 29.8689C26.3951 29.848 26.4123 29.8229 26.4243 29.795Z",
                              fill: "#F58698"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4233 29.7959C26.4385 29.737 26.4339 29.6746 26.4104 29.6187C26.3868 29.5629 26.3456 29.5171 26.2936 29.4887C26.2671 29.4765 26.2383 29.4704 26.2093 29.4707C26.1803 29.4711 26.1516 29.4778 26.1253 29.4906C26.099 29.5033 26.0757 29.5217 26.0568 29.5445C26.0379 29.5674 26.024 29.5942 26.0159 29.6231C26.0038 29.6494 25.9971 29.678 25.9962 29.7071C25.9953 29.7362 26.0002 29.7653 26.0107 29.7923C26.0211 29.8194 26.0368 29.8439 26.0568 29.8644C26.0769 29.8848 26.1007 29.9007 26.127 29.9111C26.1537 29.924 26.1826 29.9312 26.212 29.9323C26.2415 29.9335 26.2708 29.9285 26.2984 29.9178C26.326 29.9071 26.3512 29.8908 26.3727 29.8699C26.3941 29.8489 26.4113 29.8238 26.4233 29.7959Z",
                              fill: "#F58799"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4223 29.795C26.4346 29.7673 26.4415 29.7373 26.4426 29.7068C26.4438 29.6763 26.439 29.6459 26.4286 29.6173C26.4183 29.5887 26.4026 29.5625 26.3825 29.5403C26.3623 29.518 26.338 29.5002 26.3112 29.4878C26.2571 29.4689 26.1981 29.4723 26.1464 29.4973C26.0947 29.5224 26.0542 29.567 26.0334 29.6221C26.0214 29.6485 26.0147 29.6771 26.0138 29.7062C26.0129 29.7353 26.0178 29.7643 26.0282 29.7914C26.0387 29.8184 26.0544 29.843 26.0744 29.8634C26.0944 29.8839 26.1183 29.8998 26.1445 29.9102C26.1699 29.9227 26.1975 29.9296 26.2256 29.9306C26.2536 29.9315 26.2816 29.9264 26.3077 29.9156C26.3337 29.9047 26.3574 29.8884 26.3771 29.8677C26.3968 29.8469 26.4122 29.8222 26.4223 29.795Z",
                              fill: "#F5889A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4214 29.795C26.4338 29.7673 26.4407 29.7373 26.4418 29.7068C26.4429 29.6763 26.4382 29.6459 26.4278 29.6173C26.4175 29.5887 26.4018 29.5625 26.3817 29.5403C26.3615 29.518 26.3372 29.5002 26.3103 29.4878C26.2584 29.474 26.2034 29.4802 26.1555 29.5052C26.1076 29.5302 26.0701 29.5723 26.0498 29.6238C26.0295 29.6753 26.0278 29.7326 26.045 29.7853C26.0623 29.8379 26.0973 29.8822 26.1437 29.9102C26.1691 29.9227 26.1966 29.9297 26.2247 29.9306C26.2528 29.9315 26.2807 29.9264 26.3068 29.9156C26.3329 29.9048 26.3566 29.8885 26.3763 29.8677C26.396 29.847 26.4114 29.8222 26.4214 29.795Z",
                              fill: "#F5899B"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4225 29.795C26.4349 29.7673 26.4418 29.7373 26.443 29.7068C26.4441 29.6763 26.4393 29.6459 26.4289 29.6173C26.4186 29.5887 26.4029 29.5625 26.3828 29.5403C26.3626 29.5181 26.3383 29.5002 26.3114 29.4878C26.2573 29.4689 26.1983 29.4723 26.1466 29.4973C26.0949 29.5224 26.0544 29.5671 26.0336 29.6222C26.0142 29.6759 26.0149 29.7352 26.0354 29.7885C26.056 29.8418 26.095 29.8852 26.1447 29.9102C26.1966 29.9303 26.2538 29.9296 26.3052 29.9083C26.3565 29.887 26.3984 29.8466 26.4225 29.795Z",
                              fill: "#F58A9C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4224 29.7953C26.4345 29.769 26.4412 29.7404 26.4421 29.7112C26.443 29.6821 26.438 29.6531 26.4276 29.6261C26.4172 29.599 26.4014 29.5745 26.3814 29.5541C26.3614 29.5336 26.3375 29.5176 26.3113 29.5072C26.2859 29.4947 26.2583 29.4878 26.2302 29.4868C26.2021 29.4859 26.1741 29.491 26.148 29.5018C26.122 29.5127 26.0983 29.529 26.0786 29.5497C26.0589 29.5705 26.0435 29.5952 26.0335 29.6224C26.018 29.6764 26.0205 29.7342 26.0407 29.7865C26.0608 29.8388 26.0975 29.8825 26.1446 29.9105C26.1964 29.9306 26.2536 29.9299 26.305 29.9086C26.3564 29.8873 26.3982 29.8469 26.4224 29.7953Z",
                              fill: "#F58B9D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4224 29.7953C26.4345 29.769 26.4412 29.7404 26.4421 29.7112C26.443 29.6821 26.438 29.6531 26.4276 29.6261C26.4172 29.599 26.4014 29.5745 26.3814 29.5541C26.3614 29.5336 26.3375 29.5176 26.3113 29.5072C26.2859 29.4947 26.2583 29.4878 26.2302 29.4868C26.2021 29.4859 26.1741 29.491 26.148 29.5018C26.122 29.5127 26.0983 29.529 26.0786 29.5497C26.0589 29.5705 26.0435 29.5952 26.0335 29.6224C26.018 29.6764 26.0205 29.7342 26.0407 29.7865C26.0608 29.8388 26.0975 29.8825 26.1446 29.9105C26.1964 29.9306 26.2536 29.9299 26.305 29.9086C26.3564 29.8873 26.3982 29.8469 26.4224 29.7953Z",
                              fill: "#F58C9D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.423 29.7761C26.4415 29.7251 26.4403 29.6686 26.4196 29.6185C26.3989 29.5684 26.3603 29.5285 26.3119 29.5072C26.2866 29.4947 26.259 29.4878 26.2309 29.4868C26.2028 29.4859 26.1748 29.491 26.1487 29.5018C26.1227 29.5127 26.099 29.529 26.0793 29.5497C26.0596 29.5705 26.0443 29.5952 26.0342 29.6224C26.0199 29.6737 26.0231 29.7285 26.0434 29.7775C26.0636 29.8265 26.0996 29.8667 26.1453 29.8913C26.1707 29.9038 26.1983 29.9108 26.2263 29.9117C26.2544 29.9126 26.2824 29.9075 26.3084 29.8967C26.3345 29.8859 26.3582 29.8696 26.3779 29.8488C26.3976 29.8281 26.413 29.8033 26.423 29.7761Z",
                              fill: "#F68D9E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.423 29.7761C26.4415 29.7251 26.4403 29.6686 26.4196 29.6185C26.3989 29.5684 26.3603 29.5285 26.3119 29.5072C26.2866 29.4947 26.259 29.4878 26.2309 29.4868C26.2028 29.4859 26.1748 29.491 26.1487 29.5018C26.1227 29.5127 26.099 29.529 26.0793 29.5497C26.0596 29.5705 26.0443 29.5952 26.0342 29.6224C26.0199 29.6737 26.0231 29.7285 26.0434 29.7775C26.0636 29.8265 26.0996 29.8667 26.1453 29.8913C26.1707 29.9038 26.1983 29.9108 26.2263 29.9117C26.2544 29.9126 26.2824 29.9075 26.3084 29.8967C26.3345 29.8859 26.3582 29.8696 26.3779 29.8488C26.3976 29.8281 26.413 29.8033 26.423 29.7761Z",
                              fill: "#F68E9F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4223 29.7765C26.4366 29.7253 26.4334 29.6705 26.4132 29.6214C26.3929 29.5724 26.3569 29.5322 26.3112 29.5076C26.2872 29.4952 26.2608 29.4885 26.234 29.4877C26.2072 29.4869 26.1806 29.4921 26.1559 29.5031C26.1313 29.5141 26.1092 29.5305 26.0913 29.5512C26.0733 29.5718 26.0599 29.5963 26.052 29.6228C26.0438 29.6707 26.0518 29.72 26.0745 29.7625C26.0973 29.8049 26.1334 29.8379 26.1769 29.8559C26.2204 29.874 26.2685 29.8759 26.3132 29.8614C26.3579 29.847 26.3964 29.817 26.4223 29.7765Z",
                              fill: "#F68FA0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4229 29.7765C26.4372 29.7253 26.434 29.6705 26.4137 29.6214C26.3935 29.5724 26.3574 29.5322 26.3118 29.5076C26.2878 29.4952 26.2614 29.4885 26.2346 29.4877C26.2078 29.4869 26.1811 29.4921 26.1565 29.5031C26.1318 29.5141 26.1098 29.5305 26.0918 29.5512C26.0739 29.5718 26.0604 29.5963 26.0525 29.6228C26.0406 29.6478 26.034 29.6751 26.0333 29.7029C26.0325 29.7307 26.0376 29.7583 26.0481 29.7839C26.0587 29.8095 26.0745 29.8324 26.0945 29.851C26.1144 29.8696 26.138 29.8835 26.1636 29.8917C26.1876 29.9041 26.214 29.9109 26.2408 29.9117C26.2676 29.9124 26.2943 29.9072 26.319 29.8962C26.3436 29.8853 26.3657 29.8689 26.3836 29.8482C26.4016 29.8275 26.415 29.8031 26.4229 29.7765Z",
                              fill: "#F690A1"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4225 29.7765C26.4368 29.7253 26.4336 29.6705 26.4133 29.6214C26.3931 29.5724 26.357 29.5322 26.3114 29.5076C26.2873 29.4952 26.261 29.4885 26.2342 29.4877C26.2074 29.4869 26.1807 29.4921 26.1561 29.5031C26.1314 29.5141 26.1094 29.5305 26.0914 29.5512C26.0735 29.5718 26.06 29.5963 26.0521 29.6228C26.0336 29.6739 26.0348 29.7303 26.0555 29.7804C26.0763 29.8306 26.1148 29.8705 26.1632 29.8917C26.2124 29.9109 26.2669 29.9096 26.3152 29.8882C26.3635 29.8667 26.402 29.8267 26.4225 29.7765Z",
                              fill: "#F691A2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4225 29.7765C26.4368 29.7253 26.4336 29.6705 26.4133 29.6214C26.3931 29.5724 26.357 29.5322 26.3114 29.5076C26.2873 29.4952 26.261 29.4885 26.2342 29.4877C26.2074 29.4869 26.1807 29.4921 26.1561 29.5031C26.1314 29.5141 26.1094 29.5305 26.0914 29.5512C26.0735 29.5718 26.06 29.5963 26.0521 29.6228C26.0336 29.6739 26.0348 29.7303 26.0555 29.7804C26.0763 29.8306 26.1148 29.8705 26.1632 29.8917C26.2124 29.9109 26.2669 29.9096 26.3152 29.8882C26.3635 29.8667 26.402 29.8267 26.4225 29.7765Z",
                              fill: "#F692A3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4234 29.7759C26.4432 29.7272 26.4446 29.6725 26.4275 29.6228C26.4104 29.573 26.3759 29.5317 26.3308 29.507C26.2816 29.4879 26.2272 29.4892 26.1789 29.5106C26.1306 29.5321 26.0921 29.5721 26.0716 29.6222C26.0531 29.6733 26.0544 29.7297 26.0751 29.7798C26.0958 29.8299 26.1343 29.8698 26.1827 29.8911C26.2058 29.9002 26.2304 29.9045 26.2551 29.9036C26.2798 29.9028 26.304 29.8968 26.3264 29.8861C26.3488 29.8754 26.369 29.8601 26.3856 29.8412C26.4023 29.8222 26.4151 29.8 26.4234 29.7759Z",
                              fill: "#F693A3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4234 29.7759C26.4432 29.7272 26.4446 29.6725 26.4275 29.6228C26.4104 29.573 26.3759 29.5317 26.3308 29.507C26.2816 29.4879 26.2272 29.4892 26.1789 29.5106C26.1306 29.5321 26.0921 29.5721 26.0716 29.6222C26.0531 29.6733 26.0544 29.7297 26.0751 29.7798C26.0958 29.8299 26.1343 29.8698 26.1827 29.8911C26.2058 29.9002 26.2304 29.9045 26.2551 29.9036C26.2798 29.9028 26.304 29.8968 26.3264 29.8861C26.3488 29.8754 26.369 29.8601 26.3856 29.8412C26.4023 29.8222 26.4151 29.8 26.4234 29.7759Z",
                              fill: "#F694A4"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4234 29.7759C26.4432 29.7272 26.4446 29.6725 26.4275 29.6228C26.4104 29.573 26.3759 29.5317 26.3308 29.507C26.2816 29.4879 26.2272 29.4892 26.1789 29.5106C26.1306 29.5321 26.0921 29.5721 26.0716 29.6222C26.0531 29.6733 26.0544 29.7297 26.0751 29.7798C26.0958 29.8299 26.1343 29.8698 26.1827 29.8911C26.2058 29.9002 26.2304 29.9045 26.2551 29.9036C26.2798 29.9028 26.304 29.8968 26.3264 29.8861C26.3488 29.8754 26.369 29.8601 26.3856 29.8412C26.4023 29.8222 26.4151 29.8 26.4234 29.7759Z",
                              fill: "#F695A5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4231 29.776C26.4427 29.7276 26.443 29.6731 26.4239 29.6245C26.4048 29.5759 26.3679 29.5371 26.3213 29.5167C26.2746 29.4964 26.2221 29.496 26.1752 29.5159C26.1283 29.5357 26.091 29.5739 26.0713 29.6223C26.057 29.6736 26.0602 29.7284 26.0805 29.7774C26.1007 29.8264 26.1367 29.8666 26.1824 29.8912C26.2055 29.9004 26.2301 29.9046 26.2548 29.9037C26.2795 29.9029 26.3037 29.897 26.3261 29.8862C26.3486 29.8755 26.3687 29.8602 26.3854 29.8413C26.402 29.8223 26.4148 29.8001 26.4231 29.776Z",
                              fill: "#F696A6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4231 29.776C26.4427 29.7276 26.443 29.6731 26.4239 29.6245C26.4048 29.5759 26.3679 29.5371 26.3213 29.5167C26.2746 29.4964 26.2221 29.496 26.1752 29.5159C26.1283 29.5357 26.091 29.5739 26.0713 29.6223C26.057 29.6736 26.0602 29.7284 26.0805 29.7774C26.1007 29.8264 26.1367 29.8666 26.1824 29.8912C26.2055 29.9004 26.2301 29.9046 26.2548 29.9037C26.2795 29.9029 26.3037 29.897 26.3261 29.8862C26.3486 29.8755 26.3687 29.8602 26.3854 29.8413C26.402 29.8223 26.4148 29.8001 26.4231 29.776Z",
                              fill: "#F697A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4226 29.7757C26.4415 29.7298 26.4424 29.678 26.4251 29.6314C26.4078 29.5848 26.3738 29.547 26.3301 29.526C26.2936 29.4948 26.2478 29.4778 26.2005 29.4778C26.1532 29.4778 26.1073 29.4948 26.0708 29.526C26.062 29.55 26.0579 29.5755 26.0587 29.6011C26.0595 29.6267 26.0653 29.6519 26.0756 29.6751C26.086 29.6984 26.1007 29.7193 26.119 29.7366C26.1372 29.7538 26.1586 29.7672 26.1819 29.7757C26.1975 29.7926 26.2162 29.8059 26.2368 29.8151C26.2575 29.8243 26.2798 29.829 26.3023 29.829C26.3248 29.829 26.347 29.8243 26.3677 29.8151C26.3884 29.8059 26.4071 29.7926 26.4226 29.7757Z",
                              fill: "#F698A8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4226 29.7757C26.4415 29.7298 26.4424 29.678 26.4251 29.6314C26.4078 29.5848 26.3738 29.547 26.3301 29.526C26.2936 29.4948 26.2478 29.4778 26.2005 29.4778C26.1532 29.4778 26.1073 29.4948 26.0708 29.526C26.062 29.55 26.0579 29.5755 26.0587 29.6011C26.0595 29.6267 26.0653 29.6519 26.0756 29.6751C26.086 29.6984 26.1007 29.7193 26.119 29.7366C26.1372 29.7538 26.1586 29.7672 26.1819 29.7757C26.1975 29.7926 26.2162 29.8059 26.2368 29.8151C26.2575 29.8243 26.2798 29.829 26.3023 29.829C26.3248 29.829 26.347 29.8243 26.3677 29.8151C26.3884 29.8059 26.4071 29.7926 26.4226 29.7757Z",
                              fill: "#F799A9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4227 29.7763C26.4315 29.7524 26.4357 29.7268 26.4348 29.7012C26.434 29.6756 26.4282 29.6504 26.4179 29.6271C26.4075 29.6039 26.3928 29.583 26.3745 29.5658C26.3563 29.5485 26.3349 29.5352 26.3116 29.5266C26.2811 29.4983 26.2415 29.4826 26.2005 29.4826C26.1596 29.4826 26.12 29.4983 26.0895 29.5266C26.079 29.5704 26.0836 29.6167 26.1028 29.6573C26.1219 29.6979 26.1542 29.7302 26.1939 29.7485C26.2337 29.7669 26.2784 29.7701 26.3203 29.7576C26.3621 29.7451 26.3984 29.7177 26.4227 29.6802V29.7763Z",
                              fill: "#F79AA9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4227 29.7763C26.4315 29.7524 26.4357 29.7268 26.4348 29.7012C26.434 29.6756 26.4282 29.6504 26.4179 29.6271C26.4075 29.6039 26.3928 29.583 26.3745 29.5658C26.3563 29.5485 26.3349 29.5352 26.3116 29.5266C26.2811 29.4983 26.2415 29.4826 26.2005 29.4826C26.1596 29.4826 26.12 29.4983 26.0895 29.5266C26.079 29.5704 26.0836 29.6167 26.1028 29.6573C26.1219 29.6979 26.1542 29.7302 26.1939 29.7485C26.2337 29.7669 26.2784 29.7701 26.3203 29.7576C26.3621 29.7451 26.3984 29.7177 26.4227 29.6802V29.7763Z",
                              fill: "#F79BAA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4227 29.7763C26.4315 29.7524 26.4357 29.7268 26.4348 29.7012C26.434 29.6756 26.4282 29.6504 26.4179 29.6271C26.4075 29.6039 26.3928 29.583 26.3745 29.5658C26.3563 29.5485 26.3349 29.5352 26.3116 29.5266C26.2811 29.4983 26.2415 29.4826 26.2005 29.4826C26.1596 29.4826 26.12 29.4983 26.0895 29.5266C26.079 29.5704 26.0836 29.6167 26.1028 29.6573C26.1219 29.6979 26.1542 29.7302 26.1939 29.7485C26.2337 29.7669 26.2784 29.7701 26.3203 29.7576C26.3621 29.7451 26.3984 29.7177 26.4227 29.6802V29.7763Z",
                              fill: "#F79CAB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4227 29.7763C26.4315 29.7524 26.4357 29.7268 26.4348 29.7012C26.434 29.6756 26.4282 29.6504 26.4179 29.6271C26.4075 29.6039 26.3928 29.583 26.3745 29.5658C26.3563 29.5485 26.3349 29.5352 26.3116 29.5266C26.2811 29.4983 26.2415 29.4826 26.2005 29.4826C26.1596 29.4826 26.12 29.4983 26.0895 29.5266C26.079 29.5704 26.0836 29.6167 26.1028 29.6573C26.1219 29.6979 26.1542 29.7302 26.1939 29.7485C26.2337 29.7669 26.2784 29.7701 26.3203 29.7576C26.3621 29.7451 26.3984 29.7177 26.4227 29.6802V29.7763Z",
                              fill: "#F79DAC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4229 29.7766C26.4516 29.7418 26.4673 29.6976 26.4673 29.6518C26.4673 29.606 26.4516 29.5618 26.4229 29.527C26.3908 29.502 26.3519 29.4886 26.3118 29.4886C26.2717 29.4886 26.2328 29.502 26.2007 29.527C26.172 29.5618 26.1563 29.606 26.1562 29.6518C26.1563 29.6976 26.172 29.7418 26.2007 29.7766C26.2313 29.805 26.2708 29.8206 26.3118 29.8206C26.3528 29.8206 26.3923 29.805 26.4229 29.7766Z",
                              fill: "#F79EAD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4229 29.7766C26.4516 29.7418 26.4673 29.6976 26.4673 29.6518C26.4673 29.606 26.4516 29.5618 26.4229 29.527C26.3908 29.502 26.3519 29.4886 26.3118 29.4886C26.2717 29.4886 26.2328 29.502 26.2007 29.527C26.172 29.5618 26.1563 29.606 26.1562 29.6518C26.1563 29.6976 26.172 29.7418 26.2007 29.7766C26.2313 29.805 26.2708 29.8206 26.3118 29.8206C26.3528 29.8206 26.3923 29.805 26.4229 29.7766Z",
                              fill: "#F79FAE"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4229 29.7766C26.4516 29.7418 26.4673 29.6976 26.4673 29.6518C26.4673 29.606 26.4516 29.5618 26.4229 29.527C26.3908 29.502 26.3519 29.4886 26.3118 29.4886C26.2717 29.4886 26.2328 29.502 26.2007 29.527C26.172 29.5618 26.1563 29.606 26.1562 29.6518C26.1563 29.6976 26.172 29.7418 26.2007 29.7766C26.2313 29.805 26.2708 29.8206 26.3118 29.8206C26.3528 29.8206 26.3923 29.805 26.4229 29.7766Z",
                              fill: "#F7A0AF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4233 29.7766C26.4506 29.7449 26.4657 29.7039 26.4657 29.6614C26.4657 29.6189 26.4506 29.5779 26.4233 29.5462C26.4027 29.5368 26.3804 29.5319 26.358 29.5317C26.3355 29.5315 26.3132 29.536 26.2924 29.545C26.2717 29.5539 26.2529 29.5672 26.2372 29.5839C26.2215 29.6006 26.2092 29.6204 26.2011 29.6422C26.1771 29.6754 26.1641 29.7158 26.1641 29.7574C26.1641 29.7989 26.1771 29.8393 26.2011 29.8726C26.2431 29.8867 26.2885 29.8847 26.3293 29.8671C26.37 29.8495 26.4033 29.8174 26.4233 29.7766Z",
                              fill: "#F7A1AF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4233 29.7766C26.4506 29.7449 26.4657 29.7039 26.4657 29.6614C26.4657 29.6189 26.4506 29.5779 26.4233 29.5462C26.4027 29.5368 26.3804 29.5319 26.358 29.5317C26.3355 29.5315 26.3132 29.536 26.2924 29.545C26.2717 29.5539 26.2529 29.5672 26.2372 29.5839C26.2215 29.6006 26.2092 29.6204 26.2011 29.6422C26.1771 29.6754 26.1641 29.7158 26.1641 29.7574C26.1641 29.7989 26.1771 29.8393 26.2011 29.8726C26.2431 29.8867 26.2885 29.8847 26.3293 29.8671C26.37 29.8495 26.4033 29.8174 26.4233 29.7766Z",
                              fill: "#F7A2B0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.423 29.7766C26.4503 29.7449 26.4654 29.7039 26.4654 29.6614C26.4654 29.6189 26.4503 29.5779 26.423 29.5462C26.4023 29.5368 26.3801 29.5319 26.3576 29.5317C26.3351 29.5315 26.3128 29.536 26.2921 29.545C26.2713 29.5539 26.2525 29.5672 26.2368 29.5839C26.2211 29.6006 26.2089 29.6204 26.2008 29.6422C26.1782 29.6724 26.166 29.7096 26.166 29.7478C26.166 29.786 26.1782 29.8231 26.2008 29.8534C26.2401 29.8735 26.2855 29.8767 26.3271 29.8623C26.3687 29.8479 26.4031 29.8171 26.423 29.7766Z",
                              fill: "#F7A3B1"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4226 29.7766C26.4499 29.7449 26.465 29.7039 26.465 29.6614C26.465 29.6189 26.4499 29.5779 26.4226 29.5462C26.402 29.5368 26.3798 29.5319 26.3573 29.5317C26.3348 29.5315 26.3125 29.536 26.2917 29.545C26.271 29.5539 26.2522 29.5672 26.2365 29.5839C26.2208 29.6006 26.2085 29.6204 26.2004 29.6422C26.1805 29.6735 26.1699 29.7102 26.1699 29.7478C26.1699 29.7853 26.1805 29.822 26.2004 29.8534C26.2398 29.8735 26.2851 29.8767 26.3267 29.8623C26.3683 29.8479 26.4028 29.8171 26.4226 29.7766Z",
                              fill: "#F7A4B2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.422 29.7761C26.4493 29.7444 26.4645 29.7034 26.4645 29.6609C26.4645 29.6184 26.4493 29.5773 26.422 29.5457C26.4027 29.5365 26.3817 29.5317 26.3605 29.5317C26.3393 29.5317 26.3183 29.5364 26.299 29.5455C26.2797 29.5546 26.2625 29.5679 26.2486 29.5845C26.2346 29.6011 26.2243 29.6206 26.2183 29.6417C26.1923 29.6702 26.1777 29.708 26.1777 29.7473C26.1777 29.7866 26.1923 29.8244 26.2183 29.8529C26.2555 29.8674 26.2965 29.8676 26.3338 29.8535C26.3712 29.8395 26.4025 29.812 26.422 29.7761Z",
                              fill: "#F8A5B3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4221 29.7761C26.4462 29.7429 26.4591 29.7024 26.4591 29.6609C26.4591 29.6193 26.4462 29.5789 26.4221 29.5457C26.4028 29.5365 26.3818 29.5317 26.3606 29.5317C26.3394 29.5317 26.3184 29.5364 26.2991 29.5455C26.2797 29.5546 26.2625 29.5679 26.2486 29.5845C26.2346 29.6011 26.2244 29.6206 26.2183 29.6417C26.1923 29.6702 26.1777 29.708 26.1777 29.7473C26.1777 29.7866 26.1923 29.8244 26.2183 29.8529C26.2556 29.8674 26.2965 29.8676 26.3339 29.8535C26.3713 29.8395 26.4025 29.812 26.4221 29.7761Z",
                              fill: "#F8A6B4"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.422 29.7569C26.4419 29.7255 26.4525 29.6888 26.4525 29.6513C26.4525 29.6137 26.4419 29.577 26.422 29.5457C26.4027 29.5365 26.3817 29.5317 26.3605 29.5317C26.3393 29.5317 26.3183 29.5364 26.299 29.5455C26.2797 29.5546 26.2625 29.5679 26.2485 29.5845C26.2346 29.6011 26.2243 29.6206 26.2183 29.6417C26.1923 29.6702 26.1777 29.708 26.1777 29.7473C26.1777 29.7866 26.1923 29.8243 26.2183 29.8529C26.2577 29.8659 26.3004 29.8634 26.338 29.8456C26.3757 29.8279 26.4056 29.7962 26.422 29.7569Z",
                              fill: "#F8A7B5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.422 29.7569C26.4419 29.7255 26.4525 29.6888 26.4525 29.6513C26.4525 29.6137 26.4419 29.577 26.422 29.5457C26.4027 29.5365 26.3817 29.5317 26.3605 29.5317C26.3393 29.5317 26.3183 29.5364 26.299 29.5455C26.2797 29.5546 26.2625 29.5679 26.2485 29.5845C26.2346 29.6011 26.2243 29.6206 26.2183 29.6417C26.1923 29.6702 26.1777 29.708 26.1777 29.7473C26.1777 29.7866 26.1923 29.8243 26.2183 29.8529C26.2577 29.8659 26.3004 29.8634 26.338 29.8456C26.3757 29.8279 26.4056 29.7962 26.422 29.7569Z",
                              fill: "#F8A8B5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4216 29.7568C26.4477 29.7283 26.4622 29.6905 26.4622 29.6512C26.4622 29.6119 26.4477 29.5741 26.4216 29.5456C26.4011 29.5284 26.3769 29.5166 26.3511 29.511C26.3253 29.5054 26.2986 29.5062 26.2731 29.5134C26.2477 29.5206 26.2242 29.534 26.2048 29.5525C26.1853 29.5709 26.1703 29.5938 26.161 29.6194C26.1518 29.645 26.1485 29.6726 26.1515 29.6998C26.1545 29.727 26.1637 29.753 26.1783 29.7758C26.1928 29.7986 26.2124 29.8174 26.2354 29.8308C26.2584 29.8442 26.2842 29.8517 26.3105 29.8528C26.3361 29.85 26.3604 29.8395 26.3802 29.8224C26.4 29.8053 26.4144 29.7824 26.4216 29.7568Z",
                              fill: "#F8A9B6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4222 29.7566C26.4483 29.728 26.4628 29.6902 26.4628 29.6509C26.4628 29.6117 26.4483 29.5739 26.4222 29.5453C26.3828 29.5361 26.3416 29.5405 26.3048 29.5578C26.268 29.5752 26.2377 29.6045 26.2185 29.6413C26.2097 29.6613 26.2051 29.6831 26.2051 29.7051C26.205 29.7271 26.2096 29.7488 26.2184 29.7689C26.2271 29.7889 26.2399 29.8068 26.2559 29.8212C26.272 29.8356 26.2908 29.8463 26.3111 29.8526C26.3367 29.8498 26.361 29.8392 26.3808 29.8221C26.4006 29.805 26.415 29.7822 26.4222 29.7566Z",
                              fill: "#F8AAB7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4222 29.7566C26.4483 29.728 26.4628 29.6902 26.4628 29.6509C26.4628 29.6117 26.4483 29.5739 26.4222 29.5453C26.3828 29.5361 26.3416 29.5405 26.3048 29.5578C26.268 29.5752 26.2377 29.6045 26.2185 29.6413C26.2097 29.6613 26.2051 29.6831 26.2051 29.7051C26.205 29.7271 26.2096 29.7488 26.2184 29.7689C26.2271 29.7889 26.2399 29.8068 26.2559 29.8212C26.272 29.8356 26.2908 29.8463 26.3111 29.8526C26.3367 29.8498 26.361 29.8392 26.3808 29.8221C26.4006 29.805 26.415 29.7822 26.4222 29.7566Z",
                              fill: "#F8ACB8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4222 29.757C26.4345 29.7445 26.4442 29.7296 26.4509 29.7131C26.4576 29.6966 26.461 29.6789 26.461 29.661C26.461 29.6432 26.4576 29.6254 26.4509 29.6089C26.4442 29.5925 26.4345 29.5775 26.4222 29.565C26.3947 29.538 26.3582 29.5229 26.3203 29.5229C26.2825 29.5229 26.246 29.538 26.2185 29.565C26.2097 29.585 26.2051 29.6068 26.2051 29.6288C26.205 29.6508 26.2096 29.6725 26.2184 29.6925C26.2271 29.7125 26.2399 29.7304 26.2559 29.7448C26.2719 29.7593 26.2907 29.77 26.3111 29.7763C26.3491 29.7853 26.389 29.7784 26.4222 29.757Z",
                              fill: "#F8ADB9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4211 29.7571C26.4334 29.7445 26.4432 29.7296 26.4499 29.7131C26.4566 29.6966 26.46 29.6789 26.46 29.6611C26.46 29.6432 26.4566 29.6254 26.4499 29.609C26.4432 29.5925 26.4334 29.5775 26.4211 29.565C26.3936 29.538 26.3572 29.5229 26.3193 29.5229C26.2814 29.5229 26.245 29.538 26.2174 29.565C26.2085 29.6059 26.2128 29.6486 26.2295 29.6868C26.2462 29.7249 26.2745 29.7564 26.31 29.7763C26.3481 29.7834 26.3873 29.7766 26.4211 29.7571Z",
                              fill: "#F8AEBA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4237 29.7571C26.436 29.7445 26.4458 29.7296 26.4525 29.7131C26.4592 29.6966 26.4626 29.6789 26.4626 29.6611C26.4626 29.6432 26.4592 29.6254 26.4525 29.609C26.4458 29.5925 26.436 29.5775 26.4237 29.565C26.3962 29.538 26.3597 29.5229 26.3218 29.5229C26.2839 29.5229 26.2475 29.538 26.22 29.565C26.2082 29.6032 26.2112 29.6447 26.2285 29.6806C26.2458 29.7165 26.276 29.7439 26.3126 29.7571C26.3299 29.7656 26.3489 29.77 26.3681 29.77C26.3874 29.77 26.4063 29.7656 26.4237 29.7571Z",
                              fill: "#F8AFBA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4237 29.7571C26.436 29.7445 26.4458 29.7296 26.4525 29.7131C26.4592 29.6966 26.4626 29.6789 26.4626 29.6611C26.4626 29.6432 26.4592 29.6254 26.4525 29.609C26.4458 29.5925 26.436 29.5775 26.4237 29.565C26.3962 29.538 26.3597 29.5229 26.3218 29.5229C26.2839 29.5229 26.2475 29.538 26.22 29.565C26.2082 29.6032 26.2112 29.6447 26.2285 29.6806C26.2458 29.7165 26.276 29.7439 26.3126 29.7571C26.3299 29.7656 26.3489 29.77 26.3681 29.77C26.3874 29.77 26.4063 29.7656 26.4237 29.7571Z",
                              fill: "#F8B0BB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4238 29.7567C26.4448 29.7295 26.4563 29.6956 26.4563 29.6607C26.4563 29.6258 26.4448 29.5919 26.4238 29.5647C26.3926 29.5617 26.3612 29.569 26.3342 29.5856C26.3073 29.6022 26.2861 29.6273 26.2737 29.6572C26.2613 29.6871 26.2585 29.7202 26.2655 29.7519C26.2724 29.7836 26.289 29.8122 26.3127 29.8336C26.3362 29.8324 26.3589 29.8246 26.3785 29.8111C26.3981 29.7976 26.4137 29.7788 26.4238 29.7567Z",
                              fill: "#F8B1BC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4238 29.7567C26.4448 29.7295 26.4563 29.6956 26.4563 29.6607C26.4563 29.6258 26.4448 29.5919 26.4238 29.5647C26.3926 29.5617 26.3612 29.569 26.3342 29.5856C26.3073 29.6022 26.2861 29.6273 26.2737 29.6572C26.2613 29.6871 26.2585 29.7202 26.2655 29.7519C26.2724 29.7836 26.289 29.8122 26.3127 29.8336C26.3362 29.8324 26.3589 29.8246 26.3785 29.8111C26.3981 29.7976 26.4137 29.7788 26.4238 29.7567Z",
                              fill: "#F9B2BD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4227 29.7574C26.4389 29.7282 26.4475 29.6951 26.4475 29.6614C26.4475 29.6276 26.4389 29.5945 26.4227 29.5653C26.4106 29.5525 26.3962 29.5424 26.3803 29.5355C26.3644 29.5285 26.3474 29.525 26.3301 29.525C26.3129 29.525 26.2958 29.5285 26.2799 29.5355C26.264 29.5424 26.2496 29.5525 26.2375 29.5653C26.2222 29.5836 26.2113 29.6053 26.2056 29.6288C26.2 29.6523 26.1997 29.6768 26.2049 29.7004C26.2101 29.724 26.2206 29.746 26.2356 29.7646C26.2505 29.7832 26.2695 29.7979 26.2909 29.8074C26.3124 29.817 26.3357 29.8211 26.359 29.8195C26.3823 29.8179 26.4049 29.8106 26.425 29.7983C26.445 29.7859 26.462 29.7688 26.4744 29.7483C26.4869 29.7279 26.4946 29.7046 26.4968 29.6805L26.4227 29.7574Z",
                              fill: "#F9B3BE"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4227 29.7572C26.4389 29.728 26.4475 29.6949 26.4475 29.6612C26.4475 29.6275 26.4389 29.5943 26.4227 29.5651C26.4227 29.5651 26.2561 29.5651 26.2375 29.5651C26.2222 29.5834 26.2113 29.6052 26.2056 29.6286C26.2 29.6521 26.1997 29.6767 26.2049 29.7003C26.2101 29.7238 26.2206 29.7458 26.2356 29.7644C26.2505 29.783 26.2695 29.7977 26.2909 29.8072C26.3124 29.8167 26.3357 29.8209 26.359 29.8193C26.3823 29.8177 26.4049 29.8104 26.425 29.7981C26.445 29.7857 26.462 29.7686 26.4744 29.7481C26.4869 29.7277 26.4946 29.7044 26.4968 29.6803L26.4227 29.7572Z",
                              fill: "#F9B4BF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.312 29.7572C26.333 29.7299 26.3444 29.6961 26.3444 29.6612C26.3444 29.6263 26.333 29.5924 26.312 29.5651C26.312 29.5651 26.1453 29.5651 26.1268 29.5651C26.1145 29.5776 26.1047 29.5926 26.098 29.6091C26.0913 29.6256 26.0879 29.6433 26.0879 29.6612C26.0879 29.6791 26.0913 29.6967 26.098 29.7132C26.1047 29.7297 26.1145 29.7447 26.1268 29.7572C26.1369 29.773 26.1507 29.7861 26.1668 29.7951C26.183 29.8041 26.2011 29.8087 26.2194 29.8087C26.2377 29.8087 26.2557 29.8041 26.2719 29.7951C26.288 29.7861 26.3018 29.773 26.312 29.7572Z",
                              fill: "#F9B5C0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3104 29.7567C26.3228 29.7442 26.3325 29.7293 26.3392 29.7128C26.3459 29.6963 26.3493 29.6786 26.3493 29.6607C26.3493 29.6428 26.3459 29.6251 26.3392 29.6086C26.3325 29.5921 26.3228 29.5772 26.3104 29.5647C26.2851 29.5495 26.2564 29.5415 26.2271 29.5415C26.1979 29.5415 26.1691 29.5495 26.1438 29.5647C26.1228 29.5919 26.1113 29.6258 26.1113 29.6607C26.1113 29.6956 26.1228 29.7295 26.1438 29.7567C26.1438 29.7567 26.2919 29.8335 26.3104 29.7567Z",
                              fill: "#F9B6C0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3104 29.7567C26.3228 29.7442 26.3325 29.7293 26.3392 29.7128C26.3459 29.6963 26.3493 29.6786 26.3493 29.6607C26.3493 29.6428 26.3459 29.6251 26.3392 29.6086C26.3325 29.5921 26.3228 29.5772 26.3104 29.5647C26.2851 29.5495 26.2564 29.5415 26.2271 29.5415C26.1979 29.5415 26.1691 29.5495 26.1438 29.5647C26.1228 29.5919 26.1113 29.6258 26.1113 29.6607C26.1113 29.6956 26.1228 29.7295 26.1438 29.7567C26.1438 29.7567 26.2919 29.8335 26.3104 29.7567Z",
                              fill: "#F9B7C1"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3105 29.7568C26.3223 29.746 26.3318 29.7326 26.3382 29.7177C26.3447 29.7028 26.3481 29.6867 26.3481 29.6703C26.3481 29.654 26.3447 29.6379 26.3382 29.623C26.3318 29.6081 26.3223 29.5947 26.3105 29.5839C26.2871 29.5636 26.2576 29.5525 26.2271 29.5525C26.1966 29.5525 26.1672 29.5636 26.1438 29.5839C26.1228 29.6112 26.1113 29.645 26.1113 29.6799C26.1113 29.7149 26.1228 29.7488 26.1438 29.776C26.1702 29.7906 26.2003 29.7966 26.23 29.7932C26.2598 29.7898 26.2878 29.7771 26.3105 29.7568Z",
                              fill: "#F9B8C2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3126 29.7568C26.3244 29.746 26.3338 29.7326 26.3403 29.7177C26.3468 29.7028 26.3502 29.6867 26.3502 29.6703C26.3502 29.654 26.3468 29.6379 26.3403 29.623C26.3338 29.6081 26.3244 29.5947 26.3126 29.5839C26.2892 29.5636 26.2597 29.5525 26.2292 29.5525C26.1987 29.5525 26.1693 29.5636 26.1459 29.5839C26.1297 29.6131 26.1211 29.6462 26.1211 29.6799C26.1211 29.7137 26.1297 29.7468 26.1459 29.776C26.1723 29.7906 26.2023 29.7966 26.2321 29.7932C26.2618 29.7898 26.2899 29.7771 26.3126 29.7568Z",
                              fill: "#F9B9C3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3113 29.7568C26.3113 29.7568 26.3113 29.6031 26.3113 29.5839C26.288 29.5636 26.2585 29.5525 26.228 29.5525C26.1976 29.5525 26.1681 29.5636 26.1448 29.5839C26.1281 29.6094 26.1191 29.6395 26.1191 29.6703C26.1191 29.7011 26.1281 29.7313 26.1448 29.7568C26.1552 29.769 26.168 29.7789 26.1823 29.7856C26.1967 29.7923 26.2123 29.7958 26.228 29.7958C26.2438 29.7958 26.2594 29.7923 26.2737 29.7856C26.2881 29.7789 26.3009 29.769 26.3113 29.7568Z",
                              fill: "#F9BAC4"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3113 29.7568C26.3113 29.7568 26.3113 29.6031 26.3113 29.5839C26.288 29.5636 26.2585 29.5525 26.228 29.5525C26.1976 29.5525 26.1681 29.5636 26.1448 29.5839C26.1281 29.6094 26.1191 29.6395 26.1191 29.6703C26.1191 29.7011 26.1281 29.7313 26.1448 29.7568C26.1552 29.769 26.168 29.7789 26.1823 29.7856C26.1967 29.7923 26.2123 29.7958 26.228 29.7958C26.2438 29.7958 26.2594 29.7923 26.2737 29.7856C26.2881 29.7789 26.3009 29.769 26.3113 29.7568Z",
                              fill: "#F9BBC5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3096 29.7549C26.3096 29.7549 26.3096 29.6027 26.3096 29.5836C26.301 29.5718 26.29 29.5622 26.2772 29.5556C26.2645 29.549 26.2504 29.5456 26.2362 29.5456C26.2219 29.5456 26.2079 29.549 26.1951 29.5556C26.1824 29.5622 26.1713 29.5718 26.1628 29.5836C26.1447 29.6046 26.1348 29.6317 26.1348 29.6598C26.1348 29.6879 26.1447 29.7149 26.1628 29.7359C26.1824 29.7544 26.207 29.7661 26.2333 29.7695C26.2595 29.7729 26.2862 29.7679 26.3096 29.7549Z",
                              fill: "#F9BCC6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3096 29.7557C26.3096 29.7557 26.3096 29.6034 26.3096 29.5844C26.2894 29.5657 26.2633 29.5553 26.2362 29.5553C26.2091 29.5553 26.1829 29.5657 26.1628 29.5844C26.1447 29.6053 26.1348 29.6325 26.1348 29.6606C26.1348 29.6887 26.1447 29.7157 26.1628 29.7367C26.1824 29.7551 26.207 29.7669 26.2333 29.7703C26.2595 29.7737 26.2862 29.7686 26.3096 29.7557Z",
                              fill: "#F9BDC6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3096 29.7557C26.3262 29.7305 26.335 29.7006 26.335 29.67C26.335 29.6395 26.3262 29.6097 26.3096 29.5844C26.2894 29.5657 26.2633 29.5553 26.2362 29.5553C26.2091 29.5553 26.183 29.5657 26.1628 29.5844C26.1447 29.6053 26.1348 29.6325 26.1348 29.6606C26.1348 29.6887 26.1447 29.7157 26.1628 29.7367C26.1834 29.753 26.2079 29.7635 26.2337 29.7668C26.2595 29.7702 26.2857 29.7663 26.3096 29.7557Z",
                              fill: "#FABEC7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3096 29.7557C26.3262 29.7305 26.335 29.7006 26.335 29.67C26.335 29.6395 26.3262 29.6097 26.3096 29.5844C26.2894 29.5657 26.2633 29.5553 26.2362 29.5553C26.2091 29.5553 26.183 29.5657 26.1628 29.5844C26.1447 29.6053 26.1348 29.6325 26.1348 29.6606C26.1348 29.6887 26.1447 29.7157 26.1628 29.7367C26.1834 29.753 26.2079 29.7635 26.2337 29.7668C26.2595 29.7702 26.2857 29.7663 26.3096 29.7557Z",
                              fill: "#FABFC8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3096 29.7557C26.3262 29.7305 26.335 29.7006 26.335 29.67C26.335 29.6395 26.3262 29.6097 26.3096 29.5844C26.2894 29.5657 26.2633 29.5553 26.2362 29.5553C26.2091 29.5553 26.183 29.5657 26.1628 29.5844C26.1447 29.6053 26.1348 29.6325 26.1348 29.6606C26.1348 29.6887 26.1447 29.7157 26.1628 29.7367C26.1834 29.753 26.2079 29.7635 26.2337 29.7668C26.2595 29.7702 26.2857 29.7663 26.3096 29.7557Z",
                              fill: "#FAC0C9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.293 29.7543C26.3124 29.7303 26.3231 29.7 26.3231 29.6687C26.3231 29.6373 26.3124 29.607 26.293 29.583C26.2714 29.5675 26.2458 29.5592 26.2196 29.5592C26.1933 29.5592 26.1677 29.5675 26.1461 29.583C26.1311 29.6054 26.123 29.632 26.123 29.6592C26.123 29.6864 26.1311 29.7129 26.1461 29.7353C26.1461 29.7353 26.2746 29.8114 26.293 29.7543Z",
                              fill: "#FAC1CA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2911 29.7353C26.2911 29.7353 26.2911 29.6211 26.2911 29.583C26.2695 29.5675 26.2439 29.5592 26.2177 29.5592C26.1914 29.5592 26.1657 29.5675 26.1442 29.583C26.1292 29.6054 26.1211 29.632 26.1211 29.6592C26.1211 29.6864 26.1292 29.7129 26.1442 29.7353C26.1442 29.7353 26.2727 29.8114 26.2911 29.7353Z",
                              fill: "#FAC2CB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2912 29.7363C26.308 29.7185 26.3174 29.6946 26.3174 29.6697C26.3174 29.6448 26.308 29.6209 26.2912 29.6031C26.2709 29.5844 26.2448 29.574 26.2177 29.574C26.1906 29.574 26.1644 29.5844 26.1442 29.6031C26.1292 29.6255 26.1211 29.652 26.1211 29.6792C26.1211 29.7065 26.1292 29.733 26.1442 29.7554C26.1676 29.7683 26.1942 29.7734 26.2206 29.77C26.2469 29.7666 26.2715 29.7548 26.2912 29.7363Z",
                              fill: "#FAC3CC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2912 29.7368C26.308 29.719 26.3174 29.6951 26.3174 29.6701C26.3174 29.6452 26.308 29.6214 26.2912 29.6036C26.2912 29.6036 26.1809 29.6036 26.1442 29.6036C26.1292 29.6259 26.1211 29.6524 26.1211 29.6797C26.1211 29.7069 26.1292 29.7335 26.1442 29.7558C26.1676 29.7687 26.1942 29.7738 26.2206 29.7704C26.2469 29.767 26.2715 29.7553 26.2912 29.7368Z",
                              fill: "#FAC4CC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2926 29.7368C26.3094 29.719 26.3189 29.6951 26.3189 29.6702C26.3189 29.6452 26.3094 29.6214 26.2926 29.6036C26.2926 29.6036 26.1824 29.6036 26.1457 29.6036C26.1322 29.623 26.125 29.6462 26.125 29.6702C26.125 29.6941 26.1322 29.7174 26.1457 29.7368C26.1457 29.7368 26.2742 29.7939 26.2926 29.7368Z",
                              fill: "#FAC5CD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2926 29.7368C26.3094 29.719 26.3189 29.6951 26.3189 29.6702C26.3189 29.6453 26.3094 29.6214 26.2926 29.6036C26.271 29.588 26.2454 29.5797 26.2192 29.5797C26.1929 29.5797 26.1672 29.588 26.1457 29.6036C26.1322 29.623 26.125 29.6463 26.125 29.6702C26.125 29.6941 26.1322 29.7174 26.1457 29.7368C26.1457 29.7368 26.2742 29.7939 26.2926 29.7368Z",
                              fill: "#FAC6CE"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2926 29.7377C26.2926 29.7122 26.2828 29.6878 26.2655 29.6698C26.2481 29.6518 26.2246 29.6417 26.2 29.6417C26.1755 29.6417 26.1519 29.6518 26.1345 29.6698C26.1172 29.6878 26.1074 29.7122 26.1074 29.7377V29.8721C26.1246 29.8976 26.1509 29.915 26.1804 29.9204C26.2099 29.9258 26.2403 29.9188 26.2648 29.901C26.2894 29.8831 26.3061 29.8559 26.3113 29.8253C26.3165 29.7947 26.3098 29.7631 26.2926 29.7377Z",
                              fill: "#FAC7CF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2927 29.7362C26.3058 29.7229 26.3147 29.706 26.3184 29.6875C26.3221 29.669 26.3204 29.6497 26.3135 29.6322C26.3066 29.6147 26.2948 29.5997 26.2797 29.5892C26.2646 29.5787 26.2467 29.5731 26.2285 29.5731C26.2102 29.5731 26.1925 29.5787 26.1773 29.5892C26.1622 29.5997 26.1504 29.6147 26.1435 29.6322C26.1367 29.6497 26.1349 29.669 26.1386 29.6875C26.1423 29.706 26.1512 29.7229 26.1642 29.7362C26.1814 29.7536 26.2045 29.7634 26.2285 29.7634C26.2525 29.7634 26.2756 29.7536 26.2927 29.7362Z",
                              fill: "#FAC8D0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2927 29.7362C26.3058 29.7229 26.3147 29.706 26.3184 29.6875C26.3221 29.669 26.3204 29.6497 26.3135 29.6322C26.3066 29.6147 26.2948 29.5997 26.2797 29.5892C26.2646 29.5787 26.2467 29.5731 26.2285 29.5731C26.2102 29.5731 26.1925 29.5787 26.1773 29.5892C26.1622 29.5997 26.1504 29.6147 26.1435 29.6322C26.1367 29.6497 26.1349 29.669 26.1386 29.6875C26.1423 29.706 26.1512 29.7229 26.1642 29.7362C26.1814 29.7536 26.2045 29.7634 26.2285 29.7634C26.2525 29.7634 26.2756 29.7536 26.2927 29.7362Z",
                              fill: "#FAC9D1"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2929 29.7368C26.3063 29.7174 26.3135 29.6941 26.3135 29.6702C26.3135 29.6463 26.3063 29.623 26.2929 29.6036C26.2686 29.6036 26.2452 29.6136 26.228 29.6314C26.2108 29.6493 26.2012 29.6735 26.2012 29.6987C26.2012 29.724 26.2108 29.7482 26.228 29.7661C26.2452 29.7839 26.2686 29.7939 26.2929 29.7939C26.2975 29.7752 26.2975 29.7555 26.2929 29.7368Z",
                              fill: "#FBCAD2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2929 29.7368C26.3063 29.7174 26.3135 29.6941 26.3135 29.6702C26.3135 29.6463 26.3063 29.623 26.2929 29.6036C26.2686 29.6036 26.2452 29.6136 26.228 29.6314C26.2108 29.6493 26.2012 29.6735 26.2012 29.6987C26.2012 29.724 26.2108 29.7482 26.228 29.7661C26.2452 29.7839 26.2686 29.7939 26.2929 29.7939C26.2975 29.7752 26.2975 29.7555 26.2929 29.7368Z",
                              fill: "#FBCBD2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.274 29.7364C26.2874 29.717 26.2947 29.6937 26.2947 29.6698C26.2947 29.6458 26.2874 29.6226 26.274 29.6032C26.2553 29.5892 26.2328 29.5817 26.2097 29.5817C26.1866 29.5817 26.1642 29.5892 26.1454 29.6032C26.1286 29.621 26.1191 29.6448 26.1191 29.6698C26.1191 29.6947 26.1286 29.7186 26.1454 29.7364H26.274Z",
                              fill: "#FBCCD3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.274 29.7364C26.2874 29.717 26.2947 29.6937 26.2947 29.6698C26.2947 29.6458 26.2874 29.6226 26.274 29.6032C26.2553 29.5892 26.2328 29.5817 26.2097 29.5817C26.1866 29.5817 26.1642 29.5892 26.1454 29.6032C26.1286 29.621 26.1191 29.6448 26.1191 29.6698C26.1191 29.6947 26.1286 29.7186 26.1454 29.7364H26.274Z",
                              fill: "#FBCDD4"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.256 29.7372V29.6229C26.256 29.6229 26.2559 29.6229 26.1641 29.6229V29.7182C26.1641 29.7182 26.256 29.7752 26.256 29.7372Z",
                              fill: "#FCD7DD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2563 29.7379V29.8712C26.2563 29.8712 26.2377 29.776 26.2563 29.7379Z",
                              fill: "#FCD9DE"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2551 29.719C26.2551 29.719 26.2392 29.7523 26.2551 29.719V29.719Z",
                              fill: "#FCE0E4"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2551 29.719C26.2551 29.719 26.2392 29.7523 26.2551 29.719V29.719Z",
                              fill: "#FCE1E5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2382 29.719C26.2382 29.719 26.2208 29.7364 26.2382 29.719V29.719Z",
                              fill: "#FDE7EA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2382 29.719C26.2382 29.719 26.2208 29.7364 26.2382 29.719V29.719Z",
                              fill: "#FDE8EB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2382 29.719C26.2382 29.719 26.2208 29.7364 26.2382 29.719V29.719Z",
                              fill: "#FDE9EC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2382 29.719C26.2382 29.719 26.2208 29.7364 26.2382 29.719V29.719Z",
                              fill: "#FDEAED"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.1974 29.6996H26.1816V29.7163L26.1974 29.6996Z",
                              fill: "#FEF9FA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.1974 29.6996H26.1816L26.1974 29.7163V29.6996Z",
                              fill: "#FFFAFB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.1974 29.6996H26.1816L26.1974 29.7163V29.6996Z",
                              fill: "#FFFBFC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4236 29.0471L26.2754 29.4119H26.3866V29.1047L26.4236 29.0471Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.1641 29.4311L26.3121 29.0471V29.3735L26.1641 29.4311ZM26.3306 29.0663L26.2011 29.3927H26.2936V29.0855L26.3306 29.0663Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.422 28.9114H26.3301C26.3301 28.9114 26.3301 29.0067 26.3301 29.0257V28.9305V28.8353L26.422 28.9114Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4219 29.1017C26.3959 29.0972 26.3724 29.0832 26.3556 29.0622C26.3387 29.0413 26.3297 29.0148 26.3301 28.9875C26.3345 28.9606 26.348 28.9362 26.3682 28.9188C26.3884 28.9013 26.414 28.8919 26.4402 28.8923C26.4499 28.9096 26.455 28.9293 26.455 28.9494C26.455 28.9694 26.4499 28.9892 26.4402 29.0066C26.4457 29.0227 26.4468 29.04 26.4436 29.0567C26.4404 29.0735 26.4329 29.089 26.4219 29.1017ZM26.4219 28.9113C26.4219 28.9113 26.4219 28.9113 26.3301 28.9113V29.0066V28.9113H26.4219Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.3303 29.7948L31.9785 30.1789H32.1266L32.3489 29.8716L32.3303 29.7948Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.1451 30.1792H31.9785L32.3488 29.8143L32.1451 30.1792ZM32.0155 30.1792H32.1266L32.3673 29.8719L32.0155 30.1792Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.4966 29.6605C32.4733 29.6402 32.4437 29.629 32.4133 29.629C32.3828 29.629 32.3533 29.6402 32.33 29.6605C32.3185 29.6694 32.3092 29.681 32.3027 29.6944C32.2963 29.7077 32.293 29.7224 32.293 29.7373C32.293 29.7522 32.2963 29.7669 32.3027 29.7802C32.3092 29.7936 32.3185 29.8052 32.33 29.8141C32.3546 29.8314 32.3836 29.8407 32.4133 29.8407C32.443 29.8407 32.472 29.8314 32.4966 29.8141C32.5148 29.793 32.5249 29.7656 32.5249 29.7373C32.5249 29.7089 32.5148 29.6816 32.4966 29.6605Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.4217 29.8907C32.4217 29.8907 32.4217 29.8906 32.4217 29.7946C32.4386 29.7845 32.4577 29.7792 32.4772 29.7792C32.4968 29.7792 32.5159 29.7845 32.5328 29.7946C32.5415 29.8325 32.5415 29.872 32.5328 29.9098C32.5141 29.9155 32.4944 29.9167 32.4752 29.9134C32.4559 29.9101 32.4376 29.9023 32.4217 29.8907ZM32.4217 29.6602H32.3105C32.3246 29.6686 32.3406 29.6731 32.3568 29.6731C32.3731 29.6731 32.3891 29.6686 32.4032 29.6602C32.4032 29.6602 32.4032 29.6602 32.4032 29.6602H32.4217Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.6826 27.8939L23.8679 28.2971V28.1819L23.6641 27.8746L23.6826 27.8939Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.8668 28.2585L23.6816 27.8168L23.9039 28.1433L23.8668 28.2585ZM23.7002 27.8361L23.8668 28.2201V28.1241L23.6816 27.8361H23.7002Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.6085 27.7019C23.5889 27.7261 23.5781 27.7567 23.5781 27.7883C23.5781 27.8199 23.5889 27.8505 23.6085 27.8747C23.6288 27.8936 23.6552 27.904 23.6825 27.904C23.7098 27.904 23.7362 27.8936 23.7566 27.8747C23.7687 27.8646 23.7788 27.8521 23.7863 27.838C23.7939 27.8239 23.7986 27.8083 23.8004 27.7923C23.8021 27.7762 23.8007 27.76 23.7964 27.7445C23.7921 27.729 23.7848 27.7145 23.7751 27.7019C23.7654 27.6893 23.7533 27.6788 23.7397 27.671C23.726 27.6632 23.7111 27.6583 23.6956 27.6565C23.6801 27.6547 23.6644 27.6561 23.6495 27.6606C23.6345 27.6651 23.6206 27.6726 23.6085 27.6827V27.7019Z",
                              fill: "#FCCA3E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.7007 27.9116C23.6835 27.9201 23.6647 27.9244 23.6457 27.9244C23.6266 27.9244 23.6078 27.9201 23.5906 27.9116C23.5712 27.8876 23.5605 27.8572 23.5605 27.8259C23.5605 27.7946 23.5712 27.7643 23.5906 27.7403C23.5906 27.7403 23.5906 27.7403 23.6823 27.7403C23.6941 27.751 23.7035 27.7641 23.7099 27.7789C23.7163 27.7937 23.7196 27.8097 23.7196 27.8259C23.7196 27.8421 23.7163 27.8581 23.7099 27.8729C23.7035 27.8877 23.6941 27.9009 23.6823 27.9116H23.7007ZM23.7007 27.7022V27.8354V27.7022C23.7007 27.7022 23.719 27.7022 23.6823 27.7022H23.7007Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.513 29.6983C32.4899 29.6782 32.4606 29.6671 32.4303 29.6671C32.4001 29.6671 32.3708 29.6782 32.3477 29.6983V29.8316V29.7174L32.513 29.6983Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.3102 29.9283H32.1816L32.3837 29.7379L32.3102 29.9283Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.6641 27.6833C23.6641 27.6833 23.6641 27.7975 23.6641 27.8356C23.6641 27.8737 23.7558 27.8356 23.7925 27.8356C23.8292 27.8356 23.7925 27.8356 23.7925 27.8356H23.6824V27.7213L23.6641 27.6833Z",
                              fill: "#AA8C30"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.4049 28.2582H23.7754V29.0839H24.4049V28.2582Z",
                              fill: "#F15770"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0704 28.355C24.0314 28.3598 23.9936 28.3725 23.9594 28.3926C23.9252 28.4126 23.8951 28.4394 23.871 28.4716C23.8469 28.5038 23.8292 28.5406 23.8189 28.5799C23.8086 28.6193 23.806 28.6604 23.8112 28.7008C23.8134 28.7404 23.8234 28.7792 23.8408 28.8146C23.8581 28.85 23.8824 28.8813 23.9119 28.9066C23.9415 28.9318 23.9757 28.9504 24.0126 28.9613C24.0494 28.9722 24.088 28.975 24.126 28.9696C24.1637 28.9677 24.2005 28.9574 24.2339 28.9392C24.2673 28.921 24.2966 28.8955 24.3195 28.8644C24.3424 28.8333 24.3585 28.7974 24.3667 28.7592C24.3748 28.7209 24.3749 28.6814 24.3667 28.6432C24.3668 28.6037 24.3591 28.5646 24.344 28.5283C24.3289 28.492 24.3067 28.4594 24.2789 28.4323C24.2511 28.4053 24.2183 28.3845 24.1824 28.3712C24.1465 28.3579 24.1084 28.3524 24.0704 28.355Z",
                              fill: "#F15770"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0704 28.3544C24.0314 28.3591 23.9936 28.3719 23.9594 28.3919C23.9252 28.4119 23.8951 28.4388 23.871 28.471C23.8469 28.5031 23.8292 28.5399 23.8189 28.5793C23.8086 28.6186 23.806 28.6597 23.8112 28.7001C23.8205 28.7782 23.8583 28.8496 23.9169 28.8996C23.9755 28.9496 24.0503 28.9745 24.126 28.969C24.1637 28.9671 24.2005 28.9567 24.2339 28.9385C24.2673 28.9204 24.2966 28.8948 24.3195 28.8638C24.3424 28.8327 24.3585 28.7967 24.3667 28.7585C24.3748 28.7203 24.3749 28.6807 24.3667 28.6425C24.362 28.5644 24.3287 28.491 24.2737 28.4375C24.2186 28.384 24.1459 28.3542 24.0704 28.3544Z",
                              fill: "#F15871"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0719 28.3544C23.9968 28.3721 23.93 28.4162 23.8827 28.4792C23.8355 28.5422 23.8107 28.6203 23.8126 28.7001C23.8219 28.7782 23.8598 28.8496 23.9183 28.8996C23.9769 28.9496 24.0517 28.9745 24.1274 28.969C24.164 28.9642 24.1993 28.952 24.2313 28.933C24.2633 28.9139 24.2914 28.8885 24.3138 28.8581C24.3362 28.8277 24.3525 28.793 24.3619 28.756C24.3712 28.719 24.3733 28.6804 24.3681 28.6425C24.3634 28.5644 24.3301 28.491 24.2751 28.4375C24.22 28.384 24.1473 28.3542 24.0719 28.3544Z",
                              fill: "#F15972"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0719 28.3544C23.9968 28.3721 23.93 28.4162 23.8827 28.4792C23.8355 28.5422 23.8107 28.6203 23.8126 28.7001C23.8219 28.7782 23.8598 28.8496 23.9183 28.8996C23.9769 28.9496 24.0517 28.9745 24.1274 28.969C24.164 28.9642 24.1993 28.952 24.2313 28.933C24.2633 28.9139 24.2914 28.8885 24.3138 28.8581C24.3362 28.8277 24.3525 28.793 24.3619 28.756C24.3712 28.719 24.3733 28.6804 24.3681 28.6425C24.3634 28.5644 24.3301 28.491 24.2751 28.4375C24.22 28.384 24.1473 28.3542 24.0719 28.3544Z",
                              fill: "#F15A73"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0718 28.3544C23.9963 28.3685 23.9291 28.4124 23.8842 28.4769C23.8393 28.5414 23.8203 28.6214 23.8311 28.7001C23.8334 28.738 23.843 28.775 23.8592 28.809C23.8753 28.843 23.8978 28.8734 23.9253 28.8984C23.9529 28.9234 23.9849 28.9424 24.0195 28.9545C24.0542 28.9666 24.0908 28.9716 24.1273 28.9689C24.2059 28.9689 24.2812 28.9366 24.3368 28.879C24.3923 28.8214 24.4236 28.7432 24.4236 28.6617C24.4236 28.5802 24.3923 28.502 24.3368 28.4444C24.2812 28.3868 24.2059 28.3544 24.1273 28.3544H24.0718Z",
                              fill: "#F15B73"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0717 28.3544C23.9998 28.3684 23.9354 28.4095 23.891 28.4698C23.8465 28.5301 23.8252 28.6053 23.831 28.6809C23.8309 28.7204 23.8387 28.7595 23.8538 28.7958C23.8689 28.832 23.891 28.8647 23.9188 28.8917C23.9465 28.9187 23.9794 28.9395 24.0153 28.9528C24.0511 28.9661 24.0892 28.9716 24.1272 28.969C24.1991 28.955 24.2635 28.9139 24.3079 28.8536C24.3524 28.7933 24.3737 28.7182 24.3679 28.6425C24.3632 28.5644 24.3299 28.491 24.2749 28.4375C24.2198 28.384 24.1472 28.3542 24.0717 28.3544Z",
                              fill: "#F15C74"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0717 28.3544C23.9998 28.3684 23.9354 28.4095 23.891 28.4698C23.8465 28.5301 23.8252 28.6053 23.831 28.6809C23.8309 28.7204 23.8387 28.7595 23.8538 28.7958C23.8689 28.832 23.891 28.8647 23.9188 28.8917C23.9465 28.9187 23.9794 28.9395 24.0153 28.9528C24.0511 28.9661 24.0892 28.9716 24.1272 28.969C24.1991 28.955 24.2635 28.9139 24.3079 28.8536C24.3524 28.7933 24.3737 28.7182 24.3679 28.6425C24.3632 28.5644 24.3299 28.491 24.2749 28.4375C24.2198 28.384 24.1472 28.3542 24.0717 28.3544Z",
                              fill: "#F25D75"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0717 28.3544C23.9998 28.3684 23.9354 28.4095 23.891 28.4698C23.8465 28.5301 23.8252 28.6053 23.831 28.6809C23.8357 28.759 23.869 28.8323 23.9241 28.8859C23.9791 28.9394 24.0518 28.9691 24.1272 28.969C24.1991 28.955 24.2635 28.9139 24.3079 28.8536C24.3524 28.7934 24.3737 28.7182 24.3679 28.6425C24.3632 28.5644 24.3299 28.491 24.2749 28.4375C24.2198 28.384 24.1472 28.3542 24.0717 28.3544Z",
                              fill: "#F25E76"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0703 28.3737C24.0345 28.376 23.9995 28.3859 23.9676 28.4029C23.9357 28.42 23.9076 28.4436 23.8849 28.4725C23.8623 28.5014 23.8457 28.5349 23.8362 28.5707C23.8266 28.6066 23.8244 28.6442 23.8296 28.681C23.8187 28.7236 23.8174 28.7683 23.8258 28.8116C23.8341 28.8548 23.852 28.8954 23.878 28.9304C23.9039 28.9654 23.9372 28.9937 23.9754 29.0132C24.0136 29.0326 24.0556 29.0428 24.0981 29.0428C24.1406 29.0428 24.1826 29.0326 24.2208 29.0132C24.2589 28.9937 24.2923 28.9654 24.3182 28.9304C24.3442 28.8954 24.362 28.8548 24.3704 28.8116C24.3788 28.7683 24.3775 28.7236 24.3666 28.681C24.3694 28.6399 24.3636 28.5987 24.3496 28.5601C24.3357 28.5216 24.314 28.4865 24.2859 28.4574C24.2579 28.4283 24.2241 28.4057 24.1869 28.3913C24.1497 28.3769 24.11 28.3709 24.0703 28.3737Z",
                              fill: "#F25F77"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0703 28.3737C24.0345 28.376 23.9995 28.3859 23.9676 28.4029C23.9357 28.42 23.9076 28.4436 23.8849 28.4725C23.8623 28.5014 23.8457 28.5349 23.8362 28.5707C23.8266 28.6066 23.8244 28.6442 23.8296 28.681C23.8187 28.7236 23.8174 28.7683 23.8258 28.8116C23.8341 28.8548 23.852 28.8954 23.878 28.9304C23.9039 28.9654 23.9372 28.9937 23.9754 29.0132C24.0136 29.0326 24.0556 29.0428 24.0981 29.0428C24.1406 29.0428 24.1826 29.0326 24.2208 29.0132C24.2589 28.9937 24.2923 28.9654 24.3182 28.9304C24.3442 28.8954 24.362 28.8548 24.3704 28.8116C24.3788 28.7683 24.3775 28.7236 24.3666 28.681C24.3694 28.6399 24.3636 28.5987 24.3496 28.5601C24.3357 28.5216 24.314 28.4865 24.2859 28.4574C24.2579 28.4283 24.2241 28.4057 24.1869 28.3913C24.1497 28.3769 24.11 28.3709 24.0703 28.3737Z",
                              fill: "#F26078"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0708 28.3739C23.9972 28.3739 23.9265 28.4043 23.8744 28.4583C23.8223 28.5123 23.793 28.5856 23.793 28.662C23.793 28.7383 23.8223 28.8116 23.8744 28.8656C23.9265 28.9197 23.9972 28.95 24.0708 28.95C24.1445 28.95 24.2152 28.9197 24.2673 28.8656C24.3194 28.8116 24.3487 28.7383 24.3487 28.662C24.3487 28.5856 24.3194 28.5123 24.2673 28.4583C24.2152 28.4043 24.1445 28.3739 24.0708 28.3739Z",
                              fill: "#F26179"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0707 28.3739C23.9971 28.3739 23.9264 28.4043 23.8743 28.4583C23.8223 28.5123 23.793 28.5856 23.793 28.662C23.793 28.7383 23.8223 28.8116 23.8743 28.8656C23.9264 28.9197 23.9971 28.95 24.0707 28.95C24.1049 28.9453 24.1378 28.9336 24.1676 28.9155C24.1974 28.8975 24.2234 28.8734 24.244 28.8448C24.2647 28.8162 24.2797 28.7836 24.2881 28.7489C24.2965 28.7142 24.2981 28.6781 24.2929 28.6428C24.2954 28.61 24.2917 28.577 24.2818 28.5457C24.272 28.5144 24.2564 28.4854 24.2357 28.4604C24.2151 28.4354 24.1899 28.415 24.1615 28.4001C24.1332 28.3853 24.1024 28.3764 24.0707 28.3739Z",
                              fill: "#F26279"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0707 28.3739C23.9971 28.3739 23.9264 28.4043 23.8743 28.4583C23.8223 28.5123 23.793 28.5856 23.793 28.662C23.793 28.7383 23.8223 28.8116 23.8743 28.8656C23.9264 28.9197 23.9971 28.95 24.0707 28.95C24.1049 28.9453 24.1378 28.9336 24.1676 28.9155C24.1974 28.8975 24.2234 28.8734 24.244 28.8448C24.2647 28.8162 24.2797 28.7836 24.2881 28.7489C24.2965 28.7142 24.2981 28.6781 24.2929 28.6428C24.2954 28.61 24.2917 28.577 24.2818 28.5457C24.272 28.5144 24.2564 28.4854 24.2357 28.4604C24.2151 28.4354 24.1899 28.415 24.1615 28.4001C24.1332 28.3853 24.1024 28.3764 24.0707 28.3739Z",
                              fill: "#F2637A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0716 28.3739C24.0012 28.3835 23.937 28.4207 23.8922 28.4779C23.8475 28.535 23.8255 28.6078 23.8309 28.6812C23.8309 28.7525 23.8581 28.8209 23.9068 28.8713C23.9554 28.9217 24.0213 28.95 24.0901 28.95C24.1589 28.95 24.2248 28.9217 24.2734 28.8713C24.3221 28.8209 24.3494 28.7525 24.3494 28.6812C24.3551 28.6411 24.352 28.6002 24.3404 28.5616C24.3287 28.5229 24.3087 28.4875 24.282 28.458C24.2553 28.4284 24.2226 28.4055 24.1861 28.391C24.1497 28.3764 24.1105 28.3706 24.0716 28.3739Z",
                              fill: "#F2647B"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0716 28.3739C24.0012 28.3835 23.937 28.4207 23.8922 28.4779C23.8475 28.535 23.8255 28.6078 23.8309 28.6812C23.8309 28.7525 23.8581 28.8209 23.9068 28.8713C23.9554 28.9217 24.0213 28.95 24.0901 28.95C24.1589 28.95 24.2248 28.9217 24.2734 28.8713C24.3221 28.8209 24.3494 28.7525 24.3494 28.6812C24.3551 28.6411 24.352 28.6002 24.3404 28.5616C24.3287 28.5229 24.3087 28.4875 24.282 28.458C24.2553 28.4284 24.2226 28.4055 24.1861 28.391C24.1497 28.3764 24.1105 28.3706 24.0716 28.3739Z",
                              fill: "#F2657C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0716 28.3739C24.0012 28.3835 23.937 28.4208 23.8922 28.4779C23.8475 28.535 23.8255 28.6078 23.8309 28.6812C23.8309 28.7525 23.8581 28.8209 23.9068 28.8713C23.9554 28.9217 24.0214 28.95 24.0901 28.95C24.1589 28.95 24.2248 28.9217 24.2735 28.8713C24.3221 28.8209 24.3494 28.7525 24.3494 28.6812C24.352 28.6418 24.3467 28.6022 24.3338 28.565C24.321 28.5278 24.3009 28.4938 24.2749 28.465C24.2488 28.4362 24.2173 28.4132 24.1824 28.3975C24.1474 28.3819 24.1097 28.3738 24.0716 28.3739Z",
                              fill: "#F2667D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0709 28.3739C24.0368 28.3786 24.0038 28.3904 23.974 28.4085C23.9443 28.4265 23.9183 28.4505 23.8976 28.4791C23.8769 28.5077 23.8619 28.5404 23.8535 28.5751C23.8451 28.6098 23.8435 28.6458 23.8487 28.6812C23.8454 28.7191 23.8505 28.7572 23.8636 28.7927C23.8767 28.8282 23.8975 28.8601 23.9242 28.886C23.951 28.912 23.9832 28.9312 24.0182 28.9423C24.0533 28.9534 24.0903 28.956 24.1265 28.95C24.1935 28.9361 24.2532 28.8971 24.2941 28.8404C24.3351 28.7838 24.3546 28.7134 24.3487 28.6428C24.3401 28.5713 24.3076 28.5052 24.2568 28.4561C24.206 28.407 24.1403 28.3779 24.0709 28.3739Z",
                              fill: "#F2677E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0713 28.3739C24.0371 28.3786 24.0042 28.3904 23.9744 28.4085C23.9446 28.4265 23.9186 28.4505 23.8979 28.4791C23.8773 28.5077 23.8623 28.5404 23.8539 28.5751C23.8455 28.6098 23.8438 28.6458 23.8491 28.6812C23.8385 28.7211 23.837 28.763 23.8446 28.8036C23.8522 28.8442 23.8687 28.8825 23.8929 28.9154C23.9171 28.9483 23.9483 28.975 23.9841 28.9933C24.0198 29.0117 24.0591 29.0213 24.099 29.0213C24.1389 29.0213 24.1783 29.0117 24.2141 28.9933C24.2498 28.975 24.281 28.9483 24.3052 28.9154C24.3294 28.8825 24.3459 28.8442 24.3535 28.8036C24.3611 28.763 24.3596 28.7211 24.349 28.6812C24.3492 28.6029 24.3205 28.5276 24.2689 28.4705C24.2173 28.4134 24.1466 28.3788 24.0713 28.3739Z",
                              fill: "#F2687F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0711 28.3934C24.0366 28.3922 24.0023 28.3994 23.971 28.4144C23.9396 28.4294 23.9121 28.4518 23.8905 28.4798C23.8689 28.5077 23.8539 28.5405 23.8467 28.5755C23.8395 28.6105 23.8402 28.6468 23.8489 28.6814C23.8536 28.7544 23.8849 28.8229 23.9365 28.8728C23.9881 28.9228 24.0561 28.9504 24.1266 28.9502C24.1936 28.9363 24.2533 28.8973 24.2943 28.8407C24.3353 28.784 24.3547 28.7136 24.3488 28.643C24.3464 28.6077 24.3374 28.5732 24.3221 28.5415C24.3069 28.5098 24.2858 28.4815 24.26 28.4583C24.2342 28.4351 24.2042 28.4174 24.1718 28.4063C24.1394 28.3951 24.1051 28.3908 24.0711 28.3934Z",
                              fill: "#F3697F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0709 28.3934C24.0375 28.3956 24.0049 28.4051 23.9752 28.4211C23.9455 28.4371 23.9194 28.4595 23.8985 28.4866C23.8776 28.5137 23.8624 28.545 23.8538 28.5785C23.8452 28.6121 23.8434 28.6471 23.8486 28.6814C23.8533 28.7544 23.8847 28.8229 23.9363 28.8728C23.9879 28.9228 24.0559 28.9504 24.1265 28.9502C24.1935 28.9363 24.2531 28.8973 24.2941 28.8407C24.3351 28.784 24.3546 28.7136 24.3487 28.643C24.3463 28.6077 24.3373 28.5732 24.322 28.5415C24.3068 28.5098 24.2857 28.4815 24.2598 28.4583C24.234 28.4351 24.204 28.4174 24.1716 28.4063C24.1392 28.3951 24.105 28.3908 24.0709 28.3934Z",
                              fill: "#F36A80"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0713 28.3934C24.0379 28.3956 24.0053 28.4051 23.9756 28.4211C23.946 28.4371 23.9198 28.4595 23.8989 28.4866C23.878 28.5137 23.8628 28.545 23.8542 28.5785C23.8456 28.6121 23.8439 28.6471 23.8491 28.6814C23.8385 28.7213 23.837 28.7632 23.8446 28.8038C23.8522 28.8444 23.8687 28.8827 23.8929 28.9156C23.9171 28.9485 23.9483 28.9752 23.9841 28.9935C24.0198 29.0119 24.0591 29.0215 24.099 29.0215C24.1389 29.0215 24.1783 29.0119 24.2141 28.9935C24.2498 28.9752 24.281 28.9485 24.3052 28.9156C24.3294 28.8827 24.3459 28.8444 24.3535 28.8038C24.3611 28.7632 24.3596 28.7213 24.349 28.6814C24.3518 28.6428 24.3465 28.6041 24.3335 28.5679C24.3206 28.5316 24.3002 28.4987 24.2738 28.4714C24.2474 28.444 24.2157 28.4229 24.1808 28.4094C24.1458 28.396 24.1085 28.3905 24.0713 28.3934Z",
                              fill: "#F36B81"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0717 28.3926C24.003 28.3926 23.937 28.4209 23.8884 28.4713C23.8398 28.5218 23.8125 28.5902 23.8125 28.6615C23.8125 28.7328 23.8398 28.8012 23.8884 28.8516C23.937 28.902 24.003 28.9304 24.0717 28.9304C24.1046 28.9286 24.1367 28.9193 24.1658 28.903C24.1948 28.8868 24.2199 28.864 24.2394 28.8365C24.2589 28.8089 24.2723 28.7772 24.2785 28.7436C24.2847 28.71 24.2836 28.6754 24.2753 28.6423C24.276 28.5822 24.2558 28.5239 24.2184 28.478C24.181 28.4322 24.1289 28.4019 24.0717 28.3926Z",
                              fill: "#F36C82"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0727 28.3934C24.0072 28.4029 23.9478 28.4381 23.9065 28.4917C23.8652 28.5452 23.8451 28.6131 23.8505 28.6814C23.8528 28.7168 23.8619 28.7513 23.8771 28.783C23.8924 28.8147 23.9135 28.843 23.9394 28.8662C23.9652 28.8894 23.9951 28.907 24.0276 28.9181C24.06 28.9293 24.0942 28.9337 24.1283 28.9311C24.1612 28.9293 24.1933 28.92 24.2224 28.9038C24.2514 28.8876 24.2765 28.8648 24.2961 28.8372C24.3156 28.8096 24.3289 28.7779 24.3351 28.7443C24.3413 28.7107 24.3402 28.6761 24.3319 28.643C24.332 28.6086 24.3253 28.5744 24.312 28.5428C24.2988 28.5112 24.2794 28.4828 24.255 28.4593C24.2307 28.4359 24.2019 28.4179 24.1705 28.4066C24.1392 28.3952 24.1059 28.3907 24.0727 28.3934Z",
                              fill: "#F36D83"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0728 28.3926C24.0073 28.4022 23.9478 28.4374 23.9065 28.4909C23.8652 28.5445 23.8451 28.6123 23.8505 28.6807C23.8528 28.716 23.8619 28.7505 23.8771 28.7822C23.8924 28.8139 23.9136 28.8422 23.9394 28.8654C23.9652 28.8886 23.9952 28.9062 24.0276 28.9174C24.06 28.9285 24.0942 28.9329 24.1283 28.9303C24.1971 28.9303 24.263 28.902 24.3117 28.8516C24.3603 28.8011 24.3876 28.7328 24.3876 28.6615C24.3876 28.5902 24.3603 28.5218 24.3117 28.4713C24.263 28.4209 24.1971 28.3926 24.1283 28.3926H24.0728Z",
                              fill: "#F36E84"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0719 28.3926C24.0083 28.4061 23.9511 28.4423 23.9105 28.4949C23.8699 28.5475 23.8484 28.6133 23.8497 28.6807C23.852 28.716 23.8611 28.7505 23.8763 28.7822C23.8916 28.8139 23.9128 28.8422 23.9386 28.8654C23.9644 28.8886 23.9944 28.9062 24.0268 28.9174C24.0592 28.9285 24.0934 28.9329 24.1275 28.9303C24.1963 28.9303 24.2622 28.902 24.3108 28.8516C24.3595 28.8011 24.3867 28.7328 24.3867 28.6615C24.3867 28.5902 24.3595 28.5218 24.3108 28.4713C24.2622 28.4209 24.1963 28.3926 24.1275 28.3926H24.0719Z",
                              fill: "#F36F85"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0719 28.3926C24.0082 28.4061 23.9511 28.4423 23.9105 28.4949C23.8699 28.5475 23.8484 28.6133 23.8497 28.6807C23.852 28.716 23.8611 28.7505 23.8763 28.7822C23.8916 28.8139 23.9127 28.8422 23.9385 28.8654C23.9644 28.8886 23.9943 28.9062 24.0268 28.9174C24.0592 28.9285 24.0934 28.9329 24.1274 28.9303C24.1592 28.9257 24.1898 28.9144 24.2173 28.8973C24.2448 28.8802 24.2688 28.8576 24.2878 28.8308C24.3067 28.8039 24.3203 28.7734 24.3278 28.741C24.3352 28.7087 24.3363 28.6751 24.3311 28.6423C24.3264 28.5744 24.297 28.5108 24.2489 28.4645C24.2008 28.4182 24.1376 28.3925 24.0719 28.3926Z",
                              fill: "#F37085"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0719 28.3926C24.0082 28.4061 23.9511 28.4423 23.9105 28.4949C23.8699 28.5475 23.8484 28.6133 23.8497 28.6807C23.852 28.716 23.8611 28.7505 23.8763 28.7822C23.8916 28.8139 23.9127 28.8422 23.9385 28.8654C23.9644 28.8886 23.9943 28.9062 24.0268 28.9174C24.0592 28.9285 24.0934 28.9329 24.1274 28.9303C24.1592 28.9257 24.1898 28.9144 24.2173 28.8973C24.2448 28.8802 24.2688 28.8576 24.2878 28.8308C24.3067 28.8039 24.3203 28.7734 24.3278 28.741C24.3352 28.7087 24.3363 28.6751 24.3311 28.6423C24.3264 28.5744 24.297 28.5108 24.2489 28.4645C24.2008 28.4182 24.1376 28.3925 24.0719 28.3926Z",
                              fill: "#F37186"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0711 28.3926C24.0191 28.3928 23.9682 28.4092 23.9253 28.4396C23.8824 28.4701 23.8493 28.5133 23.8303 28.5635C23.8114 28.6138 23.8074 28.6688 23.819 28.7214C23.8306 28.774 23.8572 28.8218 23.8954 28.8585C23.9335 28.8952 23.9814 28.9192 24.0328 28.9273C24.0843 28.9354 24.1368 28.9273 24.1838 28.9039C24.2307 28.8806 24.2697 28.8432 24.2959 28.7965C24.322 28.7498 24.334 28.6961 24.3303 28.6423C24.3256 28.5744 24.2962 28.5108 24.2481 28.4645C24.2 28.4182 24.1367 28.3925 24.0711 28.3926Z",
                              fill: "#F37287"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0722 28.4122C24.0412 28.4144 24.011 28.4234 23.9835 28.4385C23.956 28.4536 23.9319 28.4745 23.9127 28.4998C23.8935 28.5251 23.8797 28.5544 23.872 28.5856C23.8644 28.6168 23.8632 28.6494 23.8684 28.6811C23.8683 28.7156 23.8751 28.7497 23.8884 28.7813C23.9016 28.8129 23.921 28.8413 23.9454 28.8648C23.9697 28.8882 23.9985 28.9062 24.0299 28.9176C24.0613 28.9289 24.0946 28.9334 24.1277 28.9308C24.1898 28.917 24.2448 28.88 24.2824 28.8269C24.3199 28.7738 24.3374 28.7083 24.3314 28.6427C24.3291 28.6099 24.3205 28.5779 24.3062 28.5485C24.2919 28.5191 24.2721 28.493 24.248 28.4715C24.2239 28.4501 24.196 28.4339 24.1658 28.4237C24.1356 28.4135 24.1038 28.4096 24.0722 28.4122Z",
                              fill: "#F37388"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0722 28.4122C24.0412 28.4144 24.011 28.4234 23.9835 28.4385C23.956 28.4536 23.9319 28.4745 23.9127 28.4998C23.8935 28.5251 23.8797 28.5544 23.872 28.5856C23.8644 28.6168 23.8632 28.6494 23.8684 28.6811C23.8683 28.7156 23.8751 28.7497 23.8884 28.7813C23.9016 28.8129 23.921 28.8413 23.9454 28.8648C23.9697 28.8882 23.9985 28.9062 24.0299 28.9176C24.0613 28.9289 24.0946 28.9334 24.1277 28.9308C24.188 28.9135 24.2409 28.8757 24.2779 28.8234C24.3148 28.7711 24.3337 28.7075 24.3314 28.6427C24.3291 28.6099 24.3206 28.5779 24.3062 28.5485C24.2919 28.5191 24.2721 28.493 24.248 28.4715C24.2239 28.4501 24.196 28.4339 24.1658 28.4237C24.1356 28.4135 24.1038 28.4096 24.0722 28.4122Z",
                              fill: "#F37489"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0721 28.4122C24.0411 28.4144 24.0109 28.4234 23.9835 28.4385C23.956 28.4536 23.9319 28.4745 23.9127 28.4998C23.8935 28.5251 23.8797 28.5544 23.872 28.5856C23.8644 28.6168 23.8632 28.6494 23.8684 28.6811C23.8708 28.714 23.8794 28.746 23.8937 28.7753C23.908 28.8047 23.9277 28.8309 23.9518 28.8523C23.9759 28.8737 24.0039 28.89 24.034 28.9002C24.0642 28.9103 24.096 28.9142 24.1276 28.9116C24.2387 28.9116 24.3313 28.7772 24.3313 28.6427C24.3289 28.6099 24.3204 28.5779 24.3061 28.5485C24.2918 28.5191 24.272 28.493 24.2479 28.4715C24.2238 28.4501 24.1958 28.4339 24.1657 28.4237C24.1355 28.4135 24.1037 28.4096 24.0721 28.4122Z",
                              fill: "#F4758A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0721 28.4135C24.0411 28.4157 24.0109 28.4246 23.9835 28.4397C23.956 28.4548 23.9319 28.4757 23.9127 28.501C23.8935 28.5264 23.8797 28.5556 23.872 28.5868C23.8644 28.6181 23.8632 28.6506 23.8684 28.6824C23.8683 28.7143 23.8747 28.7459 23.887 28.7752C23.8993 28.8045 23.9173 28.8308 23.9399 28.8525C23.9625 28.8742 23.9893 28.8907 24.0184 28.9011C24.0475 28.9115 24.0784 28.9155 24.1091 28.9128C24.173 28.9128 24.2342 28.8865 24.2793 28.8397C24.3245 28.7928 24.3498 28.7293 24.3498 28.6631C24.3498 28.5969 24.3245 28.5334 24.2793 28.4866C24.2342 28.4398 24.173 28.4135 24.1091 28.4135H24.0721Z",
                              fill: "#F4768B"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0722 28.4122C24.0412 28.4145 24.011 28.4234 23.9835 28.4385C23.956 28.4536 23.9319 28.4745 23.9127 28.4998C23.8935 28.5251 23.8797 28.5544 23.872 28.5856C23.8644 28.6169 23.8632 28.6494 23.8684 28.6812C23.8683 28.7131 23.8747 28.7447 23.887 28.774C23.8993 28.8033 23.9173 28.8296 23.9399 28.8513C23.9626 28.873 23.9893 28.8895 24.0184 28.8999C24.0476 28.9103 24.0785 28.9143 24.1092 28.9116C24.1402 28.9094 24.1704 28.9004 24.1979 28.8854C24.2254 28.8703 24.2495 28.8494 24.2687 28.8241C24.2879 28.7988 24.3017 28.7695 24.3094 28.7383C24.317 28.7071 24.3182 28.6745 24.3129 28.6428C24.313 28.6108 24.3067 28.5792 24.2944 28.5499C24.2821 28.5206 24.2641 28.4943 24.2414 28.4726C24.2188 28.4509 24.192 28.4343 24.1629 28.424C24.1338 28.4136 24.1029 28.4096 24.0722 28.4122Z",
                              fill: "#F4778B"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0722 28.4122C24.0412 28.4145 24.011 28.4234 23.9835 28.4385C23.956 28.4536 23.9319 28.4745 23.9127 28.4998C23.8935 28.5251 23.8797 28.5544 23.872 28.5856C23.8644 28.6168 23.8632 28.6494 23.8684 28.6811C23.8684 28.8156 23.9981 28.9308 24.1092 28.9116C24.1402 28.9094 24.1704 28.9004 24.1979 28.8853C24.2254 28.8703 24.2495 28.8494 24.2687 28.8241C24.2879 28.7988 24.3017 28.7695 24.3094 28.7383C24.317 28.7071 24.3182 28.6745 24.3129 28.6428C24.313 28.6108 24.3067 28.5791 24.2944 28.5499C24.2821 28.5206 24.2641 28.4943 24.2414 28.4726C24.2188 28.4509 24.192 28.4343 24.1629 28.424C24.1338 28.4136 24.1029 28.4096 24.0722 28.4122Z",
                              fill: "#F4788C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0718 28.4122C24.0113 28.4218 23.9565 28.4549 23.9186 28.5048C23.8808 28.5548 23.8627 28.6179 23.8681 28.6811C23.8681 28.8156 23.9978 28.9308 24.1089 28.9116C24.1398 28.9094 24.1701 28.9004 24.1975 28.8853C24.225 28.8703 24.2491 28.8494 24.2683 28.8241C24.2875 28.7988 24.3013 28.7695 24.3089 28.7383C24.3166 28.7071 24.3178 28.6745 24.3125 28.6428C24.3126 28.6108 24.3063 28.5791 24.294 28.5499C24.2817 28.5206 24.2637 28.4943 24.241 28.4726C24.2184 28.4509 24.1917 28.4343 24.1625 28.424C24.1334 28.4136 24.1025 28.4096 24.0718 28.4122Z",
                              fill: "#F4798D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0718 28.4135C24.0113 28.423 23.9565 28.4561 23.9186 28.506C23.8808 28.556 23.8627 28.6191 23.8681 28.6823C23.8681 28.8168 23.9977 28.932 24.1088 28.9128C24.1727 28.9128 24.2339 28.8864 24.279 28.8396C24.3242 28.7928 24.3496 28.7293 24.3496 28.6631C24.3496 28.5969 24.3242 28.5334 24.279 28.4866C24.2339 28.4398 24.1727 28.4135 24.1088 28.4135H24.0718Z",
                              fill: "#F47A8E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.071 28.4135C24.0122 28.4268 23.9597 28.4609 23.9226 28.51C23.8854 28.559 23.8659 28.62 23.8673 28.6823C23.8673 28.8168 23.9969 28.932 24.108 28.9128C24.139 28.9105 24.1692 28.9016 24.1967 28.8865C24.2241 28.8714 24.2482 28.8506 24.2674 28.8253C24.2866 28.7999 24.3005 28.7707 24.3081 28.7395C24.3157 28.7082 24.3169 28.6757 24.3117 28.6439C24.307 28.5811 24.2796 28.5224 24.235 28.4797C24.1903 28.4369 24.1318 28.4133 24.071 28.4135Z",
                              fill: "#F47B8F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.071 28.4135C24.0122 28.4268 23.9597 28.4609 23.9226 28.51C23.8854 28.559 23.8659 28.62 23.8673 28.6823C23.8757 28.7436 23.9042 28.8 23.9481 28.842C23.9919 28.8839 24.0484 28.9089 24.108 28.9128C24.139 28.9105 24.1692 28.9016 24.1967 28.8865C24.2241 28.8714 24.2482 28.8506 24.2674 28.8253C24.2866 28.7999 24.3005 28.7707 24.3081 28.7395C24.3157 28.7082 24.3169 28.6757 24.3117 28.6439C24.307 28.5811 24.2796 28.5224 24.235 28.4797C24.1903 28.4369 24.1318 28.4133 24.071 28.4135Z",
                              fill: "#F47C90"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0715 28.4317C24.0429 28.4339 24.0151 28.4423 23.9898 28.4564C23.9646 28.4705 23.9425 28.49 23.925 28.5135C23.9075 28.5371 23.8951 28.5642 23.8884 28.5931C23.8817 28.622 23.881 28.6521 23.8863 28.6813C23.8863 28.7424 23.9097 28.801 23.9514 28.8442C23.9931 28.8875 24.0496 28.9118 24.1085 28.9118C24.1395 28.9095 24.1697 28.9006 24.1972 28.8855C24.2246 28.8704 24.2487 28.8496 24.2679 28.8243C24.2871 28.7989 24.301 28.7697 24.3086 28.7385C24.3162 28.7072 24.3174 28.6747 24.3122 28.6429C24.3098 28.6126 24.3018 28.5831 24.2884 28.556C24.275 28.529 24.2566 28.505 24.2342 28.4854C24.2119 28.4657 24.1859 28.4509 24.158 28.4416C24.1301 28.4324 24.1007 28.4291 24.0715 28.4317Z",
                              fill: "#F47D91"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0715 28.4317C24.0429 28.4339 24.0151 28.4423 23.9898 28.4564C23.9646 28.4705 23.9425 28.49 23.925 28.5135C23.9075 28.5371 23.8951 28.5642 23.8884 28.5931C23.8817 28.622 23.881 28.6521 23.8863 28.6813C23.8863 28.7424 23.9097 28.801 23.9514 28.8442C23.9931 28.8875 24.0496 28.9118 24.1085 28.9118C24.1395 28.9095 24.1697 28.9006 24.1972 28.8855C24.2246 28.8704 24.2487 28.8496 24.2679 28.8243C24.2871 28.7989 24.301 28.7697 24.3086 28.7385C24.3162 28.7072 24.3174 28.6747 24.3122 28.6429C24.3098 28.6126 24.3018 28.5831 24.2884 28.556C24.275 28.529 24.2566 28.505 24.2342 28.4854C24.2119 28.4657 24.1859 28.4509 24.158 28.4416C24.1301 28.4324 24.1007 28.4291 24.0715 28.4317Z",
                              fill: "#F47E91"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0715 28.4317C24.0429 28.4339 24.015 28.4423 23.9898 28.4564C23.9646 28.4705 23.9425 28.49 23.925 28.5135C23.9075 28.5371 23.8951 28.5642 23.8884 28.5931C23.8817 28.622 23.881 28.6521 23.8863 28.6813C23.8863 28.7424 23.9097 28.801 23.9514 28.8442C23.9931 28.8875 24.0495 28.9118 24.1085 28.9118C24.169 28.9022 24.2238 28.8691 24.2616 28.8192C24.2995 28.7692 24.3175 28.7062 24.3121 28.6429C24.3097 28.6126 24.3017 28.5831 24.2883 28.556C24.2749 28.529 24.2565 28.505 24.2342 28.4854C24.2118 28.4657 24.1859 28.4509 24.158 28.4416C24.13 28.4324 24.1006 28.4291 24.0715 28.4317Z",
                              fill: "#F47F92"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0715 28.4317C24.0429 28.4339 24.0151 28.4423 23.9898 28.4564C23.9646 28.4705 23.9425 28.49 23.925 28.5136C23.9075 28.5371 23.8951 28.5642 23.8884 28.5931C23.8817 28.622 23.881 28.6521 23.8863 28.6813C23.8862 28.7108 23.892 28.7399 23.9034 28.7668C23.9148 28.7938 23.9315 28.818 23.9524 28.8379C23.9733 28.8578 23.998 28.8729 24.0249 28.8823C24.0518 28.8918 24.0803 28.8952 24.1085 28.8925C24.1377 28.8901 24.1662 28.8817 24.1923 28.8679C24.2183 28.854 24.2415 28.8349 24.2605 28.8117C24.2794 28.7885 24.2937 28.7616 24.3026 28.7327C24.3115 28.7037 24.3147 28.6732 24.3122 28.6429C24.3098 28.6126 24.3018 28.5831 24.2884 28.556C24.275 28.529 24.2566 28.505 24.2343 28.4854C24.2119 28.4657 24.186 28.4509 24.158 28.4416C24.1301 28.4324 24.1007 28.4291 24.0715 28.4317Z",
                              fill: "#F48093"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0715 28.4317C24.0429 28.4339 24.0151 28.4423 23.9898 28.4564C23.9646 28.4705 23.9425 28.49 23.925 28.5135C23.9075 28.5371 23.8951 28.5642 23.8884 28.5931C23.8817 28.622 23.881 28.6521 23.8863 28.6813C23.8863 28.8157 23.9974 28.9117 24.1085 28.8925C24.1377 28.8901 24.1662 28.8817 24.1923 28.8679C24.2183 28.854 24.2415 28.8349 24.2605 28.8117C24.2794 28.7885 24.2937 28.7616 24.3026 28.7327C24.3115 28.7037 24.3147 28.6732 24.3122 28.6429C24.3098 28.6126 24.3018 28.5831 24.2884 28.556C24.275 28.529 24.2566 28.505 24.2343 28.4854C24.2119 28.4657 24.186 28.4509 24.158 28.4416C24.1301 28.4324 24.1007 28.4291 24.0715 28.4317Z",
                              fill: "#F58194"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0715 28.4317C24.0429 28.4339 24.0151 28.4423 23.9898 28.4564C23.9646 28.4705 23.9425 28.49 23.925 28.5135C23.9075 28.5371 23.8951 28.5642 23.8884 28.5931C23.8817 28.622 23.881 28.6521 23.8863 28.6813C23.8863 28.8157 23.9974 28.9117 24.1085 28.8925C24.1377 28.8901 24.1662 28.8817 24.1923 28.8679C24.2183 28.854 24.2415 28.8349 24.2605 28.8117C24.2794 28.7885 24.2937 28.7616 24.3026 28.7327C24.3115 28.7037 24.3147 28.6732 24.3122 28.6429C24.3098 28.6126 24.3018 28.5831 24.2884 28.556C24.275 28.529 24.2566 28.505 24.2343 28.4854C24.2119 28.4657 24.186 28.4509 24.158 28.4416C24.1301 28.4324 24.1007 28.4291 24.0715 28.4317Z",
                              fill: "#F58295"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.071 28.4317C24.0154 28.4412 23.9652 28.4722 23.9308 28.5186C23.8965 28.565 23.8804 28.6231 23.8858 28.6813C23.8858 28.8158 23.9969 28.9117 24.108 28.8925C24.1378 28.894 24.1675 28.888 24.1946 28.875C24.2216 28.8619 24.2452 28.8423 24.2634 28.8178C24.2816 28.7933 24.2938 28.7646 24.299 28.7341C24.3042 28.7037 24.3022 28.6724 24.2932 28.643C24.2934 28.6135 24.2875 28.5844 24.2762 28.5574C24.2648 28.5304 24.2481 28.5063 24.2272 28.4864C24.2062 28.4665 24.1816 28.4513 24.1547 28.4419C24.1278 28.4325 24.0993 28.429 24.071 28.4317Z",
                              fill: "#F58396"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.072 28.4317C24.0181 28.4449 23.9704 28.4769 23.9366 28.5224C23.9029 28.5679 23.8853 28.624 23.8868 28.6813C23.8868 28.8158 23.9979 28.9117 24.109 28.8925C24.1376 28.8903 24.1654 28.882 24.1906 28.8679C24.2159 28.8538 24.2379 28.8342 24.2554 28.8107C24.2728 28.7871 24.2854 28.76 24.292 28.7311C24.2987 28.7022 24.2994 28.6722 24.2941 28.643C24.2943 28.6135 24.2884 28.5844 24.2771 28.5574C24.2657 28.5304 24.249 28.5063 24.2281 28.4864C24.2072 28.4665 24.1825 28.4513 24.1556 28.4419C24.1287 28.4325 24.1002 28.429 24.072 28.4317Z",
                              fill: "#F58497"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.072 28.4319C24.0181 28.4451 23.9704 28.4771 23.9366 28.5226C23.9029 28.568 23.8853 28.6242 23.8868 28.6815C23.8868 28.816 23.9979 28.9119 24.109 28.8927C24.1376 28.8905 24.1654 28.8822 24.1906 28.8681C24.2159 28.854 24.2379 28.8344 24.2554 28.8109C24.2728 28.7873 24.2854 28.7602 24.292 28.7313C24.2987 28.7024 24.2994 28.6724 24.2941 28.6431C24.2895 28.5854 24.264 28.5316 24.2228 28.4925C24.1817 28.4533 24.1278 28.4317 24.072 28.4319Z",
                              fill: "#F58597"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.072 28.4319C24.0181 28.4451 23.9704 28.4771 23.9366 28.5226C23.9029 28.5681 23.8853 28.6242 23.8868 28.6815C23.8915 28.7393 23.9169 28.7931 23.9581 28.8322C23.9992 28.8714 24.0531 28.893 24.109 28.8928C24.1376 28.8906 24.1654 28.8822 24.1906 28.8681C24.2159 28.854 24.2379 28.8344 24.2554 28.8109C24.2728 28.7873 24.2854 28.7602 24.292 28.7313C24.2987 28.7024 24.2994 28.6724 24.2941 28.6431C24.2895 28.5854 24.264 28.5316 24.2228 28.4925C24.1817 28.4533 24.1278 28.4317 24.072 28.4319Z",
                              fill: "#F58698"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.072 28.4319C24.0181 28.4451 23.9704 28.4771 23.9366 28.5226C23.9029 28.5681 23.8853 28.6242 23.8868 28.6815C23.8915 28.7393 23.9169 28.7931 23.9581 28.8322C23.9992 28.8714 24.0531 28.893 24.109 28.8928C24.1376 28.8906 24.1654 28.8822 24.1906 28.8681C24.2159 28.854 24.2379 28.8344 24.2554 28.8109C24.2728 28.7873 24.2854 28.7602 24.292 28.7313C24.2987 28.7024 24.2994 28.6724 24.2941 28.6431C24.2858 28.587 24.2593 28.5354 24.2189 28.497C24.1785 28.4586 24.1267 28.4356 24.072 28.4319Z",
                              fill: "#F58799"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0709 28.4514C24.0447 28.4536 24.0193 28.4615 23.9963 28.4746C23.9732 28.4878 23.9532 28.5058 23.9374 28.5276C23.9217 28.5494 23.9105 28.5744 23.9048 28.601C23.8991 28.6276 23.8989 28.6552 23.9043 28.6819C23.9043 28.7379 23.9257 28.7916 23.9639 28.8312C24.0021 28.8709 24.0539 28.8931 24.1079 28.8931C24.1636 28.8836 24.2137 28.8526 24.2481 28.8062C24.2825 28.7599 24.2986 28.7017 24.2931 28.6435C24.2908 28.6157 24.2832 28.5886 24.2707 28.5639C24.2583 28.5392 24.2412 28.5173 24.2206 28.4994C24.1999 28.4816 24.1761 28.4682 24.1504 28.4599C24.1247 28.4517 24.0977 28.4488 24.0709 28.4514Z",
                              fill: "#F5889A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.071 28.4514C24.0448 28.4536 24.0193 28.4615 23.9963 28.4746C23.9733 28.4878 23.9532 28.5058 23.9374 28.5276C23.9217 28.5494 23.9105 28.5744 23.9048 28.601C23.8991 28.6276 23.8989 28.6552 23.9043 28.6819C23.9043 28.7379 23.9257 28.7916 23.9639 28.8312C24.0021 28.8709 24.054 28.8931 24.108 28.8931C24.1618 28.8799 24.2096 28.8478 24.2434 28.8024C24.2771 28.7569 24.2947 28.7008 24.2932 28.6435C24.2909 28.6157 24.2833 28.5886 24.2709 28.5639C24.2584 28.5392 24.2413 28.5173 24.2207 28.4994C24.2 28.4816 24.1761 28.4682 24.1504 28.4599C24.1247 28.4517 24.0977 28.4488 24.071 28.4514Z",
                              fill: "#F5899B"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0709 28.4514C24.0447 28.4536 24.0192 28.4615 23.9962 28.4746C23.9732 28.4878 23.9532 28.5058 23.9374 28.5276C23.9217 28.5494 23.9105 28.5744 23.9048 28.601C23.8991 28.6276 23.8989 28.6552 23.9043 28.6819C23.9041 28.7088 23.9094 28.7354 23.9199 28.7601C23.9303 28.7847 23.9456 28.8068 23.9648 28.8249C23.984 28.843 24.0067 28.8567 24.0313 28.8652C24.056 28.8736 24.082 28.8766 24.1079 28.8739C24.1347 28.8715 24.1607 28.8636 24.1845 28.8507C24.2084 28.8378 24.2295 28.8201 24.2467 28.7987C24.2639 28.7772 24.2769 28.7525 24.2848 28.7259C24.2928 28.6992 24.2956 28.6712 24.293 28.6435C24.2907 28.6157 24.2831 28.5886 24.2706 28.5639C24.2582 28.5392 24.2411 28.5173 24.2205 28.4994C24.1998 28.4816 24.176 28.4682 24.1503 28.4599C24.1246 28.4517 24.0976 28.4488 24.0709 28.4514Z",
                              fill: "#F58A9C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0709 28.4514C24.0447 28.4536 24.0192 28.4615 23.9962 28.4746C23.9732 28.4878 23.9532 28.5058 23.9374 28.5276C23.9217 28.5494 23.9105 28.5744 23.9048 28.601C23.8991 28.6276 23.8989 28.6552 23.9043 28.6819C23.9041 28.7088 23.9094 28.7354 23.9199 28.7601C23.9303 28.7847 23.9456 28.8068 23.9648 28.8249C23.984 28.843 24.0067 28.8567 24.0313 28.8652C24.056 28.8736 24.082 28.8766 24.1079 28.8739C24.1347 28.8715 24.1607 28.8636 24.1845 28.8507C24.2084 28.8378 24.2295 28.8201 24.2467 28.7987C24.2639 28.7772 24.2769 28.7525 24.2848 28.7259C24.2928 28.6992 24.2956 28.6712 24.293 28.6435C24.2907 28.6157 24.2831 28.5886 24.2706 28.5639C24.2582 28.5392 24.2411 28.5173 24.2205 28.4994C24.1998 28.4816 24.176 28.4682 24.1503 28.4599C24.1246 28.4517 24.0976 28.4488 24.0709 28.4514Z",
                              fill: "#F58B9D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0709 28.4514C24.0447 28.4536 24.0192 28.4615 23.9962 28.4746C23.9732 28.4878 23.9532 28.5058 23.9374 28.5276C23.9217 28.5494 23.9105 28.5744 23.9048 28.601C23.8991 28.6276 23.8989 28.6552 23.9043 28.6819C23.9041 28.7088 23.9094 28.7354 23.9199 28.7601C23.9303 28.7847 23.9456 28.8068 23.9648 28.8249C23.984 28.843 24.0067 28.8567 24.0313 28.8652C24.056 28.8736 24.082 28.8766 24.1079 28.8739C24.1347 28.8715 24.1607 28.8636 24.1845 28.8507C24.2084 28.8378 24.2295 28.8201 24.2467 28.7987C24.2639 28.7772 24.2769 28.7525 24.2848 28.7259C24.2928 28.6992 24.2956 28.6712 24.293 28.6435C24.2907 28.6157 24.2831 28.5886 24.2706 28.5639C24.2582 28.5392 24.2411 28.5173 24.2205 28.4994C24.1998 28.4816 24.176 28.4682 24.1503 28.4599C24.1246 28.4517 24.0976 28.4488 24.0709 28.4514Z",
                              fill: "#F58C9D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0702 28.4505C24.0195 28.4599 23.974 28.4889 23.9431 28.5317C23.9121 28.5744 23.898 28.6278 23.9035 28.6809C23.9035 28.7961 24.0146 28.8922 24.1072 28.873C24.134 28.8705 24.1601 28.8627 24.1839 28.8498C24.2078 28.8368 24.229 28.8191 24.2462 28.7977C24.2634 28.7763 24.2763 28.7516 24.2843 28.7249C24.2922 28.6983 24.295 28.6703 24.2925 28.6425C24.2836 28.5883 24.2564 28.5391 24.2156 28.5039C24.1748 28.4687 24.1233 28.4497 24.0702 28.4505Z",
                              fill: "#F68D9E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.071 28.4514C24.0221 28.4645 23.979 28.4944 23.9487 28.5363C23.9184 28.5782 23.9028 28.6295 23.9044 28.6819C23.9044 28.7971 24.0154 28.8931 24.108 28.8739C24.1342 28.8718 24.1596 28.8639 24.1826 28.8507C24.2056 28.8376 24.2256 28.8195 24.2414 28.7977C24.2572 28.7759 24.2683 28.7509 24.274 28.7243C24.2797 28.6977 24.2799 28.6702 24.2746 28.6435C24.2747 28.6166 24.2694 28.5899 24.2589 28.5653C24.2485 28.5406 24.2332 28.5185 24.214 28.5004C24.1948 28.4823 24.1721 28.4686 24.1475 28.4601C24.1228 28.4517 24.0968 28.4487 24.071 28.4514Z",
                              fill: "#F68E9F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0711 28.4505C24.0222 28.4635 23.979 28.4934 23.9487 28.5353C23.9184 28.5772 23.9028 28.6286 23.9044 28.6809C23.9126 28.732 23.9371 28.7787 23.9741 28.8136C24.0111 28.8484 24.0583 28.8693 24.1081 28.8729C24.1621 28.8729 24.214 28.8507 24.2522 28.811C24.2904 28.7714 24.3118 28.7177 24.3118 28.6617C24.3118 28.6057 24.2904 28.552 24.2522 28.5124C24.214 28.4727 24.1621 28.4505 24.1081 28.4505H24.0711Z",
                              fill: "#F68FA0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0711 28.4505C24.0222 28.4635 23.979 28.4934 23.9487 28.5353C23.9184 28.5772 23.9028 28.6286 23.9044 28.6809C23.9126 28.732 23.9371 28.7787 23.9741 28.8136C24.0111 28.8484 24.0583 28.8693 24.1081 28.8729C24.1621 28.8729 24.214 28.8507 24.2522 28.811C24.2904 28.7714 24.3118 28.7177 24.3118 28.6617C24.3118 28.6057 24.2904 28.552 24.2522 28.5124C24.214 28.4727 24.1621 28.4505 24.1081 28.4505H24.0711Z",
                              fill: "#F690A1"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0711 28.4505C24.0222 28.4635 23.979 28.4934 23.9487 28.5353C23.9184 28.5772 23.9028 28.6286 23.9044 28.6809C23.9126 28.732 23.9371 28.7787 23.9741 28.8136C24.0111 28.8484 24.0583 28.8693 24.1081 28.8729C24.1621 28.8729 24.214 28.8507 24.2522 28.811C24.2904 28.7714 24.3118 28.7177 24.3118 28.6617C24.3118 28.6057 24.2904 28.552 24.2522 28.5124C24.214 28.4727 24.1621 28.4505 24.1081 28.4505H24.0711Z",
                              fill: "#F691A2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0701 28.4706C24.0457 28.473 24.022 28.4804 24.0004 28.4923C23.9788 28.5042 23.9597 28.5205 23.9442 28.5402C23.9287 28.5598 23.9171 28.5824 23.9101 28.6068C23.9031 28.6311 23.9008 28.6566 23.9034 28.6818C23.9116 28.7329 23.9361 28.7797 23.9731 28.8145C24.01 28.8494 24.0572 28.8703 24.1071 28.8739C24.1333 28.8717 24.1587 28.8638 24.1818 28.8507C24.2048 28.8376 24.2248 28.8195 24.2406 28.7977C24.2564 28.7759 24.2675 28.7509 24.2732 28.7243C24.2789 28.6977 24.2791 28.6701 24.2738 28.6435C24.2744 28.6171 24.2693 28.591 24.2587 28.567C24.2481 28.5431 24.2323 28.522 24.2127 28.5053C24.193 28.4886 24.17 28.4769 24.1452 28.4709C24.1205 28.4648 24.0948 28.4647 24.0701 28.4706Z",
                              fill: "#F692A3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0705 28.4706C24.0467 28.4727 24.0236 28.4801 24.0028 28.4922C23.9819 28.5044 23.9639 28.5211 23.9499 28.5411C23.9358 28.5612 23.9261 28.5841 23.9213 28.6084C23.9166 28.6327 23.9169 28.6577 23.9223 28.6818C23.9223 28.7071 23.9271 28.732 23.9364 28.7553C23.9457 28.7786 23.9593 28.7998 23.9765 28.8176C23.9937 28.8355 24.0141 28.8496 24.0366 28.8593C24.0591 28.8689 24.0832 28.8739 24.1075 28.8739C24.1337 28.8717 24.1591 28.8638 24.1821 28.8507C24.2052 28.8376 24.2252 28.8195 24.241 28.7977C24.2567 28.7759 24.2679 28.7509 24.2736 28.7243C24.2793 28.6977 24.2795 28.6701 24.2742 28.6435C24.2748 28.6171 24.2696 28.591 24.2591 28.567C24.2485 28.5431 24.2327 28.522 24.2131 28.5053C24.1934 28.4886 24.1704 28.4769 24.1456 28.4709C24.1209 28.4648 24.0952 28.4647 24.0705 28.4706Z",
                              fill: "#F693A3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0705 28.4706C24.0467 28.4727 24.0236 28.4801 24.0028 28.4922C23.982 28.5044 23.9639 28.5211 23.9499 28.5411C23.9358 28.5611 23.9261 28.5841 23.9213 28.6084C23.9166 28.6327 23.9169 28.6577 23.9223 28.6818C23.9221 28.7062 23.927 28.7304 23.9365 28.7527C23.946 28.775 23.9599 28.795 23.9774 28.8113C23.9949 28.8276 24.0156 28.84 24.038 28.8474C24.0604 28.8549 24.0841 28.8573 24.1075 28.8546C24.2186 28.8546 24.2742 28.7586 24.2742 28.6434C24.2748 28.6171 24.2697 28.5909 24.2591 28.567C24.2485 28.5431 24.2327 28.522 24.2131 28.5053C24.1934 28.4886 24.1704 28.4769 24.1457 28.4708C24.1209 28.4648 24.0952 28.4647 24.0705 28.4706Z",
                              fill: "#F694A4"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0705 28.4692C24.0467 28.4714 24.0236 28.4788 24.0028 28.4909C23.9819 28.5031 23.9639 28.5198 23.9499 28.5398C23.9358 28.5598 23.9261 28.5828 23.9213 28.6071C23.9166 28.6314 23.9169 28.6564 23.9223 28.6805C23.9221 28.7049 23.927 28.7291 23.9365 28.7514C23.946 28.7738 23.9599 28.7937 23.9774 28.81C23.9949 28.8264 24.0156 28.8387 24.038 28.8461C24.0604 28.8536 24.0841 28.8561 24.1075 28.8533C24.1318 28.8533 24.1559 28.8484 24.1784 28.8388C24.2008 28.8291 24.2212 28.8149 24.2384 28.7971C24.2556 28.7793 24.2693 28.7581 24.2786 28.7348C24.2879 28.7115 24.2927 28.6865 24.2927 28.6613C24.2927 28.6361 24.2879 28.6111 24.2786 28.5878C24.2693 28.5645 24.2556 28.5433 24.2384 28.5255C24.2212 28.5077 24.2008 28.4935 24.1784 28.4839C24.1559 28.4742 24.1318 28.4692 24.1075 28.4692H24.0705Z",
                              fill: "#F695A5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0705 28.4692C24.0467 28.4714 24.0236 28.4788 24.0028 28.4909C23.9819 28.5031 23.9639 28.5198 23.9499 28.5398C23.9358 28.5598 23.9261 28.5828 23.9213 28.6071C23.9166 28.6314 23.9169 28.6564 23.9223 28.6805C23.9221 28.7049 23.927 28.7291 23.9365 28.7514C23.946 28.7738 23.9599 28.7937 23.9774 28.81C23.9949 28.8264 24.0156 28.8387 24.038 28.8461C24.0604 28.8536 24.0841 28.8561 24.1075 28.8533C24.1318 28.8533 24.1559 28.8484 24.1784 28.8388C24.2008 28.8291 24.2212 28.8149 24.2384 28.7971C24.2556 28.7793 24.2693 28.7581 24.2786 28.7348C24.2879 28.7115 24.2927 28.6865 24.2927 28.6613C24.2927 28.6361 24.2879 28.6111 24.2786 28.5878C24.2693 28.5645 24.2556 28.5433 24.2384 28.5255C24.2212 28.5077 24.2008 28.4935 24.1784 28.4839C24.1559 28.4742 24.1318 28.4692 24.1075 28.4692H24.0705Z",
                              fill: "#F696A6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0704 28.4693C24.0466 28.4714 24.0235 28.4788 24.0027 28.491C23.9819 28.5031 23.9639 28.5198 23.9498 28.5398C23.9358 28.5599 23.9261 28.5828 23.9213 28.6071C23.9166 28.6314 23.9169 28.6564 23.9223 28.6805C23.9221 28.705 23.927 28.7291 23.9365 28.7515C23.946 28.7738 23.9599 28.7937 23.9774 28.8101C23.9949 28.8264 24.0156 28.8387 24.038 28.8462C24.0604 28.8536 24.084 28.8561 24.1074 28.8534C24.1318 28.851 24.1554 28.8436 24.177 28.8316C24.1986 28.8197 24.2177 28.8035 24.2332 28.7838C24.2487 28.7642 24.2603 28.7416 24.2673 28.7172C24.2743 28.6929 24.2766 28.6674 24.274 28.6422C24.2653 28.593 24.24 28.5487 24.2027 28.517C24.1655 28.4854 24.1186 28.4684 24.0704 28.4693Z",
                              fill: "#F697A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0704 28.4692C24.0466 28.4714 24.0235 28.4788 24.0027 28.4909C23.9819 28.5031 23.9639 28.5198 23.9498 28.5398C23.9358 28.5598 23.9261 28.5828 23.9213 28.6071C23.9166 28.6314 23.9169 28.6564 23.9223 28.6805C23.9223 28.7958 24.0149 28.8726 24.1074 28.8534C24.1318 28.851 24.1554 28.8436 24.177 28.8316C24.1986 28.8197 24.2177 28.8035 24.2332 28.7838C24.2487 28.7642 24.2603 28.7415 24.2673 28.7172C24.2743 28.6929 24.2766 28.6674 24.274 28.6421C24.2623 28.5946 24.2362 28.5521 24.1995 28.5211C24.1629 28.49 24.1177 28.4718 24.0704 28.4692Z",
                              fill: "#F698A8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0722 28.4692C24.0282 28.4821 23.9897 28.51 23.9628 28.5483C23.9359 28.5866 23.9223 28.6332 23.924 28.6805C23.932 28.7265 23.9546 28.7684 23.9881 28.7997C24.0216 28.831 24.0642 28.8499 24.1092 28.8533C24.133 28.8512 24.1561 28.8438 24.1769 28.8317C24.1977 28.8195 24.2157 28.8028 24.2298 28.7828C24.2438 28.7628 24.2536 28.7398 24.2583 28.7156C24.2631 28.6913 24.2627 28.6663 24.2573 28.6421C24.2527 28.5946 24.2312 28.5505 24.197 28.5186C24.1627 28.4866 24.1182 28.469 24.0722 28.4692Z",
                              fill: "#F799A9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0722 28.4692C24.0282 28.4821 23.9897 28.51 23.9628 28.5483C23.9359 28.5866 23.9223 28.6332 23.924 28.6805C23.932 28.7265 23.9546 28.7684 23.9881 28.7997C24.0216 28.831 24.0642 28.8499 24.1092 28.8533C24.133 28.8512 24.1561 28.8438 24.1769 28.8317C24.1977 28.8195 24.2157 28.8028 24.2298 28.7828C24.2438 28.7628 24.2536 28.7398 24.2583 28.7156C24.2631 28.6913 24.2627 28.6663 24.2573 28.6421C24.2527 28.5946 24.2312 28.5505 24.197 28.5186C24.1627 28.4866 24.1182 28.469 24.0722 28.4692Z",
                              fill: "#F79AA9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0722 28.4692C24.0282 28.4821 23.9897 28.51 23.9628 28.5483C23.9359 28.5866 23.9223 28.6332 23.924 28.6805C23.932 28.7265 23.9546 28.7684 23.9881 28.7997C24.0216 28.831 24.0642 28.8499 24.1092 28.8533C24.133 28.8512 24.1561 28.8438 24.1769 28.8317C24.1977 28.8195 24.2157 28.8028 24.2298 28.7828C24.2438 28.7628 24.2536 28.7398 24.2583 28.7156C24.2631 28.6913 24.2627 28.6663 24.2573 28.6421C24.2527 28.5946 24.2312 28.5505 24.197 28.5186C24.1627 28.4866 24.1182 28.469 24.0722 28.4692Z",
                              fill: "#F79BAA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0711 28.4897C24.0492 28.4921 24.0279 28.499 24.0086 28.51C23.9892 28.5209 23.9721 28.5358 23.9584 28.5537C23.9446 28.5715 23.9344 28.5921 23.9283 28.614C23.9222 28.636 23.9204 28.6591 23.923 28.6818C23.9311 28.7278 23.9536 28.7697 23.9871 28.801C24.0206 28.8323 24.0632 28.8511 24.1081 28.8546C24.1319 28.8525 24.155 28.8451 24.1758 28.8329C24.1966 28.8208 24.2146 28.8041 24.2287 28.7841C24.2427 28.764 24.2525 28.7411 24.2572 28.7168C24.262 28.6926 24.2616 28.6675 24.2562 28.6434C24.2569 28.6196 24.2523 28.5958 24.2427 28.5741C24.2331 28.5525 24.2187 28.5334 24.2007 28.5185C24.1828 28.5036 24.1617 28.4933 24.1392 28.4883C24.1167 28.4833 24.0934 28.4838 24.0711 28.4897Z",
                              fill: "#F79CAB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.072 28.4897C24.0296 28.4987 23.9915 28.5229 23.9644 28.558C23.9374 28.593 23.923 28.6369 23.9239 28.6818C23.9319 28.7278 23.9545 28.7697 23.988 28.801C24.0215 28.8323 24.0641 28.8511 24.1091 28.8546C24.1329 28.8525 24.156 28.8451 24.1768 28.8329C24.1976 28.8208 24.2156 28.8041 24.2297 28.7841C24.2437 28.764 24.2535 28.7411 24.2582 28.7168C24.263 28.6926 24.2626 28.6675 24.2572 28.6434C24.2579 28.6196 24.2533 28.5958 24.2437 28.5741C24.234 28.5525 24.2197 28.5334 24.2017 28.5185C24.1837 28.5036 24.1627 28.4933 24.1402 28.4883C24.1176 28.4833 24.0943 28.4838 24.072 28.4897Z",
                              fill: "#F79DAC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.072 28.4897C24.0506 28.4918 24.0298 28.4987 24.0112 28.5099C23.9926 28.5211 23.9766 28.5363 23.9643 28.5546C23.9519 28.5729 23.9436 28.5937 23.9398 28.6157C23.936 28.6376 23.9369 28.6602 23.9424 28.6818C23.9424 28.7276 23.9599 28.7716 23.9912 28.804C24.0224 28.8364 24.0648 28.8546 24.109 28.8546C24.1529 28.8417 24.1915 28.8139 24.2183 28.7756C24.2452 28.7373 24.2588 28.6907 24.2571 28.6434C24.2578 28.6196 24.2532 28.5958 24.2436 28.5741C24.2339 28.5525 24.2196 28.5334 24.2016 28.5185C24.1836 28.5036 24.1626 28.4933 24.1401 28.4883C24.1176 28.4833 24.0943 28.4838 24.072 28.4897Z",
                              fill: "#F79EAD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.072 28.4899C24.0506 28.492 24.0299 28.4989 24.0112 28.5101C23.9926 28.5213 23.9766 28.5365 23.9643 28.5548C23.952 28.5731 23.9436 28.5939 23.9398 28.6159C23.936 28.6379 23.9369 28.6604 23.9424 28.682C23.9422 28.7039 23.9466 28.7256 23.9551 28.7456C23.9637 28.7656 23.9763 28.7835 23.9921 28.798C24.0079 28.8126 24.0265 28.8234 24.0466 28.8299C24.0668 28.8364 24.0881 28.8384 24.109 28.8356C24.131 28.8332 24.1522 28.8264 24.1716 28.8154C24.1909 28.8044 24.208 28.7896 24.2218 28.7717C24.2355 28.7539 24.2458 28.7333 24.2519 28.7113C24.258 28.6893 24.2597 28.6663 24.2571 28.6436C24.2548 28.6209 24.2482 28.5988 24.2376 28.5787C24.2271 28.5587 24.2128 28.5409 24.1955 28.5266C24.1783 28.5123 24.1585 28.5018 24.1373 28.4955C24.1161 28.4892 24.0939 28.4873 24.072 28.4899Z",
                              fill: "#F79FAE"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.072 28.4899C24.0506 28.492 24.0299 28.4989 24.0112 28.5101C23.9926 28.5213 23.9766 28.5365 23.9643 28.5548C23.952 28.5731 23.9436 28.5939 23.9398 28.6159C23.936 28.6379 23.9369 28.6604 23.9424 28.682C23.9422 28.7039 23.9466 28.7256 23.9551 28.7456C23.9637 28.7656 23.9763 28.7835 23.9921 28.798C24.0079 28.8126 24.0265 28.8234 24.0466 28.8299C24.0668 28.8364 24.0881 28.8384 24.109 28.8356C24.131 28.8332 24.1522 28.8264 24.1716 28.8154C24.1909 28.8044 24.208 28.7896 24.2218 28.7717C24.2355 28.7539 24.2458 28.7333 24.2519 28.7113C24.258 28.6893 24.2597 28.6663 24.2571 28.6436C24.2548 28.6209 24.2482 28.5988 24.2376 28.5787C24.2271 28.5587 24.2128 28.5409 24.1955 28.5266C24.1783 28.5123 24.1585 28.5018 24.1373 28.4955C24.1161 28.4892 24.0939 28.4873 24.072 28.4899Z",
                              fill: "#F7A0AF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.072 28.4899C24.0506 28.492 24.0299 28.4989 24.0112 28.5101C23.9926 28.5213 23.9766 28.5365 23.9643 28.5548C23.952 28.5731 23.9436 28.5939 23.9398 28.6159C23.936 28.6378 23.9369 28.6604 23.9424 28.682C23.9422 28.7039 23.9466 28.7255 23.9551 28.7456C23.9637 28.7656 23.9763 28.7835 23.9921 28.798C24.0079 28.8126 24.0265 28.8234 24.0466 28.8299C24.0668 28.8364 24.0881 28.8383 24.109 28.8356C24.131 28.8332 24.1522 28.8263 24.1716 28.8154C24.1909 28.8044 24.208 28.7896 24.2218 28.7717C24.2355 28.7538 24.2458 28.7333 24.2519 28.7113C24.258 28.6893 24.2597 28.6663 24.2571 28.6436C24.2485 28.5995 24.2253 28.5601 24.1914 28.532C24.1576 28.5039 24.1153 28.489 24.072 28.4899Z",
                              fill: "#F7A1AF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0706 28.4899C24.0297 28.4992 23.9936 28.5241 23.9696 28.5597C23.9455 28.5952 23.9353 28.6389 23.941 28.682C23.9408 28.7039 23.9452 28.7255 23.9537 28.7456C23.9623 28.7656 23.9749 28.7835 23.9907 28.798C24.0065 28.8126 24.0251 28.8234 24.0452 28.8299C24.0654 28.8364 24.0867 28.8383 24.1076 28.8356C24.1296 28.8332 24.1508 28.8263 24.1702 28.8154C24.1896 28.8044 24.2066 28.7896 24.2204 28.7717C24.2342 28.7538 24.2444 28.7333 24.2505 28.7113C24.2566 28.6893 24.2584 28.6663 24.2558 28.6436C24.2471 28.5995 24.2239 28.5601 24.19 28.532C24.1562 28.5039 24.1139 28.489 24.0706 28.4899Z",
                              fill: "#F7A2B0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0713 28.4899C24.0322 28.5026 23.9983 28.5283 23.9749 28.563C23.9514 28.5978 23.9397 28.6396 23.9416 28.6819C23.9462 28.7244 23.9657 28.7636 23.9965 28.7919C24.0273 28.8203 24.0671 28.8358 24.1083 28.8355C24.1302 28.8331 24.1515 28.8263 24.1709 28.8153C24.1902 28.8043 24.2073 28.7895 24.2211 28.7716C24.2348 28.7538 24.2451 28.7332 24.2512 28.7112C24.2573 28.6892 24.259 28.6663 24.2564 28.6436C24.2478 28.5995 24.2245 28.56 24.1907 28.532C24.1569 28.5039 24.1146 28.489 24.0713 28.4899Z",
                              fill: "#F7A3B1"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0712 28.489C24.0322 28.5017 23.9983 28.5274 23.9749 28.5622C23.9514 28.5969 23.9397 28.6387 23.9416 28.6811C23.9462 28.7235 23.9657 28.7627 23.9965 28.7911C24.0272 28.8194 24.0671 28.8349 24.1082 28.8347C24.1296 28.8326 24.1504 28.8258 24.1689 28.8146C24.1875 28.8034 24.2036 28.7881 24.2159 28.7698C24.2282 28.7515 24.2366 28.7307 24.2404 28.7087C24.2441 28.6868 24.2433 28.6643 24.2378 28.6427C24.238 28.6208 24.2336 28.5991 24.225 28.5791C24.2165 28.5591 24.2039 28.5412 24.1881 28.5267C24.1723 28.5121 24.1537 28.5012 24.1336 28.4947C24.1134 28.4882 24.0922 28.4863 24.0712 28.489Z",
                              fill: "#F7A4B2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0712 28.4899C24.0322 28.5025 23.9983 28.5283 23.9749 28.563C23.9514 28.5977 23.9397 28.6395 23.9416 28.6819C23.9462 28.7243 23.9657 28.7635 23.9965 28.7919C24.0272 28.8203 24.0671 28.8358 24.1082 28.8355C24.1296 28.8334 24.1504 28.8266 24.1689 28.8154C24.1875 28.8042 24.2036 28.7889 24.2159 28.7706C24.2282 28.7524 24.2366 28.7315 24.2404 28.7096C24.2441 28.6876 24.2433 28.6651 24.2378 28.6435C24.2332 28.6011 24.2137 28.5619 24.1829 28.5335C24.1521 28.5052 24.1124 28.4896 24.0712 28.4899Z",
                              fill: "#F8A5B3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0712 28.4899C24.0322 28.5025 23.9983 28.5283 23.9749 28.563C23.9514 28.5977 23.9397 28.6395 23.9416 28.6819C23.9462 28.7243 23.9657 28.7635 23.9965 28.7919C24.0272 28.8203 24.0671 28.8358 24.1082 28.8355C24.1492 28.8262 24.1852 28.8013 24.2092 28.7658C24.2332 28.7302 24.2435 28.6866 24.2379 28.6435C24.2333 28.6011 24.2137 28.5619 24.1829 28.5335C24.1522 28.5052 24.1124 28.4896 24.0712 28.4899Z",
                              fill: "#F8A6B4"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0723 28.5083C24.0528 28.5107 24.0339 28.517 24.0168 28.527C23.9997 28.5371 23.9846 28.5505 23.9726 28.5665C23.9605 28.5826 23.9517 28.601 23.9465 28.6207C23.9414 28.6404 23.9401 28.6609 23.9427 28.6811C23.9473 28.7236 23.9668 28.7628 23.9976 28.7911C24.0283 28.8195 24.0682 28.835 24.1093 28.8347C24.1502 28.8255 24.1863 28.8006 24.2103 28.765C24.2343 28.7294 24.2445 28.6858 24.2389 28.6427C24.2398 28.6213 24.2357 28.6 24.227 28.5806C24.2183 28.5611 24.2053 28.5441 24.189 28.531C24.1727 28.5178 24.1536 28.5089 24.1333 28.505C24.113 28.501 24.0921 28.5022 24.0723 28.5083Z",
                              fill: "#F8A7B5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0723 28.5083C24.0528 28.5107 24.0339 28.517 24.0168 28.527C23.9997 28.5371 23.9846 28.5505 23.9726 28.5665C23.9605 28.5826 23.9517 28.601 23.9465 28.6207C23.9414 28.6404 23.9401 28.6609 23.9427 28.6811C23.9473 28.7236 23.9668 28.7628 23.9976 28.7911C24.0283 28.8195 24.0682 28.835 24.1093 28.8347C24.1502 28.8255 24.1863 28.8006 24.2103 28.765C24.2343 28.7294 24.2445 28.6858 24.2389 28.6427C24.2398 28.6213 24.2357 28.6 24.227 28.5806C24.2183 28.5611 24.2053 28.5441 24.189 28.531C24.1727 28.5178 24.1536 28.5089 24.1333 28.505C24.113 28.501 24.0921 28.5022 24.0723 28.5083Z",
                              fill: "#F8A8B5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0718 28.5083C24.0528 28.5103 24.0343 28.5166 24.0179 28.5268C24.0015 28.537 23.9875 28.551 23.9769 28.5675C23.9662 28.584 23.9593 28.6028 23.9565 28.6224C23.9537 28.6421 23.9551 28.6621 23.9607 28.6811C23.9605 28.7005 23.9644 28.7197 23.972 28.7374C23.9796 28.7552 23.9909 28.7709 24.005 28.7837C24.019 28.7965 24.0356 28.8059 24.0535 28.8114C24.0714 28.8169 24.0903 28.8183 24.1088 28.8156C24.1284 28.8132 24.1472 28.8068 24.1643 28.7968C24.1815 28.7868 24.1965 28.7733 24.2085 28.7573C24.2206 28.7412 24.2295 28.7228 24.2346 28.7031C24.2398 28.6834 24.2411 28.6629 24.2385 28.6427C24.2394 28.6213 24.2353 28.6 24.2266 28.5806C24.2179 28.5611 24.2048 28.5441 24.1885 28.531C24.1722 28.5178 24.1531 28.5089 24.1328 28.505C24.1125 28.501 24.0916 28.5022 24.0718 28.5083Z",
                              fill: "#F8A9B6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0901 28.509C24.0694 28.5081 24.0489 28.5123 24.0302 28.5213C24.0114 28.5304 23.9951 28.5439 23.9824 28.5608C23.9697 28.5777 23.9611 28.5975 23.9573 28.6186C23.9535 28.6397 23.9546 28.6614 23.9605 28.6819C23.9603 28.7013 23.9642 28.7205 23.9718 28.7382C23.9795 28.7559 23.9907 28.7717 24.0048 28.7845C24.0188 28.7973 24.0354 28.8067 24.0533 28.8122C24.0712 28.8177 24.0901 28.8192 24.1086 28.8164C24.1281 28.814 24.147 28.8076 24.1641 28.7976C24.1812 28.7876 24.1962 28.7741 24.2083 28.7581C24.2204 28.742 24.2293 28.7236 24.2344 28.7039C24.2395 28.6842 24.2408 28.6637 24.2383 28.6435C24.2384 28.6241 24.2346 28.6049 24.227 28.5872C24.2193 28.5695 24.2081 28.5537 24.194 28.5409C24.1799 28.5282 24.1633 28.5187 24.1454 28.5132C24.1275 28.5077 24.1086 28.5063 24.0901 28.509Z",
                              fill: "#F8AAB7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0901 28.5084C24.0694 28.5075 24.0489 28.5117 24.0302 28.5207C24.0114 28.5297 23.9951 28.5432 23.9824 28.5601C23.9697 28.5771 23.9611 28.5969 23.9573 28.6179C23.9535 28.639 23.9546 28.6607 23.9605 28.6812C23.9603 28.7006 23.9642 28.7198 23.9718 28.7375C23.9795 28.7552 23.9907 28.771 24.0048 28.7838C24.0188 28.7966 24.0354 28.806 24.0533 28.8115C24.0712 28.817 24.0901 28.8184 24.1086 28.8157C24.1281 28.8133 24.147 28.8069 24.1641 28.7969C24.1812 28.7869 24.1962 28.7734 24.2083 28.7574C24.2204 28.7413 24.2293 28.7229 24.2344 28.7032C24.2395 28.6835 24.2408 28.663 24.2383 28.6428C24.2337 28.6055 24.2161 28.5711 24.1888 28.5464C24.1615 28.5216 24.1264 28.5081 24.0901 28.5084Z",
                              fill: "#F8ACB8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0901 28.5084C24.0694 28.5075 24.0489 28.5117 24.0302 28.5207C24.0114 28.5297 23.9951 28.5432 23.9824 28.5601C23.9697 28.5771 23.9611 28.5969 23.9573 28.6179C23.9535 28.639 23.9546 28.6607 23.9605 28.6812C23.9603 28.7006 23.9642 28.7198 23.9718 28.7375C23.9795 28.7552 23.9907 28.771 24.0048 28.7838C24.0188 28.7966 24.0354 28.806 24.0533 28.8115C24.0712 28.817 24.0901 28.8184 24.1086 28.8157C24.1281 28.8133 24.147 28.8069 24.1641 28.7969C24.1812 28.7869 24.1962 28.7734 24.2083 28.7574C24.2204 28.7413 24.2293 28.7229 24.2344 28.7032C24.2395 28.6835 24.2408 28.663 24.2383 28.6428C24.2337 28.6055 24.2161 28.5711 24.1888 28.5464C24.1615 28.5216 24.1264 28.5081 24.0901 28.5084Z",
                              fill: "#F8ADB9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0902 28.5083C23.9976 28.5083 23.9421 28.5083 23.9606 28.6811C23.9651 28.7185 23.9827 28.7528 24.01 28.7775C24.0373 28.8023 24.0724 28.8159 24.1087 28.8156C24.1282 28.8132 24.1471 28.8068 24.1642 28.7968C24.1813 28.7868 24.1963 28.7733 24.2084 28.7573C24.2204 28.7412 24.2293 28.7228 24.2345 28.7031C24.2396 28.6834 24.2409 28.6629 24.2383 28.6427C24.2338 28.6054 24.2162 28.571 24.1889 28.5463C24.1616 28.5215 24.1264 28.508 24.0902 28.5083Z",
                              fill: "#F8AEBA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0886 28.5083C24.0511 28.5171 24.0177 28.5392 23.9941 28.5707C23.9704 28.6022 23.9581 28.6412 23.959 28.6811C23.9636 28.7185 23.9811 28.7528 24.0084 28.7775C24.0357 28.8023 24.0709 28.8159 24.1072 28.8156C24.1267 28.8132 24.1456 28.8068 24.1627 28.7968C24.1798 28.7868 24.1948 28.7733 24.2069 28.7573C24.2189 28.7412 24.2279 28.7228 24.233 28.7031C24.2381 28.6834 24.2394 28.6629 24.2368 28.6427C24.2323 28.6054 24.2147 28.571 24.1874 28.5463C24.1601 28.5215 24.1249 28.508 24.0886 28.5083Z",
                              fill: "#F8AFBA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0886 28.5083C24.0526 28.52 24.0209 28.5427 23.9977 28.5736C23.9745 28.6045 23.961 28.642 23.959 28.6811C23.9635 28.7185 23.9811 28.7528 24.0084 28.7775C24.0357 28.8023 24.0708 28.8159 24.1071 28.8156C24.1262 28.8136 24.1445 28.8072 24.161 28.797C24.1774 28.7868 24.1914 28.7729 24.202 28.7564C24.2127 28.7398 24.2196 28.721 24.2224 28.7014C24.2252 28.6817 24.2238 28.6617 24.2182 28.6427C24.2182 28.6071 24.2045 28.5729 24.1802 28.5477C24.1559 28.5224 24.1229 28.5083 24.0886 28.5083Z",
                              fill: "#F8B0BB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0886 28.5083C24.0526 28.52 24.0209 28.5427 23.9977 28.5736C23.9745 28.6045 23.961 28.642 23.959 28.6811C23.9635 28.7185 23.9811 28.7528 24.0084 28.7775C24.0357 28.8023 24.0708 28.8159 24.1071 28.8156C24.1262 28.8136 24.1445 28.8072 24.161 28.797C24.1774 28.7868 24.1914 28.7729 24.202 28.7564C24.2127 28.7398 24.2196 28.721 24.2224 28.7014C24.2252 28.6817 24.2238 28.6617 24.2182 28.6427C24.2143 28.6085 24.1994 28.5766 24.1759 28.5522C24.1524 28.5278 24.1216 28.5123 24.0886 28.5083Z",
                              fill: "#F8B1BC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0886 28.5277C24.0526 28.5324 24.0195 28.5506 23.9956 28.5789C23.9717 28.6072 23.9587 28.6436 23.959 28.6813C23.9635 28.7186 23.9811 28.7529 24.0084 28.7777C24.0357 28.8024 24.0708 28.816 24.1071 28.8157C24.1262 28.8137 24.1445 28.8074 24.161 28.7971C24.1774 28.7869 24.1914 28.773 24.202 28.7565C24.2127 28.74 24.2196 28.7212 24.2224 28.7015C24.2252 28.6819 24.2238 28.6619 24.2182 28.6429C24.2184 28.626 24.2151 28.6092 24.2084 28.5938C24.2017 28.5784 24.1918 28.5647 24.1794 28.5538C24.1671 28.5428 24.1525 28.5348 24.1368 28.5303C24.1211 28.5257 24.1046 28.5249 24.0886 28.5277Z",
                              fill: "#F9B2BD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0886 28.5277C24.0526 28.5324 24.0195 28.5506 23.9956 28.5789C23.9717 28.6072 23.9587 28.6436 23.959 28.6813C23.9635 28.7186 23.9811 28.7529 24.0084 28.7777C24.0357 28.8024 24.0708 28.816 24.1071 28.8157C24.1262 28.8137 24.1445 28.8074 24.161 28.7971C24.1774 28.7869 24.1914 28.773 24.202 28.7565C24.2127 28.74 24.2196 28.7212 24.2224 28.7015C24.2252 28.6819 24.2238 28.6619 24.2182 28.6429C24.2184 28.626 24.2151 28.6092 24.2084 28.5938C24.2017 28.5784 24.1918 28.5647 24.1794 28.5538C24.1671 28.5428 24.1525 28.5348 24.1368 28.5303C24.1211 28.5257 24.1046 28.5249 24.0886 28.5277Z",
                              fill: "#F9B3BE"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0886 28.5277C24.0526 28.5324 24.0195 28.5506 23.9956 28.5789C23.9717 28.6072 23.9587 28.6436 23.959 28.6813C23.959 28.6813 23.959 28.8157 24.1072 28.7965C24.2553 28.7773 24.2183 28.7965 24.2183 28.6429C24.2185 28.626 24.2152 28.6092 24.2084 28.5938C24.2017 28.5784 24.1919 28.5647 24.1795 28.5538C24.1671 28.5428 24.1526 28.5348 24.1369 28.5303C24.1212 28.5257 24.1047 28.5249 24.0886 28.5277Z",
                              fill: "#F9B4BF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0902 28.5277C24.0719 28.5266 24.0536 28.5302 24.037 28.5382C24.0204 28.5462 24.0059 28.5584 23.9949 28.5736C23.9839 28.5888 23.9767 28.6066 23.9739 28.6254C23.9712 28.6442 23.9729 28.6634 23.9791 28.6813C23.9788 28.6982 23.9822 28.7149 23.9889 28.7303C23.9956 28.7457 24.0055 28.7594 24.0179 28.7704C24.0303 28.7814 24.0448 28.7894 24.0605 28.7939C24.0762 28.7984 24.0927 28.7993 24.1087 28.7965C24.1087 28.7965 24.2199 28.7965 24.2199 28.6429C24.2201 28.626 24.2167 28.6092 24.21 28.5938C24.2033 28.5784 24.1935 28.5647 24.1811 28.5538C24.1687 28.5428 24.1542 28.5348 24.1385 28.5303C24.1228 28.5257 24.1063 28.5249 24.0902 28.5277Z",
                              fill: "#F9B5C0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0902 28.5274C24.0719 28.5263 24.0536 28.5299 24.037 28.5379C24.0204 28.5459 24.0059 28.558 23.9949 28.5733C23.9839 28.5885 23.9767 28.6063 23.9739 28.6251C23.9712 28.6439 23.9729 28.663 23.9791 28.681C23.9788 28.6979 23.9822 28.7146 23.9889 28.73C23.9956 28.7454 24.0055 28.759 24.0179 28.77C24.0303 28.781 24.0448 28.7891 24.0605 28.7936C24.0762 28.7981 24.0927 28.799 24.1087 28.7962C24.1087 28.7962 24.2199 28.7962 24.2199 28.6426C24.2199 28.489 24.1458 28.5274 24.0902 28.5274Z",
                              fill: "#F9B6C0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0902 28.5283C24.0719 28.5272 24.0536 28.5308 24.037 28.5388C24.0204 28.5468 24.0059 28.559 23.9949 28.5742C23.9839 28.5894 23.9767 28.6072 23.9739 28.626C23.9712 28.6448 23.9729 28.664 23.9791 28.6819C23.9788 28.6988 23.9822 28.7156 23.9889 28.731C23.9956 28.7464 24.0055 28.76 24.0179 28.771C24.0303 28.782 24.0448 28.79 24.0605 28.7945C24.0762 28.7991 24.0927 28.7999 24.1087 28.7971C24.1087 28.7971 24.2199 28.7972 24.2199 28.6435C24.2103 28.614 24.1932 28.5877 24.1704 28.5674C24.1475 28.5471 24.1198 28.5336 24.0902 28.5283Z",
                              fill: "#F9B7C1"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0902 28.5283C24.0719 28.5272 24.0537 28.5308 24.037 28.5388C24.0204 28.5468 24.0059 28.559 23.9949 28.5742C23.9839 28.5894 23.9767 28.6072 23.9739 28.626C23.9712 28.6448 23.9729 28.664 23.9791 28.682C23.9791 28.682 23.9791 28.7972 24.1088 28.7972C24.2384 28.7972 24.2199 28.7972 24.2199 28.6436C24.2103 28.614 24.1932 28.5877 24.1704 28.5674C24.1475 28.5471 24.1198 28.5336 24.0902 28.5283Z",
                              fill: "#F9B8C2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0897 28.5281C24.0571 28.5368 24.0283 28.5568 24.0082 28.5847C23.988 28.6126 23.9775 28.6469 23.9786 28.6818C23.9786 28.6818 23.9786 28.797 24.1083 28.797C24.2379 28.797 24.2194 28.797 24.2194 28.6625C24.2154 28.6283 24.2006 28.5964 24.177 28.572C24.1535 28.5477 24.1227 28.5322 24.0897 28.5281Z",
                              fill: "#F9B9C3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0897 28.5281C24.0571 28.5368 24.0283 28.5568 24.0081 28.5847C23.988 28.6126 23.9775 28.6469 23.9786 28.6818C23.9831 28.714 23.9987 28.7434 24.0226 28.7646C24.0464 28.7858 24.0768 28.7973 24.1082 28.797C24.1082 28.797 24.2193 28.797 24.2193 28.6625C24.2154 28.6283 24.2005 28.5964 24.177 28.572C24.1535 28.5477 24.1227 28.5322 24.0897 28.5281Z",
                              fill: "#F9BAC4"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0897 28.5281C24.0571 28.5368 24.0283 28.5568 24.0081 28.5847C23.988 28.6126 23.9775 28.6469 23.9786 28.6818C23.9831 28.714 23.9987 28.7434 24.0226 28.7646C24.0464 28.7858 24.0768 28.7973 24.1082 28.797C24.1082 28.797 24.2193 28.797 24.2008 28.6625C24.2011 28.63 24.1901 28.5984 24.1696 28.5737C24.1492 28.549 24.1208 28.5328 24.0897 28.5281Z",
                              fill: "#F9BBC5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0897 28.5458C24.0897 28.5458 23.9785 28.5458 23.9785 28.6802C23.983 28.7125 23.9987 28.7419 24.0225 28.7631C24.0464 28.7843 24.0768 28.7958 24.1082 28.7954C24.1082 28.7954 24.2193 28.7954 24.2008 28.661C24.1823 28.5266 24.1452 28.5266 24.0897 28.5458Z",
                              fill: "#F9BCC6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0897 28.5458C24.0897 28.5458 23.9785 28.5458 23.9785 28.6802C23.9881 28.7098 24.0052 28.7361 24.028 28.7563C24.0509 28.7766 24.0786 28.7901 24.1082 28.7954C24.1082 28.7954 24.2193 28.7954 24.2008 28.661C24.1823 28.5266 24.1452 28.5266 24.0897 28.5458Z",
                              fill: "#F9BDC6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0897 28.5458C24.0897 28.5458 23.9785 28.5458 23.9785 28.6802C23.9881 28.7098 24.0052 28.7361 24.028 28.7563C24.0509 28.7766 24.0786 28.7901 24.1082 28.7954C24.1082 28.7954 24.2193 28.7954 24.2008 28.661C24.1823 28.5266 24.1452 28.5266 24.0897 28.5458Z",
                              fill: "#FABEC7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0896 28.5461C24.0896 28.5461 23.9785 28.5462 23.9785 28.6806C23.9785 28.815 23.9785 28.7958 24.1082 28.6806C24.1343 28.676 24.1581 28.6618 24.175 28.6407C24.192 28.6196 24.2011 28.5929 24.2008 28.5654C24.2008 28.5654 24.1452 28.5269 24.0896 28.5461Z",
                              fill: "#FABFC8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0899 28.5475C24.074 28.546 24.058 28.5489 24.0436 28.5559C24.0291 28.5628 24.0166 28.5735 24.0074 28.587C23.9981 28.6004 23.9923 28.6161 23.9907 28.6326C23.9891 28.649 23.9916 28.6656 23.9981 28.6807C24.014 28.6931 24.0333 28.6998 24.0532 28.6998C24.073 28.6998 24.0924 28.6931 24.1083 28.6807C24.1342 28.6762 24.1577 28.6622 24.1746 28.6412C24.1914 28.6203 24.2004 28.5938 24.2001 28.5665C24.185 28.5534 24.1669 28.5448 24.1475 28.5414C24.1281 28.5381 24.1082 28.5402 24.0899 28.5475Z",
                              fill: "#FAC0C9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0899 28.5475C24.074 28.546 24.058 28.5489 24.0436 28.5559C24.0291 28.5628 24.0166 28.5735 24.0074 28.587C23.9981 28.6004 23.9923 28.6161 23.9907 28.6326C23.9891 28.649 23.9916 28.6656 23.9981 28.6807C24.014 28.6931 24.0333 28.6998 24.0532 28.6998C24.073 28.6998 24.0924 28.6931 24.1083 28.6807C24.1342 28.6762 24.1577 28.6622 24.1746 28.6412C24.1914 28.6203 24.2004 28.5938 24.2001 28.5665C24.185 28.5534 24.1669 28.5448 24.1475 28.5414C24.1281 28.5381 24.1082 28.5402 24.0899 28.5475Z",
                              fill: "#FAC1CA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0898 28.547C24.0739 28.5456 24.058 28.5485 24.0435 28.5555C24.0291 28.5624 24.0166 28.5731 24.0074 28.5865C23.9981 28.6 23.9923 28.6157 23.9907 28.6321C23.9891 28.6486 23.9916 28.6652 23.9981 28.6803C24.0066 28.7007 24.0207 28.718 24.0387 28.7302C24.0566 28.7424 24.0776 28.7489 24.099 28.7489C24.1204 28.7489 24.1414 28.7424 24.1593 28.7302C24.1773 28.718 24.1914 28.7007 24.1999 28.6803C24.2026 28.6638 24.2018 28.6469 24.1975 28.6308C24.1932 28.6146 24.1855 28.5997 24.175 28.5869C24.1645 28.5742 24.1514 28.564 24.1367 28.5571C24.122 28.5503 24.106 28.5468 24.0898 28.547Z",
                              fill: "#FAC2CB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0899 28.547C24.074 28.5456 24.058 28.5485 24.0436 28.5555C24.0291 28.5624 24.0166 28.5731 24.0074 28.5865C23.9981 28.6 23.9923 28.6157 23.9907 28.6321C23.9891 28.6486 23.9916 28.6652 23.9981 28.6803C24.0066 28.7007 24.0208 28.718 24.0387 28.7302C24.0566 28.7424 24.0776 28.7489 24.0991 28.7489C24.1205 28.7489 24.1415 28.7424 24.1594 28.7302C24.1774 28.718 24.1915 28.7007 24.2001 28.6803C24.2001 28.6803 24.145 28.547 24.0899 28.547Z",
                              fill: "#FAC3CC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0899 28.5467C24.0625 28.5551 24.0386 28.5729 24.022 28.597C24.0053 28.6211 23.997 28.6503 23.9982 28.6799C24.0067 28.7003 24.0208 28.7176 24.0388 28.7298C24.0567 28.742 24.0777 28.7485 24.0991 28.7485C24.1206 28.7485 24.1415 28.742 24.1595 28.7298C24.1774 28.7176 24.1915 28.7003 24.2001 28.6799C24.2001 28.6799 24.145 28.5467 24.0899 28.5467Z",
                              fill: "#FAC4CC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0899 28.5467C24.0625 28.5551 24.0386 28.5729 24.022 28.597C24.0053 28.6211 23.997 28.6503 23.9982 28.6799C24.0067 28.7003 24.0208 28.7176 24.0388 28.7298C24.0567 28.742 24.0777 28.7485 24.0991 28.7485C24.1206 28.7485 24.1415 28.742 24.1595 28.7298C24.1774 28.7176 24.1915 28.7003 24.2001 28.6799C24.2001 28.6799 24.145 28.5467 24.0899 28.5467Z",
                              fill: "#FAC5CD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0899 28.5467C24.0625 28.5551 24.0386 28.5729 24.022 28.597C24.0053 28.6211 23.997 28.6503 23.9982 28.6799C24.0149 28.6899 24.0339 28.6952 24.0532 28.6952C24.0726 28.6952 24.0916 28.6899 24.1083 28.6799C24.1083 28.6799 24.2001 28.6799 24.1083 28.5657C24.1029 28.5587 24.0967 28.5523 24.0899 28.5467Z",
                              fill: "#FAC6CE"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0891 28.5662C24.0722 28.5585 24.0538 28.5554 24.0354 28.557C24.017 28.5586 23.9993 28.5649 23.9838 28.5754C23.9684 28.5859 23.9558 28.6002 23.947 28.617C23.9382 28.6338 23.9336 28.6527 23.9336 28.6718C23.9336 28.6909 23.9382 28.7098 23.947 28.7266C23.9558 28.7435 23.9684 28.7578 23.9838 28.7682C23.9993 28.7787 24.017 28.785 24.0354 28.7866C24.0538 28.7883 24.0722 28.7851 24.0891 28.7774C24.0891 28.7774 24.1817 28.7774 24.0891 28.6622C23.9965 28.547 24.1447 28.547 24.0891 28.5662Z",
                              fill: "#FAC7CF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0891 28.5662C24.0722 28.5585 24.0538 28.5554 24.0354 28.557C24.017 28.5586 23.9993 28.5649 23.9838 28.5754C23.9684 28.5859 23.9558 28.6002 23.947 28.617C23.9382 28.6338 23.9336 28.6527 23.9336 28.6718C23.9336 28.6909 23.9382 28.7098 23.947 28.7266C23.9558 28.7435 23.9684 28.7578 23.9838 28.7682C23.9993 28.7787 24.017 28.785 24.0354 28.7866C24.0538 28.7883 24.0722 28.7851 24.0891 28.7774C24.0891 28.7774 24.1817 28.7774 24.0891 28.6622C23.9965 28.547 24.1447 28.547 24.0891 28.5662Z",
                              fill: "#FAC8D0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0898 28.5662C24.0639 28.5708 24.0404 28.5848 24.0235 28.6057C24.0067 28.6267 23.9977 28.6532 23.9981 28.6805C23.9981 28.6805 23.9981 28.6805 24.1082 28.6805V28.5853L24.0898 28.5662Z",
                              fill: "#FAC9D1"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0898 28.5662C24.0639 28.5708 24.0404 28.5848 24.0235 28.6057C24.0067 28.6267 23.9977 28.6532 23.9981 28.6805C23.9981 28.6805 23.9981 28.6805 24.1082 28.6805V28.5853C24.103 28.5781 24.0968 28.5716 24.0898 28.5662Z",
                              fill: "#FBCAD2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0898 28.5662C24.0639 28.5708 24.0404 28.5848 24.0235 28.6057C24.0067 28.6267 23.9977 28.6532 23.9981 28.6804C24.0153 28.6889 24.0341 28.6933 24.0531 28.6933C24.0722 28.6933 24.091 28.6889 24.1082 28.6804C24.1082 28.6804 24.1082 28.6805 24.1082 28.5853C24.103 28.5781 24.0968 28.5716 24.0898 28.5662Z",
                              fill: "#FBCBD2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0898 28.566C24.0898 28.566 24.0898 28.566 24.0898 28.6802H24.1817C24.1817 28.6802 24.1817 28.6802 24.1817 28.5851C24.1695 28.5736 24.1545 28.5658 24.1383 28.5625C24.1221 28.5591 24.1054 28.5603 24.0898 28.566Z",
                              fill: "#FBCED5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0906 28.5655C24.0787 28.582 24.0723 28.602 24.0723 28.6226C24.0723 28.6432 24.0787 28.6633 24.0906 28.6797H24.1824C24.1824 28.6797 24.1824 28.6798 24.1824 28.5846C24.1824 28.4894 24.1273 28.5655 24.0906 28.5655Z",
                              fill: "#FBCFD6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0906 28.5655C24.0787 28.582 24.0723 28.602 24.0723 28.6226C24.0723 28.6432 24.0787 28.6633 24.0906 28.6797H24.1824C24.1824 28.6797 24.1824 28.6798 24.1824 28.5846C24.1824 28.4894 24.1273 28.5655 24.0906 28.5655Z",
                              fill: "#FBD0D7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0898 28.5851V28.7564C24.0898 28.7564 24.0898 28.7563 24.0898 28.6612C24.0898 28.566 24.1266 28.566 24.0898 28.5851Z",
                              fill: "#FBD1D8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0898 28.5851V28.7564C24.0898 28.7564 24.0898 28.7563 24.0898 28.6612C24.0898 28.566 24.1266 28.566 24.0898 28.5851Z",
                              fill: "#FBD2D8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0898 28.5851C24.0898 28.5851 24.0899 28.6802 24.1817 28.5851C24.2736 28.4899 24.1817 28.5851 24.1817 28.5851H24.0898Z",
                              fill: "#FBD3D9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0898 28.5851C24.0898 28.5851 24.0899 28.6802 24.1817 28.5851C24.2736 28.4899 24.1817 28.5851 24.1817 28.5851H24.0898Z",
                              fill: "#FBD4DA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0898 28.623C24.0898 28.623 24.1073 28.6056 24.0898 28.623V28.623Z",
                              fill: "#FDE6EA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0898 28.644V28.6608V28.6776L24.106 28.6608L24.0898 28.644Z",
                              fill: "#FEF9FA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0898 28.644V28.6608V28.6776L24.106 28.6608L24.0898 28.644Z",
                              fill: "#FFFAFB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0898 28.6625V28.6792L24.1057 28.6625H24.0898Z",
                              fill: "#FFFBFC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.6831 28.5845C23.6831 28.5845 23.6831 28.5845 23.7942 28.5845V28.4692H23.7016C23.7016 28.4692 23.5534 28.6037 23.5719 28.6229C23.5719 28.6229 23.5719 28.6229 23.5719 28.719L23.6831 28.5845Z",
                              fill: "#E92736"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.7927 28.2592C23.7927 28.2592 23.7927 28.2592 23.7927 28.3552H23.8853C23.8853 28.3552 23.8853 28.3553 23.8853 28.2592V28.1632C23.8853 28.1632 23.6816 28.1632 23.6816 28.2784C23.6816 28.2784 23.6816 28.2784 23.6816 28.3937L23.7927 28.2592Z",
                              fill: "#E92736"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.218 28.2575C24.2285 28.2073 24.2285 28.1554 24.218 28.1052C24.218 28.1052 24.016 28.1052 24.0344 28.1052V28.2575H24.2364H24.218Z",
                              fill: "#E92736"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.9757 29.3525C25.981 29.3146 25.981 29.2761 25.9757 29.2383H25.8105L25.9757 29.3525Z",
                              fill: "#E92736"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2012 29.2769C26.2012 29.2769 26.2012 29.2768 26.2012 29.372H26.4215C26.4215 29.372 26.2563 29.2768 26.2563 29.372C26.2563 29.4672 26.2563 29.372 26.2563 29.372L26.2012 29.2769Z",
                              fill: "#E92736"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4214 29.5242V29.429C26.4214 29.429 26.293 29.2958 26.293 29.3148C26.293 29.3339 26.293 29.3148 26.293 29.3148L26.4214 29.5242Z",
                              fill: "#E92736"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8288 29.9872C31.8228 30.0186 31.8228 30.0509 31.8288 30.0824V29.9872C31.8288 29.9872 31.7003 29.892 31.682 29.9872C31.6636 30.0823 31.682 29.9872 31.682 29.9872H31.8288Z",
                              fill: "#E92736"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9785 30.025H32.0886L31.9785 29.8918V30.025Z",
                              fill: "#E92736"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.0703 30.3315H32.1806V30.1792H32.0887L32.0703 30.3315Z",
                              fill: "#E92736"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.791 28.3926C23.8007 28.41 23.8058 28.4297 23.8058 28.4498C23.8058 28.4698 23.8007 28.4895 23.791 28.5069H23.6992L23.791 28.3926Z",
                              fill: "#F7E204"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.8301 28.2582C23.8301 28.2582 23.8301 28.2582 23.9219 28.2582C24.0137 28.2582 23.9219 28.1439 23.9219 28.1249L23.8301 28.2582Z",
                              fill: "#F7E204"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0527 28.2584C24.0598 28.2271 24.0598 28.1945 24.0527 28.1632V28.2584Z",
                              fill: "#F7E204"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.1452 30.0645H31.4785V30.7175H32.1452V30.0645Z",
                              fill: "#F15770"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9779 30.5066C32.1075 30.3914 32.163 30.2569 32.1075 30.1801C32.0519 30.1033 31.9038 30.1801 31.7742 30.1801C31.6446 30.1801 31.5705 30.4489 31.6261 30.5257C31.6816 30.6026 31.7927 30.6218 31.9779 30.5066Z",
                              fill: "#F15770"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9778 30.5066C32.1074 30.3914 32.1629 30.2569 32.1074 30.1801C32.0518 30.1033 31.9037 30.1801 31.7741 30.1801C31.6445 30.1801 31.5889 30.4489 31.6445 30.5257C31.7 30.6026 31.7926 30.6218 31.9778 30.5066Z",
                              fill: "#F15871"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9777 30.5066C32.0888 30.3914 32.1629 30.2569 32.1073 30.1801C32.0518 30.1033 31.9037 30.1801 31.7741 30.1801C31.6445 30.1801 31.5889 30.4489 31.6445 30.5257C31.7 30.6026 31.7926 30.6218 31.9777 30.5066Z",
                              fill: "#F15972"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9768 30.5066C32.1064 30.3914 32.1804 30.2569 32.1249 30.1801C32.0694 30.1033 31.9213 30.1801 31.7917 30.1801C31.6621 30.1801 31.6065 30.4489 31.6621 30.5257C31.7176 30.6026 31.7917 30.6218 31.9768 30.5066Z",
                              fill: "#F15A73"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9769 30.5066C32.1065 30.3914 32.1621 30.2569 32.1065 30.1801C32.051 30.1033 31.9213 30.1801 31.7917 30.1801C31.6621 30.1801 31.6065 30.4489 31.6621 30.5257C31.7176 30.6026 31.7917 30.6218 31.9769 30.5066Z",
                              fill: "#F15B73"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9769 30.5058C32.1065 30.3906 32.1621 30.2562 32.1065 30.1793C32.051 30.1025 31.9213 30.1793 31.7917 30.2753C31.6621 30.3714 31.6065 30.525 31.6621 30.5826C31.7176 30.6402 31.7917 30.621 31.9769 30.5058Z",
                              fill: "#F15C74"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9769 30.5058C32.1065 30.3906 32.1621 30.2562 32.1065 30.1793C32.051 30.1025 31.9213 30.1793 31.7917 30.2753C31.6621 30.3714 31.6065 30.525 31.6621 30.5826C31.7176 30.6402 31.7917 30.621 31.9769 30.5058Z",
                              fill: "#F25D75"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9769 30.5058C32.1065 30.3906 32.1621 30.2562 32.1065 30.1793C32.051 30.1025 31.9213 30.1793 31.7917 30.2753C31.6621 30.3714 31.6065 30.525 31.6621 30.5826C31.7176 30.6402 31.7917 30.621 31.9769 30.5058Z",
                              fill: "#F25E76"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9769 30.5058C32.1065 30.3906 32.1621 30.2562 32.1065 30.1793C32.051 30.1025 31.9213 30.1793 31.7917 30.2753C31.6621 30.3714 31.6065 30.525 31.6621 30.5826C31.7176 30.6402 31.7917 30.621 31.9769 30.5058Z",
                              fill: "#F25F77"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9769 30.5058C32.1065 30.3906 32.1621 30.2562 32.1065 30.1793C32.051 30.1025 31.9213 30.1793 31.7917 30.2753C31.6621 30.3714 31.6065 30.525 31.6621 30.5826C31.7176 30.6402 31.7917 30.621 31.9769 30.5058Z",
                              fill: "#F26078"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9769 30.5063C32.1065 30.391 32.1621 30.2566 32.1065 30.199C32.051 30.1414 31.9213 30.199 31.7917 30.199C31.6621 30.199 31.6065 30.4486 31.6621 30.5063C31.7176 30.5639 31.7917 30.6215 31.9769 30.5063Z",
                              fill: "#F26179"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9769 30.5063C32.1065 30.391 32.1621 30.2566 32.1065 30.199C32.051 30.1414 31.9213 30.199 31.7917 30.199C31.6621 30.199 31.6065 30.4486 31.6621 30.5063C31.7176 30.5639 31.7917 30.6215 31.9769 30.5063Z",
                              fill: "#F26279"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.977 30.5063C32.1066 30.391 32.1622 30.2566 32.1066 30.199C32.0511 30.1414 31.9214 30.199 31.7917 30.199C31.6621 30.199 31.625 30.4486 31.6621 30.5063C31.6991 30.5639 31.7917 30.6215 31.977 30.5063Z",
                              fill: "#F2637A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.977 30.5063C32.1066 30.391 32.1622 30.2566 32.1066 30.199C32.0511 30.1414 31.9214 30.199 31.7917 30.199C31.6621 30.199 31.625 30.4487 31.6621 30.5063C31.6991 30.5639 31.7917 30.6023 31.977 30.5063Z",
                              fill: "#F2647B"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9786 30.5063C32.1082 30.391 32.1452 30.2566 32.1082 30.199C32.0712 30.1414 31.9045 30.199 31.7934 30.199C31.6823 30.199 31.6267 30.4487 31.6638 30.5063C31.7008 30.5639 31.7934 30.6023 31.9786 30.5063Z",
                              fill: "#F2657C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9783 30.5063C32.0894 30.391 32.1449 30.2566 32.1079 30.199C32.0709 30.1414 31.9042 30.199 31.7931 30.199C31.6819 30.199 31.6264 30.4487 31.682 30.5063C31.7375 30.5639 31.7931 30.6023 31.9783 30.5063Z",
                              fill: "#F2667D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9783 30.5063C32.0894 30.391 32.1449 30.2566 32.1079 30.199C32.0709 30.1414 31.9042 30.199 31.7931 30.199C31.6819 30.199 31.6264 30.4295 31.682 30.5063C31.7375 30.5831 31.7931 30.6023 31.9783 30.5063Z",
                              fill: "#F2677E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9783 30.5063C32.0894 30.391 32.1449 30.2566 32.0894 30.199C32.0338 30.1414 31.9042 30.199 31.7931 30.199C31.6819 30.199 31.6264 30.4295 31.682 30.5063C31.7375 30.5831 31.7931 30.6023 31.9783 30.5063Z",
                              fill: "#F2687F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9783 30.5063C32.0894 30.391 32.1449 30.2566 32.0894 30.199C32.0338 30.1414 31.9042 30.199 31.7931 30.199C31.6819 30.199 31.6264 30.4295 31.682 30.5063C31.7375 30.5831 31.7931 30.6023 31.9783 30.5063Z",
                              fill: "#F3697F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9783 30.5063C32.0894 30.391 32.1449 30.2566 32.0894 30.199C32.0338 30.1414 31.9042 30.199 31.7931 30.199C31.6819 30.199 31.6264 30.4295 31.682 30.5063C31.7375 30.5831 31.7931 30.6023 31.9783 30.5063Z",
                              fill: "#F36A80"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9783 30.5063C32.0894 30.3911 32.1449 30.2566 32.0894 30.199C32.0338 30.1414 31.9042 30.199 31.7931 30.199C31.6819 30.199 31.6264 30.4294 31.682 30.4871C31.7375 30.5447 31.7931 30.6023 31.9783 30.5063Z",
                              fill: "#F36B81"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9783 30.5063C32.0894 30.3911 32.1449 30.2566 32.0894 30.199C32.0338 30.1414 31.9042 30.199 31.7931 30.199C31.6819 30.199 31.6264 30.4294 31.682 30.4871C31.7375 30.5447 31.7931 30.6023 31.9783 30.5063Z",
                              fill: "#F36C82"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9783 30.5063C32.0894 30.3911 32.1449 30.2566 32.0894 30.199C32.0338 30.1414 31.9042 30.199 31.7931 30.199C31.6819 30.199 31.6264 30.4294 31.682 30.4871C31.7375 30.5447 31.7931 30.6023 31.9783 30.5063Z",
                              fill: "#F36D83"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9782 30.4866C32.0893 30.3905 32.1448 30.2753 32.0893 30.1985C32.0337 30.1217 31.9041 30.1985 31.793 30.1985C31.6819 30.1985 31.6448 30.429 31.6819 30.4866C31.7189 30.5442 31.793 30.6018 31.9782 30.4866Z",
                              fill: "#F36E84"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9782 30.4866C32.0893 30.3905 32.1448 30.2753 32.0893 30.1985C32.0337 30.1217 31.9041 30.1985 31.793 30.1985C31.6819 30.1985 31.6448 30.429 31.6819 30.4866C31.7189 30.5442 31.793 30.6018 31.9782 30.4866Z",
                              fill: "#F36F85"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9781 30.4864C32.0892 30.3904 32.1263 30.2751 32.0892 30.2175C32.0522 30.1599 31.9041 30.2175 31.793 30.2175C31.6819 30.2175 31.6448 30.448 31.6819 30.5056C31.7189 30.5632 31.793 30.6016 31.9781 30.4864Z",
                              fill: "#F37085"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9781 30.4864C32.0892 30.3904 32.1263 30.2751 32.0892 30.2175C32.0522 30.1599 31.9041 30.2175 31.793 30.2175C31.6819 30.2175 31.6448 30.448 31.6819 30.5056C31.7189 30.5632 31.793 30.5824 31.9781 30.4864Z",
                              fill: "#F37186"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9781 30.4864C32.0892 30.3904 32.1263 30.2751 32.0892 30.2175C32.0522 30.1599 31.9041 30.2175 31.793 30.2175C31.6819 30.2175 31.6448 30.448 31.6819 30.5056C31.7189 30.5632 31.793 30.5824 31.9781 30.4864Z",
                              fill: "#F37287"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9766 30.4864C32.0877 30.3904 32.1248 30.2751 32.0877 30.2175C32.0507 30.1599 31.9025 30.2175 31.8099 30.2175C31.7173 30.2175 31.6433 30.448 31.6988 30.5056C31.7544 30.5632 31.7914 30.5824 31.9766 30.4864Z",
                              fill: "#F37388"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9765 30.4864C32.0691 30.3904 32.1247 30.2751 32.0876 30.2175C32.0506 30.1599 31.9025 30.2175 31.8099 30.2175C31.7173 30.2175 31.6433 30.448 31.6988 30.5056C31.7544 30.5632 31.7914 30.5824 31.9765 30.4864Z",
                              fill: "#F37489"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9765 30.4864C32.0691 30.3904 32.1247 30.2751 32.0876 30.2175C32.0506 30.1599 31.9025 30.2175 31.8099 30.2175C31.7173 30.2175 31.6433 30.448 31.6988 30.5056C31.7544 30.5632 31.7914 30.5824 31.9765 30.4864Z",
                              fill: "#F4758A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9767 30.4864C32.0693 30.3904 32.1248 30.2751 32.0693 30.2175C32.0137 30.1599 31.9026 30.2175 31.81 30.2175C31.7173 30.2175 31.6433 30.4288 31.6988 30.4864C31.7544 30.544 31.7914 30.5824 31.9767 30.4864Z",
                              fill: "#F4768B"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9767 30.4864C32.0693 30.3904 32.1248 30.2751 32.0693 30.2175C32.0137 30.1599 31.9026 30.2175 31.81 30.2175C31.7173 30.2175 31.6433 30.4288 31.6988 30.4864C31.7544 30.544 31.7914 30.5824 31.9767 30.4864Z",
                              fill: "#F4778B"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9767 30.4864C32.0693 30.3904 32.1248 30.2751 32.0693 30.2175C32.0137 30.1599 31.9026 30.2175 31.81 30.2175C31.7173 30.2175 31.6433 30.4288 31.6988 30.4864C31.7544 30.544 31.7914 30.5824 31.9767 30.4864Z",
                              fill: "#F4788C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9779 30.4864C32.0891 30.3904 32.1446 30.2751 32.0891 30.2175C32.0335 30.1599 31.9224 30.2175 31.8298 30.2175C31.7372 30.2175 31.6816 30.4288 31.7186 30.4864C31.7557 30.544 31.7927 30.5824 31.9779 30.4864Z",
                              fill: "#F4798D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9779 30.4864C32.0891 30.3904 32.1446 30.2751 32.0891 30.2175C32.0335 30.1599 31.9224 30.2175 31.8298 30.2175C31.7372 30.2175 31.6816 30.4288 31.7186 30.4864C31.7557 30.544 31.7927 30.5824 31.9779 30.4864Z",
                              fill: "#F47A8E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9779 30.4864C32.089 30.3904 32.1261 30.2751 32.089 30.2175C32.052 30.1599 31.9224 30.2175 31.8298 30.2175C31.7372 30.2175 31.6816 30.4288 31.7186 30.4672C31.7557 30.5056 31.7927 30.5824 31.9779 30.4864Z",
                              fill: "#F47B8F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9779 30.4864C32.089 30.3904 32.1261 30.2751 32.089 30.2175C32.052 30.1599 31.9224 30.2175 31.8298 30.2175C31.7372 30.2175 31.6816 30.4288 31.7186 30.4672C31.7557 30.5056 31.7927 30.5824 31.9779 30.4864Z",
                              fill: "#F47C90"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9779 30.4864C32.089 30.3904 32.1261 30.2751 32.089 30.2175C32.052 30.1599 31.9224 30.2175 31.8298 30.2175C31.7372 30.2175 31.6816 30.4288 31.7186 30.4672C31.7557 30.5056 31.7927 30.5824 31.9779 30.4864Z",
                              fill: "#F47D91"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9779 30.4864C32.089 30.3904 32.1261 30.2751 32.089 30.2175C32.052 30.1599 31.9224 30.2175 31.8298 30.2175C31.7372 30.2175 31.6816 30.4096 31.7186 30.4672C31.7557 30.5248 31.7927 30.5824 31.9779 30.4864Z",
                              fill: "#F47E91"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9779 30.4861C32.089 30.3901 32.1261 30.2749 32.089 30.2365C32.052 30.1981 31.9224 30.2365 31.8298 30.2365C31.7372 30.2365 31.6816 30.4285 31.7186 30.4861C31.7557 30.5437 31.7927 30.5629 31.9779 30.4861Z",
                              fill: "#F47F92"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9777 30.4861C32.0888 30.3901 32.1258 30.2749 32.0888 30.2365C32.0518 30.1981 31.9222 30.2365 31.8296 30.2365C31.737 30.2365 31.6815 30.4285 31.737 30.4861C31.7925 30.5437 31.7926 30.5629 31.9777 30.4861Z",
                              fill: "#F48093"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9777 30.4861C32.0702 30.3901 32.1258 30.2749 32.0887 30.2365C32.0517 30.1981 31.9222 30.2365 31.8296 30.2365C31.737 30.2365 31.6815 30.4285 31.737 30.4861C31.7925 30.5437 31.7925 30.5629 31.9777 30.4861Z",
                              fill: "#F58194"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9777 30.4861C32.0702 30.3901 32.1258 30.2749 32.0887 30.2365C32.0517 30.1981 31.9222 30.2365 31.8296 30.2365C31.737 30.2365 31.6815 30.4285 31.737 30.4861C31.7925 30.5437 31.7925 30.5629 31.9777 30.4861Z",
                              fill: "#F58295"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9794 30.4861C32.072 30.3901 32.1275 30.2749 32.072 30.2365C32.0164 30.1981 31.9239 30.2365 31.8314 30.2365C31.7388 30.2365 31.7018 30.4285 31.7388 30.4861C31.7758 30.5437 31.7943 30.5629 31.9794 30.4861Z",
                              fill: "#F58396"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9794 30.4861C32.072 30.3901 32.1275 30.2749 32.072 30.2365C32.0164 30.1981 31.9239 30.2365 31.8314 30.2365C31.7388 30.2365 31.7018 30.4285 31.7388 30.4861C31.7758 30.5437 31.7943 30.5629 31.9794 30.4861Z",
                              fill: "#F58497"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9794 30.486C32.0719 30.39 32.1089 30.294 32.0719 30.2364C32.0349 30.1788 31.9239 30.2364 31.8314 30.2364C31.7388 30.2364 31.7018 30.4284 31.7388 30.486C31.7758 30.5436 31.7943 30.5629 31.9794 30.486Z",
                              fill: "#F58597"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9794 30.486C32.0719 30.39 32.1089 30.294 32.0719 30.2364C32.0349 30.1788 31.9239 30.2364 31.8314 30.2364C31.7388 30.2364 31.7018 30.4284 31.7388 30.486C31.7758 30.5436 31.7943 30.5629 31.9794 30.486Z",
                              fill: "#F58698"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9794 30.486C32.0719 30.39 32.1089 30.294 32.0719 30.2364C32.0349 30.1788 31.9239 30.2364 31.8314 30.2364C31.7388 30.2364 31.7018 30.4284 31.7388 30.486C31.7758 30.5436 31.7943 30.5629 31.9794 30.486Z",
                              fill: "#F58799"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9794 30.4668C32.0719 30.4668 32.1089 30.294 32.0719 30.2364C32.0349 30.1788 31.9239 30.2364 31.8314 30.2364C31.7388 30.2364 31.7018 30.4284 31.7388 30.4861C31.7758 30.5437 31.7943 30.5629 31.9794 30.4668Z",
                              fill: "#F5889A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9794 30.4668C32.0719 30.4668 32.1089 30.294 32.0719 30.2364C32.0349 30.1788 31.9239 30.2364 31.8314 30.2364C31.7388 30.2364 31.7018 30.4284 31.7388 30.4861C31.7758 30.5437 31.7943 30.5629 31.9794 30.4668Z",
                              fill: "#F5899B"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9794 30.4668C32.0719 30.4668 32.1089 30.294 32.0719 30.2364C32.0349 30.1788 31.9239 30.2364 31.8314 30.2364C31.7388 30.2364 31.7018 30.4284 31.7388 30.4668C31.7758 30.5052 31.7943 30.5628 31.9794 30.4668Z",
                              fill: "#F58A9C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9794 30.4668C32.0719 30.4668 32.1089 30.294 32.0719 30.2364C32.0349 30.1788 31.9239 30.2364 31.8314 30.2364C31.7388 30.2364 31.7018 30.4284 31.7388 30.4668C31.7758 30.5052 31.7943 30.5628 31.9794 30.4668Z",
                              fill: "#F58B9D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9794 30.4668C32.0719 30.4668 32.1089 30.294 32.0719 30.2364C32.0349 30.1788 31.9239 30.2364 31.8314 30.2364C31.7388 30.2364 31.7018 30.4284 31.7388 30.4668C31.7758 30.5052 31.7943 30.5437 31.9794 30.4668Z",
                              fill: "#F58C9D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9794 30.4668C32.0719 30.4668 32.1089 30.294 32.0719 30.2364C32.0349 30.1788 31.9239 30.2364 31.8314 30.2364C31.7388 30.2364 31.7018 30.4284 31.7388 30.4668C31.7758 30.5052 31.7943 30.5437 31.9794 30.4668Z",
                              fill: "#F68D9E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9785 30.4668C31.9785 30.4668 32.108 30.294 32.071 30.2364C32.034 30.1788 31.923 30.2364 31.8304 30.2364C31.7379 30.2364 31.7194 30.4284 31.8304 30.4668C31.9415 30.5052 31.7934 30.5437 31.9785 30.4668Z",
                              fill: "#F68E9F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9785 30.4683C31.9785 30.4683 32.108 30.2955 32.071 30.2571C32.034 30.2187 31.923 30.2571 31.8304 30.2571C31.7379 30.2571 31.7194 30.4299 31.8304 30.4683C31.9415 30.5067 31.7934 30.5451 31.9785 30.4683Z",
                              fill: "#F68FA0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9784 30.4683C31.9784 30.4683 32.0895 30.2955 31.9784 30.2571C31.8673 30.2187 31.8488 30.2571 31.7562 30.2571C31.6636 30.2571 31.6451 30.4299 31.7562 30.4683C31.8673 30.5067 31.7933 30.5451 31.9784 30.4683Z",
                              fill: "#F690A1"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.978 30.4683C31.978 30.4683 32.0891 30.2955 31.978 30.2571C31.8669 30.2187 31.8484 30.2571 31.7743 30.2571C31.7003 30.2571 31.6447 30.4299 31.6817 30.4683C31.7187 30.5067 31.7928 30.5451 31.978 30.4683Z",
                              fill: "#F691A2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.978 30.4683C31.978 30.4683 32.0891 30.2955 31.978 30.2571C31.8669 30.2187 31.8484 30.2571 31.7743 30.2571C31.7003 30.2571 31.6447 30.4299 31.6817 30.4683C31.7187 30.5067 31.7928 30.5451 31.978 30.4683Z",
                              fill: "#F692A3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.978 30.4683C31.978 30.4683 32.0891 30.2955 31.978 30.2571C31.8669 30.2187 31.8484 30.2571 31.7743 30.2571C31.7003 30.2571 31.6447 30.4299 31.6817 30.4683C31.7187 30.5067 31.7928 30.5451 31.978 30.4683Z",
                              fill: "#F693A3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.978 30.4683C31.978 30.4683 32.0891 30.2955 31.978 30.2571C31.8669 30.2187 31.8484 30.2571 31.7743 30.2571C31.7003 30.2571 31.6447 30.4299 31.6817 30.4683C31.7187 30.5067 31.7928 30.5451 31.978 30.4683Z",
                              fill: "#F694A4"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.978 30.4683C31.978 30.4683 32.0891 30.2955 31.978 30.2571C31.8669 30.2187 31.8484 30.2571 31.7743 30.2571C31.7003 30.2571 31.6447 30.4107 31.6817 30.4683C31.7187 30.5259 31.7928 30.5451 31.978 30.4683Z",
                              fill: "#F695A5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.978 30.4683C31.978 30.4683 32.0891 30.2955 31.978 30.2571C31.8669 30.2187 31.8484 30.2571 31.7743 30.2571C31.7003 30.2571 31.6447 30.4107 31.6817 30.4683C31.7187 30.5259 31.7928 30.5451 31.978 30.4683Z",
                              fill: "#F696A6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8659 30.4683C31.9585 30.4683 31.9956 30.2955 31.9585 30.2571C31.9215 30.2187 31.8289 30.2571 31.7548 30.2571C31.6807 30.2571 31.6251 30.4107 31.6622 30.4683C31.6992 30.5259 31.7919 30.5451 31.8659 30.4683Z",
                              fill: "#F697A7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8659 30.4683C31.9585 30.4683 31.9956 30.2955 31.9585 30.2571C31.9215 30.2187 31.8289 30.2571 31.7548 30.2571C31.6807 30.2571 31.6251 30.4107 31.6622 30.4683C31.6992 30.5259 31.7919 30.5451 31.8659 30.4683Z",
                              fill: "#F698A8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8667 30.4682C31.9593 30.4682 31.9963 30.2955 31.9592 30.2571C31.9222 30.2187 31.8296 30.2571 31.7555 30.2571C31.6815 30.2571 31.6444 30.4106 31.6629 30.4682C31.6814 30.5259 31.7926 30.5259 31.8667 30.4682Z",
                              fill: "#F799A9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8667 30.4683C31.9593 30.4683 31.9963 30.2955 31.9592 30.2571C31.9222 30.2187 31.8296 30.2571 31.7555 30.2571C31.6815 30.2571 31.6444 30.4107 31.6629 30.4491C31.6814 30.4875 31.7926 30.5259 31.8667 30.4683Z",
                              fill: "#F79AA9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8668 30.4683C31.9594 30.4683 31.9779 30.2955 31.9594 30.2571C31.9409 30.2187 31.8298 30.2571 31.7557 30.2571C31.6816 30.2571 31.6446 30.4107 31.7557 30.4491C31.8668 30.4875 31.7927 30.5259 31.8668 30.4683Z",
                              fill: "#F79BAA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8667 30.4683C31.8667 30.4683 31.9778 30.3146 31.9593 30.257C31.9408 30.1994 31.8297 30.257 31.7557 30.257C31.6816 30.257 31.6446 30.4107 31.7557 30.4491C31.8668 30.4875 31.7927 30.5259 31.8667 30.4683Z",
                              fill: "#F79CAB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8666 30.4683C31.8666 30.4683 31.9778 30.3146 31.8666 30.257C31.7555 30.1994 31.7555 30.257 31.6815 30.257C31.6074 30.257 31.5703 30.4107 31.6815 30.4491C31.7926 30.4875 31.7926 30.5259 31.8666 30.4683Z",
                              fill: "#F79DAC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8666 30.4669C31.8666 30.4669 31.9778 30.3133 31.8666 30.2749C31.7555 30.2364 31.7555 30.2749 31.6815 30.2749C31.6074 30.2749 31.5703 30.4285 31.6815 30.4669C31.7926 30.5053 31.7926 30.5245 31.8666 30.4669Z",
                              fill: "#F79EAD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8666 30.4669C31.8666 30.4669 31.9778 30.3133 31.8666 30.2749C31.7555 30.2364 31.7555 30.2749 31.6815 30.2749C31.6074 30.2749 31.5703 30.4285 31.6815 30.4669C31.7926 30.5053 31.7926 30.5245 31.8666 30.4669Z",
                              fill: "#F79FAE"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8666 30.4669C31.8666 30.4669 31.9778 30.3133 31.8666 30.2749C31.7555 30.2364 31.7555 30.2749 31.6815 30.2749C31.6074 30.2749 31.5703 30.4285 31.6815 30.4669C31.7926 30.5053 31.7926 30.5245 31.8666 30.4669Z",
                              fill: "#F7A0AF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8666 30.4669C31.8666 30.4669 31.9778 30.3133 31.8666 30.2749C31.7555 30.2364 31.7555 30.2749 31.6815 30.2749C31.6074 30.2749 31.5703 30.4285 31.6815 30.4669C31.7926 30.5053 31.7926 30.5245 31.8666 30.4669Z",
                              fill: "#F7A1AF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8666 30.4477C31.8666 30.4477 31.9778 30.3133 31.8666 30.2748C31.7555 30.2364 31.7555 30.2748 31.6815 30.2748C31.6074 30.2748 31.5703 30.4285 31.6815 30.4669C31.7926 30.5053 31.7926 30.5245 31.8666 30.4477Z",
                              fill: "#F7A2B0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8666 30.4477C31.8666 30.4477 31.9778 30.3133 31.8666 30.2748C31.7555 30.2364 31.7555 30.2748 31.6815 30.2748C31.6074 30.2748 31.5703 30.4285 31.6815 30.4669C31.7926 30.5053 31.7926 30.5245 31.8666 30.4477Z",
                              fill: "#F7A3B1"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.867 30.4477C31.867 30.4477 31.9781 30.3133 31.867 30.2748C31.7559 30.2364 31.7559 30.2748 31.6818 30.2748C31.6078 30.2748 31.5892 30.4285 31.6818 30.4669C31.7744 30.5053 31.7929 30.5245 31.867 30.4477Z",
                              fill: "#F7A4B2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.867 30.4477C31.867 30.4477 31.9781 30.3133 31.867 30.2748C31.7559 30.2364 31.7559 30.2748 31.6818 30.2748C31.6078 30.2748 31.5892 30.4285 31.6818 30.4669C31.7744 30.5053 31.7929 30.5245 31.867 30.4477Z",
                              fill: "#F8A5B3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8671 30.4477C31.8671 30.4477 31.9597 30.3133 31.8671 30.2748C31.7745 30.2364 31.7559 30.2748 31.6818 30.2748C31.6078 30.2748 31.5892 30.4285 31.6818 30.4669C31.7745 30.5053 31.793 30.5245 31.8671 30.4477Z",
                              fill: "#F8A6B4"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8671 30.4477C31.8671 30.4477 31.9597 30.3132 31.8671 30.2748C31.7745 30.2364 31.7559 30.2748 31.6818 30.2748C31.6078 30.2748 31.5892 30.4285 31.6818 30.4669C31.712 30.4791 31.7445 30.4838 31.7767 30.4805C31.8089 30.4771 31.8399 30.4659 31.8671 30.4477Z",
                              fill: "#F8A7B5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8671 30.4477C31.8671 30.4477 31.9597 30.3133 31.8671 30.2749C31.7745 30.2364 31.7559 30.2749 31.6818 30.2749C31.6078 30.2749 31.5892 30.4285 31.6818 30.4669C31.7745 30.5053 31.793 30.5053 31.8671 30.4477Z",
                              fill: "#F8A8B5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8671 30.4477C31.8671 30.4477 31.9597 30.3133 31.8671 30.2749C31.7745 30.2364 31.7559 30.2749 31.6818 30.2749C31.6078 30.2749 31.5892 30.4093 31.6818 30.4285C31.7745 30.4477 31.793 30.5053 31.8671 30.4477Z",
                              fill: "#F8A9B6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8671 30.4477C31.8671 30.4477 31.9597 30.3133 31.8671 30.2749C31.7745 30.2364 31.7559 30.2749 31.6818 30.2749C31.6078 30.2749 31.5892 30.4093 31.6818 30.4285C31.7745 30.4477 31.793 30.5053 31.8671 30.4477Z",
                              fill: "#F8AAB7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8661 30.4477C31.8661 30.4477 31.9587 30.3133 31.8661 30.2749C31.7735 30.2364 31.7735 30.2749 31.6994 30.2749C31.6253 30.2749 31.6068 30.4093 31.6994 30.4285C31.792 30.4477 31.792 30.5053 31.8661 30.4477Z",
                              fill: "#F8ACB8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8661 30.4477C31.8661 30.4477 31.9587 30.3133 31.8661 30.2749C31.7735 30.2364 31.7735 30.2749 31.6994 30.2749C31.6253 30.2749 31.6068 30.3901 31.6994 30.4285C31.792 30.4669 31.792 30.5053 31.8661 30.4477Z",
                              fill: "#F8ADB9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8661 30.4484C31.8661 30.4484 31.9587 30.314 31.8661 30.2948C31.7735 30.2756 31.7735 30.2948 31.6994 30.2948C31.6253 30.2948 31.6068 30.41 31.6994 30.4484C31.792 30.4869 31.792 30.5061 31.8661 30.4484Z",
                              fill: "#F8AEBA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.866 30.447C31.866 30.447 31.9578 30.3137 31.866 30.2947C31.7741 30.2756 31.7741 30.2947 31.7006 30.2947C31.6271 30.2947 31.7006 30.4089 31.7006 30.447C31.7006 30.4851 31.7925 30.5041 31.866 30.447Z",
                              fill: "#F8AFBA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.866 30.447C31.866 30.447 31.9578 30.3137 31.866 30.2947C31.7741 30.2756 31.7741 30.2947 31.7006 30.2947C31.6271 30.2947 31.7006 30.4089 31.7006 30.447C31.7006 30.4851 31.7925 30.5041 31.866 30.447Z",
                              fill: "#F8B0BB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.865 30.447C31.865 30.447 31.865 30.3137 31.865 30.2947C31.865 30.2756 31.7731 30.2947 31.718 30.2947C31.6629 30.2947 31.6262 30.4089 31.718 30.447C31.8098 30.4851 31.7915 30.5041 31.865 30.447Z",
                              fill: "#F8B1BC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.865 30.447C31.865 30.447 31.865 30.3137 31.865 30.2947C31.865 30.2756 31.7731 30.2947 31.718 30.2947C31.6629 30.2947 31.6262 30.4089 31.718 30.447C31.8098 30.4851 31.7915 30.5041 31.865 30.447Z",
                              fill: "#F9B2BD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.865 30.447C31.865 30.447 31.865 30.3137 31.865 30.2947C31.865 30.2756 31.7731 30.2947 31.718 30.2947C31.6629 30.2947 31.6262 30.4089 31.718 30.447C31.8098 30.4851 31.7915 30.5041 31.865 30.447Z",
                              fill: "#F9B3BE"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.865 30.4466C31.865 30.4466 31.865 30.3323 31.865 30.2942C31.865 30.2562 31.7731 30.2942 31.718 30.2942C31.6629 30.2942 31.6262 30.4085 31.718 30.4466C31.7404 30.4599 31.7657 30.467 31.7915 30.467C31.8173 30.467 31.8426 30.4599 31.865 30.4466Z",
                              fill: "#F9B4BF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.865 30.4466C31.865 30.4466 31.865 30.3323 31.865 30.2942C31.865 30.2562 31.7731 30.2942 31.718 30.2942C31.6629 30.2942 31.6262 30.4085 31.718 30.4466C31.8098 30.4847 31.7915 30.4847 31.865 30.4466Z",
                              fill: "#F9B5C0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.865 30.4466C31.865 30.4466 31.865 30.3323 31.865 30.2942C31.865 30.2562 31.7731 30.2942 31.718 30.2942C31.6629 30.2942 31.6262 30.4085 31.718 30.4466C31.8098 30.4847 31.7915 30.4847 31.865 30.4466Z",
                              fill: "#F9B6C0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8479 30.4457C31.8479 30.4457 31.9397 30.3315 31.8479 30.2934C31.8263 30.2778 31.8007 30.2695 31.7744 30.2695C31.7482 30.2695 31.7225 30.2778 31.701 30.2934C31.701 30.2934 31.6091 30.4077 31.701 30.4457C31.7928 30.4838 31.7928 30.4838 31.8479 30.4457Z",
                              fill: "#F9B7C1"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8479 30.4457C31.8479 30.4457 31.9397 30.3315 31.8479 30.2934C31.8263 30.2778 31.8007 30.2695 31.7744 30.2695C31.7482 30.2695 31.7225 30.2778 31.701 30.2934C31.701 30.2934 31.6091 30.4077 31.701 30.4457C31.7928 30.4838 31.7928 30.4838 31.8479 30.4457Z",
                              fill: "#F9B8C2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8484 30.448C31.8484 30.448 31.941 30.3328 31.8484 30.2944C31.7558 30.256 31.8484 30.2944 31.7187 30.2944C31.589 30.2944 31.6261 30.4096 31.7187 30.4288C31.8113 30.448 31.7928 30.4864 31.8484 30.448Z",
                              fill: "#F9B9C3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8474 30.448C31.8474 30.448 31.94 30.3328 31.8474 30.2944C31.7548 30.256 31.8474 30.2944 31.7178 30.2944C31.5881 30.2944 31.7178 30.4096 31.7178 30.4288C31.7178 30.448 31.7919 30.4864 31.8474 30.448Z",
                              fill: "#F9BAC4"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8474 30.448C31.8474 30.448 31.94 30.3328 31.8474 30.2944C31.7548 30.256 31.8474 30.2944 31.7178 30.2944C31.5881 30.2944 31.7178 30.4096 31.7178 30.4288C31.7178 30.448 31.7919 30.4864 31.8474 30.448Z",
                              fill: "#F9BBC5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8458 30.4275C31.8592 30.4081 31.8664 30.3848 31.8664 30.3608C31.8664 30.3369 31.8592 30.3136 31.8458 30.2942C31.8458 30.2942 31.8458 30.2942 31.7173 30.2942C31.5888 30.2942 31.7173 30.4084 31.7173 30.4275C31.7173 30.4465 31.7907 30.4846 31.8458 30.4275Z",
                              fill: "#F9BCC6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8458 30.4275C31.8592 30.4081 31.8664 30.3848 31.8664 30.3608C31.8664 30.3369 31.8592 30.3136 31.8458 30.2942C31.8458 30.2942 31.8458 30.2942 31.7173 30.2942C31.5888 30.2942 31.7173 30.4084 31.7173 30.4275C31.7173 30.4465 31.7907 30.4846 31.8458 30.4275Z",
                              fill: "#F9BDC6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8457 30.4275C31.8457 30.4275 31.8457 30.3323 31.8457 30.3133C31.8457 30.2942 31.8457 30.3133 31.7173 30.3133C31.5888 30.3133 31.7173 30.4275 31.7173 30.4466C31.7173 30.4656 31.809 30.4846 31.8457 30.4275Z",
                              fill: "#FABEC7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8457 30.4275C31.8457 30.4275 31.8457 30.3323 31.8457 30.3133C31.8457 30.2942 31.8457 30.3133 31.7173 30.3133C31.5888 30.3133 31.7173 30.4275 31.7173 30.4466C31.7367 30.4617 31.7612 30.4682 31.7853 30.4646C31.8094 30.4611 31.8311 30.4477 31.8457 30.4275Z",
                              fill: "#FABFC8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8457 30.4275C31.8457 30.4275 31.8457 30.3323 31.8457 30.3133C31.8457 30.2942 31.8457 30.3133 31.7173 30.3133C31.5888 30.3133 31.7173 30.4275 31.7173 30.4466C31.7367 30.4617 31.7612 30.4682 31.7853 30.4646C31.8094 30.4611 31.8311 30.4477 31.8457 30.4275Z",
                              fill: "#FAC0C9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8457 30.4275C31.8457 30.4275 31.8457 30.3323 31.8457 30.3133C31.8457 30.2942 31.8457 30.3133 31.7173 30.3133C31.5888 30.3133 31.7173 30.4275 31.7173 30.4466C31.7367 30.4617 31.7612 30.4682 31.7853 30.4646C31.8094 30.4611 31.8311 30.4477 31.8457 30.4275Z",
                              fill: "#FAC1CA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8457 30.4275C31.8457 30.4275 31.8457 30.3323 31.8457 30.3133C31.8457 30.2942 31.8457 30.3133 31.7173 30.3133C31.5888 30.3133 31.7173 30.4275 31.7173 30.4465C31.7384 30.4555 31.7614 30.4584 31.784 30.4551C31.8066 30.4517 31.8279 30.4422 31.8457 30.4275Z",
                              fill: "#FAC2CB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8457 30.4275C31.8457 30.4275 31.8457 30.3323 31.8457 30.3133C31.8457 30.2942 31.8457 30.3133 31.7173 30.3133C31.5888 30.3133 31.7173 30.4275 31.7173 30.4465C31.7384 30.4555 31.7614 30.4584 31.784 30.4551C31.8066 30.4517 31.8279 30.4422 31.8457 30.4275Z",
                              fill: "#FAC3CC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8457 30.4275C31.8457 30.4275 31.8457 30.3323 31.8457 30.3133C31.8457 30.2942 31.8457 30.3133 31.7173 30.3133C31.5888 30.3133 31.7173 30.3133 31.7173 30.4275C31.7173 30.5417 31.809 30.4656 31.8457 30.4275Z",
                              fill: "#FAC4CC"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8457 30.4275C31.8457 30.4275 31.8457 30.3323 31.8457 30.3133C31.8457 30.2942 31.8457 30.3133 31.7173 30.3133C31.5888 30.3133 31.7173 30.3133 31.7173 30.4275C31.7173 30.5417 31.809 30.4656 31.8457 30.4275Z",
                              fill: "#FAC5CD"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8465 30.4275C31.8465 30.4275 31.8465 30.3323 31.8465 30.3133C31.8465 30.2942 31.8465 30.3133 31.7364 30.3133C31.6264 30.3133 31.7364 30.3133 31.7364 30.4275C31.7364 30.5417 31.8098 30.4656 31.8465 30.4275Z",
                              fill: "#FAC6CE"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8465 30.4275C31.8465 30.4275 31.8465 30.3323 31.8465 30.3133C31.8465 30.2942 31.8465 30.3133 31.7364 30.3133C31.6264 30.3133 31.7364 30.3133 31.7364 30.4275C31.7364 30.5417 31.8098 30.4656 31.8465 30.4275Z",
                              fill: "#FAC7CF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8465 30.4275C31.8465 30.4275 31.8465 30.3323 31.8465 30.3133C31.8465 30.2942 31.8465 30.3133 31.7364 30.3133C31.6264 30.3133 31.7364 30.3133 31.7364 30.4275C31.7364 30.5417 31.8098 30.4656 31.8465 30.4275Z",
                              fill: "#FAC8D0"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8465 30.4275C31.8465 30.4275 31.8465 30.3323 31.8465 30.3133C31.8465 30.2942 31.8465 30.3133 31.7364 30.3133C31.6264 30.3133 31.7364 30.3132 31.7364 30.4084C31.7364 30.5036 31.8098 30.4656 31.8465 30.4275Z",
                              fill: "#FAC9D1"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8465 30.4275C31.8465 30.4275 31.8465 30.3323 31.8465 30.3133C31.8465 30.2942 31.8465 30.3133 31.7364 30.3133C31.6264 30.3133 31.7364 30.3132 31.7364 30.4084C31.7364 30.5036 31.8098 30.4656 31.8465 30.4275Z",
                              fill: "#FBCAD2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8465 30.4276C31.8465 30.4276 31.8465 30.4276 31.8465 30.3134C31.8465 30.1992 31.8465 30.3134 31.7364 30.3134C31.6264 30.3134 31.7364 30.3134 31.7364 30.4085L31.8465 30.4276Z",
                              fill: "#FBCBD2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8465 30.4276C31.8465 30.4276 31.8465 30.4276 31.8465 30.3134C31.8465 30.1992 31.8465 30.3134 31.7364 30.3134C31.6264 30.3134 31.7364 30.3134 31.7364 30.4085L31.8465 30.4276Z",
                              fill: "#FBCCD3"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8465 30.4276C31.8465 30.4276 31.8465 30.4276 31.8465 30.3324C31.8465 30.2373 31.8465 30.3324 31.7364 30.3324C31.6264 30.3324 31.7364 30.3325 31.7364 30.4276H31.8465Z",
                              fill: "#FBCDD4"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8465 30.4276C31.8465 30.4276 31.8465 30.4276 31.8465 30.3324C31.8465 30.2373 31.8465 30.3324 31.7364 30.3324C31.6264 30.3324 31.7364 30.3325 31.7364 30.4276H31.8465Z",
                              fill: "#FBCED5"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8462 30.4276C31.8462 30.4276 31.8462 30.4276 31.8462 30.3324C31.8462 30.2373 31.8462 30.3324 31.7545 30.3324C31.7465 30.3469 31.7422 30.3634 31.7422 30.3801C31.7422 30.3968 31.7465 30.4132 31.7545 30.4276H31.8462Z",
                              fill: "#FBCFD6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8482 30.4276C31.8482 30.4276 31.8482 30.4276 31.8482 30.3324C31.8482 30.2373 31.8482 30.3324 31.7565 30.3324C31.7478 30.3635 31.7478 30.3966 31.7565 30.4276C31.7565 30.4276 31.8115 30.4467 31.8482 30.4276Z",
                              fill: "#FBD0D7"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8474 30.4284C31.854 30.4135 31.8574 30.3973 31.8574 30.3809C31.8574 30.3645 31.854 30.3482 31.8474 30.3333C31.8474 30.3333 31.8474 30.3333 31.7556 30.3333C31.6639 30.3333 31.7556 30.3333 31.7556 30.4284H31.8474Z",
                              fill: "#FBD1D8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8474 30.4284C31.854 30.4135 31.8574 30.3973 31.8574 30.3809C31.8574 30.3645 31.854 30.3482 31.8474 30.3333C31.8474 30.3333 31.8474 30.3333 31.7556 30.3333C31.6639 30.3333 31.7556 30.3333 31.7556 30.4284H31.8474Z",
                              fill: "#FBD2D8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8484 30.4277C31.8484 30.4277 31.8484 30.4276 31.8484 30.3324C31.8484 30.2372 31.8484 30.3324 31.8484 30.3324C31.8484 30.3324 31.8484 30.3325 31.8484 30.4277C31.8484 30.5228 31.8116 30.4467 31.8484 30.4277Z",
                              fill: "#FBD3D9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8484 30.4285C31.8484 30.4285 31.8484 30.4284 31.8484 30.3333C31.8484 30.3333 31.8484 30.3333 31.8484 30.4285C31.8484 30.5236 31.8116 30.4475 31.8484 30.4285Z",
                              fill: "#FBD4DA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8484 30.4285C31.8484 30.4285 31.8484 30.4284 31.8484 30.3333C31.8484 30.3333 31.8484 30.3333 31.8484 30.4285C31.8484 30.5236 31.8116 30.4475 31.8484 30.4285Z",
                              fill: "#FBD5DB"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.83 30.4097C31.83 30.4097 31.8126 30.4271 31.83 30.4097V30.4097Z",
                              fill: "#FCDDE2"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8092 30.3886L31.8254 30.3716L31.8092 30.3886H31.793H31.8092Z",
                              fill: "#FEF7F8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8092 30.3886L31.8254 30.3716L31.8092 30.3886H31.793H31.8092Z",
                              fill: "#FEF8F9"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8105 30.3882L31.8264 30.3716L31.8105 30.3882Z",
                              fill: "#FEF9FA"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.5512 25.0532C25.3789 25.0741 25.2049 25.0741 25.0327 25.0532C24.8105 25.0532 24.8661 24.4386 24.8475 24.4194C24.829 24.4002 24.7179 24.2658 24.7364 24.1506C24.755 24.0353 25.1623 23.6897 25.2179 23.6705C25.2734 23.6513 25.329 23.6705 25.329 23.6705L25.4586 23.5745C25.4586 23.5745 25.3104 23.6705 25.3104 23.7473C25.3104 23.8241 25.3104 23.8625 25.3104 23.9393C25.2612 23.9987 25.2177 24.063 25.1808 24.1314C25.1808 24.1314 25.1808 24.2274 25.1808 24.2466C25.2782 24.2703 25.3797 24.2703 25.4771 24.2466C25.5882 24.2466 25.6252 24.1122 25.6437 24.1122C25.6622 24.1122 25.6438 24.2658 25.4586 24.3234C25.2734 24.3811 25.2549 24.4387 25.1808 24.3234C25.1068 24.2082 25.1808 24.4962 25.329 24.5154C25.4392 24.5364 25.5521 24.5364 25.6623 24.5154L25.5326 24.9572L25.5512 25.0532Z",
                              fill: "#A8AC71"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.3475 26.3399C24.3915 26.364 24.4284 26.3998 24.4545 26.4438C24.4806 26.4877 24.4948 26.538 24.4956 26.5896C24.4956 26.7816 24.329 26.9352 24.329 27.2809C24.329 27.6265 24.329 27.6073 24.8105 27.9722C24.8733 28.0274 24.9185 28.101 24.9401 28.1834C24.9401 28.2794 25.0327 28.9132 25.4401 28.9132C25.8475 28.9132 25.903 28.6443 25.903 28.6443L25.7364 28.3755C25.6631 28.3915 25.5874 28.3915 25.5142 28.3755C25.4725 28.3636 25.434 28.3418 25.4018 28.3118C25.3697 28.2818 25.3447 28.2444 25.329 28.2026C25.329 28.0874 25.329 27.857 25.1993 27.7418C25.0697 27.6266 24.7179 27.4345 24.7179 27.1465C24.7179 26.8584 24.903 26.8392 24.8475 26.5127C24.8149 26.4028 24.7601 26.3014 24.6866 26.2153C24.6131 26.1292 24.5228 26.0604 24.4216 26.0134H24.2734V26.3399H24.3475Z",
                              fill: "#A8AC71"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.4599 24.073C25.6081 24.073 25.4599 23.6696 25.4599 23.6696L25.3672 23.7657C25.3797 23.8161 25.3797 23.8689 25.3672 23.9193C25.3743 23.9703 25.3743 24.022 25.3672 24.073H25.4599Z",
                              fill: "#F1A720"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.7187 27.76C25.7187 27.76 25.4595 27.5488 25.4965 27.0111C25.5336 26.4734 26.3669 26.0893 26.4225 25.8589C26.478 25.6284 26.6817 25.4748 26.0151 24.937L25.8484 25.1291L26.1262 25.3404C26.1262 25.3404 26.1262 25.494 26.0336 25.5516C25.8878 25.6962 25.7332 25.8309 25.5706 25.9548L25.3299 26.1469C25.2428 26.2487 25.1738 26.3658 25.1261 26.4926C25.0777 26.6683 25.0777 26.8545 25.1261 27.0303C25.1336 27.2168 25.2048 27.3946 25.3269 27.5318C25.449 27.6689 25.6141 27.7566 25.7928 27.7792L25.7187 27.76Z",
                              fill: "#A8AC71"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.2922 28.1066V28.3178H25.1626H25.0516L24.959 28.4138C24.9653 28.3693 24.9653 28.324 24.959 28.2794H25.0886V28.145L25.1811 28.0298L25.2922 28.1066Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.9043 28.1433V28.0482H24.9962V28.1624V28.2575L24.9043 28.1433Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.1265 27.7795C25.1265 27.7795 25.1266 27.7795 25.2191 27.7795V27.8947H25.071H24.9414V27.7795H25.1265Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.4774 28.4328H25.3848V28.5673V28.6825H25.4774V28.4328Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.1082 28.8361H25.2193V28.7401H24.9785L25.1082 28.8361Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.459 28.7395L25.6626 28.6051V28.4899H25.533V28.6435V28.7779L25.459 28.7395Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.3105 28.9509C25.4426 28.9977 25.5859 28.9977 25.718 28.9509C25.8291 28.9509 25.8476 28.9509 25.8476 28.9509H25.7365L25.6439 29.047L25.3105 29.143V28.9509Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.1061 27.2401V27.1259C25.0948 27.0953 25.0948 27.0614 25.1061 27.0307L25.198 27.1259L25.1061 27.2401Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.2734 27.5489H25.3651V27.6632L25.2734 27.5489Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.8122 24.0355C24.8122 24.0355 24.8122 24.1892 24.8122 24.2084C24.8851 24.2033 24.956 24.1818 25.0199 24.1453C25.0839 24.1088 25.1394 24.0582 25.1825 23.9971C25.2 23.9344 25.2 23.8678 25.1825 23.805V23.6898C25.1551 23.6708 25.1229 23.6607 25.09 23.6607C25.057 23.6607 25.0248 23.6708 24.9974 23.6898C24.8783 23.7895 24.7668 23.8987 24.6641 24.0163L24.8122 24.0355Z",
                              fill: "#C6C7A6"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.0515 23.7858L24.9219 23.9202C24.9979 23.8903 25.0672 23.8446 25.1255 23.7858C25.1971 23.7578 25.2762 23.7578 25.3478 23.7858C25.3478 23.7858 25.2366 23.7858 25.2181 23.7858L25.0515 23.901V23.7858Z",
                              fill: "#A8AC71"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.4228 27.182C25.4164 27.1506 25.4164 27.1182 25.4228 27.0869V26.9917V27.0869H25.5329L25.4228 27.182Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.0525 26.9535V26.7614C25.045 26.6784 25.045 26.5948 25.0525 26.5117V26.627L25.1636 26.819H25.0525H24.9414L25.0525 26.9535Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.4207 26.9134C25.4148 26.882 25.4148 26.8497 25.4207 26.8183C25.4152 26.7804 25.4152 26.7419 25.4207 26.704L25.3105 26.7992",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.1258 26.3399C25.1204 26.2953 25.1204 26.2501 25.1258 26.2055L25.2369 26.0519V26.2631V26.4359H25.0332C25.0366 26.3976 25.0366 26.359 25.0332 26.3207L25.1258 26.3399Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.5132 26.6473V26.5513H25.2539L25.5132 26.6473Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.3486 26.0909H25.4412H25.5523V26.3406H25.4227L25.3301 26.2254L25.3486 26.0909Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.6814 26.4742L25.8295 26.3206H25.5703V26.4934L25.6814 26.4742Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.7739 26.0322V25.7634C25.7372 25.7566 25.6996 25.7566 25.6629 25.7634H25.5703H25.6629L25.7739 26.0322Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.1063 26.0709L26.2359 25.9557L26.3656 25.8213H26.0137V25.9557V26.0901L26.1063 26.0709Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.3301 24.9188V25.0724H25.6264V24.9764V24.8803L25.3301 24.9188Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8672 26.3384L25.9968 26.2232H26.0895H25.8301V26.4153L25.8672 26.3384Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4205 25.7834C26.4258 25.7067 26.4258 25.6297 26.4205 25.5529C26.4276 25.502 26.4276 25.4503 26.4205 25.3993L26.2168 25.5529V25.649V25.745H26.3094L26.4205 25.7834Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.0332 25.5146V25.3993H26.422H26.3295H26.1998L26.0332 25.5146Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.4028 26.9725C24.4702 26.9594 24.5392 26.9594 24.6065 26.9725L24.6111 26.9757C24.6831 26.9943 24.7731 27.0877 24.7731 27.0877L24.6111 26.9757C24.6032 26.9736 24.5954 26.9725 24.588 26.9725C24.5331 26.9605 24.4763 26.9605 24.4214 26.9725H24.4028Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.4028 26.4924C24.4028 26.4924 24.4029 26.4924 24.5325 26.358C24.555 26.3445 24.5805 26.3373 24.6065 26.3373C24.6325 26.3373 24.6581 26.3445 24.6806 26.358C24.6576 26.3461 24.6322 26.3399 24.6065 26.3399C24.5808 26.3399 24.5555 26.3461 24.5325 26.358C24.4916 26.3944 24.4598 26.4404 24.4399 26.4924H24.4028Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.6526 26.7289C24.7547 26.7591 24.7547 26.8572 24.7547 26.8572C24.7335 26.8049 24.698 26.7603 24.6526 26.7289C24.6442 26.7264 24.635 26.7243 24.625 26.7229C24.5588 26.7008 24.4876 26.7008 24.4214 26.7229C24.493 26.6948 24.572 26.6948 24.6436 26.7229C24.6466 26.7248 24.6497 26.7268 24.6526 26.7289Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.3549 26.3984C24.3576 26.4107 24.3612 26.4229 24.3658 26.4347V26.5116C24.3522 26.4753 24.3486 26.4362 24.3549 26.3984C24.3452 26.3531 24.3488 26.3055 24.3658 26.2619H24.455C24.4558 26.2491 24.457 26.2363 24.4584 26.2235L24.3658 26.2428C24.3857 26.2011 24.4182 26.1673 24.4584 26.1467V26.2235V26.2428C24.4576 26.2491 24.4569 26.2555 24.4564 26.2619H24.4584L24.4561 26.2642C24.4542 26.2862 24.4535 26.3082 24.4538 26.3303C24.4544 26.3523 24.4559 26.3744 24.4584 26.3964C24.4557 26.3744 24.4542 26.3523 24.4538 26.3303C24.4533 26.3087 24.4536 26.2871 24.4548 26.2656L24.3658 26.358C24.3609 26.3711 24.3572 26.3847 24.3549 26.3984Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.9954 24.6296C25.0372 24.6134 25.0832 24.6134 25.125 24.6296C25.1173 24.6417 25.111 24.6546 25.1059 24.668H25.125V24.8216C25.1624 24.7644 25.2135 24.7181 25.2731 24.6872C25.268 24.7032 25.2647 24.7197 25.2633 24.7363C25.2725 24.7323 25.282 24.7287 25.2917 24.7256V24.8601C25.3227 24.7928 25.3749 24.7386 25.4398 24.7064L25.2917 24.8601C25.3335 24.9131 25.3835 24.9585 25.4398 24.9945C25.3758 24.971 25.3186 24.9314 25.2731 24.8792C25.2694 24.8956 25.2666 24.9122 25.2646 24.9288C25.2652 24.9573 25.268 24.9856 25.2731 25.0137L25.2616 25.0017C25.2627 25.0315 25.2665 25.0613 25.2731 25.0905C25.2154 25.0412 25.1654 24.9829 25.125 24.9177V25.0713C25.1173 25.0011 25.1173 24.9303 25.125 24.8601C25.1034 24.8258 25.092 24.7858 25.092 24.7449C25.092 24.7185 25.0968 24.6924 25.1059 24.668H24.9213C24.8762 24.694 24.836 24.7282 24.8028 24.769C24.799 24.7737 24.7953 24.7785 24.7917 24.7832C24.7953 24.7784 24.799 24.7737 24.8028 24.769C24.8381 24.7248 24.8779 24.6845 24.9213 24.6488L24.9954 24.6296Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.6806 26.5884C24.626 26.5729 24.5685 26.5729 24.5139 26.5884V26.4924C24.5687 26.4785 24.6258 26.4785 24.6806 26.4924H24.8472V26.5884C24.7932 26.5694 24.7346 26.5694 24.6806 26.5884Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.9212 25.1673C25.9942 25.1861 26.0705 25.1861 26.1434 25.1673H26.1249H25.9212Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.4929 24.6499H25.291V24.8022L25.4929 24.6499Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.2734 24.6491V24.8014L25.4387 24.6301L25.2734 24.6491Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.2379 25.0725L25.0898 24.8421V25.0341H25.3119L25.2379 25.0725Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8297 28.8174C25.7176 28.8875 25.5902 28.9271 25.4594 28.9326C25.3621 28.957 25.2605 28.957 25.1631 28.9326C25.1112 28.895 25.0723 28.8411 25.052 28.7789C25.0019 28.677 24.9705 28.5663 24.9594 28.4525C24.9722 28.3505 24.9722 28.2472 24.9594 28.1452C24.8677 28.0347 24.7618 27.9378 24.6447 27.8572C24.5804 27.8075 24.5273 27.744 24.489 27.6711C24.4506 27.5982 24.4279 27.5176 24.4225 27.4347C24.4034 27.3074 24.4034 27.1779 24.4225 27.0506C24.4776 26.9649 24.5096 26.8654 24.515 26.7626C24.4888 26.7038 24.451 26.6515 24.4039 26.6089H24.3113H24.2188H24.3298C24.3373 26.647 24.3373 26.6861 24.3298 26.7242C24.3488 26.8192 24.3488 26.9172 24.3298 27.0122C24.2775 27.1336 24.2462 27.2636 24.2373 27.3962C24.2624 27.5692 24.3481 27.7265 24.478 27.838C24.6076 27.9532 24.7187 28.0108 24.7742 28.1068C24.8415 28.2372 24.8796 28.3816 24.8854 28.5293C24.8774 28.6059 24.8774 28.6832 24.8854 28.7598C24.8953 28.7934 24.912 28.8245 24.9343 28.8509C24.9567 28.8774 24.9841 28.8987 25.015 28.9134C25.1121 28.9394 25.2141 28.9394 25.3112 28.9134C25.4509 28.9096 25.5862 28.8628 25.7001 28.7789L25.8297 28.8174Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.6615 28.4141H25.5504C25.5307 28.4259 25.5084 28.4322 25.4856 28.4322C25.4629 28.4322 25.4405 28.4259 25.4208 28.4141C25.4043 28.3512 25.4043 28.285 25.4208 28.2221C25.4208 28.2221 25.4208 28.0492 25.4208 27.934C25.3414 27.8133 25.2409 27.7092 25.1245 27.6268C25.0134 27.6268 24.9023 27.4539 24.8838 27.3579C24.8673 27.2691 24.8673 27.1779 24.8838 27.0891C24.9048 26.9749 24.9048 26.8576 24.8838 26.7434C24.8688 26.6667 24.8378 26.5943 24.7931 26.5312C24.7483 26.4682 24.6908 26.4161 24.6245 26.3785C24.5584 26.3209 24.4832 26.2755 24.4023 26.2441C24.4879 26.2779 24.5688 26.3231 24.6431 26.3785C24.6998 26.412 24.7478 26.4592 24.7833 26.516C24.8187 26.5728 24.8405 26.6377 24.8467 26.705C24.8677 26.8127 24.8677 26.9237 24.8467 27.0314C24.8301 27.1267 24.8301 27.2243 24.8467 27.3195C24.8888 27.4438 24.9749 27.5467 25.0875 27.6076C25.2072 27.6795 25.3038 27.7863 25.3652 27.9148C25.3857 28.0032 25.3857 28.0953 25.3652 28.1837C25.3795 28.2646 25.4184 28.3387 25.4763 28.3949C25.5243 28.4125 25.5766 28.4125 25.6245 28.3949C25.667 28.4063 25.7116 28.4063 25.7542 28.3949L25.6615 28.4141Z",
                              fill: "#78732E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4217 27.7609C26.4217 27.7609 26.5699 27.761 26.5514 27.9146C26.5651 28.0101 26.5651 28.1071 26.5514 28.2026L26.3477 28.0298L26.4587 27.9338V27.8378L26.4217 27.7609Z",
                              fill: "#A8AC71"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.9773 26.3396C23.9773 26.3396 23.8477 26.3396 23.8107 26.3396C23.8024 26.3216 23.7982 26.3019 23.7982 26.282C23.7982 26.262 23.8024 26.2424 23.8107 26.2244C23.8107 26.2244 23.7181 26.2244 23.8107 26.1091C23.9032 25.9939 23.9217 26.1091 23.9403 26.1091C23.9588 26.1091 23.9402 25.9939 24.0328 25.9939C24.1253 25.9939 24.1438 26.0899 24.1438 26.0899V26.4356L23.9773 26.3396Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M23.8853 26.3399H23.7926C23.785 26.2955 23.785 26.25 23.7926 26.2055C23.7926 26.2055 23.7926 26.2055 23.7926 26.0903C23.7926 25.9751 23.7926 26.0903 23.9223 26.0903V25.9943C23.9485 26.0025 23.9724 26.0174 23.9918 26.0375C24.0111 26.0576 24.0255 26.0823 24.0334 26.1095V26.4552H23.9223L23.8853 26.3399ZM23.8853 25.9943C23.8684 25.9842 23.8492 25.9788 23.8297 25.9788C23.8102 25.9788 23.791 25.9842 23.7742 25.9943C23.7675 26.0094 23.764 26.0257 23.764 26.0423C23.764 26.0589 23.7675 26.0752 23.7742 26.0903C23.766 26.1049 23.7617 26.1214 23.7617 26.1383C23.7617 26.1551 23.766 26.1717 23.7742 26.1863H23.9223V25.8406L23.8853 25.9943Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.1256 26.3396C24.1256 26.3396 24.0144 26.3396 23.9774 26.3396C23.9404 26.3396 23.9774 26.2052 23.9774 26.1859C23.9774 26.1667 23.9774 26.1859 23.9774 26.0899C23.9774 25.9939 23.9774 26.0899 24.0885 26.0899C24.1997 26.0899 24.0885 25.9747 24.1997 25.9939C24.2295 25.9821 24.2625 25.9821 24.2923 25.9939C24.2719 26.1119 24.2409 26.2276 24.1997 26.3396H24.1256Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.0326 26.3396C24.024 26.3183 24.0195 26.2955 24.0195 26.2724C24.0195 26.2493 24.024 26.2264 24.0326 26.2052C24.0326 26.2052 24.0326 26.2052 24.0326 26.09C24.0326 25.9747 24.0327 26.09 24.1252 26.09C24.155 26.0781 24.188 26.0781 24.2178 26.09C24.2476 26.0781 24.2805 26.0781 24.3103 26.09C24.3103 26.09 24.3103 26.378 24.3103 26.4356H24.1993L24.0326 26.3396ZM24.0326 25.8787C24.0326 25.8787 24.0326 25.8787 24.0326 25.994H24.1622C24.1622 25.994 24.1622 25.6867 24.1622 25.6483L24.0326 25.8787Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.3304 26.34C24.3304 26.34 24.3304 26.436 24.2193 26.34C24.1082 26.244 24.2193 26.1864 24.2193 26.1672C24.2193 26.148 24.2193 26.1672 24.2193 26.0519C24.2193 25.9367 24.2193 26.0519 24.3304 26.0519C24.4415 26.0519 24.3304 25.9175 24.4415 25.9367C24.5525 25.9559 24.5526 25.9367 24.5341 26.0519C24.5155 26.1672 24.423 26.0519 24.4044 26.1672C24.3927 26.1944 24.3866 26.2238 24.3866 26.2536C24.3866 26.2834 24.3927 26.3128 24.4044 26.34H24.3304Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M24.2374 26.4741C24.2374 26.4741 24.2374 26.378 24.2374 26.3396C24.2277 26.3221 24.2225 26.3022 24.2225 26.282C24.2225 26.2618 24.2277 26.2419 24.2374 26.2244C24.2374 26.2244 24.2374 26.2244 24.2374 26.1284C24.2374 26.1284 24.3671 26.2244 24.3485 26.2628C24.3485 26.2628 24.2374 26.2628 24.2374 26.378C24.2272 26.4022 24.222 26.4284 24.222 26.4548C24.222 26.4813 24.2272 26.5074 24.2374 26.5317C24.2327 26.5128 24.2327 26.493 24.2374 26.4741ZM24.2374 25.994C24.2374 25.994 24.2374 25.994 24.1448 25.994C24.1382 26.009 24.1348 26.0254 24.1348 26.042C24.1348 26.0585 24.1382 26.0749 24.1448 26.09V26.2052C24.1448 26.2052 24.1449 26.2052 24.2374 26.2052C24.33 26.2052 24.2374 26.0899 24.2374 26.0131C24.2374 25.9363 24.33 25.8979 24.3671 25.8979C24.3644 25.8713 24.3542 25.8462 24.3377 25.8257C24.3212 25.8052 24.2992 25.7902 24.2745 25.7827L24.2374 25.994Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2 27.7415C26.1322 27.6702 26.0702 27.593 26.0148 27.511L25.8296 27.2998L25.6444 27.2038L25.5332 26.9926V26.7621V26.6277C25.5332 26.6277 25.1444 26.7621 25.3481 27.511C25.3608 27.5913 25.3929 27.6669 25.4415 27.7307C25.4901 27.7945 25.5536 27.8445 25.6259 27.8759H25.9777L26.2 27.7415Z",
                              fill: "#AF7029"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.0156 25.2637V25.3597C25.9045 25.6478 25.6267 25.7822 25.4046 25.955C25.2736 26.033 25.1649 26.1457 25.0898 26.2815C25.0012 26.4456 24.9564 26.6312 24.9601 26.8192C24.9479 26.9661 24.9721 27.1138 25.0304 27.2483C25.0888 27.3827 25.1793 27.4995 25.2935 27.5874C25.4206 27.6723 25.5681 27.7189 25.7193 27.7218H26.4229C26.4317 27.7532 26.4317 27.7865 26.4229 27.8178C26.4312 27.7998 26.4354 27.7801 26.4354 27.7602C26.4354 27.7403 26.4312 27.7206 26.4229 27.7026H26.3304H26.1822H25.8304C25.685 27.6992 25.5436 27.6526 25.423 27.5682C25.3117 27.4821 25.2229 27.3684 25.1647 27.2376C25.1065 27.1068 25.0807 26.963 25.0898 26.8192C25.086 26.6312 25.1308 26.4456 25.2194 26.2815C25.3538 26.1063 25.5167 25.9568 25.7008 25.8398C25.893 25.7332 26.0532 25.5738 26.1637 25.3789C26.1637 25.3789 26.1637 25.3789 26.0711 25.3789L26.0156 25.2637Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.5128 27.857C26.5128 27.857 26.5128 28.0284 26.4027 28.0284C26.2926 28.0284 26.4945 28.0284 26.5128 28.0284C26.4582 28.0184 26.4023 28.0184 26.3477 28.0284H26.4395C26.4395 28.0284 26.4395 27.895 26.4395 27.876L26.5128 27.857Z",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.8659 27.9724H26.6437H26.5326C26.5428 27.9482 26.5481 27.922 26.5481 27.8956C26.5481 27.8692 26.5428 27.843 26.5326 27.8188H26.403H26.1994L25.8105 27.3771H25.9586H26.1808H26.4215H26.5511V27.4731V27.6075V27.9148L26.8659 27.9724Z",
                              fill: "#FCCA3D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.885 27.9535C26.8243 27.9698 26.7605 27.9698 26.6998 27.9535H26.5332C26.5367 27.9918 26.5367 28.0304 26.5332 28.0687V28.3376H26.7554H26.8664V28.0496V27.8767L26.885 27.9535Z",
                              fill: "#AF7029"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.6249 25.3415V25.1495V25.0343L26.5323 24.8998L26.4398 24.8038H26.199L26.0879 24.9574C26.261 25.0844 26.4061 25.2481 26.5138 25.4375C26.5999 25.4563 26.678 25.5035 26.7361 25.572V25.4375L26.6249 25.3415Z",
                              fill: "#FCCA3D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4219 25.5327C26.4338 25.6412 26.4338 25.7507 26.4219 25.8592L26.5515 25.6864L26.644 25.4944C26.5859 25.4258 26.508 25.3787 26.4219 25.3599C26.4378 25.4163 26.4378 25.4763 26.4219 25.5327Z",
                              fill: "#AF7029"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.7164 28.2589L26.6062 28.1257H26.4961L26.7164 28.2589Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.8647 28.1062C26.8349 28.1627 26.7975 28.2144 26.7536 28.2598L26.5684 28.375L26.8091 28.4711L26.9573 28.3174L26.8647 28.1062Z",
                              fill: "#6F5B24"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2752 22.6523C28.2752 22.6523 27.7012 22.5371 27.7012 23.0364C27.7012 23.19 27.7012 23.2476 27.8678 23.2668C28.0702 23.3004 28.2612 23.3863 28.4233 23.5165C28.4919 23.566 28.548 23.6321 28.5867 23.709C28.6254 23.7859 28.6456 23.8714 28.6455 23.9582C28.6613 24.0276 28.6613 24.0999 28.6455 24.1694L28.7751 24.8223L28.9047 25.3024L29.2936 25.072L29.5158 24.3614L29.238 23.0748L28.3307 22.6523H28.2752Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.7926 25.323L28.6445 24.8236L28.5149 24.1707C28.5238 24.1006 28.5238 24.0296 28.5149 23.9595C28.5143 23.8749 28.4957 23.7914 28.4605 23.7151C28.4253 23.6387 28.3743 23.5714 28.3112 23.5178C28.1665 23.4137 28.0026 23.3418 27.8298 23.3066C27.7002 23.3066 27.6632 23.2106 27.6632 23.0569C27.6419 23.0121 27.6309 22.9628 27.6309 22.9129C27.6309 22.8629 27.6419 22.8137 27.6632 22.7689C27.8113 22.5961 28.126 22.6536 28.1446 22.6536L29.0519 23.0953L29.3481 24.382L29.1259 25.0925L28.7926 25.323ZM28.5519 24.1707L28.6815 24.8236L28.8111 25.2846L29.1629 25.0541L29.3851 24.3628L29.1074 23.0953L28.2001 22.6728H28.0705C27.9552 22.6674 27.8422 22.7087 27.7557 22.788C27.6927 22.862 27.6596 22.9583 27.6632 23.0569C27.6632 23.1914 27.6632 23.249 27.8113 23.2874H27.9038C28.0814 23.3049 28.2495 23.3787 28.3853 23.4986C28.4543 23.5522 28.5102 23.6218 28.5488 23.7018C28.5874 23.7818 28.6074 23.8701 28.6074 23.9595C28.6081 24.0339 28.5888 24.107 28.5519 24.1707Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.7752 25.1113C28.7752 25.1113 28.9789 25.1113 29.016 24.8809C29.053 24.6504 28.8308 24.6312 28.8123 24.6312L28.979 24.7273H29.0901C29.0901 24.7273 29.2012 24.4969 29.0901 24.4392C29.0395 24.3591 28.977 24.2877 28.9049 24.228C28.845 24.206 28.7796 24.206 28.7197 24.228C28.792 24.2044 28.8696 24.2044 28.9419 24.228H29.0345C29.0495 24.1261 29.0495 24.0225 29.0345 23.9207C29.0212 23.8846 28.9987 23.8531 28.9693 23.8294C28.9399 23.8057 28.9048 23.7908 28.8679 23.7863C28.8066 23.7752 28.7439 23.7752 28.6827 23.7863C28.7553 23.765 28.8322 23.765 28.9049 23.7863C29.016 23.7863 29.016 23.7863 29.016 23.7863C29.0216 23.7032 29.0216 23.6198 29.016 23.5367C28.9753 23.4704 28.9176 23.4171 28.8493 23.383H28.6457C28.6991 23.3606 28.7589 23.3606 28.8123 23.383C28.9234 23.383 28.9234 23.383 28.9419 23.383L28.5901 23.2294H28.2753C28.2753 23.2294 28.3864 23.2294 28.3679 23.2294H28.1457H27.979H27.7383C27.7383 23.2294 27.7383 23.2294 27.8494 23.2294C27.9605 23.2294 27.8494 23.1333 27.8494 23.1333V23.0181H28.1642L28.8308 23.4214L29.1456 23.6903L29.3308 24.228V25.1113L28.8863 25.4954H28.6827V25.3034L28.7752 25.1113Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.276 22.8837C28.2651 22.8397 28.2651 22.7934 28.276 22.7493C28.276 22.6533 28.276 22.7493 28.276 22.7493C28.1452 22.7293 28.012 22.7638 27.9057 22.8453C27.7575 22.9605 27.9057 23.1909 27.9057 23.1909C27.9454 23.1407 27.9962 23.1012 28.0538 23.0757H28.2946C28.2946 23.0757 28.2945 23.0757 28.202 22.9797H28.0353C28.0958 22.9616 28.16 22.9616 28.2205 22.9797C28.3316 22.9797 28.3501 22.9797 28.3501 22.9797L28.276 22.8837Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.8674 25.1878H28.7192L28.8118 25.8216L29.3859 26.8394H29.6821L29.7747 26.6473H29.8673C29.9265 26.7549 30.0089 26.8469 30.108 26.9161L30.3302 27.0122C30.3302 27.0122 30.719 27.5691 30.7376 27.5883C30.7561 27.6075 30.7376 27.3771 30.7376 27.3771L30.645 27.089L30.5339 26.897H30.682H30.7931L30.9413 27.0122V27.1082V27.2234V27.3578L31.0338 27.5499L31.1265 27.7227V27.5114L30.9783 26.993V26.8201L31.1449 26.9353C31.1938 26.9881 31.2373 27.0461 31.2746 27.1082V27.3002V27.4731V27.6075V27.7611H31.3672V27.6459V27.281V26.9161C31.4098 26.9733 31.4412 27.0385 31.4598 27.1082V27.4538V27.7611L31.5709 28.0876L31.6634 28.2796V28.3949V28.2604L31.5338 26.9353L31.6264 27.089V27.3002V27.7227V28.0108L31.756 28.3373V28.5101V28.2988V26.8585L31.8671 26.9737V27.3002V28.2028V28.4332L32.1263 26.0712H32.293H32.1819L31.9227 25.6487L31.7375 25.2454L31.4412 24.6501L30.9043 23.9779L30.4784 23.6131L30.3302 23.5171V23.4211L30.4228 23.2866H30.1635H29.9784L29.6266 23.037L29.2562 22.8449H29.034L28.497 22.6913H27.96H27.7193H27.5156C27.4556 22.7123 27.4037 22.7527 27.3675 22.8065C27.3462 22.8752 27.3462 22.9491 27.3675 23.0177C27.3675 23.133 27.3675 23.1906 27.5897 23.2482C27.7635 23.3376 27.9306 23.4403 28.0896 23.5555L28.2563 23.7283L28.3674 24.6501L28.1452 25.1686H27.9971L28.8674 25.1878Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.4414 26.648C29.4414 26.648 29.534 26.8209 29.6637 26.648C29.7933 26.4752 29.6637 26.1488 29.6637 26.1296C29.6637 26.1104 29.6637 26.1296 29.6637 26.1296L29.7563 26.3216C29.782 26.4092 29.782 26.5028 29.7563 26.5904C29.7307 26.712 29.6652 26.8206 29.5711 26.8977H29.4043V26.6864L29.4414 26.648Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.7928 28.8365L32.6632 28.4525C32.6632 28.4525 32.6632 28.2028 32.6632 28.1644C32.6632 28.126 32.6632 27.4923 32.6632 27.3771C32.6767 27.288 32.6767 27.1973 32.6632 27.1082L32.5335 26.9354C32.5554 26.8083 32.5554 26.6783 32.5335 26.5513C32.4461 26.3127 32.3409 26.0815 32.2188 25.86L32.3669 25.9752L32.7002 26.1096H32.8854L32.9965 26.34C33.0195 26.5442 33.0195 26.7504 32.9965 26.9546C33.0321 27.1513 33.0321 27.3532 32.9965 27.5499C32.9385 27.867 32.9014 28.1878 32.8854 28.5101C32.8968 28.58 32.8968 28.6514 32.8854 28.7213L32.7928 28.8365Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.7934 27.7421C32.8393 27.6798 32.8709 27.6076 32.886 27.5308C32.9507 27.1497 32.9507 26.7597 32.886 26.3786C32.7899 26.2898 32.6761 26.2243 32.5527 26.1866C32.5724 26.2923 32.6035 26.3953 32.6453 26.4938V26.6091V26.7627C32.6585 26.9288 32.6585 27.0958 32.6453 27.262C32.6453 27.4924 32.6453 27.7421 32.6453 27.7421H32.7934Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.313 28.2603C32.3274 28.0109 32.3274 27.7608 32.313 27.5114C32.3415 27.3721 32.3415 27.2282 32.313 27.0889C32.2253 26.9185 32.157 26.738 32.1094 26.5512C32.0658 26.3744 32.0101 26.2012 31.9427 26.0327C31.9427 26.0327 31.7946 25.8598 31.7761 25.8982C31.7701 25.9299 31.7701 25.9626 31.7761 25.9943H31.6465V25.8598V25.7062L31.8131 25.8406L32.1464 26.0711L32.313 26.8008L32.4612 27.2425V28.6636V28.3756L32.313 28.2603Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.498 26.3401L32.6462 26.4554C32.6462 26.4554 32.7944 26.5514 32.7758 26.5514H32.6092L32.498 26.3401Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.8491 28.1455C31.8773 28.0322 31.8773 27.9132 31.8491 27.7999C31.8341 27.5521 31.7905 27.3071 31.7194 27.0701C31.614 26.9457 31.5209 26.8106 31.4417 26.6668C31.3953 26.5254 31.3331 26.39 31.2565 26.2635L31.0898 26.0523V25.7834L31.3676 25.9179H31.4972L31.6454 26.6476L31.775 26.8588V27.1469V27.819V28.376L31.6083 28.0303L31.8491 28.1455Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.515 27.8378C31.5263 27.6973 31.5263 27.5559 31.515 27.4153C31.4896 27.2787 31.4393 27.1483 31.3669 27.0312C31.2459 26.8991 31.1345 26.758 31.0335 26.6088L30.7188 26.1863V25.9174L30.8854 26.0327L31.0706 26.1287V26.4552L31.1632 26.6664L31.3113 26.8776V26.9736V27.3001V27.4922V27.761V27.8954L31.515 27.8378Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.2754 27.838C31.2953 27.7822 31.2953 27.7209 31.2754 27.6651C31.2833 27.5629 31.2833 27.4601 31.2754 27.3579C31.2754 27.2619 31.2754 27.185 31.1829 27.1658L30.8125 26.8202C30.7226 26.7206 30.6234 26.6305 30.5163 26.5513H30.3867V26.2249C30.3867 26.2249 30.4978 26.3785 30.5533 26.3977H30.7385L30.9607 26.8202V26.9162L31.1829 27.1082V27.281V27.4923V27.7804V27.9532L31.2754 27.838Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.8306 27.7426C30.7555 27.6677 30.6985 27.5756 30.6639 27.4737C30.6639 27.4737 30.6639 27.4737 30.6639 27.2625C30.5935 27.1135 30.4923 26.9824 30.3676 26.8784C30.238 26.8784 30.0898 26.6287 30.0898 26.5519C30.0898 26.4751 30.0898 26.5519 30.0898 26.5519L30.4417 26.9552L30.5528 27.1664L30.6454 27.4161V27.5505V27.7041L30.8306 27.7426Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.1262 25.7838C32.1262 25.7838 32.3669 26.1103 32.441 25.7838C32.4356 25.6506 32.4042 25.5199 32.3484 25.3998C32.2563 25.219 32.151 25.0456 32.0336 24.8812L31.5707 24.2668L31.293 24.1323L31.3855 24.3052C31.5772 24.5104 31.7393 24.7432 31.867 24.9965C32.0231 25.2115 32.1017 25.4765 32.0892 25.7454L32.1262 25.7838Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.682 23.8628C30.9834 24.1332 31.2564 24.4357 31.4967 24.7654C31.8115 25.2455 31.9412 25.5528 31.8671 25.6296C31.793 25.7064 31.5893 25.6296 31.5153 25.4568C31.3995 25.1939 31.2501 24.9484 31.0709 24.727C30.9511 24.5623 30.7998 24.425 30.6265 24.3237L30.4043 23.9588L30.682 23.8628Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.4227 24.9003L30.9042 25.3612L31.182 25.7069L31.2931 25.8412C31.2931 25.8412 31.2931 25.7068 31.2931 25.6684C31.2931 25.63 31.2931 25.6684 31.2931 25.6684L30.3672 24.6506V24.9195L30.4227 24.9003Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.3686 24.9381C30.4327 25.0645 30.5138 25.1809 30.6093 25.2838L30.9426 25.6102V25.8599C30.9426 25.8599 30.5167 25.5142 30.5167 25.591C30.5167 25.6678 30.6093 25.8599 30.6093 25.8599H30.4797L30.2945 25.591L30.2019 25.3606L30.0723 25.0341L30.3686 24.9381Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.0898 25.9752C29.0898 25.9752 29.312 26.1865 29.4231 25.9752C29.4542 25.9095 29.4704 25.8372 29.4704 25.764C29.4704 25.6908 29.4542 25.6185 29.4231 25.5527C29.4231 25.5527 29.7379 26.0328 29.812 25.5527C29.812 25.4567 29.6268 25.1495 29.6268 25.1495L29.7935 25.4183C29.8355 25.3887 29.8695 25.3485 29.8921 25.3014C29.9148 25.2544 29.9255 25.202 29.9231 25.1495C29.903 24.9994 29.8525 24.8554 29.775 24.727L29.9231 24.8806C29.9231 24.8806 30.2193 24.8806 30.2193 24.7078C30.2193 24.5349 30.1268 24.4197 30.1268 24.4197C30.1268 24.4197 30.3305 24.4197 30.3119 24.3045C30.2934 24.1893 30.0527 24.1124 30.0527 24.0356C30.0504 24.0119 30.0543 23.9879 30.0639 23.9662C30.0735 23.9445 30.0885 23.9259 30.1073 23.9122C30.1262 23.8986 30.1482 23.8903 30.1712 23.8884C30.1941 23.8865 30.2171 23.8909 30.2379 23.9012C30.3675 23.9012 30.5342 24.0357 30.6082 23.9012C30.6823 23.7668 30.6082 23.7284 30.6082 23.7284H30.4416L30.1638 23.5747H29.9601H29.7194L29.812 23.7476V24.2277V24.4581V24.9382L29.7009 25.3223L29.6083 25.5335L29.4787 25.6872L29.2935 25.9176L29.1454 26.0904L29.0898 25.9752Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.6456 26.8772C30.6091 26.7819 30.5521 26.6965 30.4789 26.6276C30.3758 26.5991 30.2672 26.5991 30.1641 26.6276L30.4975 26.9732L30.6456 26.8772Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.1074 26.9543C31.0408 26.8295 30.96 26.7135 30.8667 26.6087C30.7556 26.4743 30.663 26.3014 30.6445 26.3014V26.5895L30.8667 26.8007C30.8667 26.8007 31.0889 26.9735 31.1445 26.9543H31.1074Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.4787 26.9358C31.4362 26.7624 31.374 26.5948 31.2935 26.4365C31.2379 26.3103 31.1556 26.1987 31.0527 26.1101V26.3405L31.1638 26.5902L31.3305 26.8398H31.4601L31.4787 26.9358Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.773 26.8006C31.8111 26.5782 31.8111 26.3508 31.773 26.1285C31.722 26.0444 31.6428 25.9828 31.5508 25.9556V26.3397L31.6619 26.6086L31.7545 26.7238L31.773 26.8006Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.0898 25.937C32.1524 25.9964 32.2029 26.0682 32.238 26.1482C32.3327 26.3776 32.4071 26.6154 32.4602 26.8588L32.1454 26.3595V25.8986L32.0898 25.937Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.9599 26.532C29.9599 26.532 30.1265 26.532 30.1265 26.4359C30.1265 26.3399 29.9413 26.2631 29.9413 26.1671C29.9413 26.0711 30.108 26.1671 30.1265 26.1671C30.1451 26.1671 29.9599 25.8598 30.0154 25.8022C30.071 25.7446 30.2191 26.0903 30.2191 26.0903C30.2383 26.1788 30.2383 26.2706 30.2191 26.3592C30.108 26.6664 29.9043 26.5512 29.9043 26.5512L29.9599 26.532Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.3481 26.1682H30.5888L30.3666 25.9377V25.8033H30.5518C30.5518 25.8033 30.3852 25.5344 30.3852 25.496C30.3852 25.4576 30.3852 25.496 30.3852 25.496C30.4658 25.5796 30.54 25.6695 30.6073 25.7649C30.6524 25.8239 30.6855 25.8917 30.7046 25.9643C30.7237 26.037 30.7284 26.1128 30.7184 26.1874C30.7184 26.3795 30.3111 26.1874 30.3481 26.1874V26.1682Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.4402 25.7834C31.4402 25.7834 31.4402 25.6105 31.4402 25.5913H31.5329C31.4715 25.5819 31.4091 25.5819 31.3477 25.5913L31.4588 25.7834V25.9178L31.4402 25.7834Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.6992 25.9173C30.6992 25.9173 31.0695 26.0133 31.088 25.9173C31.1066 25.8213 30.7918 25.5908 30.7918 25.5908C30.7918 25.5908 30.9399 25.5908 30.9769 25.5908C31.014 25.5908 30.9769 25.6869 30.9769 25.7061C30.9769 25.7253 31.1066 25.9173 31.1436 25.8789C31.1806 25.8405 31.1436 25.6292 31.1436 25.61L31.3288 25.7637C31.3288 25.7637 31.5695 25.9557 31.588 25.8789C31.5917 25.8342 31.5917 25.7892 31.588 25.7444C31.588 25.7444 31.588 25.9557 31.588 25.9941C31.5558 26.0084 31.5211 26.0157 31.4861 26.0157C31.4511 26.0157 31.4165 26.0084 31.3843 25.9941H31.2917C31.2917 25.9941 31.2917 26.1861 31.2917 26.2245H30.9955L30.7918 26.0901L30.6992 25.9173Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.5703 25.6485C31.5703 25.6485 31.9592 25.8981 31.9963 25.8405C32.0333 25.7829 31.9037 25.226 31.9963 25.1492C32.0888 25.0724 32.3296 25.8213 32.1629 25.9174C31.9962 26.0134 31.9963 25.9174 31.9963 25.9174L31.8111 25.8214L31.6444 25.6293L31.5703 25.6485Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.6816 26.6845H32.7734V26.5894L32.6816 26.6845Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.1822 25.1104C32.1963 25.1188 32.2123 25.1233 32.2285 25.1233C32.2448 25.1233 32.2607 25.1188 32.2748 25.1104C32.2748 25.1104 32.2748 25.1104 32.2748 25.1104H32.1637H31.9785L32.1082 25.2833L32.1822 25.1104Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.5332 26.3401H32.6814H32.774H32.5703V26.2249L32.5332 26.3401Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.868 24.42H31.9782C31.9782 24.42 31.9782 24.5342 31.9782 24.5533L31.8496 24.3629L31.868 24.42Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.2925 23.9018H31.4221H31.5332C31.5616 24.0087 31.5616 24.1215 31.5332 24.2283C31.5332 24.2283 31.237 24.0747 31.237 24.0555L31.1074 23.8442L31.2925 23.9018Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.0338 23.7854C31.0338 23.7854 31.2375 23.7854 31.219 23.6702C31.2149 23.6318 31.2029 23.5948 31.1837 23.5616C31.1645 23.5285 31.1387 23.5001 31.1079 23.4782L30.8672 23.651L31.0338 23.7854Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.5156 23.5361C30.5513 23.551 30.5911 23.551 30.6267 23.5361C30.6267 23.5361 30.8304 23.3056 30.9416 23.2672C31.0527 23.2288 31.0897 23.2672 31.1082 23.2672C31.1268 23.3298 31.1268 23.3967 31.1082 23.4592L30.7564 23.6321H30.6453H30.5342L30.5156 23.5361Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.4606 23.1714C30.4437 23.1304 30.4183 23.0937 30.3864 23.0639C30.3544 23.034 30.3165 23.0118 30.2754 22.9986C30.2754 22.9986 30.3865 23.1331 30.4236 23.3059C30.4449 23.4006 30.4449 23.4992 30.4236 23.5939V23.1714H30.4606Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.9786 22.9986C29.8635 22.861 29.7171 22.7554 29.5527 22.6913C29.5527 22.6913 29.8675 22.9025 29.9415 23.037C30.0156 23.1714 29.9415 23.3443 30.0526 23.3635C30.1637 23.3827 30.0526 23.3635 30.0526 23.3635V23.2098L29.9786 22.9986Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.5332 22.8068C29.2935 22.635 29.0097 22.5414 28.7183 22.5379C28.4406 22.5379 28.311 22.5379 28.348 22.73C28.385 22.922 28.5147 22.9604 28.7369 22.9604C28.8782 22.9404 29.0215 22.9404 29.1628 22.9604L29.4592 23.1332L29.2554 22.922L29.0517 22.7684C29.0517 22.7684 29.0517 22.7684 29.1813 22.7684C29.2698 22.777 29.3554 22.8055 29.4322 22.8519C29.509 22.8984 29.575 22.9616 29.6258 23.0372C29.64 23.1198 29.64 23.2043 29.6258 23.2869C29.6311 23.2487 29.6311 23.2099 29.6258 23.1717C29.6019 23.106 29.5639 23.0469 29.5147 22.9988H29.4221L29.5332 22.8068Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.7559 25.2071C28.8714 25.1614 28.9723 25.0834 29.0475 24.9817C29.1227 24.8799 29.1692 24.7585 29.1817 24.6309C29.1858 24.2679 29.1165 23.9081 28.978 23.5747C28.978 23.5747 28.978 23.5747 29.1261 23.5747C29.2508 23.8587 29.3201 24.1655 29.3298 24.4773C29.3443 24.5945 29.3278 24.7135 29.2821 24.8217C29.2365 24.93 29.1634 25.0233 29.0706 25.0919C28.9897 25.1876 28.8777 25.2491 28.7559 25.2647V25.2071Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.1836 26.1669C29.2038 26.1771 29.226 26.1824 29.2484 26.1824C29.2709 26.1824 29.293 26.1771 29.3132 26.1669C29.4243 26.1669 29.6095 26.0133 29.6095 25.8405C29.6095 25.6676 29.4614 25.61 29.4614 25.5716H29.5909V25.7637C29.5909 25.7637 29.5909 25.7637 29.702 25.7637C29.8131 25.7637 29.9057 25.6292 29.8686 25.514C29.8316 25.3988 29.7205 25.2644 29.702 25.2068C29.6921 25.1756 29.6921 25.1419 29.702 25.1107H29.8316V25.2836C29.8316 25.2836 29.8317 25.2836 29.9243 25.2836C30.0168 25.2836 30.1279 25.1299 30.0909 25.0723C30.056 24.9908 30.0125 24.9135 29.9613 24.8419C29.9613 24.8419 29.9613 24.8419 30.0909 24.8419C30.2205 24.8419 30.276 24.7459 30.276 24.6883C30.2893 24.6315 30.2893 24.5722 30.276 24.5154V24.6114V24.7267L30.1649 24.8611H30.0538V24.9763V25.1491L29.9427 25.2451H29.8131V25.3988V25.5716L29.6465 25.6869V25.7828L29.5354 25.9365L29.3502 26.0709H29.2207V25.9557L29.1836 26.1669Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.2186 24.4203C30.2186 24.4203 30.5334 24.5163 30.5149 24.3051C30.4964 24.0938 30.2186 23.921 30.1816 23.8826C30.1713 23.8449 30.1713 23.805 30.1816 23.7674L30.3297 23.921C30.3297 23.921 30.5334 23.921 30.589 23.921C30.6445 23.921 30.589 23.729 30.589 23.729H30.7371V23.9018L30.626 24.3627C30.626 24.3627 30.626 24.5547 30.5149 24.5739C30.4163 24.565 30.3211 24.5321 30.2371 24.4779L30.2186 24.4203Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.5151 26.878C30.5335 26.822 30.5335 26.7612 30.5151 26.7052C30.4446 26.6544 30.3703 26.6094 30.293 26.5707L30.5151 26.8588V26.878Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.96 26.897C30.96 26.897 30.8118 26.6858 30.7748 26.609C30.7377 26.5321 30.6636 26.3977 30.5896 26.3977C30.5155 26.3977 30.5896 26.6473 30.5896 26.6473L30.8303 26.8778L30.96 26.897Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.4028 26.8779C31.3397 26.7667 31.284 26.6513 31.2361 26.5322C31.1928 26.4074 31.1302 26.2907 31.0509 26.1866C30.9583 26.1866 31.0509 26.2826 31.0509 26.2826L31.1435 26.5706L31.2917 26.8011H31.4028V26.8779Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.7195 26.6852C31.7195 26.6852 31.7195 26.4548 31.7195 26.3012C31.7131 26.2484 31.6967 26.1975 31.6713 26.1514C31.6459 26.1052 31.6119 26.0647 31.5713 26.0323C31.5622 26.1216 31.5622 26.2118 31.5713 26.3012L31.7565 26.6852H31.7195Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.3683 26.8589C32.3683 26.8589 32.2572 26.5901 32.2202 26.4557C32.1805 26.333 32.1244 26.2166 32.0535 26.1101C32.0447 26.193 32.0447 26.2768 32.0535 26.3597L32.1831 26.763H32.3312L32.3683 26.8589Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.941 26.148C32.8536 26.0571 32.7452 25.991 32.6262 25.956C32.4846 25.8971 32.3341 25.8646 32.1816 25.86L32.2743 25.956L32.4965 26.0712H32.7928L32.941 26.148Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.6077 26.3401C30.6088 26.4498 30.641 26.5567 30.7003 26.6474C30.8141 26.7851 30.938 26.9134 31.0707 27.0315C31.1415 27.192 31.1973 27.3592 31.2373 27.5308C31.266 27.6738 31.3031 27.8149 31.3484 27.9533C31.3484 27.9533 31.3484 28.1069 31.3484 28.0877C31.3484 28.0685 31.2558 28.0877 31.2373 27.9533C31.2188 27.8189 31.2373 27.9533 31.2373 27.7805C31.2042 27.544 31.1289 27.3161 31.0151 27.1083C30.824 26.9492 30.6501 26.7689 30.4966 26.5706C30.3855 26.3785 30.4966 26.3401 30.4966 26.3401H30.6077Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.1259 27.5891C31.074 27.4729 31.0367 27.3503 31.0148 27.2243C31.0148 27.2243 30.7186 26.8978 30.663 26.8594C30.6075 26.821 30.5149 26.8594 30.4779 26.8594C30.3737 26.7561 30.2748 26.6471 30.1816 26.533L30.552 26.9362C30.663 27.0322 30.7001 27.2435 30.7741 27.4163C30.7899 27.4858 30.7899 27.5581 30.7741 27.6276C30.7729 27.6575 30.7814 27.6869 30.7981 27.7112C30.8149 27.7356 30.839 27.7534 30.8667 27.7619C30.7869 27.6799 30.7239 27.5819 30.6815 27.4739C30.6384 27.2917 30.5698 27.117 30.4779 26.9554C30.6199 27.0316 30.7409 27.1439 30.8297 27.2819C30.8454 27.4094 30.883 27.533 30.9407 27.6467C30.982 27.7568 31.0381 27.8603 31.1074 27.954C31.0446 27.8559 30.989 27.7532 30.9407 27.6467L31.1259 27.5891Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.6992 25.9174L30.9585 26.0519H31.051C31.0717 26.253 31.1282 26.4483 31.2177 26.628C31.2888 26.7376 31.3764 26.8349 31.4769 26.916C31.478 27.1449 31.5155 27.372 31.588 27.5882C31.6738 27.8006 31.7118 28.0304 31.6991 28.2603C31.6991 28.2603 31.588 28.0875 31.514 27.8955L31.3658 27.377C31.326 27.2407 31.2563 27.1158 31.1621 27.0121C31.2607 27.1122 31.3312 27.2384 31.3658 27.377C31.3658 27.5882 31.4584 27.8186 31.4954 27.8186C31.5325 27.8186 31.4954 27.8186 31.4954 27.8186C31.4954 27.8186 31.4954 27.665 31.4954 27.4537C31.4809 27.3221 31.4498 27.193 31.4029 27.0697C31.3237 26.9828 31.2553 26.8861 31.1991 26.7816C31.1181 26.644 31.0558 26.4953 31.014 26.3399C31.014 26.3399 31.014 26.3399 31.014 26.2247H30.8844C30.8164 26.1737 30.7596 26.1082 30.7178 26.0327L30.6992 25.9174Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.2012 25.8411L31.3864 25.9563C31.4414 25.9677 31.498 25.9677 31.553 25.9563C31.5438 26.1549 31.582 26.3528 31.6641 26.5324C31.7363 26.6642 31.8234 26.7867 31.9234 26.8973C31.9234 26.8973 31.9234 26.8973 31.9234 27.4542C31.9234 28.0111 31.9234 27.9535 31.9234 28.1455C31.9456 28.4331 31.9456 28.7221 31.9234 29.0097C31.9234 29.0097 31.9234 28.568 31.9234 28.4144C31.8074 28.2197 31.7258 28.0051 31.6826 27.7807C31.6587 27.5482 31.6216 27.3173 31.5715 27.0894C31.5715 26.9165 31.4234 26.9165 31.4234 26.9165C31.4638 26.925 31.5017 26.9433 31.5339 26.97C31.5661 26.9968 31.5917 27.0311 31.6086 27.0701C31.6523 27.2985 31.6832 27.5293 31.7012 27.7614C31.7553 27.9763 31.8362 28.1829 31.9419 28.376C31.9574 28.1074 31.9574 27.8381 31.9419 27.5695C31.9419 27.2814 31.9419 27.0317 31.9419 26.9165C31.9419 26.8013 31.7752 26.7244 31.7012 26.5708C31.6495 26.4004 31.6063 26.2273 31.5715 26.0523C31.5715 26.0523 31.5716 26.0523 31.479 26.0523C31.3864 26.0523 31.2938 25.8795 31.2938 25.8795L31.2012 25.8411Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.5703 25.6491C31.6405 25.731 31.7215 25.8021 31.8111 25.8603C31.8911 25.8689 31.9718 25.8689 32.0518 25.8603C32.0655 26.0707 32.1091 26.2778 32.1814 26.4748C32.2362 26.5964 32.3115 26.7069 32.4036 26.8013C32.4036 26.8013 32.4036 27.6846 32.4036 27.9727C32.4036 28.2608 32.4036 29.2209 32.4036 29.2209C32.4036 29.2209 32.4036 28.5104 32.4036 28.3376C32.3738 28.2511 32.3366 28.1676 32.2925 28.0879C32.2925 27.9535 32.2925 27.435 32.1444 27.1277C31.9962 26.8205 32.0147 26.8589 32.0147 26.8589C32.0995 26.9164 32.1593 27.006 32.1814 27.1085C32.1814 27.3006 32.1814 27.9343 32.311 28.0495C32.3808 28.1499 32.4369 28.2597 32.4777 28.376C32.502 27.941 32.502 27.505 32.4777 27.0701C32.2841 26.8479 32.1164 26.603 31.9777 26.3404C31.9777 26.0907 31.9777 26.0523 31.9777 26.0331C31.9005 26.016 31.8297 25.976 31.774 25.9179C31.6943 25.8459 31.6255 25.7617 31.5703 25.6682V25.6491Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.1445 25.8034C32.1445 25.8034 32.1445 25.9378 32.4408 26.0338C32.5975 26.0837 32.759 26.1159 32.9223 26.1299C33.0481 26.399 33.1115 26.6949 33.1074 26.994C33.0991 27.2817 33.0491 27.5666 32.9593 27.839C32.9593 28.2422 32.9593 29.068 32.8297 29.2024C32.8234 29.247 32.8234 29.2923 32.8297 29.3369C32.8297 29.4329 32.8297 29.5673 32.8297 29.5865C32.8297 29.6057 32.8297 29.4713 32.8297 29.3945C32.9411 29.0585 32.9411 28.6934 32.8297 28.3574C32.8297 28.0886 32.8297 27.2245 32.8297 27.1477C32.7827 27.0526 32.7269 26.9625 32.663 26.8788C32.7426 26.9298 32.8068 27.0031 32.8482 27.09C32.8482 27.2053 32.8482 28.1654 32.8482 28.3574C32.8482 28.5495 32.8482 28.3575 32.8482 28.2038C32.8482 28.0502 32.8482 27.6277 32.8482 27.3781C32.8384 27.0745 32.7757 26.7751 32.663 26.4947L32.7557 26.6676C32.8344 26.882 32.8722 27.1102 32.8668 27.3396C32.8668 27.7621 32.8668 28.7031 32.8668 28.7223C32.8668 28.7415 32.8667 28.2038 32.9963 27.7814C33.126 27.3589 33.163 27.3013 33.126 26.9556C33.1299 26.6811 33.0661 26.4101 32.9408 26.1682C32.7815 26.1445 32.6259 26.0993 32.4778 26.0338C32.3112 25.8994 32.2001 25.7842 32.2186 25.765L32.1445 25.8034Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.2418 24.5661C30.215 24.5575 30.1781 24.5546 30.1271 24.5546C30.1647 24.5646 30.2033 24.5685 30.2418 24.5661Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M32.9223 26.1283C32.9223 26.1283 33.0519 26.1283 33.0704 26.1283C33.0889 26.1283 33.0704 26.1283 32.9037 25.9939C32.7371 25.8595 32.4963 24.9761 32.1815 24.5344C31.8933 24.1264 31.5431 23.7697 31.1445 23.4782C31.5608 23.7457 31.9201 24.0985 32.2001 24.5152C32.663 25.2065 32.7741 25.7634 32.9037 25.8978C33.0334 26.0323 33.163 26.0707 33.1445 26.1091H32.9778L32.9223 26.1283Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.0527 25.9366C29.0527 25.9366 29.2379 25.7637 29.2194 25.7253C29.1743 25.7049 29.1358 25.6716 29.1083 25.6293C29.0897 25.5799 29.0897 25.5251 29.1083 25.4757C29.1083 25.4757 29.1083 25.5909 29.2008 25.6101C29.2234 25.6236 29.2489 25.6307 29.2749 25.6307C29.3009 25.6307 29.3264 25.6236 29.349 25.6101C29.349 25.6101 29.6082 25.3989 29.5897 25.3221C29.5663 25.3326 29.5411 25.3381 29.5157 25.3381C29.4902 25.3381 29.4649 25.3326 29.4416 25.3221C29.4289 25.2652 29.4289 25.2061 29.4416 25.1492C29.4641 25.205 29.5029 25.2521 29.5527 25.2837C29.578 25.2988 29.6067 25.3068 29.636 25.3068C29.6652 25.3068 29.694 25.2988 29.7193 25.2837C29.7193 25.2837 29.8859 25.034 29.8674 24.9572C29.8441 24.9678 29.8189 24.9732 29.7934 24.9732C29.7679 24.9732 29.7427 24.9678 29.7193 24.9572L29.6082 24.7844C29.6422 24.8404 29.695 24.8814 29.7563 24.8996C29.7563 24.8996 29.923 24.8996 29.923 24.8036C29.923 24.7076 29.923 24.4963 29.923 24.4195C29.923 24.3427 29.7934 24.4195 29.7193 24.4195C29.6674 24.3819 29.6285 24.3281 29.6082 24.2659C29.6511 24.3211 29.7092 24.3613 29.7749 24.3811C29.7966 24.3968 29.8225 24.4052 29.8489 24.4052C29.8754 24.4052 29.9013 24.3968 29.923 24.3811C29.9498 24.3002 29.9498 24.2123 29.923 24.1314C29.923 24.1314 29.923 24.1314 29.8304 23.9394C29.8034 23.9594 29.7725 23.9729 29.7398 23.9789C29.7072 23.9849 29.6736 23.9832 29.6416 23.974C29.6096 23.9648 29.5801 23.9483 29.5551 23.9257C29.5301 23.9031 29.5103 23.875 29.4971 23.8434C29.5265 23.8561 29.5579 23.8626 29.5897 23.8626C29.6215 23.8626 29.653 23.8561 29.6823 23.8434C29.7167 23.8434 29.7496 23.8292 29.774 23.804C29.7983 23.7788 29.8119 23.7446 29.8119 23.709C29.8294 23.6462 29.8294 23.5796 29.8119 23.5169V23.3825C29.8119 23.3825 29.8119 23.3825 29.6452 23.3825C29.6123 23.3806 29.5807 23.3687 29.5543 23.3482C29.5279 23.3277 29.5081 23.2995 29.4971 23.2673C29.5521 23.2792 29.6088 23.2792 29.6638 23.2673H29.7749C29.7749 23.2673 29.7748 23.1328 29.5897 22.9792L29.3119 22.7488C29.4292 22.8156 29.5407 22.8927 29.6452 22.9792C29.72 23.0437 29.7828 23.1218 29.8304 23.2096C29.8304 23.2096 29.9785 23.2096 29.9971 23.2096C30.0133 23.177 30.0218 23.1408 30.0218 23.104C30.0218 23.0673 30.0133 23.0311 29.9971 22.9984C29.9491 22.9219 29.8932 22.851 29.8304 22.7872C29.9038 22.853 29.9664 22.9308 30.0156 23.0176C30.0156 23.1136 30.0156 23.2097 30.0156 23.2289C30.0156 23.2481 30.2748 23.3633 30.3303 23.3249C30.3859 23.2865 30.3303 23.2096 30.3303 23.1328L30.2378 22.9792C30.2813 23.025 30.3187 23.0766 30.3489 23.1328C30.3489 23.1328 30.3489 23.2673 30.3489 23.3057C30.3489 23.3441 30.3489 23.3057 30.3489 23.3057L30.5341 23.4209C30.6266 23.4209 30.7192 23.4209 30.7377 23.4209C30.7504 23.3641 30.7504 23.305 30.7377 23.2481V23.0176C30.7492 23.094 30.7492 23.1717 30.7377 23.2481C30.7377 23.2481 30.7377 23.4017 30.7377 23.4401C30.7377 23.4785 30.7377 23.4401 30.7377 23.4401C30.7084 23.4528 30.6769 23.4593 30.6452 23.4593C30.6134 23.4593 30.5819 23.4528 30.5526 23.4401C30.4415 23.4401 29.9415 23.1521 29.923 23.1713C29.9045 23.1905 30.1452 23.3633 30.2748 23.4785C30.3408 23.5466 30.397 23.6242 30.4415 23.709L30.2563 23.5745C30.1394 23.503 30.0151 23.4451 29.886 23.4017H29.9971C29.9971 23.4017 29.9971 23.4977 29.9971 23.5361C29.9971 23.5745 30.3674 23.8434 30.3674 23.8818C30.3362 23.9204 30.2986 23.9529 30.2563 23.9778L30.0341 23.8434C30.0341 23.8434 30.1452 23.9586 30.1452 23.997C30.1452 24.0354 30.1452 23.997 30.1452 24.1122C30.1452 24.2274 30.3674 24.3235 30.3489 24.3811C30.3304 24.4387 30.2378 24.4963 30.2563 24.5155L30.3859 24.6884L30.2378 24.5731L30.1267 24.4579C30.1267 24.4579 30.0341 24.6307 30.1267 24.6691C30.2193 24.7075 30.2193 24.7652 30.2378 24.8612C30.2529 24.9307 30.2529 25.0029 30.2378 25.0724C30.2378 25.0724 30.1082 24.8996 30.0711 24.8996L29.9786 25.1108C29.9786 25.1108 30.1082 25.1108 30.1267 25.2644C30.1452 25.327 30.1452 25.3939 30.1267 25.4565C30.0764 25.3878 30.0206 25.3236 29.96 25.2644C29.8889 25.3253 29.8265 25.3964 29.7749 25.4757C29.7749 25.4757 29.886 25.5909 29.7749 25.6101C29.6638 25.6293 29.7749 25.6101 29.6268 25.6101H29.4971L29.0527 25.9366Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.1455 23.4402C31.1455 23.4402 31.2751 23.2865 31.2381 23.2673C31.2011 23.2481 31.0714 23.2673 30.9974 23.2673C30.9233 23.2673 30.8492 23.2673 30.627 23.0753C30.0654 22.7212 29.4307 22.5106 28.7752 22.4608C28.4234 22.4608 28.2568 22.5759 28.2383 22.6528C28.3012 22.5957 28.3748 22.5526 28.4544 22.5262C28.534 22.4997 28.618 22.4905 28.7012 22.4991C29.3881 22.5194 30.0581 22.7245 30.6455 23.0945C30.6455 23.0945 30.8677 23.325 31.0529 23.2865C31.2381 23.2481 31.2751 23.2865 31.2751 23.2865V23.4018C31.2691 23.4335 31.2691 23.4661 31.2751 23.4978L31.1455 23.4402Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.1262 23.5939C29.0625 23.4956 28.988 23.4053 28.904 23.325C28.702 23.1836 28.4844 23.0675 28.2559 22.9794C28.4807 23.0789 28.6924 23.208 28.8855 23.3635L29.1262 23.5939Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.1263 24.4201L28.9967 24.2857H28.793H29.0152C29.0636 24.3269 29.1017 24.3796 29.1263 24.4393V24.4201Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.0706 24.0169C29.0148 23.9739 28.9521 23.9414 28.8854 23.9209H28.7188C28.7538 23.905 28.7916 23.8969 28.8298 23.8969C28.8681 23.8969 28.9059 23.905 28.9409 23.9209C28.9719 23.9297 29.0002 23.9467 29.0229 23.9703C29.0457 23.9939 29.0621 24.0232 29.0706 24.0553V24.0169Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.9798 23.6514C28.9458 23.5954 28.893 23.5544 28.8316 23.5362C28.7581 23.5225 28.6829 23.5225 28.6094 23.5362C28.6937 23.5082 28.7844 23.5082 28.8687 23.5362C28.8858 23.5385 28.9023 23.5444 28.9171 23.5534C28.932 23.5625 28.9451 23.5745 28.9554 23.5888C28.9658 23.6031 28.9732 23.6194 28.9774 23.6368C28.9816 23.6541 28.9824 23.6722 28.9798 23.6898V23.6514Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.8297 23.4021C28.7442 23.3512 28.6498 23.3186 28.552 23.3061H28.2188C28.3602 23.2891 28.5032 23.2891 28.6446 23.3061C28.7157 23.3438 28.7786 23.3961 28.8297 23.4597V23.4021Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.3855 23.1522H28.1077H27.7559C27.9218 23.1284 28.0899 23.1284 28.2558 23.1522C28.367 23.1522 28.3855 23.1522 28.3855 23.1522Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.0719 28.2605C27.0897 28.3009 27.1184 28.3351 27.1546 28.3589C27.1907 28.3828 27.2327 28.3953 27.2755 28.395C27.4237 28.395 27.5348 28.6254 27.5348 28.6254L27.3682 28.7791H26.9978L26.8867 28.5678L27.0719 28.2413V28.2605Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.9968 28.8749L26.8672 28.6636L27.0524 28.3372C27.0732 28.3751 27.1027 28.4071 27.1382 28.4305C27.1737 28.4539 27.2141 28.468 27.2561 28.4716C27.4042 28.4716 27.5153 28.6828 27.5153 28.6828L27.3672 28.8364L26.9968 28.8749ZM26.8857 28.6636L26.9968 28.8557H27.3672L27.5153 28.7212C27.5153 28.7212 27.4042 28.51 27.2745 28.51C27.2322 28.5082 27.1911 28.4948 27.1553 28.4712C27.1196 28.4476 27.0904 28.4146 27.0709 28.3756L26.8857 28.6636Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.0709 28.26C27.039 28.1364 26.9671 28.0279 26.8672 27.9528C26.8672 27.9528 26.8672 27.9528 26.8672 28.0872C26.8672 28.2216 26.8672 28.2024 26.8672 28.2024C26.8672 28.2024 26.8672 28.3176 26.8672 28.3752L27.0709 28.26Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.9052 28.2601V28.2217V28.1065V28.0681V27.9721C26.918 27.984 26.9304 27.9965 26.9423 28.0093C27.0083 28.0808 27.0588 28.1663 27.0903 28.2601H26.9052Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.9961 28.5864C27.0378 28.6004 27.0829 28.6004 27.1246 28.5864C27.1548 28.5934 27.1862 28.5934 27.2164 28.5864",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.0886 28.6252H27.1805C27.144 28.631 27.1068 28.631 27.0703 28.6252H27.0886Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.9423 28.491C26.9423 28.491 27.146 28.3374 27.1275 28.2605C27.109 28.1837 27.1274 28.1645 27.0348 28.2605L26.8867 28.395V28.5678L26.9423 28.491Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.941 28.5102C26.9331 28.4528 26.9331 28.3946 26.941 28.3373C26.941 28.3373 27.0892 28.2029 27.1077 28.1837C27.1077 28.1837 26.9225 28.4333 26.904 28.4525L26.941 28.5102ZM27.0707 28.1837L26.904 28.3181C26.894 28.3688 26.894 28.421 26.904 28.4717C26.904 28.4717 27.0891 28.3181 27.0891 28.2605C27.0891 28.2029 27.0707 28.2605 27.0707 28.2605V28.1837Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.793 28.6058C26.793 28.6058 26.7929 28.7018 26.8855 28.7018C26.9211 28.6999 26.9559 28.6903 26.9877 28.6738C27.0196 28.6573 27.0479 28.6341 27.0707 28.6058C27.0707 28.6058 27.0707 28.4905 26.9411 28.4713C26.8115 28.4521 26.793 28.4713 26.793 28.4713V28.5674V28.6058Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.8865 28.7216L26.7754 28.6063V28.4911H26.905C26.9569 28.5287 26.9959 28.5826 27.0161 28.6448C27.0161 28.6448 26.9605 28.7216 26.8865 28.7216ZM26.7939 28.6063C26.7939 28.6063 26.7939 28.7024 26.8865 28.7024C26.9791 28.7024 27.0531 28.7024 27.0531 28.6063C27.0464 28.5763 27.0327 28.5484 27.0134 28.525C26.9941 28.5017 26.9696 28.4834 26.942 28.4719H26.8309L26.7939 28.6063Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.9795 28.4524C26.9795 28.4524 26.8315 28.4524 26.7945 28.5676C26.7575 28.6829 26.6649 28.4524 26.7019 28.4332H26.813C26.813 28.4332 26.813 28.4332 26.9056 28.4332C26.9981 28.4332 26.9056 28.4332 26.9056 28.4332L26.9795 28.4524Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.7947 28.5676C26.7684 28.5594 26.7445 28.5445 26.7252 28.5244C26.7058 28.5043 26.6915 28.4796 26.6836 28.4524C26.6836 28.4524 26.6836 28.4524 26.6836 28.4524H26.7947C26.7947 28.4524 26.8872 28.4524 26.9057 28.4524C26.8478 28.5035 26.7773 28.5367 26.7021 28.5484L26.7947 28.5676ZM26.7947 28.3372H26.6836C26.6981 28.3441 26.7139 28.3477 26.7299 28.3477C26.7458 28.3477 26.7616 28.3441 26.7761 28.3372H26.9613H26.7947Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.8491 28.5484C26.8491 28.5484 26.6454 28.8364 26.5529 28.8172C26.4603 28.798 26.5529 28.4139 26.5529 28.4139H26.6454C26.6997 28.3962 26.7578 28.3962 26.8121 28.4139L26.8491 28.5484Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.5533 28.8364C26.5533 28.8364 26.5533 28.4716 26.5533 28.4332H26.6459C26.6459 28.4332 26.794 28.4332 26.8125 28.4332C26.8125 28.4332 26.6459 28.8364 26.5533 28.8364ZM26.5533 28.4332C26.5395 28.5544 26.5395 28.6768 26.5533 28.7981C26.5533 28.7981 26.7755 28.606 26.831 28.5292C26.8866 28.4524 26.7385 28.5292 26.6829 28.5292L26.5533 28.4332Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4219 28.2601C26.4219 28.2601 26.6812 28.2601 26.6997 28.2601C26.7183 28.2601 26.5701 28.3754 26.496 28.3754C26.4219 28.3754 26.496 28.1641 26.496 28.1641L26.4219 28.2601Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.5535 28.5484C26.461 28.5484 26.4609 28.3756 26.4609 28.3372H26.7387C26.7039 28.4286 26.638 28.5037 26.5535 28.5484ZM26.5535 28.3563V28.5292C26.6134 28.5512 26.6788 28.5512 26.7387 28.5292L26.5535 28.3563Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8125 28.7591C25.8125 28.7591 25.8125 28.8935 25.9606 28.8935C26.1087 28.8935 26.1828 28.7783 26.1828 28.7783L25.9236 28.6631L25.8125 28.7591Z",
                              fill: "#202220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8867 28.7209C25.9107 28.7542 25.9412 28.7818 25.9764 28.8017C26.0116 28.8216 26.0505 28.8333 26.0904 28.8361C26.1903 28.8277 26.2831 28.7795 26.3496 28.7017L26.1274 28.5097L25.8867 28.7209Z",
                              fill: "#202220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8867 28.7212C25.9071 28.758 25.937 28.7883 25.973 28.8086C26.0089 28.829 26.0496 28.8386 26.0905 28.8365C26.1951 28.8257 26.2931 28.7783 26.3683 28.7021L26.1275 28.4908L25.8867 28.7212L26.1275 28.4908L26.3497 28.6829C26.2784 28.7507 26.187 28.7913 26.0905 28.7981C26.0423 28.8142 25.9904 28.8142 25.9423 28.7981L25.8867 28.7212Z",
                              fill: "#4B4139"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.0898 28.606C26.0898 28.606 26.0898 28.7789 26.2936 28.7597C26.4974 28.7405 26.4419 28.6636 26.4419 28.6636L26.2751 28.4332L26.0898 28.606Z",
                              fill: "#202220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.1094 28.6443C26.1094 28.6443 26.1094 28.7596 26.2575 28.7404H26.4242H26.2946L26.1094 28.6443Z",
                              fill: "#4B4139"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8496 28.8174H25.9607C26.0097 28.8265 26.0599 28.8265 26.1088 28.8174H25.9977H25.8496Z",
                              fill: "#4B4139"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4235 28.2607C26.4235 28.2607 26.6088 28.4335 26.6088 28.5295C26.6088 28.6255 26.6087 28.7599 26.5161 28.7407C26.415 28.7113 26.3288 28.6425 26.2754 28.5487C26.2754 28.5487 26.2754 28.4143 26.2754 28.3759L26.4235 28.2607Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.5535 28.8361C26.5535 28.8361 26.3313 28.6825 26.2942 28.6249C26.2942 28.6249 26.2942 28.5289 26.2942 28.4905C26.2942 28.452 26.4794 28.3752 26.4979 28.356C26.4979 28.356 26.7016 28.5481 26.7016 28.6441C26.7016 28.7402 26.6276 28.8361 26.5535 28.8361ZM26.4239 28.26C26.4239 28.26 26.2572 28.26 26.2387 28.3945C26.2202 28.5289 26.2387 28.3944 26.2387 28.4905C26.2949 28.586 26.3793 28.6601 26.4794 28.7017C26.4794 28.7017 26.572 28.5673 26.572 28.4905C26.572 28.4136 26.4424 28.2216 26.3869 28.2216L26.4239 28.26Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.812 28.3563C25.812 28.3563 25.7009 28.2603 25.6638 28.3563C25.6423 28.3906 25.6309 28.4306 25.6309 28.4716C25.6309 28.5125 25.6423 28.5526 25.6638 28.5868H25.812V28.4908V28.3563Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.6824 28.5487C25.6554 28.4744 25.6554 28.3925 25.6824 28.3183H25.7935V28.4527C25.7935 28.4527 25.7194 28.5487 25.6824 28.5487ZM25.6824 28.299C25.6824 28.299 25.6824 28.4719 25.6824 28.5103H25.7935V28.4143C25.7933 28.3823 25.7845 28.351 25.7681 28.3239C25.7518 28.2968 25.7285 28.2749 25.7008 28.2607L25.6824 28.299Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.7914 28.4522H25.6445C25.6445 28.4522 25.6446 28.5854 25.7364 28.6045H25.8649V28.4332L25.7914 28.4522Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.738 28.7017C25.7278 28.6774 25.7225 28.6513 25.7225 28.6248C25.7225 28.5984 25.7278 28.5722 25.738 28.548C25.738 28.548 25.8676 28.452 25.8861 28.452V28.6441L25.738 28.7017ZM25.738 28.452H25.6084C25.5915 28.5017 25.5915 28.5559 25.6084 28.6056H25.738V28.452Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8494 28.5679H25.7012C25.7012 28.5679 25.7012 28.7216 25.8123 28.7216C25.9235 28.7216 25.8123 28.6255 25.9049 28.6063C25.9975 28.5871 25.9049 28.4719 25.9049 28.4719L25.8494 28.5679Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8132 28.8168C25.8132 28.8168 25.7021 28.7208 25.7021 28.6632C25.7021 28.6056 25.8132 28.6632 25.8502 28.6632C25.9428 28.7784 25.8502 28.7976 25.8502 28.8168C25.8379 28.8187 25.8255 28.8187 25.8132 28.8168ZM25.8132 28.5864H25.6836C25.6836 28.5864 25.6836 28.7208 25.7761 28.7208C25.8687 28.7208 25.7761 28.7208 25.7761 28.7208L25.8132 28.5864Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.9247 28.1441C25.9106 28.1356 25.8946 28.1312 25.8784 28.1312C25.8621 28.1312 25.8462 28.1356 25.8321 28.1441C25.7946 28.1572 25.7629 28.1837 25.7425 28.2189C25.7222 28.2541 25.7145 28.2956 25.721 28.3361C25.7076 28.3864 25.7076 28.4394 25.721 28.4897H25.9432V28.2401L25.9247 28.1441Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.7568 28.4908C25.7505 28.4334 25.7505 28.3754 25.7568 28.318C25.7539 28.2731 25.7648 28.2283 25.7881 28.1903C25.8115 28.1523 25.8458 28.1231 25.8863 28.1068H25.9789V28.3756L25.7568 28.4908ZM25.8679 28.1259C25.8338 28.1384 25.8045 28.1619 25.7845 28.1931C25.7644 28.2243 25.7547 28.2614 25.7568 28.2988C25.7477 28.3496 25.7477 28.4017 25.7568 28.4524H25.9419V28.2028L25.8679 28.1259Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.9426 28.2607C25.9426 28.2607 25.7574 28.2607 25.7389 28.3951C25.7204 28.5295 25.7389 28.5487 25.8315 28.5487C25.9241 28.5487 26.0352 28.4143 26.0352 28.4143L25.9426 28.2607Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.85 28.6249C25.8174 28.612 25.7902 28.5876 25.7733 28.556C25.7564 28.5244 25.7508 28.4876 25.7574 28.4521C25.7574 28.4521 25.924 28.3177 25.961 28.2985L26.0721 28.4713C26.0721 28.4713 25.9055 28.6249 25.85 28.6249ZM25.85 28.3177C25.85 28.3177 25.6834 28.3177 25.6834 28.4521C25.6719 28.476 25.666 28.5023 25.666 28.5289C25.666 28.5556 25.6719 28.5818 25.6834 28.6057C25.6834 28.6057 25.813 28.5097 25.8685 28.4713L25.85 28.3177Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.0904 28.6248C26.0271 28.6713 25.9587 28.7099 25.8867 28.74C25.8867 28.74 25.8867 28.644 25.8867 28.5864C25.8867 28.5288 26.0163 28.4712 26.0719 28.452C26.1274 28.4328 26.1644 28.6248 26.1644 28.6248H26.0904Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8876 28.7593C25.869 28.7099 25.869 28.655 25.8876 28.6056C25.8876 28.6056 26.0172 28.5096 26.0913 28.4712C26.0913 28.4712 26.2024 28.6248 26.2024 28.6632C26.1036 28.7137 25.9971 28.7462 25.8876 28.7593ZM25.9987 28.452C25.8876 28.452 25.832 28.452 25.832 28.5865C25.832 28.7209 25.832 28.5865 25.832 28.7017L26.0358 28.5672C26.0358 28.5672 26.0357 28.452 25.9987 28.452Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2575 27.9339C26.2317 27.9204 26.2031 27.9134 26.1742 27.9134C26.1452 27.9134 26.1167 27.9204 26.0909 27.9339C25.9798 27.9339 25.9057 28.0876 25.8871 28.1644C25.8686 28.2412 25.8871 28.3757 25.8871 28.3949C25.8871 28.4141 26.1649 28.2412 26.1649 28.2412V27.9723L26.2575 27.9339Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.9248 28.3748C25.9248 28.3748 25.9248 28.2019 25.9248 28.1251C25.9248 28.0483 26.0359 27.8947 26.147 27.8754C26.2581 27.8562 26.3137 27.8754 26.3137 27.8754V28.1443C26.3137 28.1443 25.9989 28.3748 25.9248 28.3748ZM26.1099 27.8947C26.0592 27.9107 26.0136 27.9405 25.9777 27.981C25.9419 28.0215 25.9172 28.0713 25.9062 28.1251C25.9063 28.1251 25.9062 28.3363 25.9062 28.3555C26.0055 28.3218 26.0947 28.2623 26.1655 28.1827V27.9331C26.1486 27.9178 26.13 27.9049 26.1099 27.8947Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.034 28.4908C25.9965 28.482 25.963 28.4599 25.9394 28.4284C25.9158 28.3969 25.9034 28.3579 25.9043 28.318C25.9043 28.318 26.0711 28.1259 26.1451 28.1451C26.2192 28.1644 26.1451 28.3564 26.1451 28.3564C26.1451 28.3564 26.0525 28.51 25.9785 28.4908H26.034Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.0347 28.5101C26.0174 28.5186 25.9984 28.523 25.9792 28.523C25.96 28.523 25.941 28.5186 25.9237 28.5101C25.9156 28.4656 25.9156 28.42 25.9237 28.3756C25.9237 28.3756 26.0902 28.1836 26.1828 28.2028C26.2754 28.222 26.1828 28.414 26.1828 28.4332C26.1828 28.4332 26.1273 28.5101 26.0347 28.5101ZM26.0347 28.1452C25.9883 28.1569 25.9447 28.1782 25.9065 28.2079C25.8683 28.2376 25.8364 28.2751 25.8126 28.318C25.8073 28.3562 25.8073 28.395 25.8126 28.4332C25.8126 28.4332 25.8126 28.4332 25.9051 28.4332C25.9977 28.4332 26.0347 28.3372 26.0717 28.2988C26.1088 28.2604 26.0717 28.1068 26.0717 28.0876L26.0347 28.1452Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2746 28.4908C26.2472 28.5433 26.2093 28.5891 26.1635 28.6253C26.1635 28.6253 26.0339 28.6253 25.9969 28.6253C25.9599 28.6253 25.9969 28.6253 25.9969 28.51C26.0396 28.5007 26.0838 28.5007 26.1265 28.51L26.2191 28.6253L26.2746 28.4908Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.0902 28.6447C26.0902 28.6447 26.0902 28.6447 25.9791 28.6447C25.868 28.6447 25.9791 28.5487 25.9791 28.5103C26.0279 28.5 26.0783 28.5 26.1272 28.5103L26.2383 28.6447C26.2383 28.6447 26.2383 28.7407 26.1087 28.7791L26.0902 28.6447ZM26.1827 28.3759H26.0531C26.0531 28.3759 26.1457 28.4719 26.2198 28.3759C26.2622 28.3492 26.2948 28.3087 26.3124 28.2607L26.1827 28.3759Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.1465 28.2604C26.1465 28.2604 26.1465 28.2604 26.1465 28.414C26.1465 28.5676 26.2391 28.5293 26.2946 28.5293C26.3502 28.5293 26.4057 28.5293 26.4613 28.5293C26.5168 28.5293 26.5724 28.5292 26.5724 28.3756C26.5724 28.222 26.5724 28.2412 26.4798 28.222C26.4252 28.2159 26.3699 28.2231 26.3185 28.2431C26.267 28.2631 26.2208 28.2954 26.1835 28.3372L26.1465 28.2604Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2934 28.5293C26.261 28.519 26.231 28.5016 26.2055 28.4785C26.18 28.4553 26.1595 28.4268 26.1454 28.3948C26.1454 28.3948 26.1454 28.2412 26.1454 28.222C26.2193 28.1586 26.3092 28.1186 26.4045 28.1068C26.4162 28.134 26.4223 28.1634 26.4223 28.1932C26.4223 28.223 26.4162 28.2524 26.4045 28.2796V28.3948C26.3977 28.4248 26.3841 28.4527 26.3648 28.4761C26.3454 28.4995 26.321 28.5178 26.2934 28.5293ZM26.1638 28.2412C26.1487 28.2637 26.1406 28.2905 26.1406 28.318C26.1406 28.3455 26.1487 28.3723 26.1638 28.3948C26.1766 28.4258 26.197 28.4528 26.223 28.473C26.249 28.4932 26.2797 28.506 26.3119 28.5101C26.3119 28.5101 26.312 28.5101 26.4415 28.5101C26.4497 28.4955 26.4539 28.4789 26.4539 28.4621C26.4539 28.4452 26.4497 28.4286 26.4415 28.414C26.4529 28.3901 26.4589 28.3639 26.4589 28.3372C26.4589 28.3106 26.4529 28.2843 26.4415 28.2604C26.3514 28.2296 26.254 28.2296 26.1638 28.2604V28.2412Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4243 27.8762C26.3699 27.8596 26.312 27.8596 26.2576 27.8762C26.2236 27.8942 26.1952 27.9217 26.1755 27.9557C26.1559 27.9897 26.1458 28.0286 26.1465 28.0682V28.2603C26.2014 28.2734 26.2583 28.2734 26.3132 28.2603V28.1643C26.3065 28.1492 26.3031 28.1328 26.3031 28.1162C26.3031 28.0996 26.3065 28.0833 26.3132 28.0682C26.3132 27.953 26.3132 27.9338 26.3132 27.9338L26.4243 27.8762Z",
                              fill: "#202220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4221 27.8762H26.2555C26.2085 27.9187 26.1707 27.9711 26.1444 28.0298V28.1258C26.1341 28.0881 26.1341 28.0482 26.1444 28.0106C26.1444 28.0106 26.1445 27.8762 26.274 27.857L26.4221 27.8762Z",
                              fill: "#4B4139"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.0352 29.8917H29.1648L29.3129 29.7957V29.9877L29.1833 30.103H29.0537L29.0352 29.8917Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.0887 30.0464H28.9961H29.1072L29.2738 29.9312V30.1424L29.1257 30.2577L29.0887 30.0464ZM29.0887 30.0464H29.1998L29.3479 29.9312V29.7776L29.1998 29.8736H29.0701L29.0887 30.0464Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.8308 29.9117H28.9227C28.9227 29.9117 28.9227 29.9117 29.033 29.9117C29.0383 29.9496 29.0383 29.9881 29.033 30.026H28.9227H28.8125V29.8927L28.8308 29.9117Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.9226 30.1805H28.793V30.0077H29.0338L28.9226 30.1805ZM28.83 30.1805H28.9226H29.0338C29.0403 30.1489 29.0403 30.1162 29.0338 30.0845H28.8115L28.83 30.1805Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.8111 29.8548L29.6445 29.682V30.1045H29.8296L29.9222 29.9701L29.8111 29.8548Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.5527 30.0267V29.585L29.7564 29.7578V29.8538L29.6638 29.9883L29.5527 30.0267ZM29.5527 29.6426V30.0075H29.7194V29.8923L29.5527 29.6426Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.8305 29.9119C28.8305 29.9119 28.8305 29.9119 28.7379 29.9119C28.6997 29.9112 28.6622 29.9216 28.6294 29.942C28.5967 29.9624 28.5701 29.9919 28.5527 30.0272C28.5527 30.0272 28.5527 30.2576 28.5527 30.2768C28.5761 30.2971 28.6056 30.3083 28.6361 30.3083C28.6666 30.3083 28.696 30.2971 28.7194 30.2768C28.8986 30.1936 29.0718 30.0973 29.2379 29.9887H29.0157C28.9729 29.9981 28.9288 29.9981 28.886 29.9887C28.886 29.9887 28.8861 29.9887 28.7935 29.9887C28.7009 29.9887 28.7935 29.8927 28.7935 29.8927L28.8305 29.9119Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.6999 30.3144H28.5888C28.5888 30.3144 28.5888 30.1032 28.5888 30.0456C28.5888 29.988 28.6813 29.9111 28.7554 29.9111C28.7751 29.8993 28.7975 29.8931 28.8202 29.8931C28.843 29.8931 28.8653 29.8993 28.885 29.9111V30.0072C28.885 30.0072 28.885 30.0072 28.9776 30.0072C29.0194 30.0234 29.0654 30.0234 29.1072 30.0072H29.2183H29.3294C29.3294 30.0072 28.9035 30.276 28.8294 30.2952L28.6999 30.3144ZM28.6999 29.892C28.6999 29.892 28.5332 29.892 28.5332 30.0072C28.5332 30.1224 28.5332 30.2184 28.5332 30.2568C28.5585 30.272 28.5872 30.28 28.6165 30.28C28.6458 30.28 28.6745 30.272 28.6999 30.2568C28.8593 30.1771 29.0139 30.0873 29.1628 29.988H28.9961C28.9756 29.9969 28.9536 30.0016 28.9313 30.0016C28.9091 30.0016 28.887 29.9969 28.8665 29.988C28.8665 29.988 28.7739 29.988 28.7554 29.988V29.8727L28.6999 29.892Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.1267 30.065H29.0156V30.2186H29.2008L29.3119 30.1226V30.1802H29.1823L29.1267 30.065Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.1451 30.3536H28.9414V30.2H29.0526H29.2007V30.1808L29.1451 30.3536ZM28.9599 30.3536H29.1451V30.1808H29.034H28.9414L28.9599 30.3536Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.9589 29.9701C29.9445 29.9633 29.9289 29.9597 29.913 29.9597C29.8972 29.9597 29.8815 29.9633 29.8671 29.9701L29.7754 30.0843V30.1795H29.8671H29.9589V30.0843V29.9701Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.8865 30.1811H29.7754V30.0851C29.7754 30.0851 29.7754 29.9699 29.868 29.9699C29.9606 29.9699 29.868 29.9699 29.9791 29.9699V30.1811H29.8865ZM29.8865 30.1811V30.0851C29.8865 30.0851 29.8865 30.0851 29.8865 30.2003V30.1811Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.3491 29.8931H29.2196L29.127 29.9891L29.2196 30.1044H29.3121L29.5158 29.9508V29.8163L29.3491 29.8931Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.3111 30.1799H29.2L29.1074 30.0647H29.2185H29.3852V30.2183L29.3111 30.1799ZM29.2185 30.1799H29.3111L29.4963 30.0455V29.9302H29.3666C29.3303 29.9196 29.2919 29.9196 29.2555 29.9302L29.2185 30.1799Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.1275 30.0652C30.1101 30.0566 30.0912 30.0522 30.0719 30.0522C30.0527 30.0522 30.0338 30.0566 30.0164 30.0652L29.9238 30.1804H30.1275H30.2201L30.1275 30.0652Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.1266 30.1809H29.9785C29.9785 30.1809 29.9785 30.0465 30.0896 30.0465H30.2007V30.1425L30.1266 30.1809ZM29.997 30.1809H30.1081L29.997 30.2961V30.1809Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.9792 30.6227C28.9245 30.6365 28.8673 30.6365 28.8126 30.6227C28.7951 30.56 28.7951 30.4934 28.8126 30.4306C28.8039 30.4094 28.7995 30.3865 28.7995 30.3634C28.7995 30.3403 28.8039 30.3175 28.8126 30.2962C28.8323 30.2844 28.8546 30.2782 28.8774 30.2782C28.9001 30.2782 28.9224 30.2844 28.9421 30.2962C28.9726 30.3594 29.0258 30.4078 29.0903 30.4306H29.2199L29.3125 30.3154L29.4606 30.2002C29.4606 30.2002 29.4606 30.2002 29.4606 30.2962C29.4606 30.2962 29.5531 30.2962 29.5902 30.1617C29.6571 30.1447 29.727 30.1447 29.7939 30.1617C29.8135 30.186 29.8242 30.2166 29.8242 30.2482C29.8242 30.2798 29.8135 30.3104 29.7939 30.3346L29.6272 30.5458H29.4606C29.4293 30.5294 29.4026 30.5049 29.3831 30.4746C29.3637 30.4443 29.3521 30.4093 29.3495 30.373C29.3501 30.4075 29.3589 30.4412 29.3751 30.4714C29.3912 30.5015 29.4142 30.5271 29.4421 30.5458C29.4421 30.5458 29.5532 30.5458 29.6087 30.5458L29.7568 30.3538C29.7719 30.3313 29.7801 30.3044 29.7801 30.277C29.7801 30.2495 29.7719 30.2227 29.7568 30.2002H29.5902C29.5902 30.2002 29.4976 30.3538 29.4421 30.3346C29.4333 30.3032 29.4333 30.2699 29.4421 30.2386H29.3125C29.3065 30.2663 29.2953 30.2925 29.2794 30.3156C29.2634 30.3387 29.2433 30.3582 29.2199 30.373H29.0718C29.0832 30.4039 29.0832 30.4381 29.0718 30.469C29.0029 30.4454 28.9441 30.3979 28.9051 30.3346C28.8878 30.326 28.8688 30.3216 28.8496 30.3216C28.8304 30.3216 28.8114 30.326 28.794 30.3346C28.794 30.3346 28.794 30.3346 28.794 30.469C28.777 30.5253 28.777 30.5856 28.794 30.6418C28.8261 30.6668 28.8651 30.6803 28.9051 30.6803C28.9452 30.6803 28.9842 30.6668 29.0162 30.6418C29.0344 30.6207 29.0445 30.5934 29.0445 30.5651C29.0445 30.5367 29.0344 30.5094 29.0162 30.4882H29.1458H29.0347C29.0347 30.4882 29.0347 30.4882 28.9421 30.4882C28.8496 30.4882 28.9421 30.4882 28.9421 30.4882C28.9421 30.4882 28.9421 30.6035 28.9421 30.6611L28.9792 30.6227Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.5894 29.3929V29.6618C29.613 29.7628 29.613 29.8681 29.5894 29.9691C29.5894 29.9691 29.3672 29.9691 29.3487 29.9691C29.3317 29.8804 29.3317 29.789 29.3487 29.7002L29.6265 29.4122L29.5894 29.3929Z",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.4588 30.0272C29.4588 30.0272 29.3291 30.0272 29.3106 30.0272C29.3031 29.9313 29.3031 29.8349 29.3106 29.739L29.6255 29.4126V29.7199C29.6255 29.7199 29.6255 29.9503 29.6255 30.0272C29.6009 30.0445 29.5718 30.0538 29.5421 30.0538C29.5124 30.0538 29.4834 30.0445 29.4588 30.0272ZM29.3106 29.7007C29.3027 29.7837 29.3027 29.8673 29.3106 29.9503C29.3308 29.9605 29.353 29.9658 29.3755 29.9658C29.3979 29.9658 29.4201 29.9605 29.4403 29.9503C29.4572 29.9604 29.4763 29.9657 29.4958 29.9657C29.5153 29.9657 29.5345 29.9604 29.5514 29.9503V29.6623V29.4126L29.3106 29.7007Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.3867 30.1813C29.3867 30.1813 29.3867 30.2764 29.4785 30.2764C29.5703 30.2764 29.5886 30.1622 29.5886 30.1622",
                              fill: "#F8C83C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.6836 30.2955C29.6934 30.3264 29.6934 30.3597 29.6836 30.3906V30.2955Z",
                              fill: "#977C2E"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.4235 30.4112C28.4235 30.4112 28.4235 30.296 28.4235 30.2576C28.4235 30.2192 28.5531 30.2576 28.5902 30.2576C28.6272 30.2576 28.5902 30.1423 28.5902 30.1039C28.5902 30.1039 28.3125 30.104 28.331 30.296C28.328 30.3409 28.339 30.3857 28.3623 30.4237C28.3856 30.4617 28.4201 30.4909 28.4606 30.5072L28.4235 30.4112Z",
                              fill: "#202220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.8293 30.8533C28.8293 30.8533 28.7367 30.7189 28.8293 30.6421C28.9219 30.5652 28.9219 30.6421 28.9404 30.6421C28.9589 30.6421 28.9404 30.6421 28.9404 30.5077C28.9404 30.3732 28.8478 30.3732 28.8293 30.3732C28.7775 30.3937 28.7333 30.4308 28.7033 30.4792C28.6733 30.5276 28.659 30.5846 28.6627 30.6421C28.6751 30.6982 28.7026 30.7496 28.7419 30.7904C28.7812 30.8311 28.8307 30.8596 28.8849 30.8725L28.8293 30.8533Z",
                              fill: "#202220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.2922 30.6995C30.2922 30.6995 30.5699 30.8147 30.5885 30.5266C30.5921 30.4692 30.5778 30.4122 30.5478 30.3638C30.5178 30.3154 30.4737 30.2782 30.4218 30.2578C30.4218 30.2578 30.4218 30.2578 30.3292 30.2578C30.2366 30.2578 30.2366 30.373 30.3292 30.3922C30.4218 30.4114 30.4218 30.3922 30.4588 30.3922C30.4959 30.3922 30.3663 30.5459 30.3663 30.5459L30.2922 30.6995Z",
                              fill: "#202220"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.8316 30.8524C28.7695 30.8358 28.7143 30.7988 28.6742 30.7468C28.6341 30.6949 28.6114 30.6309 28.6094 30.5644C28.6094 30.4299 28.7576 30.3531 28.7576 30.3531C28.7576 30.3531 28.6094 30.3531 28.6094 30.5644C28.6114 30.6309 28.6341 30.6949 28.6742 30.7468C28.7143 30.7988 28.7695 30.8358 28.8316 30.8524Z",
                              fill: "#4B4139"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.4223 30.4103C28.4223 30.4103 28.2927 30.4103 28.2742 30.1991C28.2557 29.9879 28.5705 30.007 28.5705 30.007C28.5705 30.007 28.2742 30.007 28.2928 30.2183C28.3113 30.4295 28.4223 30.4103 28.4223 30.4103Z",
                              fill: "#4B4139"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.9023 24.4196H27.0505H27.3467V24.6116L27.0505 24.7845V24.6692L26.9023 24.4196Z",
                              fill: "#904720"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.6812 28.9326V28.4716L28.4961 28.8558L28.959 29.3166L29.6812 28.9326Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.4593 28.1252H27.3668H27.2556H27.1445L27.2556 28.2596L27.4408 28.3556L27.3482 28.1252H27.4593Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.4403 28.2603V28.3563V28.4716H27.3107L26.9219 28.3372V28.2411H27.033L27.4403 28.2603Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.6819 28.6633V28.0296L27.3672 27.6263V27.8568V28.2408V28.4905L27.6819 28.6633Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.4593 27.7794C27.4593 27.7794 27.4593 27.7794 27.4593 27.9331C27.4784 28.1467 27.5349 28.355 27.6259 28.5476L27.5334 28.394C27.4307 28.1794 27.3798 27.9421 27.3851 27.7026C27.3851 27.4145 27.3851 27.7026 27.3851 27.7026L27.4593 27.7794Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.7009 28.03C27.6591 28.0733 27.6275 28.1258 27.6083 28.1836C27.6051 28.2412 27.6051 28.2989 27.6083 28.3565V28.2605C27.6083 28.2605 27.6083 28.4525 27.6083 28.4717C27.6186 28.3439 27.6186 28.2155 27.6083 28.0876H27.5156L27.7009 28.03Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.7176 28.837L27.3657 28.741C27.1805 28.741 27.0879 28.5874 27.0879 28.549C27.0879 28.5106 27.4213 28.549 27.4768 28.549H27.662H27.8101V28.7218H27.6065L27.7176 28.837Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.1246 28.7589C27.1246 28.7589 27.2172 28.7589 27.1246 28.8549H26.9395L27.2727 28.9509L26.995 28.8165L27.1246 28.7589Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.0332 28.664C27.0332 28.664 27.0332 28.664 27.1814 28.664C27.242 28.6811 27.306 28.6811 27.3666 28.664V28.76H27.1444H27.0332V28.664Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.8289 28.4906V28.5867V28.3946V28.2602H27.6992L27.8289 28.4906Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.4772 28.1449L27.3845 27.9721L27.2363 27.7032L27.329 27.5688L27.4216 27.7224C27.4109 27.786 27.4109 27.8509 27.4216 27.9145V28.1449H27.4772Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.7733 28.8171C26.7896 28.7907 26.8114 28.7684 26.837 28.7518C26.8626 28.7352 26.8915 28.7247 26.9215 28.7211H27.1067L27.3289 28.8363H26.9215H26.7363L26.7733 28.8171Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.8279 28.0677C27.8206 28.1763 27.8206 28.2854 27.8279 28.3941C27.8279 28.3941 27.8279 28.5478 27.8279 28.5862C27.8279 28.6246 27.8279 28.5862 27.8279 28.5862C27.7789 28.596 27.7286 28.596 27.6797 28.5862H27.7908C27.7839 28.5159 27.7839 28.4451 27.7908 28.3749C27.7908 28.2789 27.7908 28.1829 27.7908 28.1829C27.7772 28.0681 27.7772 27.952 27.7908 27.8372L27.9205 27.9717L27.8279 28.0677Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.0879 28.7404C27.1202 28.7834 27.163 28.8167 27.2118 28.837C27.2606 28.8572 27.3137 28.8637 27.3657 28.8556H27.6805C27.6858 28.8938 27.6858 28.9326 27.6805 28.9708L27.4953 29.086V28.894H27.3101L27.0879 28.7404Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.4787 28.1448C27.3458 28.0094 27.2335 27.854 27.1454 27.6839C27.1026 27.54 27.1026 27.386 27.1454 27.2422L27.386 27.5878C27.3674 27.6372 27.3674 27.6921 27.386 27.7415C27.4159 27.8828 27.4658 28.0187 27.5342 28.1448H27.4787Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.3104 29.1627C27.299 29.1423 27.293 29.1191 27.293 29.0955C27.293 29.0719 27.299 29.0487 27.3104 29.0282C27.4653 28.8674 27.6561 28.7487 27.8658 28.6826V28.9322L27.3474 29.1819L27.3104 29.1627Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.3472 28.99L27.4583 28.8748C27.4583 28.8748 27.4583 28.8748 27.2916 28.8748H27.0879L27.2731 29.0093L27.3472 28.99Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.0144 29.0475C27.9756 28.9879 27.9445 28.9233 27.9218 28.8554C27.9154 28.798 27.9154 28.74 27.9218 28.6826H27.8293H27.6811H27.8293H27.5885C27.5885 28.6826 27.7922 28.6826 27.7737 28.6826C27.7552 28.6826 27.6811 28.6826 27.57 28.7978H27.3848C27.4273 28.8092 27.4719 28.8092 27.5144 28.7978H27.7366L28.0515 28.6826L28.0144 29.0475Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.0142 29.0473C28.0142 29.0473 28.0142 29.0473 27.8661 28.644C27.8467 28.4846 27.8467 28.3233 27.8661 28.1639L28.0142 28.2599L28.1438 28.5096L28.0513 29.0473H28.0142Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.0703 28.4137C28.0557 28.5285 28.0557 28.6447 28.0703 28.7595C28.0513 28.8545 28.0513 28.9525 28.0703 29.0475C28.1123 29.1173 28.162 29.1818 28.2184 29.2396V28.7786L28.0332 28.4713L28.0703 28.4137Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2749 28.7024C28.2749 28.7024 28.2749 29.2402 28.1823 29.2402C28.0897 29.2402 28.0156 29.0481 28.0156 29.0481C28.0156 29.0481 28.1268 29.2401 28.1823 29.2209C28.2379 29.2017 28.1823 28.664 28.1823 28.664L28.2749 28.7024Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.0151 29.0475C28.0151 29.0475 28.0152 29.0475 27.7374 29.2011C27.6182 29.2484 27.4864 29.2484 27.3672 29.2011C27.3672 29.2011 27.3672 29.2011 27.7374 29.2011L28.0151 29.0859V29.0475Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.5125 28.3755L27.6052 28.51V28.6828V28.51L27.4199 28.2411V28.3948L27.5125 28.3755Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.3475 29.0286C27.3475 29.0286 27.3475 29.0286 27.3475 28.9135H27.1067H26.7734C26.8483 28.963 26.9293 29.0017 27.0142 29.0286H27.2919H27.3475Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.3465 29.0287C27.2541 29.0359 27.1612 29.0359 27.0688 29.0287L26.791 28.9135C26.8717 28.9775 26.9678 29.0173 27.0688 29.0287H27.365H27.3465Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.4398 28.2606C27.3664 28.2461 27.291 28.2461 27.2175 28.2606L27.0879 28.4334H27.1991C27.1864 28.3766 27.1864 28.3175 27.1991 28.2606C27.266 28.2435 27.3359 28.2435 27.4028 28.2606H27.4398Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.1249 27.9918C27.1664 28.0451 27.2165 28.0906 27.273 28.1262L27.4396 28.2223C27.4467 28.2732 27.4467 28.3249 27.4396 28.3759C27.336 28.3278 27.2368 28.27 27.1434 28.2031C27.1075 28.1352 27.0765 28.0645 27.0508 27.9918H27.1249Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.3658 28.049C27.3353 28.0416 27.3036 28.0416 27.2732 28.049C27.2732 28.049 27.1621 28.049 27.1436 28.049L27.2362 28.1834C27.2362 28.1834 27.0881 28.0874 27.1251 28.0681C27.1621 28.0489 27.3287 28.0681 27.3287 28.0681L27.3658 28.049Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.0144 27.7234L29.3847 26.9937L30.0328 27.9347L28.8477 28.2612H28.2367L27.9219 28.0307L28.0144 27.7234Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.8486 28.1252L31.5522 29.6615L31.367 29.7959L30.9781 29.6807L30.1449 28.8357L29.8301 28.5093L29.8486 28.1252Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.977 29.3546L31.0141 28.5865L29.7734 27.6263V28.0872L31.1808 29.4314L31.6437 29.6619H31.8844L31.9955 29.5275V29.4314L31.977 29.3546Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.8485 28.2605C30.1173 28.5708 30.4082 28.8597 30.7188 29.1247C31.0892 29.4128 31.441 29.7392 31.515 29.7008C31.5891 29.6624 31.515 29.6048 31.515 29.6048L29.793 28.1453V28.2605H29.8485Z",
                              fill: "#803F1D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.0508 29.7387L30.8841 29.8924L30.6804 29.7963L29.625 28.6826V28.4905H29.7731L31.0508 29.7387Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.9769 29.3538C31.9769 29.3538 31.8473 29.6803 31.5881 29.6035C30.9311 29.138 30.3118 28.6178 29.7363 28.048V28.2592C30.3086 28.8156 30.9284 29.3169 31.5881 29.7571C31.6841 29.7759 31.7834 29.7639 31.8727 29.7227C31.962 29.6815 32.0371 29.6132 32.0881 29.5267L31.9399 29.4115L31.9769 29.3538Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.6797 28.5104C29.9065 28.8223 30.154 29.1175 30.4204 29.3937C30.6796 29.6241 30.9018 29.8162 31.0129 29.797C31.124 29.7777 31.0129 29.6626 31.0129 29.6626L30.2907 28.8944L29.9019 28.5104H29.7537H29.6797Z",
                              fill: "#803F1D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.8105 28.5098C29.8105 28.5098 31.0327 29.8156 31.1253 29.8348C31.2179 29.854 31.6252 29.6812 31.6252 29.6812H31.5326C31.5326 29.6812 31.5326 29.8156 31.2178 29.6812C30.7197 29.3167 30.2658 28.8911 29.8661 28.4137L29.8105 28.5098Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.2723 29.7574L29.8094 29.2197L29.7168 29.0469V28.8164L30.6056 29.7574H30.476H30.3649H30.2723Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M31.0696 29.7767C31.0696 29.7767 30.977 29.9495 30.8289 29.9111C30.7361 29.8849 30.6525 29.8316 30.5881 29.7575L29.7363 28.8933V28.7589C30.0763 29.1497 30.448 29.5095 30.8474 29.8343C30.9585 29.8343 31.0511 29.7191 31.0511 29.7191L31.0696 29.7767Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.6067 29.7388C30.6067 29.7388 30.6067 29.8732 30.4401 29.854C30.3863 29.8745 30.3271 29.8745 30.2733 29.854L29.7363 29.2203V29.0475C29.9287 29.3472 30.1523 29.6241 30.403 29.8732C30.42 29.879 30.438 29.8811 30.4558 29.8794C30.4737 29.8777 30.491 29.8721 30.5066 29.8631C30.5223 29.854 30.536 29.8417 30.5468 29.827C30.5577 29.8122 30.5654 29.7953 30.5696 29.7772L30.6067 29.7388Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M30.125 28.0491L30.6805 28.5292H30.9212H30.7916C30.8736 28.6317 30.9743 28.7165 31.0878 28.7788H31.3471C31.3471 28.7788 31.199 28.7788 31.1804 28.7788C31.2555 28.8759 31.3504 28.9546 31.4582 29.0093H31.773C31.773 29.0093 31.5508 29.0093 31.5693 29.0093C31.5878 29.0093 31.9396 29.2973 31.9211 29.3357C31.9026 29.3741 31.4767 29.0285 31.4582 29.0477C31.4662 29.0921 31.4662 29.1377 31.4582 29.1821C31.4582 29.1821 31.4582 29.0477 31.4582 28.9901C31.3908 28.8808 31.2943 28.7941 31.1804 28.7404V28.8748C31.1804 28.8748 31.1804 28.7404 31.1804 28.6828C31.0911 28.5882 30.9917 28.5045 30.8842 28.4332C30.8842 28.4332 30.8842 28.5484 30.8842 28.5676C30.8842 28.5868 30.8842 28.4332 30.8842 28.3948C30.6854 28.2174 30.4997 28.0248 30.3287 27.8186L30.125 28.0491Z",
                              fill: "#B07229"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.1636 29.508C29.1636 29.508 29.1636 29.7192 29.1636 29.7384C29.1636 29.7576 28.9043 29.3736 28.9043 29.3736V29.0088L29.1636 29.2584L29.2747 29.508H29.1636Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.8465 29.4126V29.2974C29.8497 29.2591 29.8497 29.2205 29.8465 29.1822V28.9709V28.8365L29.7168 28.9325V29.067V29.3166V29.5471H29.8465V29.4126Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.6822 29.758C29.6912 29.6622 29.6912 29.5657 29.6822 29.4699L29.534 29.0667V28.9322H29.4043V29.0282V29.201L29.5895 29.5659C29.5895 29.5659 29.7747 29.8348 29.8303 29.8156L29.6822 29.758Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.5331 28.8939C29.5845 28.9623 29.6223 29.0407 29.6442 29.1244C29.6885 29.2286 29.7196 29.3383 29.7368 29.4508C29.7368 29.4508 29.8664 29.6045 29.922 29.5853C29.9775 29.5661 29.922 29.4316 29.922 29.3932C29.922 29.3548 29.922 29.3932 29.922 29.3932C29.9036 29.2723 29.9036 29.1492 29.922 29.0284V28.8171C29.922 28.8171 30.0516 29.0476 30.0516 29.2012C30.0568 29.1116 30.0568 29.0219 30.0516 28.9324V28.7403C30.0516 28.7403 30.0516 28.7403 30.0516 28.6251C30.0516 28.6251 30.0516 28.6251 30.0516 28.4714C30.0612 28.2988 30.0612 28.1257 30.0516 27.953L29.4961 28.7019L29.6627 28.9131L29.5331 28.8939Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.5328 28.8365C29.5069 28.9695 29.5069 29.1067 29.5328 29.2398C29.5328 29.451 29.6254 29.451 29.6254 29.4894C29.644 29.578 29.644 29.6697 29.6254 29.7583C29.551 29.5774 29.4891 29.3913 29.4403 29.2013C29.418 29.1088 29.3869 29.0188 29.3477 28.9325L29.5514 28.8365H29.5328Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.4766 29.9119V29.8159V29.6238L29.2914 29.2206L29.0877 29.0285L28.9766 28.8365V29.1822C29.0408 29.3382 29.1215 29.4863 29.2173 29.6238L29.5136 29.9119H29.4766Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.6992 28.9894C28.7087 29.0401 28.7087 29.0922 28.6992 29.143V29.239L28.8288 29.5463C28.8288 29.6615 28.9769 29.7959 29.0325 29.7767C29.088 29.7575 29.0324 29.6423 29.125 29.6423C29.2176 29.6423 29.125 29.6423 29.0139 29.6423C28.9358 29.463 28.8738 29.2765 28.8288 29.0854V28.9702L28.6992 28.9894Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.2736 29.4509L29.1254 29.1821C29.1254 29.1821 29.1254 29.0284 29.0142 29.0284C28.9031 29.0284 29.0142 28.8748 29.0142 28.8748C29.0465 28.9297 29.091 28.9758 29.1439 29.0093C29.1439 29.0093 29.255 29.0093 29.292 29.0093C29.2966 29.0668 29.2966 29.1246 29.292 29.1821V29.3933L29.2736 29.4509Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.9228 29.182C28.9489 29.2581 28.9864 29.3293 29.0339 29.3933C29.0851 29.4844 29.1473 29.5683 29.2191 29.6429L29.0154 29.4125C28.9676 29.3349 28.9303 29.2509 28.9043 29.1628L28.9228 29.182Z",
                              fill: "#5C3A1D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.2922 29.0287H29.4033H29.2922C29.2922 29.0287 29.2922 29.0287 29.1996 28.9135C29.1965 28.971 29.1965 29.0287 29.1996 29.0863V29.2207L29.2922 29.0287Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.2543 29.067C29.2543 29.067 29.4211 29.4127 29.4581 29.5279C29.4744 29.6232 29.4744 29.7207 29.4581 29.8159V29.6047C29.3978 29.4601 29.3297 29.319 29.2543 29.1822C29.2512 29.1439 29.2512 29.1053 29.2543 29.067Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.4774 28.8362V28.337V28.1641L29.2553 27.6456C29.1549 27.6255 29.0638 27.5715 28.9961 27.492C29.0121 27.5679 29.0121 27.6465 28.9961 27.7224C29.0042 27.7797 29.0042 27.838 28.9961 27.8953L29.4219 28.721H29.5515L29.4774 28.8362Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.625 29.1817C28.625 29.1817 28.625 29.1817 28.7361 29.1817C28.8472 29.1817 28.7361 29.028 28.7361 28.932C28.5512 28.6261 28.3338 28.3426 28.0879 28.087L28.662 29.1241L28.625 29.1817Z",
                              fill: "#8B441F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.9761 28.8743C28.9761 28.8743 28.9761 29.1432 28.9761 29.1624C28.9761 29.1816 28.2725 28.375 28.1984 28.2598C28.1244 28.1446 27.8281 28.0294 27.8281 27.9717C27.8281 27.9141 28.217 27.9717 28.217 27.9717L28.9761 28.7399V28.8743Z",
                              fill: "#8B441F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.6247 29.182C28.6096 29.1124 28.6096 29.0402 28.6247 28.9707C28.6381 28.9204 28.6381 28.8673 28.6247 28.8171C28.485 28.5765 28.3303 28.3455 28.1618 28.1257L27.9766 28.0105C27.9802 28.0616 27.9802 28.113 27.9766 28.1642C28.0752 28.3392 28.1866 28.506 28.3099 28.6634L28.7173 29.1435L28.6247 29.182Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.2534 29.0672C29.2534 29.0672 29.2534 28.8367 29.2534 28.7791C29.2534 28.7215 28.8831 27.9725 28.8831 27.9725L28.6794 27.8189L28.5684 27.7036C28.5834 27.7861 28.5834 27.8708 28.5684 27.9533V28.107L28.8461 28.5871L29.2904 29.0288L29.2534 29.0672Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.6436 28.6248V28.5096V28.1447L29.4214 27.3574C29.4041 27.3659 29.3851 27.3703 29.3659 27.3703C29.3467 27.3703 29.3277 27.3659 29.3103 27.3574L29.1992 27.2422V27.7222L29.44 28.3944V28.5864H29.5511L29.6436 28.6248Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.9408 28.8174C28.8327 28.6975 28.7337 28.5691 28.6446 28.4333L28.4964 28.1836C28.4539 28.195 28.4093 28.195 28.3668 28.1836C28.2957 28.1459 28.2328 28.0937 28.1816 28.03C28.1816 28.03 28.1816 28.1644 28.4409 28.4909C28.7001 28.8174 28.9408 28.8174 28.9408 28.8174Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.4766 28.8943C29.5692 28.8943 29.5692 28.4526 29.4766 28.1646C29.4225 27.9833 29.3479 27.8092 29.2544 27.6461C29.3424 27.8518 29.4166 28.0635 29.4766 28.2798C29.4766 28.4526 29.4766 28.5871 29.4766 28.5871C29.4766 28.5871 29.4766 28.4718 29.3655 28.299L29.2544 28.0685C29.2544 28.0685 29.5137 28.8175 29.4396 28.7983C29.2604 28.5253 29.1054 28.236 28.9766 27.9341C28.9766 27.9341 29.2914 28.9519 29.5322 28.8559L29.4766 28.8943Z",
                              fill: "#8B441F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.6997 26.9155L29.8478 27.2612V27.6261V27.9333V28.567C29.831 28.5771 29.8118 28.5824 29.7923 28.5824C29.7728 28.5824 29.7536 28.5771 29.7367 28.567L29.6071 27.8565L29.459 27.146V27.0307H29.6256L29.6997 26.9155Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.2567 29.0669V28.894C29.2148 28.8132 29.1777 28.7299 29.1456 28.6444V28.51C29.1456 28.51 29.1456 28.6444 29.0345 28.6444C28.893 28.4793 28.7688 28.2991 28.6641 28.1067C28.6641 28.1067 29.1085 29.0285 29.4234 28.9901L29.2567 29.0669Z",
                              fill: "#8B441F"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.0498 28.6633C29.0702 28.5749 29.0702 28.4828 29.0498 28.3944C29.0019 28.2475 28.9399 28.106 28.8646 27.972H28.7535L28.5684 27.8568C28.5684 27.8568 28.6609 28.0872 28.7535 28.26L29.0127 28.6633H29.0498Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.3107 28.4713C29.2828 28.278 29.2266 28.0902 29.1441 27.9145C29.0916 27.7858 29.0162 27.6686 28.9219 27.5688C28.93 27.6261 28.93 27.6844 28.9219 27.7417V27.8569C29.006 27.9082 29.0761 27.9809 29.1255 28.0681C29.1255 28.2217 29.2922 28.4713 29.2922 28.4713H29.3107Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.6435 27.9725C29.6525 27.8126 29.6525 27.6523 29.6435 27.4924C29.6353 27.3581 29.6353 27.2235 29.6435 27.0892L29.7361 27.262V26.9547H29.625C29.625 26.9547 29.625 26.9547 29.625 27.07C29.625 27.1852 29.625 27.07 29.625 27.07C29.6345 27.1207 29.6345 27.1728 29.625 27.2236C29.6302 27.2746 29.6302 27.3262 29.625 27.3772C29.6567 27.4754 29.6938 27.5715 29.7361 27.6653L29.8286 27.9917L29.6435 27.9725Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.9226 27.9345C29.9612 27.6994 29.9612 27.4591 29.9226 27.224C29.8906 27.0922 29.8339 26.9683 29.7559 26.8591C29.8437 27 29.9064 27.1562 29.941 27.3201C29.9812 27.5039 30.0121 27.6898 30.0336 27.8769L29.9226 27.9345Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.4782 28.2608C29.488 28.0689 29.488 27.8766 29.4782 27.6847C29.4782 27.4735 29.3856 27.3966 29.3856 27.3966L29.293 27.3006C29.2998 27.4029 29.2998 27.5056 29.293 27.6079C29.298 27.6461 29.298 27.6849 29.293 27.7231L29.4041 27.9343C29.4552 28.0396 29.4985 28.1487 29.5337 28.2608H29.4782Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.7182 28.7214C29.7182 28.7214 29.7182 28.2221 29.7182 28.0877L29.4961 27.3579C29.4961 27.3579 29.7182 28.2221 29.6997 28.2605C29.6812 28.2989 29.5887 27.9916 29.5702 28.0108C29.5516 28.03 29.7553 28.587 29.6812 28.587C29.6072 28.587 29.5702 28.4717 29.5702 28.4717V28.587C29.5866 28.6245 29.6125 28.6568 29.645 28.6804C29.6776 28.7041 29.7156 28.7182 29.7553 28.7214H29.7182Z",
                              fill: "#904720"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.8093 28.472C29.8093 28.472 29.8093 27.992 29.8093 27.7807C29.8093 27.5695 29.6426 27.1471 29.6426 27.1471C29.7287 27.3498 29.7909 27.5625 29.8278 27.7807C29.8278 28.1072 29.9389 28.5488 29.8278 28.5488C29.8576 28.5607 29.8906 28.5607 29.9204 28.5488L29.8093 28.472Z",
                              fill: "#904720"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.0316 29.0277C29.0316 29.0277 29.0316 29.2197 28.939 29.2005C28.8465 29.1813 28.7169 29.0469 28.6799 28.9509C28.6429 28.8548 28.865 29.1621 28.9206 29.1621C28.9761 29.1621 28.9206 28.9509 28.9206 28.8932V29.0277H29.0316Z",
                              fill: "#312317"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.4576 26.7628C29.4886 26.7813 29.5237 26.7911 29.5594 26.7911C29.5952 26.7911 29.6303 26.7813 29.6613 26.7628C29.6978 26.7322 29.7282 26.6944 29.7504 26.6515C29.7727 26.6087 29.7864 26.5616 29.7909 26.5131C29.8167 26.4452 29.8167 26.3698 29.7909 26.3019C29.809 26.371 29.809 26.4439 29.7909 26.5131C29.7909 26.6283 29.7909 26.8588 29.5872 26.9164C29.3835 26.974 29.4761 26.9164 29.4761 26.9164V26.7628H29.4576Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.293 26.3402C29.3696 26.4667 29.4318 26.602 29.4782 26.7434C29.4782 26.9546 29.4782 27.0314 29.4782 27.0314L29.33 26.417L29.293 26.3402Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.0332 26.6276L27.885 27.9143L28.959 26.6661L28.2739 25.9363L27.0332 26.6276Z",
                              fill: "#1E2121"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.1074 25.8401V26.0322L28.2 26.3778L28.3852 26.5698L28.5889 26.7043V26.5506V26.3586H28.7185L28.8111 26.2242L28.9592 25.9746V25.8593L28.737 25.4561V25.6097H28.6074L28.4593 25.821H28.2741L28.1074 25.8401Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.5496 26.7045C28.5496 26.7045 28.5496 26.7045 28.5496 26.5893C28.5681 26.4106 28.5681 26.2303 28.5496 26.0516C28.5239 25.924 28.4802 25.801 28.4199 25.6867C28.4874 25.871 28.525 26.0657 28.5311 26.2628C28.5311 26.57 28.5311 26.6661 28.5311 26.6853C28.5311 26.7045 28.5311 26.6853 28.5311 26.6853L28.5496 26.7045Z",
                              fill: "#5C3818"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.6062 26.2054C28.6062 26.2054 28.7543 26.3975 28.8098 26.3399C28.8653 26.2823 28.8098 25.9942 28.8098 25.879C28.7694 25.7999 28.7383 25.7161 28.7172 25.6293C28.7227 25.7253 28.7227 25.8215 28.7172 25.9174C28.7172 26.0134 28.8283 26.3399 28.7172 26.3975C28.6062 26.4551 28.4766 26.2823 28.4766 26.2823L28.6062 26.2054Z",
                              fill: "#5C3818"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.1445 26.3402C28.1445 26.3402 28.1445 26.3402 28.2556 26.3402C28.3667 26.3402 28.2556 26.3402 28.2556 26.3402V26.513L28.3482 26.6858V26.7818L28.1445 26.6666V26.417V26.3402Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.4787 28.2601C28.4787 28.2601 28.2566 28.2601 28.1825 28.1449L27.627 27.588V27.3192H27.8121L28.1084 27.1847V27.0695L28.4787 26.8775L28.701 26.7623H29.1454L29.2565 26.5318C29.3255 26.6531 29.3814 26.7819 29.4232 26.9159C29.4232 27.0311 29.4232 27.3767 29.4232 27.3959C29.4232 27.4151 29.238 27.2999 29.2195 27.2807C29.201 27.2615 29.3306 27.7608 29.2195 27.78C29.1084 27.7992 28.9232 27.6072 28.9232 27.6072C28.9232 27.6072 28.9232 28.0297 28.9232 28.0489C28.7671 28.0193 28.6243 27.9385 28.5158 27.8184C28.5158 27.8184 28.6084 28.1833 28.5158 28.2409L28.4787 28.2601Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.4028 27.6068L28.4953 27.7412C28.5045 27.837 28.5045 27.9335 28.4953 28.0293C28.4953 28.0293 28.3657 27.9332 28.3101 27.7796L28.125 27.4531L28.4212 27.6068H28.4028Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.2731 26.5131C29.2731 26.5131 29.4398 27.2044 29.2731 27.2236C29.1065 27.2428 28.9953 27.0124 28.9583 26.974L28.625 26.4362H28.7546L29.236 26.5707L29.2731 26.5131Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.1453 27.8382C28.1453 27.8382 28.0527 27.8382 28.0157 27.7229L27.775 27.4349C27.7048 27.373 27.6426 27.302 27.5898 27.2236C27.5898 27.2236 28.0157 27.5693 28.0527 27.6269C28.0705 27.7543 28.0705 27.8836 28.0527 28.011L28.1453 27.8382Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.7917 27.8379C28.6227 27.7461 28.4768 27.6145 28.3657 27.4538C28.2546 27.281 28.1249 27.1274 28.0879 27.0505C28.0942 26.9931 28.0942 26.9351 28.0879 26.8777H28.1805C28.4234 27.1751 28.6461 27.4895 28.8472 27.8187L28.7917 27.8379Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.9036 27.5308C28.9036 27.5308 28.7554 27.5308 28.6814 27.3387C28.6661 27.3024 28.6582 27.2632 28.6582 27.2235C28.6582 27.1839 28.6661 27.1446 28.6814 27.1083C28.7826 27.2388 28.8695 27.3805 28.9406 27.5308H28.9036Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.07 27.4731C29.07 27.4731 28.8663 27.3003 28.7182 27.0698C28.57 26.8394 28.5886 26.8586 28.5701 26.8586C28.5339 26.8468 28.4951 26.8468 28.459 26.8586V26.7433L28.8108 27.4539V27.6268L29.07 27.4731Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.273 28.0498C28.273 28.0498 28.273 28.0498 28.1804 28.0498C27.8507 27.9333 27.5695 27.7027 27.3842 27.3968L27.125 26.9743L27.2176 26.8591L27.9953 27.7809L28.273 28.0113V28.0498Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2732 28.0489C28.2732 28.0489 28.2732 28.0489 28.1806 28.0489C27.9589 27.959 27.7663 27.8059 27.6251 27.6071C27.4572 27.4231 27.3139 27.2163 27.1992 26.9926V26.839H27.2918L27.8288 27.6648L28.2917 28.0489H28.2732Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.6991 27.6836C28.6009 27.6145 28.5135 27.5303 28.4398 27.4339C28.31 27.293 28.2037 27.1308 28.125 26.9539C28.125 26.9539 28.2176 26.9539 28.2176 26.9539V26.7618H28.3657L28.5509 27.0115C28.599 27.1159 28.6362 27.2253 28.662 27.3379C28.662 27.3379 28.4583 27.1651 28.4398 27.1843C28.4213 27.2035 28.625 27.5683 28.6065 27.5875L28.6991 27.6836Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.4029 27.6072C28.417 27.6508 28.417 27.698 28.4029 27.7416C28.4029 27.7416 28.4029 27.7416 28.2732 27.7416L28.1066 27.4919V27.684C28.1066 27.684 27.9399 27.5303 27.8658 27.4151L27.6621 27.0887C27.6762 27.032 27.6762 26.9725 27.6621 26.9158V26.7046L27.9399 27.0502H28.0325L28.1991 27.3959L28.3658 27.5688L28.4029 27.6072Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.293 27.0885C27.4188 27.3156 27.5678 27.5281 27.7374 27.7222C27.862 27.862 28.0134 27.9732 28.1819 28.0487L27.4967 27.2229L27.293 27.0885Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.0137 27.3387C28.9218 27.2539 28.8409 27.1571 28.773 27.0507C28.6914 26.9243 28.6406 26.7794 28.6248 26.6282C28.6198 26.5323 28.6198 26.4361 28.6248 26.3402C28.726 26.4498 28.8131 26.5724 28.884 26.705C28.884 26.8203 29.0322 26.9739 29.0137 26.9931C28.9952 27.0123 28.8285 26.8779 28.81 26.9931C28.7915 27.1083 28.9952 27.3963 28.9767 27.4155L29.0137 27.3387Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.2729 27.0693C29.2729 27.0693 29.1248 26.9348 29.1063 26.858C29.0976 26.7686 29.0976 26.6786 29.1063 26.5892L29.0137 26.3396V26.0707H29.1247L29.2729 26.2819C29.292 26.3899 29.292 26.5005 29.2729 26.6084C29.2729 26.7813 29.2729 27.0693 29.2729 27.0885V27.0693Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.4583 27.7618C27.3345 27.5981 27.2231 27.4248 27.125 27.2433V26.9937C27.1984 27.2259 27.3331 27.4322 27.5139 27.589C27.6306 27.7246 27.7609 27.847 27.9027 27.9539C27.9027 27.9539 27.9027 28.1267 27.9027 28.1844C27.7526 28.039 27.6105 27.8851 27.4768 27.7235L27.4583 27.7618Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.7922 28.1261C27.7922 28.1261 27.533 27.8765 27.3108 27.6076C27.1768 27.434 27.059 27.2475 26.959 27.0507V26.9547C27.0468 27.1685 27.1521 27.3741 27.2737 27.5693L27.6997 28.1261H27.7922Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2718 28.049L27.7904 27.5305C27.6875 27.4225 27.6002 27.2996 27.5312 27.1656H27.6793C27.7157 27.2722 27.7724 27.3702 27.846 27.4537L28.2718 27.9914V28.049Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.1253 27.4545C28.03 27.3466 27.9433 27.2311 27.8659 27.1088C27.8004 27.0058 27.7445 26.8965 27.6992 26.7824C27.6992 26.7824 27.9215 27.0704 27.9956 27.0897C27.9806 27.1462 27.9806 27.2059 27.9956 27.2625V27.4545H28.1253Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2734 26.5696C28.2873 26.6522 28.2873 26.7367 28.2734 26.8193C28.2734 26.9153 28.2734 26.9153 28.2734 26.9153L28.4216 27.0882L28.6068 27.2418L28.4587 27.0113C28.4587 27.0113 28.3475 26.8577 28.4587 26.7809C28.5698 26.7041 28.6253 26.7809 28.6623 26.7809L28.8661 27.0305C28.8396 26.9236 28.7888 26.8248 28.7179 26.7424L28.4031 26.4928L28.2734 26.5696Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.8839 27.0312C28.8344 26.9186 28.7912 26.8032 28.7543 26.6855C28.7543 26.5511 28.6062 26.2439 28.6062 26.2439C28.6163 26.3203 28.6163 26.3979 28.6062 26.4743C28.6324 26.5684 28.6324 26.6683 28.6062 26.7623H28.4766C28.5127 26.7741 28.5515 26.7741 28.5877 26.7623C28.5877 26.7623 28.5877 26.6279 28.5877 26.6471C28.5877 26.6663 28.5877 26.7816 28.6988 26.8392L28.8283 27.0312H28.8839Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.6074 26.3393C28.6074 26.3393 28.7741 26.5313 28.8482 26.4545C28.9222 26.3777 28.8482 26.1089 28.8482 26.1089C28.8482 26.1089 28.9408 26.1089 28.9778 26.1089C29.0149 26.1089 28.9778 25.9937 28.9778 25.9937C29.0749 26.1338 29.1616 26.2815 29.237 26.4353C29.3032 26.5877 29.3469 26.7496 29.3667 26.9154C29.2778 26.7632 29.2034 26.6024 29.1445 26.4353C29.1445 26.2049 28.9778 26.1089 28.9593 26.1281C28.9381 26.2164 28.9381 26.3086 28.9593 26.3969C28.9941 26.4967 29.0375 26.5931 29.0889 26.685L29.1815 26.973L29.0334 26.7618C29.0334 26.7618 28.9408 26.6658 28.9037 26.6274L28.7741 26.5121H28.626L28.6074 26.3393Z",
                              fill: "#202020"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.0527 27.07C28.1008 27.1705 28.1565 27.2668 28.2194 27.3581L28.4046 27.6077C28.3221 27.5329 28.2477 27.4492 28.1824 27.3581C28.1256 27.2692 28.0819 27.1722 28.0527 27.07Z",
                              fill: "#171717"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M29.1422 27.1279H29.0312C29.0131 27.1971 29.0131 27.27 29.0312 27.3391H29.1237C29.1237 27.3391 29.1237 27.3392 29.1237 27.2047C29.1237 27.0703 29.1237 27.0895 29.1237 27.0703C29.1237 27.0511 29.1237 27.0703 29.1237 27.0703L29.1422 27.1279Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.1812 25.8986H27.0886L26.959 26.1291V26.59L27.1256 26.8396C27.1256 26.9356 27.4219 27.1853 27.4775 27.1853C27.533 27.1853 27.5886 26.9932 27.5886 26.8972C27.5951 26.8013 27.5951 26.7051 27.5886 26.6092L27.7367 26.8204C27.8293 26.8204 27.9034 27.0124 27.9404 27.0124C27.9774 27.0124 28.107 26.7436 28.107 26.7052C28.0165 26.418 27.9114 26.136 27.7922 25.8602H27.6627H27.1256L27.1812 25.8986Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.8847 26.5896V26.8969V27.0889C27.9767 26.9942 28.0409 26.8743 28.0699 26.7432C28.0819 26.5706 28.0819 26.3974 28.0699 26.2248C28.0318 26.0867 28.0318 25.9404 28.0699 25.8023H27.9772L27.8105 26.1479V26.6665L27.8847 26.5896Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.3281 26.3402C27.3281 26.3402 27.3281 26.6474 27.3281 26.7626C27.3555 26.8562 27.3927 26.9464 27.4392 27.0315C27.4392 27.0315 27.5688 26.7435 27.5873 26.6666C27.5518 26.5087 27.5518 26.3445 27.5873 26.1866C27.5873 25.8601 27.5873 25.8217 27.5873 25.8217L27.3837 26.3402H27.3281Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.9029 25.7451C26.7772 25.9204 26.6945 26.1247 26.6621 26.3404C26.6621 26.5517 26.6621 26.4941 26.7547 26.6861C26.7978 26.8498 26.8288 27.0168 26.8474 27.1854V25.7835L26.9029 25.7451Z",
                              fill: "#45392D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.9029 25.8023C26.7942 25.9619 26.7242 26.1463 26.6992 26.34C26.7052 26.4696 26.7434 26.5953 26.8103 26.7049C26.8281 26.858 26.8281 27.0127 26.8103 27.1658H26.9584C27.0207 27.1215 27.0715 27.0622 27.1065 26.9929V26.8201V26.6473V26.5512V26.2248V25.9751L26.9029 25.8023Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.0876 26.339H27.9408C27.9338 26.3077 27.9338 26.2752 27.9408 26.2439L28.1244 26.4532L28.0876 26.339Z",
                              fill: "#DBAD6C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.9401 25.8401C26.8595 26.0277 26.8154 26.23 26.8105 26.4354C26.8349 26.6272 26.8847 26.8146 26.9586 26.9923V26.2626V26.0321V25.8977L26.9401 25.8401Z",
                              fill: "#D2A567"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.3291 25.9173C27.3391 25.968 27.3391 26.0202 27.3291 26.0709C27.3291 26.0709 27.2366 26.1669 27.1996 26.2438C27.1913 26.3203 27.1913 26.3976 27.1996 26.4742C27.2218 26.4179 27.2531 26.3659 27.2921 26.3205C27.3102 26.3897 27.3102 26.4626 27.2921 26.5318C27.2921 26.5318 27.2921 26.5318 27.2921 26.6854C27.2695 26.7539 27.2695 26.8282 27.2921 26.8967V26.7046L27.3847 26.8967C27.3785 26.8457 27.3785 26.794 27.3847 26.743C27.3847 26.743 27.3847 26.5702 27.4958 26.5702C27.6069 26.5702 27.4958 26.5702 27.4958 26.5702C27.4586 26.4451 27.4586 26.3113 27.4958 26.1861C27.4958 26.1861 27.6439 26.1861 27.6254 26.1861L27.4958 25.9941L27.2921 26.1861L27.3291 25.9173Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.0516 26.6855C27.0597 26.7235 27.0597 26.7628 27.0516 26.8007V26.9352C27.0472 26.8456 27.0472 26.7559 27.0516 26.6664C27.0516 26.5512 27.0516 26.4743 27.0516 26.4743C27.0401 26.4109 27.0401 26.3457 27.0516 26.2823C27.0516 26.2823 27.0516 26.1479 27.0516 26.1287C27.0516 26.1095 27.0516 26.1287 27.0516 26.1287V26.2247C27.0443 26.1738 27.0443 26.122 27.0516 26.071L27.2183 25.8406C27.2237 25.8024 27.2237 25.7636 27.2183 25.7254C27.2183 25.7254 27.311 25.7254 27.311 25.8406C27.311 25.9558 27.311 25.8406 27.2183 25.8406C27.1257 25.8406 27.2183 25.8407 27.2183 26.1287C27.2183 26.4167 27.2183 26.3783 27.2183 26.5127L27.0516 26.6855Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.8089 25.9555C27.8183 26.0192 27.8183 26.0839 27.8089 26.1476C27.8089 26.1476 27.8089 26.2436 27.7163 26.3012C27.7094 26.3715 27.7094 26.4422 27.7163 26.5125V26.3972C27.7163 26.3972 27.7163 26.3973 27.7163 26.5317V26.7621V26.6469C27.7163 26.6469 27.7163 26.6469 27.7163 26.5509C27.7163 26.4548 27.7163 26.5509 27.6237 26.4165C27.6173 26.359 27.6173 26.301 27.6237 26.2436L27.7533 26.3589V26.2628V26.0323C27.7533 25.9363 27.7533 25.8595 27.7533 25.8403C27.7624 25.7895 27.7624 25.7375 27.7533 25.6867L27.457 25.8979L27.8089 25.9555Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.6999 25.6297C28.6938 25.7256 28.6938 25.8218 28.6999 25.9177C28.7258 26.0217 28.7567 26.1243 28.7925 26.225C28.7362 26.1291 28.6925 26.0257 28.6628 25.9177C28.6628 25.7833 28.6629 25.6297 28.5517 25.6297C28.4406 25.6297 28.5517 25.6297 28.5517 25.7449C28.5585 25.8717 28.5901 25.9959 28.6444 26.1098C28.6444 26.1098 28.6444 25.9945 28.5333 25.8985C28.5395 25.8411 28.5395 25.7831 28.5333 25.7257C28.5162 25.7819 28.5162 25.8422 28.5333 25.8985C28.5531 25.9736 28.5843 26.0449 28.6258 26.1098H28.5333C28.5283 26.1673 28.5283 26.2251 28.5333 26.2826L28.6258 26.4362L28.5333 26.3402C28.5246 26.4296 28.5246 26.5197 28.5333 26.6091L28.6444 26.8587C28.5746 26.7941 28.5179 26.7158 28.4776 26.6283C28.445 26.3991 28.445 26.1661 28.4776 25.9369L28.5703 25.7833C28.6235 25.6542 28.6608 25.5187 28.6814 25.38C28.7094 25.5044 28.7465 25.6264 28.7925 25.7449C28.8292 25.7517 28.8669 25.7517 28.9036 25.7449L28.6999 25.6297Z",
                              fill: "#1E2121"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.9952 25.5331V25.6676L27.81 25.8404C27.7175 25.8404 27.5878 25.994 27.5508 25.9556L27.736 25.802C27.7958 25.752 27.8407 25.6854 27.8656 25.6099L27.9952 25.5331Z",
                              fill: "#1E2121"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.1254 25.5907C27.1215 25.6483 27.1215 25.7061 27.1254 25.7636C27.1254 25.7636 26.9587 25.7636 26.9217 25.7636C26.9115 25.7195 26.9115 25.6734 26.9217 25.6292H27.0513L27.1439 25.5331L27.1254 25.5907Z",
                              fill: "#1E2121"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.7724 25.3222C28.7986 25.4163 28.8359 25.5065 28.8835 25.5911L28.9946 25.8408C28.9513 25.7779 28.9016 25.7199 28.8465 25.6679H28.7539V25.4951L28.7724 25.3222Z",
                              fill: "#1E2121"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.8652 25.7056H27.0504V25.6096C27.0292 25.6782 27.0292 25.7521 27.0504 25.8208C27.1107 25.8401 27.1753 25.8401 27.2356 25.8208L27.4023 25.6672C27.3865 25.7366 27.3865 25.809 27.4023 25.8784C27.4023 25.9937 27.5134 25.9937 27.5874 25.8784C27.6651 25.8116 27.7336 25.7341 27.7911 25.648L27.8837 25.2063H27.7726H27.643V25.3407H27.5134V25.2447L27.3282 25.4367H27.2171L27.106 25.6096V25.7248V25.936L26.8652 25.7056Z",
                              fill: "#DBAD6C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.8279 25.2448C27.8484 25.3461 27.8484 25.4507 27.8279 25.5521C27.7943 25.6679 27.7443 25.7779 27.6797 25.8786C27.8052 25.7913 27.9072 25.6723 27.976 25.5328C28.008 25.3745 28.008 25.2111 27.976 25.0527L27.7908 25.2448H27.8279Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.0703 25.0337C28.0848 25.1033 28.0848 25.1753 28.0703 25.2449C28.0815 25.3534 28.0815 25.4629 28.0703 25.5714C28.0703 25.5714 28.1629 25.725 28.2184 25.7058C28.274 25.6866 28.3295 25.7058 28.3851 25.533C28.4407 25.3601 28.4777 25.3026 28.4962 25.2834C28.5147 25.2642 28.4962 25.2834 28.4962 25.2834C28.4793 25.3331 28.4793 25.3873 28.4962 25.437C28.4962 25.437 28.5888 25.533 28.6259 25.437C28.6373 25.4061 28.6373 25.3719 28.6259 25.341C28.5944 25.2239 28.5573 25.1085 28.5148 24.9953L28.3851 24.6688V24.5344H28.274L28.1073 24.8224L28.0703 25.0337Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.459 24.7261C28.4783 24.8275 28.4783 24.9319 28.459 25.0334C28.4693 25.1355 28.4693 25.2385 28.459 25.3406C28.4689 25.2385 28.4689 25.1355 28.459 25.0334C28.459 24.9181 28.459 24.8413 28.459 24.8029V24.7261Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.7734 25.3406C28.7831 25.4042 28.7831 25.469 28.7734 25.5326C28.7734 25.5326 28.6623 25.5327 28.6067 25.283C28.5512 25.0334 28.6067 25.0142 28.6067 24.9182C28.5979 24.8545 28.5979 24.7898 28.6067 24.7261H28.7179L28.9216 25.3598L28.7734 25.3406Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2734 25.7247C28.3515 25.664 28.4154 25.5859 28.4603 25.4962C28.5051 25.4064 28.53 25.3073 28.5328 25.2062C28.5255 25.0403 28.4877 24.8774 28.4216 24.7261C28.4462 24.898 28.4462 25.0727 28.4216 25.2446C28.3808 25.3636 28.3313 25.4791 28.2734 25.5902V25.4942C28.2782 25.5389 28.2782 25.584 28.2734 25.6287C28.2778 25.6798 28.2778 25.7312 28.2734 25.7823V25.7247Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.6996 24.5923C28.7138 24.7006 28.7138 24.8105 28.6996 24.9188C28.7101 25.0594 28.7101 25.2007 28.6996 25.3413L28.5515 25.0724C28.5599 24.9958 28.5599 24.9185 28.5515 24.842C28.5515 24.842 28.5515 24.842 28.5515 24.746H28.459C28.459 24.746 28.459 24.7459 28.459 24.6499C28.4704 24.619 28.4704 24.5848 28.459 24.5539H28.57L28.6996 24.5923Z",
                              fill: "#1E2121"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.791 25.7061C26.791 25.7061 26.791 25.5333 26.9391 25.418L27.1243 25.13C27.1625 25.1223 27.1988 25.1064 27.2307 25.0832C27.2626 25.0601 27.2895 25.0302 27.3095 24.9956C27.3503 24.9303 27.3814 24.8591 27.4021 24.7844C27.3721 24.8647 27.3721 24.9537 27.4021 25.034C27.4021 25.13 27.4021 25.034 27.5132 25.034C27.5236 25.1104 27.5236 25.188 27.5132 25.2644C27.5132 25.3797 27.5132 25.5525 27.5132 25.5525C27.5298 25.4572 27.5298 25.3597 27.5132 25.2644C27.5132 25.2644 27.5132 25.2644 27.5132 25.3604C27.4887 25.4096 27.4575 25.4549 27.4206 25.4949C27.429 25.4311 27.429 25.3665 27.4206 25.3028C27.4206 25.1876 27.4206 25.1876 27.4206 25.1876C27.4262 25.1559 27.4262 25.1234 27.4206 25.0916V24.938L27.3095 25.034C27.3095 25.034 27.2169 25.034 27.1984 25.1492V25.3604C27.2054 25.4371 27.2054 25.5142 27.1984 25.5909V25.3989C27.1984 25.2837 27.291 25.13 27.1984 25.1108C27.1058 25.0916 27.1984 25.1108 27.1984 25.1108L27.0317 25.3413C27.0317 25.4565 27.0317 25.6101 26.9391 25.6101L26.791 25.7061Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.7715 24.4196C28.7828 24.4398 28.7888 24.4628 28.7888 24.4862C28.7888 24.5096 28.7828 24.5326 28.7715 24.5529C28.7111 24.5675 28.6483 24.5675 28.5879 24.5529C28.5879 24.5529 28.5879 24.4386 28.5879 24.4386L28.7715 24.4196Z",
                              fill: "#874F20"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.1794 24.7267V24.8995C27.1794 25.0147 27.0497 25.0915 27.0682 25.0915C27.0867 25.0915 27.0682 25.0915 27.1794 25.0915C27.2905 25.0915 27.2719 24.6883 27.2719 24.6883L27.1794 24.7267Z",
                              fill: "#B27129"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2739 24.5158C28.2739 24.5158 28.2739 25.0535 28.0888 25.0535C27.9036 25.0535 27.8851 24.7654 27.8851 24.7654C27.8851 24.7654 27.8851 25.1303 27.6814 25.1303C27.4777 25.1303 27.5148 24.8615 27.5333 24.8039C27.5147 24.9041 27.4698 24.9971 27.4037 25.0727C27.237 25.2071 27.1259 25.0727 27.1074 25.0727C27.192 24.9605 27.2492 24.8287 27.2741 24.6887C27.2741 24.6887 27.2741 24.5542 27.3852 24.5542C27.4962 24.5542 27.6444 24.5542 27.6444 24.5542L27.7555 24.4006C27.8015 24.361 27.8339 24.3072 27.848 24.2469L28.0703 24.439V24.5926L28.2739 24.5158Z",
                              fill: "#DBAD6C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.6246 23.9975C27.6246 23.9975 27.7542 24.2088 27.8468 24.324C27.8468 24.324 27.8468 24.324 27.8468 24.42C27.8237 24.4711 27.8117 24.5268 27.8117 24.5832C27.8117 24.6397 27.8237 24.6954 27.8468 24.7465C27.8363 24.6959 27.8363 24.6435 27.8468 24.5928C27.8468 24.4968 27.8468 24.4776 27.8468 24.4776C27.8687 24.6457 27.8997 24.8124 27.9394 24.9769C27.9617 24.85 27.9617 24.7198 27.9394 24.5928C27.9394 24.4392 27.9394 24.5928 27.9394 24.5928C27.9394 24.5928 28.0875 24.8425 28.1986 24.8041C28.3097 24.7657 28.2912 24.5736 28.2912 24.5352C28.2687 24.4303 28.2377 24.3275 28.1986 24.228L27.7172 23.9015C27.7124 23.9462 27.7124 23.9912 27.7172 24.0359H27.4395L27.6246 23.9975Z",
                              fill: "#B27129"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2728 23.9388V24.1117C28.2728 24.2269 28.2728 24.6494 28.2728 24.6302C28.1948 24.6154 28.1234 24.575 28.0692 24.5149C28.0692 24.5149 28.0692 24.2461 28.0692 24.1885C28.0258 24.1178 27.9944 24.0398 27.9766 23.9581V23.8044H28.0876L28.2543 23.9964L28.2728 23.9388Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2739 23.825L28.4776 24.1514L28.6628 24.4203C28.6282 24.4555 28.5817 24.4752 28.5332 24.4752C28.4847 24.4752 28.4382 24.4555 28.4036 24.4203C28.4036 24.4203 28.4036 24.2474 28.2925 24.0362C28.2401 23.9124 28.1486 23.8109 28.0332 23.7481H28.1258L28.2739 23.825Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2741 23.6508C28.3768 23.7155 28.4602 23.8086 28.5149 23.9196L28.7001 24.2653C28.7469 24.337 28.8029 24.4015 28.8667 24.4573C28.8667 24.4573 28.7742 24.4573 28.7556 24.3229L28.5519 23.9772C28.4961 23.9131 28.434 23.8552 28.3667 23.8044L28.4963 23.9965C28.5398 24.074 28.5711 24.1583 28.589 24.2461C28.589 24.2461 28.5889 24.2461 28.4963 24.0733C28.4037 23.9005 28.2741 23.8044 28.2556 23.8236C28.2881 23.9123 28.3317 23.9962 28.3852 24.0733C28.4296 24.1572 28.4609 24.2479 28.4778 24.3421L28.3482 24.1117C28.3077 24.0464 28.2577 23.9882 28.2 23.9388L28.1074 23.7853C28.1299 23.7987 28.1555 23.8058 28.1815 23.8058C28.2075 23.8058 28.233 23.7987 28.2556 23.7853C28.3025 23.7587 28.3411 23.7187 28.3667 23.67L28.2741 23.6508Z",
                              fill: "#1E2121"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.6982 23.9973C27.7591 24.0121 27.8225 24.0121 27.8834 23.9973C27.892 24.0352 27.892 24.0747 27.8834 24.1125C27.9032 24.1749 27.9032 24.2422 27.8834 24.3046C27.8834 24.3046 27.8834 24.1893 27.8834 24.1509L27.6797 23.9781L27.6982 23.9973Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.7538 24.4196C27.7718 24.5276 27.7718 24.638 27.7538 24.7461C27.729 24.8862 27.6718 25.0179 27.5872 25.1301C27.5803 25.0214 27.5803 24.9124 27.5872 24.8037V24.9381C27.5872 24.9381 27.5872 24.746 27.5872 24.7268L27.7353 24.5732L27.7538 24.4196Z",
                              fill: "#B27129"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.5326 24.4191C27.485 24.4383 27.432 24.4383 27.3844 24.4191V24.5151C27.3844 24.5151 27.3844 24.5151 27.3844 24.6111C27.3282 24.7047 27.2664 24.7945 27.1992 24.88C27.2832 24.8216 27.3581 24.7504 27.4215 24.6687C27.4215 24.6687 27.4215 24.5343 27.4215 24.5151C27.4215 24.4959 27.4215 24.5151 27.4215 24.5151C27.417 24.5918 27.417 24.6688 27.4215 24.7456V24.5151C27.4287 24.4384 27.4287 24.3612 27.4215 24.2846H27.3103C27.3231 24.3609 27.3231 24.4388 27.3103 24.5151L27.5326 24.4191Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2719 23.5163C28.2898 23.5484 28.2992 23.5848 28.2992 23.6219C28.2992 23.659 28.2898 23.6955 28.2719 23.7276H28.1608H28.0126L27.6979 23.5931H27.5312H27.772L28.0126 23.6891H28.1238H28.3274L28.2719 23.5163Z",
                              fill: "#DBAD6C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M28.2732 23.5171C28.2803 23.5486 28.2803 23.5815 28.2732 23.6131C28.2478 23.6282 28.2191 23.6363 28.1898 23.6363C28.1605 23.6363 28.1318 23.6282 28.1065 23.6131L27.8102 23.4978C27.7245 23.4816 27.6366 23.4816 27.5509 23.4978C27.4583 23.4978 27.5509 23.4978 27.5509 23.4978C27.6672 23.4754 27.7865 23.4754 27.9028 23.4978C28.0032 23.5439 28.1091 23.5763 28.2176 23.5939C28.3472 23.5939 28.3657 23.5939 28.3657 23.5939L28.2732 23.5171Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.94 23.805C27.94 23.805 28.0511 23.9202 27.94 24.0163L27.7362 23.9202L27.3844 23.7666H27.1992H27.4214H27.6622L27.8289 23.9202L27.94 23.805Z",
                              fill: "#DBAD6C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.6994 23.9772C27.6994 23.9772 27.9031 24.2269 27.8476 24.3229L27.3846 24.0157L27.2365 24.3037L26.8477 24.0924C26.9713 24.0051 27.0888 23.9088 27.1995 23.8044H27.3661L27.6254 23.9004L27.6994 23.9772Z",
                              fill: "#DBAD6C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.5869 23.5747C27.6823 23.597 27.7754 23.6291 27.8646 23.6707C27.9443 23.6843 28.0257 23.6843 28.1054 23.6707C28.0516 23.6913 27.9925 23.6913 27.9387 23.6707C27.8779 23.6496 27.8214 23.6171 27.7721 23.5747L27.5684 23.4787L27.5869 23.5747Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.9398 23.958C27.9398 23.958 28.0323 23.958 27.9398 23.958C27.898 23.9742 27.8519 23.9742 27.8101 23.958C27.8101 23.958 27.699 23.958 27.662 23.958C27.625 23.958 27.662 23.8428 27.4583 23.8044H27.2176H27.125H27.3842H27.6065H27.7546L27.9398 23.958Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.5153 24.1124V24.3237V24.4198C27.5153 24.4198 27.5153 24.4198 27.5153 24.3237C27.5153 24.2277 27.3672 24.3237 27.3672 24.3237C27.3897 24.2679 27.4286 24.2209 27.4783 24.1893H27.645L27.5153 24.1124Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.2559 23.6699C27.2984 23.6813 27.3429 23.6813 27.3854 23.6699C27.4403 23.6568 27.4972 23.6568 27.5521 23.6699H27.6447H27.8483C27.9409 23.6699 28.015 23.7852 27.9965 23.7852H27.8483C27.7689 23.7686 27.6871 23.7686 27.6077 23.7852C27.4907 23.7722 27.3728 23.7722 27.2559 23.7852V23.6699Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.83 24.2648C27.7901 24.2866 27.7456 24.298 27.7004 24.298C27.6552 24.298 27.6107 24.2866 27.5708 24.2648V24.1495L27.3672 24.0151C27.4701 24.0492 27.5694 24.0942 27.6634 24.1495C27.7319 24.1833 27.7944 24.2288 27.8485 24.2839L27.83 24.2648Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.8471 24.2662C27.7367 24.1408 27.5961 24.048 27.4398 23.9973H27.3102H27.125C27.1912 23.9753 27.2624 23.9753 27.3287 23.9973L27.2176 24.1701C27.2176 24.1701 27.2176 24.0549 27.3842 24.0741C27.414 24.0623 27.447 24.0623 27.4768 24.0741C27.4768 24.0741 27.3842 23.9781 27.4768 23.9781C27.5686 23.9916 27.6568 24.0243 27.736 24.0741L27.9582 24.2086L27.8471 24.2662Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.3658 24.0359C27.4295 24.0537 27.4849 24.0945 27.5222 24.1508C27.5596 24.207 27.5764 24.2752 27.5697 24.3432C27.5697 24.5928 27.3844 24.5544 27.3658 24.4584C27.3473 24.3624 27.3658 24.4584 27.4585 24.4584C27.5511 24.4584 27.4585 24.3624 27.4585 24.2664C27.4707 24.236 27.477 24.2033 27.477 24.1703C27.477 24.1374 27.4707 24.1048 27.4585 24.0743H27.3658V24.0359Z",
                              fill: "#DBAD6C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4217 23.4399C26.4217 23.4399 26.4217 23.4399 26.4217 23.632C26.3737 23.7586 26.3048 23.8756 26.2181 23.9776C26.0329 24.1889 25.9589 24.1889 25.9774 24.2658H26.0885L26.4217 23.7664V23.4591V23.4399Z",
                              fill: "#6C3F18"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.1958 23.0741C27.2396 23.2112 27.2396 23.3594 27.1958 23.4966C27.1958 23.7846 26.8255 24.0151 26.8255 24.0151L26.307 24.3991H26.0293V24.3031L26.2145 24.1111L26.344 23.9383C26.3474 23.8679 26.3474 23.7974 26.344 23.727C26.353 23.6827 26.353 23.6369 26.344 23.5926V23.7462V23.919L26.4922 23.823L26.6588 23.727C26.6588 23.727 26.6588 23.727 26.7514 23.727C26.7647 23.6187 26.7647 23.5089 26.7514 23.4006V23.247C26.7648 23.2972 26.7648 23.3503 26.7514 23.4006V23.631V23.535V23.4198C26.7597 23.3689 26.7597 23.317 26.7514 23.2661L27.1958 23.0741Z",
                              fill: "#DBAD6C"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.2551 24.4196C27.2649 24.4405 27.27 24.4635 27.27 24.4868C27.27 24.5101 27.2649 24.5331 27.2551 24.554C27.2551 24.6693 27.2551 24.7076 27.1255 24.7076V24.5732L27.0144 24.4772H26.8848H27.0144H27.1996L27.2551 24.4196Z",
                              fill: "#904720"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.1617 24.4201C27.1918 24.4304 27.2243 24.4304 27.2544 24.4201C27.2695 24.3975 27.2776 24.3707 27.2776 24.3433C27.2776 24.3158 27.2695 24.289 27.2544 24.2665V24.3625C27.2544 24.3625 27.2544 24.2665 27.1247 24.2665C27.1022 24.253 27.0767 24.2458 27.0506 24.2458C27.0246 24.2458 26.9991 24.253 26.9766 24.2665C26.9766 24.2665 26.9766 24.2665 26.9766 24.2665H27.0877L27.1617 24.4201Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4203 24.0729H26.5499L26.8091 23.9768H26.9573C27.0265 23.9246 27.085 23.8587 27.1294 23.7829C27.1739 23.7071 27.2035 23.6229 27.2165 23.5352C27.2362 23.408 27.2362 23.2783 27.2165 23.1511C27.2886 23.2508 27.3276 23.3721 27.3276 23.4967C27.3276 23.6214 27.2886 23.7427 27.2165 23.8424C27.1335 23.9666 27.0263 24.0713 26.9017 24.1496C26.9017 24.1496 27.1795 24.1496 27.198 24.1496C27.2126 24.1794 27.2202 24.2123 27.2202 24.2457C27.2202 24.2791 27.2126 24.312 27.198 24.3417C27.198 24.3417 27.3646 24.3417 27.3831 24.4569C27.4016 24.5721 27.198 24.4569 27.0684 24.4569C26.9867 24.4737 26.914 24.5217 26.8647 24.5913C26.8647 24.5913 26.8647 24.5913 26.698 24.5913C26.5314 24.5913 26.5129 24.5913 26.4388 24.5913C26.3647 24.5913 26.1425 24.5913 26.1055 24.4761L26.2536 24.3033C26.2536 24.1689 26.4203 24.1881 26.4203 24.1881V24.0729Z",
                              fill: "#904720"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.9961 23.4207C27.0525 23.3629 27.1022 23.2984 27.1442 23.2286V23.075C27.1591 23.1381 27.1591 23.204 27.1442 23.267L27.0146 23.4399L26.9961 23.4207Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.9766 23.1706C26.9766 23.1706 27.0692 23.5354 26.9766 23.6891C26.8278 23.825 26.659 23.9352 26.4766 24.0156C26.6422 23.9264 26.7827 23.794 26.884 23.6315C26.9499 23.5224 26.9821 23.3951 26.9766 23.2666V23.1706Z",
                              fill: "#904720"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.5527 24.0932C26.6257 24.1119 26.7019 24.1119 26.7749 24.0932L26.96 23.9589H26.8304C26.8057 24.0067 26.7714 24.0485 26.7299 24.0816C26.6884 24.1147 26.6407 24.1383 26.5897 24.1508L26.5527 24.0932Z",
                              fill: "#1E2121"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.8652 23.6322C26.9442 23.5288 26.9837 23.3989 26.9764 23.2673C26.9764 23.0176 26.8838 23.0561 26.8838 23.0561C26.8838 23.0561 26.8838 23.0561 26.8838 23.3057C26.898 23.4141 26.898 23.5239 26.8838 23.6322H26.8652Z",
                              fill: "#1E2121"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.0137 23.6707C27.078 23.6481 27.1354 23.6084 27.1803 23.5555C27.1931 23.4793 27.1931 23.4013 27.1803 23.3251C27.1897 23.3887 27.1897 23.4535 27.1803 23.5171L27.0321 23.6707H27.0137Z",
                              fill: "#1E2121"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.9395 24.4188C26.9395 24.4188 26.9395 24.2856 27.068 24.4188C27.1966 24.5521 27.068 24.4188 27.068 24.4188C27.0263 24.4043 26.9812 24.4043 26.9395 24.4188Z",
                              fill: "#1E2121"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.6992 24.227H26.9955L27.2177 24.131C27.1538 24.2067 27.0788 24.2715 26.9955 24.3231C26.9167 24.3451 26.8336 24.3451 26.7548 24.3231C26.7548 24.3231 27.014 24.2078 27.0325 24.1502C26.9219 24.166 26.8098 24.166 26.6992 24.1502V24.227Z",
                              fill: "#1E2121"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4213 23.9393C26.4415 23.9591 26.4576 23.9829 26.4685 24.0093C26.4795 24.0357 26.4852 24.0642 26.4852 24.0929C26.4852 24.1217 26.4795 24.1502 26.4685 24.1766C26.4576 24.2031 26.4415 24.2269 26.4213 24.2466C26.3835 24.2748 26.3382 24.2899 26.2917 24.2899C26.2452 24.2899 26.1999 24.2748 26.1621 24.2466",
                              fill: "white"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4214 23.9589C26.4554 23.9948 26.4744 24.043 26.4744 24.0932C26.4744 24.1435 26.4554 24.1918 26.4214 24.2276C26.3909 24.256 26.3513 24.2717 26.3103 24.2717C26.2693 24.2717 26.2298 24.256 26.1992 24.2276",
                              fill: "#F16E16"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2909 24.0547C26.299 24.0691 26.3032 24.0855 26.3032 24.1022C26.3032 24.1189 26.299 24.1354 26.2909 24.1498H26.1992",
                              fill: "black"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4182 23.7861C26.4973 23.71 26.5494 23.6085 26.5663 23.4979C26.5828 23.4091 26.5828 23.3179 26.5663 23.2291V23.3636V23.5748H26.696C26.762 23.404 26.7935 23.221 26.7886 23.0371C26.7886 23.0371 26.7886 23.0371 26.7886 23.3636C26.7883 23.445 26.763 23.5243 26.7164 23.5898C26.6698 23.6554 26.6042 23.704 26.5293 23.7284C26.3952 23.805 26.2906 23.927 26.233 24.0741C26.233 24.1701 26.0478 24.3045 26.0293 24.3429C26.0793 24.2704 26.1226 24.1933 26.1589 24.1125C26.1973 24.0286 26.2472 23.951 26.3071 23.882V23.7668L26.4182 23.7861Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4219 23.9009C26.4319 23.8116 26.4319 23.7213 26.4219 23.632C26.4355 23.5687 26.4355 23.5032 26.4219 23.4399C26.4219 23.4399 26.4219 23.4399 26.4219 23.632C26.4219 23.824 26.4219 23.8433 26.4219 23.9009Z",
                              fill: "#904720"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.625 23.67C26.6456 23.5947 26.6456 23.5149 26.625 23.4396C26.644 23.3705 26.644 23.2974 26.625 23.2284C26.625 23.2284 26.6251 23.2283 26.7362 23.4396C26.8473 23.6508 26.7361 23.6124 26.6435 23.67H26.625Z",
                              fill: "#4D2A15"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.0682 24.4197C26.0569 24.3822 26.0569 24.342 26.0682 24.3045C26.0861 24.2359 26.1251 24.1752 26.1793 24.1317C26.2718 24.0655 26.3428 23.9717 26.3829 23.8628C26.4121 23.8067 26.4273 23.744 26.4273 23.6803C26.4273 23.6166 26.4121 23.5539 26.3829 23.4979C26.409 23.5515 26.4225 23.6107 26.4225 23.6707C26.4225 23.7307 26.409 23.79 26.3829 23.8436C26.3148 23.9667 26.2272 24.077 26.1238 24.17C26.0312 24.17 26.0313 24.2661 26.0313 24.3045L26.0682 24.4197Z",
                              fill: "#AB6D29"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.144 24.7452C27.1575 24.7256 27.1648 24.7021 27.1648 24.678C27.1648 24.6539 27.1575 24.6303 27.144 24.6108C27.0956 24.5958 27.0441 24.5958 26.9958 24.6108H26.8477C26.8728 24.6482 26.9041 24.6807 26.9402 24.7067C26.9402 24.7067 27.0513 24.7067 27.0884 24.7067C27.1012 24.7506 27.1012 24.7974 27.0884 24.8412L27.144 24.7452Z",
                              fill: "#6C4119"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.1443 24.7461C27.1443 24.7461 27.2739 24.7461 27.2739 24.5924V24.4196C27.2739 24.4196 27.2739 24.6692 27.0332 24.65L27.1443 24.7461Z",
                              fill: "#6C4119"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2741 24.7259H26.5704V24.6298V24.4955H26.3482L26.1074 24.6683L26.2741 24.7259Z",
                              fill: "#BF802D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M27.0149 24.6302V24.5342H26.7927H26.6631C26.649 24.5427 26.6331 24.5471 26.6168 24.5471C26.6006 24.5471 26.5845 24.5427 26.5705 24.5342H26.3483H26.2001H26.0705L25.9594 24.6495C25.8919 24.6879 25.8325 24.74 25.7848 24.8027C25.7371 24.8653 25.702 24.9373 25.6816 25.0144C25.6816 25.2448 26.0705 25.5905 26.2187 25.4176C26.3668 25.2448 25.9965 25.2448 26.0335 25.1103C26.051 25.0342 26.0942 24.9672 26.1554 24.9213C26.2166 24.8755 26.2916 24.854 26.3668 24.8607C26.4616 24.8626 26.5538 24.8284 26.626 24.7647C26.6698 24.7255 26.7257 24.704 26.7835 24.704C26.8413 24.704 26.8971 24.7255 26.9409 24.7647C27.052 24.8607 26.552 24.976 26.552 24.976C26.552 24.976 27.1631 24.7647 27.126 24.6495L27.0149 24.6302Z",
                              fill: "#F9C83A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.9414 25.3385C25.8762 25.3317 25.813 25.3112 25.7557 25.2781C25.6984 25.2451 25.6482 25.2003 25.6081 25.1465C25.5741 25.1118 25.548 25.0697 25.532 25.0231C25.516 24.9765 25.5103 24.9267 25.5156 24.8776C25.5522 24.7253 25.6454 24.5941 25.7748 24.5127C25.7748 24.5127 25.8674 24.3975 25.9044 24.3975H26.0341H26.1822H26.4044H26.8674C26.8674 24.5319 26.2933 24.7048 26.2933 24.7048V24.6088C26.4229 24.6088 26.6637 24.5127 26.6822 24.4551C26.628 24.4374 26.5697 24.4374 26.5155 24.4551H26.3674C26.2887 24.4781 26.2054 24.4781 26.1266 24.4551C26.0563 24.4483 25.9859 24.4678 25.9282 24.51C25.8704 24.5523 25.8292 24.6146 25.8119 24.6856C25.8119 24.82 25.9785 24.9736 25.9785 24.9736C26.0252 24.9787 26.068 25.0028 26.0975 25.0406C26.127 25.0784 26.1408 25.1269 26.1359 25.1752C26.131 25.2236 26.1077 25.268 26.0713 25.2987C26.0348 25.3293 25.9881 25.3436 25.9414 25.3385ZM25.7933 24.5319C25.6677 24.6088 25.575 24.7324 25.534 24.8776C25.5351 24.9696 25.568 25.0582 25.6267 25.1272C25.7032 25.2316 25.8163 25.3006 25.9414 25.3193H26.0341C26.0341 25.3193 25.8119 25.1272 25.8674 24.9928C25.923 24.8584 26.0155 24.7624 26.2007 24.7432C26.3859 24.724 26.3674 24.7432 26.4229 24.7432C26.4773 24.7267 26.5352 24.7267 26.5896 24.7432C26.6189 24.7305 26.6504 24.724 26.6822 24.724C26.714 24.724 26.7454 24.7305 26.7748 24.7432C26.7748 24.8392 26.46 24.916 26.3674 24.9352C26.5155 24.9352 26.8859 24.7432 26.9229 24.6471H26.7007H26.5711H26.4229H26.2193H26.0711H25.9414L25.8303 24.7624L25.7933 24.5319Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8471 25.1663C25.8471 25.1663 25.5879 25.1663 25.6064 24.8782C25.6118 24.7976 25.6415 24.7208 25.6914 24.6588C25.7413 24.5967 25.8087 24.5525 25.8841 24.5325C25.8841 24.5325 25.8841 24.3981 25.8841 24.3789C25.9066 24.3654 25.9322 24.3583 25.9582 24.3583C25.9842 24.3583 26.0098 24.3654 26.0323 24.3789H26.1434C26.1434 24.3789 25.699 24.5709 25.699 24.8398C25.699 25.1087 25.699 25.051 25.699 25.051L25.8471 25.1663Z",
                              fill: "#FCF3D8"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.9979 24.5919C26.9979 24.4959 26.8497 24.4767 26.7571 24.4767H26.4979H26.3497C26.2571 24.4767 26.0534 24.323 26.0164 24.3422C26.0164 24.3422 26.0164 24.3422 25.9238 24.3422C25.8312 24.3422 25.9238 24.1886 26.0719 24.1886C26.2201 24.1886 26.4423 24.3231 26.5349 24.3231C26.6275 24.3231 26.683 24.3231 26.8127 24.3231C26.9423 24.3231 27.0904 24.3231 27.0904 24.4959L26.9979 24.5919Z",
                              fill: "#FDEAAF"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3125 24.7645H26.4976H26.6642L26.5161 24.8605H26.3495L26.3125 24.7645Z",
                              fill: "#513625"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.9601 25.3224C25.8666 25.3172 25.7765 25.2839 25.7009 25.2264C25.6185 25.1581 25.5599 25.0636 25.5343 24.9575C25.5269 24.8979 25.5331 24.8373 25.5524 24.7806C25.5717 24.7239 25.6035 24.6726 25.6454 24.631C25.7935 24.4774 25.812 24.5158 25.8305 24.535L25.7009 24.6502V24.7654V24.8615V24.9767V25.1111L25.9046 25.2264L26.0342 25.3224H25.9601Z",
                              fill: "#F9C83A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.3109 24.63C26.2037 24.6531 26.0983 24.6852 25.9961 24.726H26.3665C26.4776 24.726 26.7183 24.5916 26.7554 24.726C26.7924 24.8605 26.422 24.8989 26.422 24.8989H26.7184H26.8665L26.7369 24.7836H26.5146H26.422H26.2924L26.3109 24.63Z",
                              fill: "#F9C83A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8666 25.0715C25.874 25.1111 25.8893 25.1487 25.9117 25.1818C25.934 25.2149 25.9628 25.2427 25.9962 25.2635H25.8666C25.7555 25.2635 25.6073 25.2635 25.5332 24.9179V25.0331L25.6258 25.1291H25.774H25.8666L25.774 25.0331L25.6628 24.841L25.8666 25.0715Z",
                              fill: "#8F4620"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4207 24.9748L26.3105 24.8607L26.4023 25.0129L26.4207 24.9748Z",
                              fill: "#FCCA3D"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.8275 27.6058L26.6237 27.721H26.4941H26.5867H26.6978L26.8275 27.6058Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.698 27.3766C26.7124 27.4135 26.7124 27.4548 26.698 27.4918L26.5684 27.6454L26.6795 27.511V27.415C26.6939 27.378 26.6939 27.3367 26.6795 27.2997L26.698 27.3766Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.5124 27.281C26.5124 27.281 26.5124 27.281 26.5124 27.3963C26.4887 27.4577 26.4576 27.5158 26.4199 27.5691C26.4683 27.4692 26.5115 27.3666 26.5495 27.2619C26.5581 27.224 26.5581 27.1845 26.5495 27.1467L26.5124 27.281Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4199 27.2608C26.4304 27.3114 26.4304 27.3638 26.4199 27.4144C26.4199 27.4144 26.4199 27.5105 26.4199 27.5681L26.5124 27.3376C26.5124 27.3376 26.5124 27.2416 26.5124 27.184L26.4199 27.2608Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2168 27.261C26.2269 27.3181 26.2269 27.3767 26.2168 27.4338V27.645C26.2168 27.645 26.2168 27.549 26.2168 27.5106C26.2229 27.4211 26.2229 27.3313 26.2168 27.2418V27.261Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.0692 27.28V27.4145C26.0779 27.4524 26.0779 27.4918 26.0692 27.5297C26.0629 27.6 26.0629 27.6707 26.0692 27.741C26.0692 27.741 26.0692 27.645 26.0692 27.6065V27.3569V27.28Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.9777 27.2986V27.4714V27.6442C25.9736 27.5611 25.9736 27.4777 25.9777 27.3946C25.9852 27.3308 25.9852 27.2663 25.9777 27.2026V27.2986Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.8474 27.2999C25.8645 27.3561 25.8645 27.4165 25.8474 27.4727C25.8474 27.4727 25.8474 27.5688 25.7363 27.6072C25.8078 27.5542 25.8704 27.4893 25.9215 27.4151C25.939 27.3524 25.939 27.2858 25.9215 27.223L25.8474 27.2999Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.7722 27.2793C25.7793 27.3303 25.7793 27.3821 25.7722 27.433L25.6797 27.529C25.743 27.4957 25.7996 27.45 25.8463 27.3946C25.8853 27.3351 25.9164 27.2706 25.9388 27.2026L25.7722 27.2793Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M25.5879 27.1257L25.7164 26.9924L25.5879 27.1257Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.4199 25.3403L26.5496 25.2442L26.6792 25.1483L26.5496 25.2442H26.4385L26.4199 25.3403Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2539 25.2067L26.5131 25.0147L26.2539 25.2067Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.1435 25.072L26.2916 24.9568H26.4027H26.2731L26.125 25.072H26.1435Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.0508 24.9939L26.1793 24.8988H26.2712L26.0508 25.0701V24.9939Z",
                              fill: "#816C2A"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d:
                                "M26.2543 24.7261L26.4395 24.9373C26.529 25.0291 26.5819 25.1526 26.5876 25.283C26.5618 25.4418 26.4909 25.5889 26.3839 25.7055C26.2101 25.9039 26.0178 26.084 25.8099 26.2432C25.7261 26.3165 25.6514 26.4003 25.5877 26.4928C25.5196 26.5727 25.4804 26.6745 25.4766 26.7809C25.4876 26.8826 25.5192 26.9808 25.5692 27.069C25.5979 27.1137 25.6363 27.1509 25.6813 27.1776C25.7263 27.2043 25.7766 27.2197 25.8284 27.2226H26.2913C26.3571 27.2208 26.4225 27.2336 26.4832 27.26C26.5439 27.2865 26.5984 27.3262 26.6431 27.3763C26.7441 27.5131 26.7905 27.685 26.7727 27.8564C26.7727 27.9908 26.7727 28.1252 26.7727 28.202C26.7727 28.2788 26.7727 28.298 26.7727 28.3172C26.7953 28.1452 26.7953 27.9708 26.7727 27.7987C26.7811 27.6195 26.7287 27.4428 26.6246 27.2994C26.5763 27.2488 26.5185 27.2091 26.4548 27.1826C26.3911 27.1562 26.3229 27.1437 26.2543 27.1458H25.7914C25.696 27.126 25.6106 27.0715 25.5506 26.9922C25.5237 26.9047 25.5237 26.8108 25.5506 26.7233C25.5596 26.5937 25.612 26.4714 25.6988 26.3776C25.8778 26.1907 26.0697 26.0175 26.2728 25.8591C26.466 25.7012 26.5975 25.4761 26.6431 25.2254C26.6323 25.0717 26.5662 24.9277 26.4579 24.8221C26.4019 24.7524 26.34 24.6881 26.2728 24.6301L26.2543 24.7261Z",
                              fill: "#78732E"
                            }
                          })
                        ])
                      ])
                    ]
                  )
                : _vm._e(),
              _vm._v(" "),
              _vm.idiomas.some(function(i) {
                return i.diminutivo === "arg"
              })
                ? _c(
                    "a",
                    {
                      staticClass: "Argentina",
                      attrs: {
                        href:
                          "/cursos/" +
                          _vm.idiomas.find(function(i) {
                            return i.diminutivo === "arg"
                          }).nombreURL
                      }
                    },
                    [
                      _c("g", { attrs: { transform: "translate(240,450)" } }, [
                        _c("path", {
                          attrs: {
                            d:
                              "M50.663 44.7804L28.5194 74.9585L6.33699 44.7804C3.32729 40.6831 1.51225 35.8318 1.09347 30.7653C0.674695 25.6987 1.66858 20.6152 3.96473 16.0795C6.26088 11.5437 9.76941 7.7332 14.1006 5.07122C18.4318 2.40925 23.4162 1 28.5 1C33.5838 1 38.5682 2.40925 42.8994 5.07122C47.2306 7.7332 50.7391 11.5437 53.0353 16.0795C55.3314 20.6152 56.3253 25.6987 55.9065 30.7653C55.4878 35.8318 53.6727 40.6831 50.663 44.7804Z",
                            fill: "#FAB500"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M50.663 44.7804L28.5194 74.9585L6.33699 44.7804C3.32729 40.6831 1.51225 35.8318 1.09347 30.7653C0.674695 25.6987 1.66858 20.6152 3.96473 16.0795C6.26088 11.5437 9.76941 7.7332 14.1006 5.07122C18.4318 2.40925 23.4162 1 28.5 1C33.5838 1 38.5682 2.40925 42.8994 5.07122C47.2306 7.7332 50.7391 11.5437 53.0353 16.0795C55.3314 20.6152 56.3253 25.6987 55.9065 30.7653C55.4878 35.8318 53.6727 40.6831 50.663 44.7804V44.7804Z",
                            stroke: "#2F6A69",
                            "stroke-width": "0.83",
                            "stroke-miterlimit": "10"
                          }
                        }),
                        _vm._v(" "),
                        _c(
                          "g",
                          {
                            staticStyle: { "mix-blend-mode": "multiply" },
                            attrs: { opacity: "0.2" }
                          },
                          [
                            _c("path", {
                              attrs: {
                                d:
                                  "M38.4934 84.2352C38.4934 85.6907 34.0298 86.8551 28.5181 86.8551C23.0065 86.8551 18.5234 85.6907 18.5234 84.2352C18.5234 82.7796 23.0065 81.654 28.5181 81.654C34.0298 81.654 38.4934 82.7796 38.4934 84.2352Z",
                                fill: "#00792D"
                              }
                            })
                          ]
                        ),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M50.1156 21.3319H7.66992V21.2346C8.15909 19.8839 8.77117 18.581 9.49847 17.3423C9.79026 16.8558 10.1016 16.3887 10.4323 15.9217C13.5192 11.5325 18.0727 8.39191 23.271 7.0668C26.59 6.23323 30.0548 6.16444 33.4043 6.86564C36.7537 7.56685 39.9004 9.01972 42.6069 11.1147C44.3786 12.4812 45.933 14.1085 47.2171 15.9411L47.4311 16.233C47.684 16.6028 47.9174 16.992 48.1508 17.3618C48.9178 18.5964 49.569 19.8994 50.0961 21.254C50.0961 21.254 50.1156 21.293 50.1156 21.3319Z",
                            fill: "#73AADC"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M50.116 36.5505V36.6672C49.6023 38.0278 48.9505 39.332 48.1707 40.5595C47.8984 41.0071 47.6261 41.4158 47.3343 41.8244L46.8285 42.525C43.2323 47.2622 37.9113 50.3864 32.0237 51.2174C26.1362 52.0485 20.1588 50.5191 15.393 46.9622C13.7054 45.6954 12.1999 44.2023 10.9189 42.525L10.4131 41.8244C10.1184 41.4177 9.84566 40.9955 9.59613 40.5595C8.81723 39.3315 8.16544 38.0274 7.65086 36.6672C7.64242 36.6288 7.64242 36.5889 7.65086 36.5505H50.116Z",
                            fill: "#73AADC"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M51.4391 28.9416C51.4363 29.8455 51.3844 30.7485 51.2836 31.6467C51.0767 33.3195 50.6852 34.9643 50.1164 36.5509H7.7095C7.14065 34.9643 6.74926 33.3195 6.54238 31.6467C6.44153 30.7485 6.38955 29.8455 6.38673 28.9416C6.38433 26.3477 6.83188 23.7731 7.7095 21.3323V21.235H50.0969C50.0969 21.235 50.0969 21.235 50.0969 21.3323C50.6864 22.993 51.0783 24.7175 51.2641 26.47C51.3728 27.2895 51.4312 28.1149 51.4391 28.9416Z",
                            fill: "#FCFCFC"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.3219 26.9955C31.3013 27.0274 31.2725 27.0532 31.2385 27.0702C31.2046 27.0871 31.1668 27.0947 31.1289 27.0921L31.2833 26.9569L31.3219 26.9955Z",
                            fill: "#DDC8BC"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.9292 26.5291C26.9677 26.555 26.9998 26.5893 27.0232 26.6294C27.0465 26.6695 27.0606 26.7144 27.0642 26.7606L26.8906 26.5677L26.9292 26.5291Z",
                            fill: "#DDC8BC"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.9805 31.8609V31.7247C27.9999 31.7675 28.0099 31.814 28.0099 31.8609C28.0099 31.9079 27.9999 31.9544 27.9805 31.9972C27.9805 31.9972 28.0195 31.8999 27.9805 31.8609Z",
                            fill: "#B28066"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.858 31.3924C30.809 31.3497 30.7695 31.2971 30.7422 31.2381C30.7422 31.2381 30.8579 31.238 30.8965 31.3345L30.858 31.3924Z",
                            fill: "#DEC9BE"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.8086 26.0617V26.1784C29.7893 26.1356 29.7793 26.0892 29.7793 26.0423C29.7793 25.9953 29.7893 25.9489 29.8086 25.9061C29.8086 25.9061 29.7697 26.0228 29.8086 26.0617Z",
                            fill: "#B4816A"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.5586 30.9074C26.6026 30.8939 26.6496 30.8939 26.6936 30.9074C26.6936 30.9074 26.6936 30.9073 26.6936 31.0424L26.5586 30.9074Z",
                            fill: "#DBC5B9"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.5584 30.4008L31.3848 30.3043C31.5005 30.3043 31.5585 30.3043 31.597 30.3043L31.5584 30.4008Z",
                            fill: "#D7C0B3"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.8105 29.8761C31.8669 29.8568 31.9279 29.8568 31.9842 29.8761H31.8105Z",
                            fill: "#C49E8A"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.2852 30.9649C31.2852 30.9649 31.2852 30.9648 31.2852 30.849C31.3066 30.84 31.3296 30.8353 31.3528 30.8353C31.376 30.8353 31.399 30.84 31.4204 30.849L31.2852 30.9649Z",
                            fill: "#D2B7A8"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.8959 26.5672C30.8644 26.5776 30.8304 26.5776 30.7988 26.5672C30.7988 26.5672 30.7988 26.5672 30.7988 26.4309L30.8959 26.5672Z",
                            fill: "#D3B8A9"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.0723 29.8366C26.0903 29.8279 26.1101 29.8235 26.1301 29.8235C26.1501 29.8235 26.1698 29.8279 26.1879 29.8366C26.1879 29.8366 26.0915 29.7978 26.0723 29.8366Z",
                            fill: "#EBDFD9"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.0195 26.1389V26.0232C28.0195 26.0232 28.0195 26.0232 28.0195 26.1389C28.0195 26.2547 28.0581 26.1582 28.0195 26.1389Z",
                            fill: "#EADED7"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.8939 31.6073C28.3783 31.6073 27.8742 31.4543 27.4456 31.1678C27.0169 30.8812 26.6828 30.4739 26.4855 29.9974C26.2882 29.5209 26.2366 28.9966 26.3372 28.4908C26.4378 27.9849 26.6861 27.5202 27.0507 27.1555C27.4152 26.7908 27.8797 26.5424 28.3853 26.4418C28.891 26.3412 29.415 26.3928 29.8913 26.5902C30.3677 26.7876 30.7748 27.1218 31.0612 27.5507C31.3476 27.9795 31.5005 28.4837 31.5005 28.9995C31.4905 29.688 31.2126 30.3455 30.7259 30.8323C30.2392 31.3192 29.5821 31.5972 28.8939 31.6073Z",
                            fill: "#F2B307"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.5123 28.1444L31.8314 28.3195C31.7481 28.338 31.6618 28.338 31.5785 28.3195C32.1543 28.0956 32.7709 27.9961 33.3879 28.0276C33.7531 28.0501 34.1172 27.9692 34.4385 27.7941C34.64 27.6828 34.875 27.6482 35.1 27.6968C35.1905 27.7157 35.2724 27.7636 35.3335 27.833C35.1782 27.7868 35.0141 27.7786 34.8549 27.8091C34.6958 27.8396 34.5463 27.9078 34.419 28.0081C34.0589 28.2142 33.646 28.309 33.2322 28.2806C32.9482 28.2578 32.6626 28.2977 32.3956 28.3974L31.773 28.6115C31.773 28.6115 31.6174 28.7282 31.5785 28.6115C31.5396 28.4947 31.5784 28.6115 31.7341 28.5142L32.4734 28.2417C32.5234 28.2221 32.579 28.2221 32.6291 28.2417H32.8431H32.6875L32.5123 28.1444Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.1161 25.4969C28.1161 25.6915 28.2329 25.9057 28.2718 26.1003C28.3107 26.2949 28.2718 26.2559 28.2718 26.2754C28.2718 26.2949 28.2718 26.2754 28.2718 26.1392C28.2718 26.0029 28.2718 25.964 28.2718 25.8862C28.1013 25.4196 28.035 24.9215 28.0773 24.4266C28.1036 24.0548 28.0224 23.6833 27.8437 23.3562C27.7683 23.2297 27.7285 23.0851 27.7285 22.9378C27.7285 22.7905 27.7683 22.6459 27.8437 22.5193C27.8184 22.6766 27.8262 22.8374 27.8664 22.9916C27.9066 23.1457 27.9784 23.2897 28.0773 23.4146C28.278 23.7621 28.3662 24.1631 28.3301 24.5628C28.3104 24.9319 28.3841 25.3 28.5443 25.6332C28.5443 25.7888 28.6415 25.9445 28.6998 26.1197C28.7582 26.2948 28.6998 26.217 28.6998 26.2364C28.6998 26.2559 28.6998 26.2365 28.6998 26.1392L28.4469 25.4191C28.3797 25.3209 28.3395 25.2068 28.3301 25.0882C28.3301 25.0882 28.3301 25.0883 28.3301 24.9326C28.3203 24.8746 28.3203 24.8154 28.3301 24.7574C28.3203 24.848 28.3203 24.9393 28.3301 25.0299C28.2735 25.1919 28.2018 25.3482 28.1161 25.4969Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.6713 32.4644C29.6713 32.2308 29.5546 31.9973 29.5157 31.7638C29.4768 31.5302 29.5157 31.647 29.5157 31.647C29.5157 31.647 29.5157 31.647 29.5157 31.7443V32.0168C29.7017 32.4863 29.775 32.9928 29.7297 33.4958C29.7049 33.8528 29.779 34.2097 29.9438 34.5272C29.9915 34.6344 30.0162 34.7504 30.0162 34.8678C30.0162 34.9851 29.9915 35.1012 29.9438 35.2084C29.9439 35.251 29.9333 35.293 29.9129 35.3304C29.8925 35.3679 29.8629 35.3995 29.827 35.4224C29.8753 35.2858 29.8881 35.1392 29.8643 34.9962C29.8405 34.8532 29.7808 34.7187 29.6908 34.6051C29.4538 34.2135 29.3451 33.7576 29.3795 33.3012C29.3941 32.9596 29.3273 32.6194 29.1848 32.3087L29.0098 31.8027C29.0098 31.8027 29.0098 31.7054 29.0098 31.686C29.0098 31.6665 29.0097 31.686 29.107 31.686C29.1741 31.919 29.2587 32.1467 29.36 32.3671C29.36 32.3671 29.36 32.4644 29.36 32.5033C29.3753 32.5738 29.3753 32.6468 29.36 32.7174C29.36 32.7174 29.36 32.8341 29.36 32.8925C29.36 32.9509 29.36 33.0093 29.36 33.0482C29.3697 32.9641 29.3697 32.8792 29.36 32.7952C29.36 32.7952 29.36 32.7952 29.36 32.6784V32.4839C29.3587 32.4634 29.3614 32.4429 29.3681 32.4235C29.3747 32.4041 29.3852 32.3863 29.3987 32.3709C29.4261 32.3399 29.4647 32.321 29.506 32.3184C29.5473 32.3158 29.5879 32.3298 29.6189 32.3571C29.65 32.3845 29.6687 32.4231 29.6713 32.4644Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.2763 29.779L25.9572 29.6038H26.1324C25.6027 29.7983 25.0427 29.8971 24.4785 29.8958C24.0708 29.8591 23.6608 29.9331 23.2916 30.1099C23.1637 30.1913 23.0152 30.2345 22.8635 30.2345C22.7119 30.2345 22.5635 30.1913 22.4355 30.1099C22.5719 30.143 22.7137 30.1462 22.8514 30.1193C22.9891 30.0924 23.1193 30.0361 23.2332 29.9541C23.645 29.6973 24.1342 29.5939 24.6147 29.6622C24.9577 29.67 25.2977 29.5967 25.607 29.4482L26.0934 29.2924C26.0934 29.2924 26.2102 29.2924 26.2296 29.2924C26.2491 29.2924 26.2296 29.2924 26.2296 29.3897L25.393 29.6817C25.393 29.6817 25.2567 29.6817 25.1984 29.6817H24.8676C24.9517 29.6915 25.0365 29.6915 25.1206 29.6817H25.2373L25.2763 29.779Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.2725 32.5801C28.2909 32.3116 28.33 32.0448 28.3893 31.7822C28.3893 31.7822 28.3893 31.6655 28.3893 31.7822C28.3893 31.899 28.3893 31.7822 28.3893 31.7822C28.3703 31.9829 28.3703 32.1849 28.3893 32.3855C28.3584 32.7175 28.266 33.041 28.1168 33.3391C27.9017 33.717 27.8066 34.1514 27.8444 34.5846C27.8673 34.7953 27.8195 35.0075 27.7083 35.1879C27.6906 35.2274 27.6637 35.2622 27.6298 35.2893C27.596 35.3163 27.5561 35.335 27.5137 35.3436C27.5899 35.2457 27.6435 35.132 27.6704 35.0108C27.6974 34.8897 27.697 34.764 27.6694 34.643C27.5938 34.165 27.6686 33.6754 27.8834 33.2418C28.0341 32.8924 28.1008 32.5124 28.078 32.1325C28.078 31.9963 28.078 31.8601 28.078 31.7433C28.078 31.6266 28.078 31.6266 28.078 31.6266C28.078 31.6266 28.078 31.6265 28.078 31.7628C28.0587 32.0024 28.0587 32.2432 28.078 32.4829C28.078 32.5802 28.078 32.6774 28.078 32.7358C28.078 32.7942 28.2336 32.6191 28.2725 32.5801Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.7846 29.6617L31.8896 29.5449H31.6951C32.3696 29.5594 33.0331 29.7186 33.6407 30.012C33.919 30.1451 34.2304 30.1925 34.5356 30.1482C34.7495 30.1377 34.9628 30.1777 35.1583 30.265C35.1583 30.265 35.3334 30.3623 35.3724 30.4985C35.2656 30.4174 35.142 30.3612 35.0106 30.3343C34.8793 30.3073 34.7436 30.3103 34.6135 30.3429C34.14 30.4122 33.6566 30.3305 33.2321 30.1093C32.8926 29.973 32.5273 29.9132 32.162 29.9342H31.7534C31.7534 29.9342 31.6172 29.9342 31.6367 29.9342C31.6561 29.9342 31.6367 29.9342 31.7729 29.9342H32.8624H33.0181C32.9816 29.9459 32.9425 29.9466 32.9056 29.9361C32.8688 29.9257 32.8358 29.9046 32.8109 29.8755C32.786 29.8464 32.7701 29.8106 32.7654 29.7725C32.7607 29.7345 32.7675 29.6959 32.7846 29.6617Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.0021 28.2991L25.9749 28.4354C25.9749 28.4354 26.1888 28.4354 26.1499 28.5327C26.111 28.63 26.0332 28.5327 25.9554 28.5327H25.5663C25.2091 28.5179 24.8586 28.4318 24.5352 28.2797C24.1495 28.0473 23.6993 27.9449 23.2511 27.9878C23.1159 28.0085 22.9777 27.9923 22.851 27.9409C22.7243 27.8895 22.6138 27.8048 22.5312 27.6958C22.862 27.9293 23.2316 27.6958 23.5818 27.6958C23.876 27.6694 24.1718 27.7232 24.4378 27.8515C24.8323 28.0398 25.2655 28.1331 25.7025 28.124H26.1111C26.1111 28.124 26.2472 28.124 26.2278 28.124C26.2083 28.124 26.2278 28.124 26.0916 28.124H25.0021H24.8464C24.8866 28.1349 24.9227 28.1572 24.9503 28.1883C24.978 28.2194 24.996 28.2579 25.0021 28.2991Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.5122 23.6095C32.4294 23.6575 32.3574 23.722 32.3005 23.799C32.2436 23.876 32.2031 23.9638 32.1815 24.0571C32.0818 24.59 31.7996 25.0717 31.3837 25.4194C31.1577 25.6443 30.9849 25.917 30.8778 26.2173L30.6443 26.6843C30.6443 26.6843 30.6443 26.6843 30.5276 26.6843C30.4108 26.6843 30.5276 26.6843 30.5276 26.5676C30.63 26.3719 30.721 26.1705 30.8 25.9643C30.8434 25.8092 30.916 25.6639 31.014 25.5361C31.014 25.6529 30.8972 25.828 30.761 25.9253C30.6558 26.1203 30.5388 26.3088 30.4108 26.4897C30.4108 26.4897 30.4108 26.587 30.2941 26.4897C30.1773 26.3924 30.2941 26.4897 30.2941 26.373C30.2941 26.2562 30.4887 26.0421 30.5665 25.8669C30.7168 25.5774 30.9216 25.3197 31.1697 25.108C31.5225 24.8176 31.7857 24.4329 31.9285 23.9987C31.9604 23.8757 32.0211 23.7621 32.1057 23.6673C32.1903 23.5725 32.2964 23.4993 32.415 23.4538C32.415 23.4538 32.5122 23.5706 32.5122 23.6095Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.5543 25.0693L29.4375 25.9646C29.4375 25.9646 29.4375 26.0813 29.4375 26.1592C29.4375 26.237 29.4375 26.2565 29.4375 26.1592C29.4375 26.0619 29.4375 26.1591 29.4375 26.0618C29.4633 25.4198 29.6223 24.7902 29.9045 24.213C30.039 23.9074 30.0927 23.5723 30.0602 23.2399C30.0447 23.104 30.0612 22.9662 30.1086 22.8377C30.1559 22.7093 30.2326 22.5938 30.3327 22.5004C30.0992 22.8507 30.3327 23.201 30.3327 23.5513C30.3491 23.8513 30.2958 24.1511 30.177 24.4271C29.9882 24.8146 29.8948 25.2417 29.9045 25.6726C29.9045 25.8089 29.9045 25.9646 29.9045 26.1008C29.9045 26.237 29.9045 26.2176 29.9045 26.2176C29.9045 26.2176 29.9045 26.2175 29.9045 26.0813C29.9045 25.7115 29.9045 25.3612 29.9045 24.9915C29.9045 24.9915 29.9045 24.8941 29.9045 24.8357C29.9045 24.7774 29.9045 24.8358 29.9045 24.7385C29.9045 24.6412 29.9045 24.7384 29.9045 24.8357C29.9242 24.8817 29.9273 24.9332 29.9131 24.9811C29.8988 25.0291 29.8682 25.0705 29.8266 25.0983C29.785 25.126 29.735 25.1383 29.6853 25.133C29.6355 25.1277 29.5891 25.1052 29.5543 25.0693Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.2754 34.3132C25.3601 34.2582 25.4329 34.1868 25.4897 34.1032C25.5465 34.0197 25.5861 33.9257 25.6061 33.8266C25.7112 33.3066 25.993 32.8389 26.4037 32.5032C26.6301 32.271 26.8027 31.992 26.9096 31.6858L27.1431 31.2187C27.1431 31.2187 27.1431 31.1214 27.2598 31.2187C27.3765 31.316 27.2598 31.2187 27.2598 31.3355C27.1432 31.5266 27.0455 31.7287 26.968 31.9389C26.9246 32.0939 26.8519 32.2392 26.7539 32.367C26.8267 32.224 26.9113 32.0872 27.0069 31.9583L27.3571 31.4134C27.3571 31.4134 27.3571 31.2966 27.4738 31.4134C27.5905 31.5301 27.4738 31.4133 27.4738 31.5301C27.3845 31.6663 27.3065 31.8095 27.2403 31.9583C27.0691 32.3006 26.8309 32.605 26.54 32.8536C26.2195 33.1215 25.9775 33.4712 25.8396 33.8655C25.8051 33.992 25.7438 34.1096 25.6599 34.2104C25.576 34.3111 25.4713 34.3926 25.3532 34.4494C25.3532 34.4494 25.2754 34.3521 25.2754 34.3132Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.8599 27.0355C26.0757 27.1442 26.2838 27.2678 26.4825 27.4052C26.4825 27.4052 26.5993 27.4052 26.4825 27.522C26.3658 27.6388 26.4825 27.522 26.3658 27.522L25.9571 27.2885C25.604 27.1172 25.292 26.8715 25.0426 26.5684C24.7736 26.2536 24.4239 26.0181 24.0309 25.8873C23.9045 25.8528 23.7869 25.7915 23.6862 25.7075C23.5855 25.6236 23.504 25.519 23.4473 25.4008C23.4473 25.4008 23.4473 25.4008 23.4473 25.4008C23.4994 25.4821 23.5678 25.5517 23.6482 25.6053C23.7286 25.6589 23.8191 25.6953 23.9142 25.7122C24.4382 25.8325 24.9092 26.1193 25.2567 26.5295C25.4385 26.7247 25.6657 26.8717 25.9182 26.9576L26.5408 27.269C26.5408 27.269 26.5408 27.269 26.5408 27.3663C26.5408 27.4636 26.5408 27.3663 26.4241 27.3663L25.7626 27.055C25.6152 27.0074 25.477 26.9349 25.354 26.8409C25.5875 26.8798 25.7626 26.8993 25.8599 27.0355Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.8504 30.848L31.3057 30.4977C31.3057 30.4977 31.1889 30.4977 31.3057 30.3809C31.4224 30.2642 31.3057 30.3809 31.4224 30.3809L31.8893 30.6339C32.2082 30.7901 32.4926 31.0085 32.7259 31.2761C33.0029 31.6131 33.3661 31.8686 33.7766 32.0156C33.9007 32.0502 34.0155 32.1118 34.1131 32.1959C34.2106 32.28 34.2883 32.3845 34.3408 32.5021C34.2228 32.3254 34.0419 32.2001 33.835 32.1519C33.3386 32.0521 32.892 31.784 32.5704 31.3929C32.3354 31.156 32.0491 30.9762 31.7337 30.8675L31.2667 30.6339C31.2667 30.6339 31.15 30.6339 31.2667 30.5172C31.3835 30.4004 31.2667 30.5172 31.4029 30.5172L31.9866 30.8091C32.139 30.85 32.2836 30.9158 32.4147 31.0037C32.1423 30.9842 31.9671 30.9647 31.8504 30.848Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.7734 25.9648C26.9463 26.1705 27.1086 26.3848 27.2598 26.6069C27.2598 26.6069 27.2598 26.6069 27.2598 26.7237C27.2598 26.8405 27.2598 26.7237 27.143 26.7237C27.0715 26.6153 26.9935 26.5114 26.9096 26.4123C26.6121 26.0794 26.3869 25.6885 26.2481 25.2641C26.1369 24.8983 25.9203 24.5735 25.6255 24.33C25.5102 24.2445 25.4166 24.1329 25.3524 24.0044C25.2882 23.8759 25.2551 23.7342 25.2559 23.5905C25.2559 23.5905 25.2559 23.5905 25.2559 23.5905C25.2687 23.677 25.2995 23.7598 25.3465 23.8336C25.3934 23.9074 25.4553 23.9704 25.5282 24.0187C25.9803 24.3199 26.3166 24.766 26.4816 25.2836C26.6099 25.5978 26.8097 25.8777 27.0652 26.101L27.357 26.4513C27.357 26.4513 27.357 26.4513 27.357 26.568C27.357 26.6848 27.357 26.568 27.2403 26.568L26.6956 25.9648C26.5404 25.8381 26.4256 25.6691 26.3649 25.4782C26.4888 25.6503 26.6253 25.8129 26.7734 25.9648Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M23.5432 32.5031C23.7123 32.4627 23.8629 32.3668 23.9712 32.2307C24.2795 31.7771 24.7321 31.441 25.2554 31.277C25.5587 31.1396 25.8302 30.9408 26.053 30.6932L26.4227 30.3818C26.4227 30.3818 26.4227 30.3818 26.5199 30.3818C26.6172 30.3818 26.5199 30.3818 26.5199 30.4986L26.1309 30.8295C25.9385 31.0795 25.6834 31.2742 25.3916 31.3939H25.5083C25.7181 31.2965 25.9143 31.1722 26.092 31.0241C26.139 30.9574 26.2077 30.9092 26.2865 30.8878L26.6756 30.6154C26.6756 30.6154 26.6756 30.6154 26.7924 30.6154C26.9091 30.6154 26.7924 30.6154 26.7924 30.6154C26.7924 30.6154 26.4227 30.9073 26.2282 31.0435C26.0054 31.2342 25.7477 31.3796 25.4693 31.4717C25.0417 31.5973 24.6576 31.84 24.3603 32.1723C24.277 32.2826 24.1677 32.3706 24.0421 32.4283C23.9165 32.4861 23.7784 32.5117 23.6405 32.5031C23.6405 32.5031 23.5237 32.5226 23.5432 32.5031Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.7813 31.6073C30.7813 31.471 30.6063 31.3348 30.509 31.1986C30.4117 31.0624 30.509 31.1986 30.509 31.1013C30.509 31.004 30.509 31.1013 30.509 31.1013C30.509 31.1013 30.8008 31.471 30.9565 31.6657C31.1503 31.8906 31.2899 32.1568 31.365 32.4441C31.4924 32.8601 31.7354 33.2313 32.0655 33.5145C32.1689 33.6051 32.2532 33.7155 32.3133 33.8392C32.3735 33.9628 32.4083 34.0973 32.4157 34.2346C32.4041 34.1477 32.3737 34.0644 32.3266 33.9904C32.2796 33.9165 32.2171 33.8537 32.1433 33.8064C31.695 33.4927 31.3605 33.042 31.19 32.522C31.0542 32.2069 30.8478 31.9272 30.5868 31.7046L30.2949 31.3543C30.2949 31.3543 30.2949 31.3543 30.2949 31.257C30.2949 31.1597 30.2949 31.257 30.4117 31.257C30.5006 31.3978 30.6125 31.5227 30.7425 31.6268C30.9945 31.8253 31.1892 32.0872 31.3067 32.3857C31.3067 32.3857 31.3067 32.3858 31.3067 32.4831C31.2952 32.4384 31.2952 32.3915 31.3067 32.3468C31.2067 32.1398 31.0755 31.9494 30.9175 31.7824C30.9175 31.7824 30.8008 31.763 30.7813 31.6073Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.8895 26.8404C31.6838 27.0133 31.4695 27.1757 31.2474 27.3269C31.2474 27.3269 31.2475 27.3269 31.1113 27.3269C30.9751 27.3269 31.1113 27.3269 31.1113 27.2296L31.442 26.9766C31.7584 26.6814 32.1376 26.4619 32.551 26.3344C32.9167 26.2231 33.2415 26.0065 33.4849 25.7117C33.6171 25.5447 33.8025 25.428 34.0102 25.3808C34.0102 25.3808 34.0102 25.3808 34.1269 25.3808C33.9663 25.4166 33.8264 25.5146 33.7378 25.6533C33.4369 26.1015 32.9899 26.4317 32.4731 26.5874C32.1726 26.721 31.9015 26.9128 31.6755 27.1518L31.3448 27.4631C31.3448 27.4631 31.3447 27.5799 31.1891 27.4631C31.0334 27.3464 31.1891 27.3658 31.1891 27.3269L31.7922 26.8015C31.9154 26.6427 32.0857 26.5269 32.2786 26.4706C32.1413 26.5856 32.0113 26.7091 31.8895 26.8404Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.3955 30.343L31.6172 29.9928C31.6172 29.9928 31.6172 29.9927 31.6172 29.8954C31.6172 29.7981 31.6172 29.8954 31.7339 29.8954L35.1 31.4523C35.1 31.4523 34.9832 31.4523 34.9248 31.4523L31.6561 30.2263C31.6561 30.2263 31.6561 30.2263 31.7729 30.2263L32.4539 30.4793H32.5512C32.5512 30.4793 32.7457 30.4793 32.843 30.5766C32.9402 30.6739 32.3955 30.4209 32.3955 30.343Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.201 27.5602L31.5394 27.7937C31.5394 27.7937 31.4226 27.7937 31.3837 27.7937C31.3448 27.7937 31.3837 27.7936 31.5005 27.6963L34.6331 26.5288L34.9833 26.412C34.9833 26.412 34.9833 26.412 34.8666 26.5093L31.6562 27.9883C31.6562 27.9883 31.5589 27.9883 31.5199 27.9883C31.481 27.9883 31.5199 27.9883 31.5199 27.9883L32.201 27.6574C32.2983 27.5601 32.4733 27.5601 32.59 27.4628H32.7068C32.7068 27.4628 32.5901 27.4628 32.5317 27.4628C32.4269 27.5115 32.3155 27.5443 32.201 27.5602Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.4338 25.4591L27.745 26.3349C27.745 26.3349 27.745 26.4516 27.745 26.4711C27.745 26.4906 27.745 26.4711 27.745 26.3738L26.4609 22.9292C26.4609 22.9292 26.4609 22.9292 26.4609 23.0265C26.9668 24.0968 27.4533 25.1672 27.9397 26.2376C27.9397 26.2376 27.9397 26.3544 27.9397 26.3933C27.9397 26.4322 27.8424 26.3933 27.8229 26.2765C27.8035 26.1598 27.57 25.7121 27.4338 25.4397C27.3757 25.3656 27.3357 25.279 27.317 25.1867C27.356 25.2645 27.4338 25.3424 27.4338 25.4591Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.4493 32.4639C30.352 32.1525 30.2353 31.8606 30.138 31.5687C30.0407 31.2768 30.138 31.4714 30.138 31.452C30.138 31.4325 30.138 31.452 30.138 31.452L31.4221 34.916C31.4118 34.8982 31.4064 34.8781 31.4064 34.8576C31.4064 34.8371 31.4118 34.817 31.4221 34.7992C30.9162 33.7289 30.4298 32.6585 29.9434 31.5881C29.9434 31.5881 29.9434 31.5881 29.9434 31.4714C29.9434 31.3546 29.9433 31.4714 30.0406 31.4714L30.4493 32.3277C30.5038 32.4038 30.5435 32.4897 30.566 32.5807C30.4492 32.639 30.4493 32.5612 30.4493 32.4639Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.5873 30.3425L26.2877 30.0895C26.2877 30.0895 26.2876 30.0895 26.4044 30.0895C26.5211 30.0895 26.4044 30.0895 26.4044 30.0895L22.9219 31.374C22.9219 31.374 22.9219 31.374 23.0581 31.2767L26.2293 29.817C26.2293 29.817 26.3266 29.817 26.3461 29.817C26.3655 29.817 26.3461 29.817 26.3461 29.9143L25.6651 30.2257C25.5483 30.362 25.3733 30.3619 25.2371 30.4398C25.3526 30.403 25.4694 30.3706 25.5873 30.3425Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.2953 25.5363C30.1591 25.7893 30.0424 26.0422 29.9256 26.2952C29.8089 26.5482 29.9257 26.3925 29.8284 26.2952C29.7311 26.1979 29.8284 26.2952 29.8284 26.1785C30.3537 25.0497 30.8595 23.921 31.3848 22.8118C31.3848 22.8118 31.3848 22.948 31.3848 22.9869L30.1591 26.2758C30.1591 26.2758 30.1591 26.3731 30.1591 26.2758C30.1591 26.1785 30.1591 26.2758 30.1591 26.159C30.1591 26.0423 30.3537 25.6335 30.4315 25.3806C30.5093 25.1276 30.5288 25.186 30.5288 25.0692C30.5352 25.011 30.5352 24.9522 30.5288 24.894C30.536 24.9652 30.536 25.037 30.5288 25.1081C30.5218 25.1918 30.4975 25.2731 30.4573 25.3468C30.4171 25.4205 30.3619 25.4851 30.2953 25.5363Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.4938 32.3847L27.8635 31.6062C27.8635 31.6062 27.8634 31.5089 27.9607 31.6062C28.058 31.7035 27.9607 31.6062 27.9607 31.723C27.4354 32.8323 26.9296 33.9611 26.4043 35.0898C26.4043 35.0898 26.4043 34.973 26.4043 34.9341L27.63 31.6257C27.63 31.6257 27.63 31.6257 27.63 31.7425C27.63 31.8592 27.4354 32.2484 27.3576 32.5209C27.2798 32.7934 27.2603 32.7155 27.2603 32.8128C27.242 32.8764 27.242 32.9439 27.2603 33.0074C27.2603 33.0074 27.2603 32.8907 27.2603 32.8323C27.2567 32.7438 27.2764 32.6558 27.3173 32.5773C27.3583 32.4987 27.4191 32.4323 27.4938 32.3847Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.4701 27.5598L26.2485 27.9101C26.2485 27.9101 26.2485 27.9101 26.1317 27.9101L22.7656 26.3531C22.7656 26.3531 22.8824 26.3531 22.9603 26.3531L26.229 27.5792C26.229 27.5792 26.3457 27.5792 26.229 27.6766C26.1122 27.7739 26.229 27.6766 26.0928 27.6766L25.3339 27.4041C25.2172 27.4041 25.1393 27.4041 25.042 27.4041H24.8475L25.0615 27.5014C25.2003 27.4722 25.3451 27.4929 25.4701 27.5598Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M22.4743 28.9231L26.132 28.7869C25.8084 28.8165 25.4828 28.8165 25.1592 28.7869C25.0408 28.8355 24.908 28.8355 24.7895 28.7869C24.9904 28.7983 25.1918 28.7983 25.3927 28.7869H25.9763H26.132C26.132 28.7869 26.132 28.7869 25.9763 28.7869L22.9801 28.67H22.4743C22.4743 28.67 22.4354 28.9426 22.4743 28.9231Z",
                            fill: "#F0B105"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M24.6146 24.5628L27.0466 26.8203C27.0466 26.8203 27.0465 26.8203 26.9104 26.8203L26.4824 26.4311C26.3657 26.4311 26.3073 26.3143 26.2489 26.2364C26.1906 26.1586 26.4045 26.3726 26.424 26.47L26.8131 26.8981C26.8131 26.8981 26.9298 26.8981 26.8131 27.0343C26.6964 27.1706 26.8131 27.0343 26.6769 27.0343L25.1399 25.3802L24.4395 24.6212L24.6146 24.5628Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M24.498 33.3009L26.7356 30.8683C26.7356 30.8683 26.7356 30.7515 26.8524 30.8683C26.9691 30.985 26.8524 30.9656 26.8524 31.0045C26.733 31.1563 26.6029 31.2994 26.4632 31.4327C26.4347 31.524 26.3719 31.6007 26.288 31.6467C26.288 31.6467 26.4048 31.5105 26.502 31.4716L26.9302 31.1018C26.9302 31.1018 26.9302 30.985 27.0664 31.1018C27.2026 31.2186 27.0664 31.1991 27.0664 31.238L25.4319 32.756L24.6537 33.4761L24.498 33.3009Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M33.2888 24.6211L31.3433 26.7618L31.1099 27.0148C31.1099 27.0148 31.1098 27.1511 30.9737 27.0148C30.8375 26.8786 30.9737 26.9175 30.9737 26.8786C30.9737 26.8397 31.2071 26.6061 31.3433 26.4504C31.4795 26.2947 31.3432 26.3142 31.5183 26.2558C31.6934 26.1974 31.4016 26.392 31.3044 26.4115L30.8763 26.8007C30.8763 26.8007 30.8764 26.9175 30.7402 26.8007C30.604 26.684 30.7402 26.6839 30.7402 26.6645L32.3743 25.1271L33.1526 24.4265C33.1526 24.4265 33.2888 24.5627 33.2888 24.6211Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.9326 32.5807C28.9326 32.3277 28.9326 32.0942 28.9326 31.8607C28.9326 31.6271 28.9326 31.705 28.9326 31.7244C28.9326 31.7439 28.9326 31.8217 28.9326 31.8607L28.8158 35.3831C28.8158 34.1571 28.8159 32.931 28.6797 31.7049C28.7184 32.0542 28.7184 32.4066 28.6797 32.7559C28.7086 32.8235 28.7234 32.8964 28.7234 32.97C28.7234 33.0436 28.7086 33.1163 28.6797 33.184C28.9132 32.9699 28.8937 32.7753 28.9326 32.5807Z",
                            fill: "#F2B105"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.3635 31.3736C31.2238 31.2403 31.0938 31.0973 30.9744 30.9455C30.9744 30.9455 30.8577 30.9455 30.9744 30.8092C31.0912 30.673 30.9745 30.8092 31.1106 30.8092L32.6671 32.4635L33.348 33.2225L30.916 30.965C30.916 30.965 30.916 30.9649 30.916 30.8481C30.916 30.7314 31.0133 30.8481 31.0522 30.8481L31.4803 31.2569C31.5657 31.286 31.6403 31.3403 31.6943 31.4126C31.6943 31.4126 31.3829 31.471 31.3635 31.3736Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.9316 22.5193L29.0679 26.1976C29.0382 25.9129 29.0382 25.6259 29.0679 25.3413C29.0395 25.266 29.0395 25.183 29.0679 25.1078C29.0479 24.9918 29.0479 24.8734 29.0679 24.7575C29.0575 24.939 29.0575 25.1209 29.0679 25.3024C29.0679 25.3024 29.0679 25.4386 29.0679 25.497C29.0776 25.685 29.0776 25.8734 29.0679 26.0614V26.1976C29.0679 26.1976 29.0679 26.1976 29.0679 26.0614C29.0679 25.4775 29.0679 24.8937 29.0679 24.2904V22.5193H28.9316Z",
                            fill: "#F0B105"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M35.314 28.9815L31.6562 29.1372C31.9798 29.1076 32.3055 29.1076 32.6291 29.1372C32.7122 29.1174 32.7989 29.1174 32.882 29.1372H32.7653H32.4345H31.7535C31.7535 29.1372 31.6368 29.1372 31.7535 29.1372C31.8702 29.1372 31.7535 29.1372 31.8702 29.1372H33.6991H35.3725C35.3725 29.1372 35.3335 28.9621 35.314 28.9815Z",
                            fill: "#F1B208"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.1707 30.8492C25.9493 31.0799 25.685 31.265 25.3926 31.3941C25.3926 31.3941 25.3926 31.3941 25.3926 31.3941C25.6752 31.2579 25.9318 31.0735 26.1512 30.8492H26.1707Z",
                            fill: "#974704"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.2869 32.4837C31.141 32.2069 30.9578 31.9515 30.7422 31.7247C30.9728 31.9462 31.1578 32.2106 31.2869 32.5031C31.2869 32.5031 31.3258 32.5032 31.2869 32.4837Z",
                            fill: "#964702"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.8594 27.0337C25.6338 26.9487 25.4376 26.7999 25.2949 26.6056C25.4808 26.7575 25.6832 26.8881 25.8982 26.9948L25.8594 27.0337Z",
                            fill: "#A05303"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.3922 28.98C25.1742 29.0278 24.9484 29.0278 24.7305 28.98H25.1586H25.3922Z",
                            fill: "#A85D04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.9316 32.581C28.9712 32.7867 28.9712 32.998 28.9316 33.2037V32.7561V32.581Z",
                            fill: "#B87004"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.8887 26.8405C32.0239 26.6901 32.1995 26.5821 32.3946 26.5291C32.209 26.6023 32.0376 26.7076 31.8887 26.8405Z",
                            fill: "#9E5003"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.5586 25.4189C26.6358 25.6025 26.7408 25.7731 26.8698 25.9248C26.7306 25.7807 26.6244 25.6081 26.5586 25.4189C26.5586 25.3995 26.5586 25.4189 26.5586 25.4189Z",
                            fill: "#9C4F03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.365 31.3741C31.4837 31.484 31.5884 31.6082 31.6764 31.7439C31.5407 31.6559 31.4165 31.5513 31.3066 31.4325L31.365 31.3741Z",
                            fill: "#9B4D04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.5591 31.413C26.4565 31.5374 26.3389 31.6486 26.209 31.7439C26.2912 31.604 26.3963 31.479 26.5202 31.3741L26.5591 31.413Z",
                            fill: "#9B4D04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.3242 26.4901C31.4313 26.37 31.5484 26.2593 31.6743 26.1592C31.5975 26.3029 31.4914 26.4289 31.363 26.529L31.3242 26.4901Z",
                            fill: "#9C4E03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.4223 26.529C26.3037 26.4192 26.1992 26.295 26.1113 26.1592C26.2299 26.2691 26.3344 26.3933 26.4223 26.529Z",
                            fill: "#9A4C03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M24.4965 33.3012C24.3944 33.4226 24.2687 33.5219 24.127 33.5931C24.2379 33.4812 24.3619 33.3832 24.4965 33.3012Z",
                            fill: "#E3A005"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M24.6142 24.563C24.5041 24.4702 24.4118 24.3581 24.3418 24.2322C24.4164 24.3516 24.4691 24.4834 24.4975 24.6214L24.6142 24.563Z",
                            fill: "#E3A005"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M33.291 24.6209C33.3879 24.5094 33.4992 24.4113 33.6219 24.329C33.5335 24.4486 33.4207 24.5481 33.291 24.6209Z",
                            fill: "#E6A306"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.7793 25.9834C30.838 25.8371 30.9165 25.6996 31.0128 25.5747L30.7793 25.9834Z",
                            fill: "#974704"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M33.2305 33.3587C33.3451 33.4469 33.4382 33.5601 33.5027 33.6896C33.398 33.5916 33.3065 33.4803 33.2305 33.3587Z",
                            fill: "#E3A005"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.7352 32.3086L26.9688 31.8804C26.9104 32.033 26.8318 32.1769 26.7352 32.3086C26.7157 32.3476 26.7352 32.3086 26.7352 32.3086Z",
                            fill: "#974704"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.2386 31.1206L31.8105 30.8871C31.963 30.9455 32.1069 31.024 32.2386 31.1206C32.2775 31.14 32.2386 31.1206 32.2386 31.1206Z",
                            fill: "#964702"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.08 30.4989L25.5469 30.3043C25.3906 30.3975 25.2195 30.4634 25.041 30.4989C25.041 30.4989 25.041 30.4989 25.041 30.4989H25.08Z",
                            fill: "#A35602"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.2715 32.5811C28.3061 32.6954 28.3061 32.8173 28.2715 32.9315V32.4839V32.5811Z",
                            fill: "#8D3B03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.6292 27.4246C32.5093 27.5026 32.3781 27.5617 32.2402 27.5999L32.6292 27.4441C32.6292 27.4441 32.6292 27.4052 32.6292 27.4246Z",
                            fill: "#9E5103"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.3944 30.3429L32.7446 30.4985C32.6062 30.4989 32.4708 30.4583 32.3555 30.3818L32.3944 30.3429Z",
                            fill: "#A65B03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.1158 25.4975C28.089 25.3691 28.089 25.2367 28.1158 25.1084L28.2132 25.4197L28.1158 25.4975Z",
                            fill: "#9B4D04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M34.2046 25.42C34.1864 25.4114 34.1665 25.4069 34.1463 25.4069C34.1261 25.4069 34.1061 25.4114 34.0879 25.42C34.0879 25.42 34.263 25.42 34.3797 25.42C34.4964 25.42 34.3407 25.4006 34.2046 25.42Z",
                            fill: "#D79205"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.4505 25.2634C30.4171 25.372 30.3715 25.4765 30.3145 25.5749L30.4116 25.3024L30.4505 25.2634Z",
                            fill: "#9C4E03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.4698 27.5596L25.1973 27.4429C25.3077 27.4611 25.4136 27.5008 25.5087 27.5596H25.4698Z",
                            fill: "#9C4E03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.4937 32.3853L27.3965 32.6579C27.4147 32.5474 27.4543 32.4416 27.5132 32.3464L27.4937 32.3853Z",
                            fill: "#9C4E03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.4512 32.4639C30.5184 32.5546 30.5588 32.6625 30.5677 32.7751V32.5028L30.4512 32.4639Z",
                            fill: "#A85D04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.3572 25.1473L27.4546 25.4197C27.3873 25.3289 27.3469 25.2211 27.3379 25.1084L27.3572 25.1473Z",
                            fill: "#A85D04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M22.4723 28.9225C22.4454 28.9361 22.4156 28.9432 22.3855 28.9432C22.3554 28.9432 22.3257 28.9361 22.2988 28.9225C22.2988 28.9225 22.4145 28.9225 22.4723 28.9225Z",
                            fill: "#DE9906"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.041 29.7977H25.2342C25.1703 29.8087 25.1049 29.8087 25.041 29.7977Z",
                            fill: "#A35604"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.5547 25.0678V24.9135C29.5739 24.9631 29.5739 25.0182 29.5547 25.0678Z",
                            fill: "#873403"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M24.8457 28.2223C24.8953 28.2029 24.9504 28.2029 25.0001 28.2223H24.8457Z",
                            fill: "#873403"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.5117 28.1434C32.5614 28.124 32.6165 28.124 32.6662 28.1434H32.5117Z",
                            fill: "#883603"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.6719 32.5988V32.4639V32.5602C29.6719 32.5602 29.7105 32.6181 29.6719 32.5988Z",
                            fill: "#893503"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.5117 23.6092C32.5117 23.6092 32.5117 23.6092 32.6274 23.6092C32.7432 23.6092 32.5503 23.5899 32.5117 23.6092Z",
                            fill: "#D48E05"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M23.5437 25.3405C23.5437 25.3405 23.5437 25.3405 23.5437 25.2248C23.5437 25.1091 23.5244 25.3019 23.5437 25.3405Z",
                            fill: "#D48E05"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.0723 29.8367C26.0723 29.8367 26.0723 29.8367 26.1879 29.8367C26.3035 29.8367 26.1108 29.8175 26.0723 29.8367Z",
                            fill: "#B4846B"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.7778 28.572C28.7614 28.4724 28.723 28.3777 28.6655 28.2947C28.608 28.2118 28.5326 28.1426 28.4451 28.0923C28.3576 28.042 28.26 28.0118 28.1594 28.0039C28.0587 27.996 27.9576 28.0105 27.8633 28.0465C27.6814 28.0916 27.5097 28.1708 27.3574 28.2801C27.4365 28.176 27.5366 28.0897 27.6511 28.0268C27.7656 27.9638 27.892 27.9256 28.0222 27.9146C28.1524 27.9036 28.2835 27.92 28.407 27.9629C28.5304 28.0057 28.6435 28.074 28.7389 28.1633C28.7792 28.2699 28.7792 28.3875 28.7389 28.4941C28.7389 28.4941 28.8557 28.572 28.7778 28.572Z",
                            fill: "#883603"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.3136 28.1824C30.1322 28.0898 29.9333 28.0367 29.7299 28.0267C29.579 28.0079 29.4263 28.045 29.3009 28.1311C29.1754 28.2172 29.0859 28.3462 29.049 28.4939C29.0402 28.4149 29.0585 28.3352 29.1009 28.268C29.1433 28.2008 29.2074 28.15 29.2825 28.124C29.4533 28.019 29.6532 27.9718 29.853 27.9893C30.0527 28.0068 30.2414 28.0882 30.3914 28.2214C30.3914 28.2214 30.4498 28.2019 30.3136 28.1824Z",
                            fill: "#893503"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.4198 29.3888C29.4368 29.4052 29.4505 29.4248 29.4598 29.4466C29.4691 29.4683 29.4738 29.4917 29.4738 29.5153C29.4738 29.539 29.4691 29.5624 29.4598 29.5841C29.4505 29.6059 29.4368 29.6255 29.4198 29.6419C29.4198 29.6419 29.2836 29.6419 29.2058 29.6419C29.0117 29.6225 28.8162 29.6225 28.6221 29.6419C28.5861 29.6606 28.546 29.6704 28.5054 29.6704C28.4648 29.6704 28.4247 29.6606 28.3887 29.6419C28.3887 29.6419 28.3887 29.4862 28.3887 29.3694C28.3887 29.2526 28.3887 29.5446 28.6416 29.5446C28.8945 29.5446 28.9918 29.6419 29.167 29.5446C29.3421 29.4472 29.3809 29.5251 29.4198 29.3888Z",
                            fill: "#893703"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.3483 30.2263C28.3483 30.2263 28.3483 30.2263 28.2316 30.2263C28.1148 30.2263 28.2316 30.2263 28.2316 30.129C28.2316 30.0316 28.2315 30.129 28.3288 30.129H28.5624C28.6825 30.1677 28.8117 30.1677 28.9318 30.129H29.0487C29.0487 30.129 28.5623 30.4405 28.3483 30.2653C28.1343 30.09 28.5039 30.1874 28.3483 30.2263Z",
                            fill: "#F0B007"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.0011 28.728C29.9075 28.7659 29.8028 28.7659 29.7092 28.728C29.612 28.728 29.7092 28.5334 29.7092 28.4167C29.7728 28.3749 29.8471 28.3526 29.9232 28.3526C29.9993 28.3526 30.0738 28.3749 30.1373 28.4167C30.0984 28.4945 30.0206 28.6113 30.0011 28.728Z",
                            fill: "#883303"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.1557 28.7272C28.0674 28.7569 27.9717 28.7569 27.8834 28.7272C27.8589 28.7186 27.8365 28.7051 27.8173 28.6876C27.7981 28.6701 27.7827 28.649 27.7718 28.6254C27.7609 28.6018 27.7549 28.5763 27.754 28.5503C27.7531 28.5244 27.7574 28.4986 27.7667 28.4743C27.7667 28.4743 27.7668 28.377 27.9418 28.3381C28.1168 28.2991 28.1168 28.3381 28.1946 28.3381C28.214 28.3809 28.2239 28.4273 28.2239 28.4743C28.2239 28.5213 28.214 28.5677 28.1946 28.6105L28.1557 28.7272Z",
                            fill: "#883303"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.4775 28.455C29.3608 28.455 29.3218 28.5912 29.2051 28.5717C29.2755 28.4752 29.3678 28.3967 29.4743 28.3426C29.5808 28.2884 29.6985 28.2602 29.818 28.2602C29.9374 28.2602 30.0553 28.2884 30.1618 28.3426C30.2683 28.3967 30.3605 28.4752 30.4309 28.5717C30.2947 28.5717 30.2364 28.4355 30.1391 28.4355C30.0474 28.3825 29.9433 28.3546 29.8375 28.3546C29.7316 28.3546 29.6276 28.3825 29.5359 28.4355L29.4775 28.455Z",
                            fill: "#974903"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.3496 30.2268C28.3496 30.2268 28.4859 30.2268 28.5442 30.2268C28.8944 30.4604 28.9723 30.4604 29.2836 30.2268C29.5948 29.9933 29.3807 30.1295 29.4196 30.2268C29.4585 30.3242 29.264 30.3436 29.1862 30.402C29.1228 30.4215 29.0551 30.4215 28.9917 30.402C28.979 30.4149 28.9638 30.4252 28.9471 30.4322C28.9304 30.4392 28.9125 30.4429 28.8944 30.4429C28.8763 30.4429 28.8584 30.4392 28.8417 30.4322C28.825 30.4252 28.8098 30.4149 28.7972 30.402C28.7488 30.4035 28.7008 30.3937 28.6569 30.3735C28.613 30.3532 28.5744 30.323 28.5442 30.2852C28.5442 30.2852 28.5053 30.2268 28.3496 30.2268Z",
                            fill: "#914103"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.3887 28.4546C28.0774 28.26 27.9217 28.2795 27.377 28.5714C27.4337 28.4858 27.5087 28.4137 27.5964 28.3603C27.6841 28.3068 27.7826 28.2734 27.8847 28.2623C27.9869 28.2511 28.0901 28.2626 28.1873 28.2958C28.2845 28.3291 28.3731 28.3833 28.447 28.4546H28.3887Z",
                            fill: "#954603"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.1199 28.8452C29.9832 28.9239 29.8224 28.9495 29.6681 28.9172C29.5138 28.8849 29.3769 28.7969 29.2832 28.67C29.3968 28.7525 29.5279 28.8076 29.6662 28.8313C29.8046 28.8549 29.9464 28.8464 30.0809 28.8063C30.0809 28.8063 30.1393 28.8063 30.1199 28.8452Z",
                            fill: "#914003"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.5059 29.9542C28.549 29.936 28.5953 29.9266 28.642 29.9266C28.6888 29.9266 28.7351 29.936 28.7782 29.9542C28.8783 29.9933 28.9894 29.9933 29.0894 29.9542C29.1325 29.936 29.1788 29.9266 29.2256 29.9266C29.2724 29.9266 29.3187 29.936 29.3618 29.9542H28.5059C28.5059 29.9542 28.5059 29.9932 28.5059 29.9542Z",
                            fill: "#914003"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.8629 28.8446C28.1058 28.8622 28.347 28.7933 28.5439 28.6501C28.4642 28.7709 28.3436 28.8589 28.2043 28.8982C28.065 28.9375 27.9163 28.9254 27.7852 28.8641C27.7852 28.8641 27.824 28.8251 27.8629 28.8446Z",
                            fill: "#8D3B03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.7974 30.4604H28.9919C28.9919 30.4604 29.167 30.4604 29.2059 30.655C29.0113 30.4409 28.7974 30.4798 28.5639 30.655C28.3304 30.8302 28.7195 30.5382 28.7974 30.4604Z",
                            fill: "#974704"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.8239 28.4945C27.7999 28.5359 27.7873 28.5829 27.7873 28.6308C27.7873 28.6786 27.7999 28.7256 27.8239 28.767H27.6875C27.6875 28.767 27.5512 28.767 27.6875 28.6308C27.7033 28.5934 27.7272 28.5601 27.7575 28.5331C27.7879 28.5062 27.8238 28.4864 27.8627 28.4751L27.8239 28.4945Z",
                            fill: "#E4A107"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.0018 28.7265C29.9671 28.6821 29.9482 28.6273 29.9482 28.5709C29.9482 28.5145 29.9671 28.4597 30.0018 28.4152H30.0992C30.0992 28.5903 30.0992 28.6098 29.9434 28.6682L30.0018 28.7265Z",
                            fill: "#EAA909"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.8236 28.4942C27.8236 28.4942 27.6873 28.4942 27.629 28.4942C27.5706 28.4942 27.629 28.5915 27.629 28.6304C27.4538 28.6304 27.4344 28.4747 27.629 28.3774C27.7132 28.3143 27.8156 28.2802 27.9209 28.2802L27.8236 28.4942Z",
                            fill: "#9D5209"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.1543 28.7071C28.1543 28.6098 28.1543 28.493 28.1543 28.4152H28.2709C28.3682 28.6292 28.3098 28.6877 28.1543 28.7071Z",
                            fill: "#DD9A06"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.0489 28.8826L29.1851 29.2135C29.1851 29.2135 29.1851 29.2135 29.1851 29.3108C29.1851 29.4082 29.1851 29.3108 29.0878 29.3108C29.0678 29.1884 29.0678 29.0635 29.0878 28.941C29.0878 28.941 29.0294 28.8632 29.0489 28.8826Z",
                            fill: "#944403"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.1543 28.7087C28.204 28.695 28.2471 28.6639 28.2757 28.6209C28.3042 28.578 28.3165 28.5263 28.31 28.4751C28.31 28.4751 28.4656 28.4751 28.4267 28.6113C28.3878 28.7476 28.271 28.7281 28.1543 28.7281V28.7087Z",
                            fill: "#974A08"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.7754 28.5712C28.8425 28.7332 28.8425 28.9152 28.7754 29.0772C28.8241 28.912 28.8241 28.7363 28.7754 28.5712Z",
                            fill: "#A85D04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.7375 28.9621C28.733 29.0292 28.7153 29.0947 28.6853 29.1549C28.6552 29.215 28.6135 29.2686 28.5625 29.3124C28.6014 29.1762 28.718 29.0789 28.7375 28.9621Z",
                            fill: "#924303"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.002 28.7281C30.0496 28.7055 30.0896 28.6696 30.1172 28.6247C30.1449 28.5798 30.1588 28.5278 30.1575 28.4751C30.1575 28.4751 30.2937 28.4751 30.2742 28.6113C30.2449 28.655 30.2037 28.6893 30.1554 28.71C30.107 28.7308 30.0538 28.737 30.002 28.7281Z",
                            fill: "#8A3B08"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.593 28.435C29.6113 28.4985 29.6113 28.566 29.593 28.6295C29.3399 28.5323 29.593 28.4544 29.593 28.3766C29.593 28.3766 29.5345 28.3766 29.593 28.435Z",
                            fill: "#9A4D09"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.4188 30.2266C29.4188 30.2266 29.3217 30.2266 29.2827 30.2266C29.2645 30.218 29.2445 30.2134 29.2243 30.2134C29.2041 30.2134 29.1843 30.218 29.166 30.2266C29.166 30.2266 29.166 30.2266 29.166 30.1098C29.166 29.9931 29.2827 30.1098 29.341 30.1098C29.341 30.1098 29.4577 30.2266 29.4188 30.2266Z",
                            fill: "#D48E05"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.0501 28.8823C28.9911 28.7321 28.9911 28.5654 29.0501 28.4152C28.993 28.5657 28.993 28.7318 29.0501 28.8823Z",
                            fill: "#984A03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.3887 28.4555C28.4294 28.4605 28.4683 28.4754 28.5019 28.4989C28.5355 28.5225 28.5628 28.5539 28.5814 28.5905C28.5077 28.5608 28.4418 28.5146 28.3887 28.4555Z",
                            fill: "#9C4E03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.5045 29.9524C28.5045 30.0488 28.5045 29.9524 28.3887 30.0681L28.5045 29.9524Z",
                            fill: "#AE6403"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.2832 29.9923C29.344 30.0335 29.3963 30.0858 29.4376 30.1466C29.3966 30.1466 29.3574 30.1303 29.3285 30.1014C29.2995 30.0724 29.2832 30.0332 29.2832 29.9923Z",
                            fill: "#AE6403"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.4766 28.7079C29.4766 28.7079 29.5925 28.7079 29.6504 28.7079C29.5937 28.7246 29.5333 28.7246 29.4766 28.7079Z",
                            fill: "#B06707"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.1191 28.8437C30.1748 28.8211 30.2369 28.8211 30.2925 28.8437C30.2925 28.8437 30.177 28.8243 30.1191 28.8437Z",
                            fill: "#B46C03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.3145 28.1827C30.3263 28.2032 30.3326 28.2265 30.3326 28.2502C30.3326 28.2739 30.3263 28.2972 30.3145 28.3178V28.1827Z",
                            fill: "#9E5103"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.8242 28.0654C32.8804 28.0329 32.9442 28.0158 33.0091 28.0158C33.0741 28.0158 33.1378 28.0329 33.194 28.0654H32.8827C32.8827 28.0654 32.8242 28.1043 32.8242 28.0654Z",
                            fill: "#BC7504"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.8215 28.0663H32.6094C32.6416 28.0477 32.6782 28.0378 32.7155 28.0378C32.7527 28.0378 32.7893 28.0477 32.8215 28.0663Z",
                            fill: "#8B3B03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.9988 25.0296C27.9662 24.963 27.9492 24.8898 27.9492 24.8155C27.9492 24.7413 27.9662 24.6681 27.9988 24.6014V24.9128C27.9988 24.9128 28.057 25.0102 27.9988 25.0296Z",
                            fill: "#C17A04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.7877 32.8727C29.82 32.9325 29.837 32.9994 29.837 33.0674C29.837 33.1353 29.82 33.2023 29.7877 33.262V32.9895C29.7877 32.9895 29.7293 32.8922 29.7877 32.8727Z",
                            fill: "#C47E04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.6719 32.5992C29.6891 32.669 29.6891 32.7418 29.6719 32.8115C29.6719 32.8115 29.6719 32.8115 29.6719 32.8115V32.5992Z",
                            fill: "#A35602"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M24.9651 29.8561C24.828 29.9123 24.6743 29.9123 24.5371 29.8561H24.8679C24.8679 29.8561 24.9457 29.7978 24.9651 29.8561Z",
                            fill: "#BF7805"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.1733 33.0287C28.1707 33.0735 28.159 33.1173 28.1389 33.1575C28.1189 33.1976 28.0909 33.2333 28.0566 33.2622C28.0675 33.1733 28.1087 33.0908 28.1733 33.0287Z",
                            fill: "#AF6504"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.9395 29.661C32.9841 29.6606 33.0278 29.6732 33.0654 29.6972C33.1031 29.7211 33.133 29.7555 33.1516 29.796L32.9395 29.661Z",
                            fill: "#AF6504"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M24.8451 28.2203C24.8022 28.2139 24.7612 28.1986 24.7246 28.1754C24.688 28.1521 24.6567 28.1214 24.6328 28.0852L24.8451 28.2203Z",
                            fill: "#AF6504"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.0527 25.6148C31.0776 25.5635 31.113 25.5178 31.1566 25.481C31.2001 25.4441 31.251 25.4168 31.3058 25.4008L31.0527 25.6148Z",
                            fill: "#A95E03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.6328 24.9137C29.635 24.8667 29.6485 24.8209 29.6722 24.7803C29.696 24.7396 29.7292 24.7053 29.769 24.6803L29.6328 24.9137Z",
                            fill: "#AF6504"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.7317 32.3079C26.708 32.3539 26.6752 32.3947 26.6354 32.4279C26.5957 32.461 26.5496 32.4858 26.5 32.5007L26.7317 32.3079Z",
                            fill: "#A95E03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.2402 31.122C32.289 31.1425 32.3322 31.1744 32.3661 31.2151C32.3999 31.2557 32.4236 31.3039 32.435 31.3556L32.2402 31.122Z",
                            fill: "#A95E03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.5607 25.4184C26.5467 25.3988 26.5391 25.3751 26.5391 25.3509C26.5391 25.3267 26.5467 25.303 26.5607 25.2834C26.5607 25.2834 26.5607 25.3799 26.5607 25.4184Z",
                            fill: "#C57F03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.354 31.3545C25.3329 31.3648 25.3097 31.3701 25.2863 31.3701C25.2629 31.3701 25.2398 31.3648 25.2188 31.3545C25.2188 31.3545 25.3347 31.3739 25.354 31.3545Z",
                            fill: "#C57F03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.2852 32.4839C31.2993 32.5035 31.307 32.5271 31.307 32.5513C31.307 32.5756 31.2993 32.5992 31.2852 32.6189C31.2852 32.6189 31.3045 32.5224 31.2852 32.4839Z",
                            fill: "#C67F03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.3965 26.5667C32.4175 26.5564 32.4406 26.5511 32.464 26.5511C32.4874 26.5511 32.5105 26.5564 32.5316 26.5667C32.5316 26.5667 32.3965 26.5473 32.3965 26.5667Z",
                            fill: "#C57F03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.627 27.4243H32.8394C32.8071 27.4429 32.7704 27.4527 32.7332 27.4527C32.6959 27.4527 32.6592 27.4429 32.627 27.4243Z",
                            fill: "#C07904"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.3563 25.1452C27.3429 25.1218 27.3359 25.0952 27.3359 25.0681C27.3359 25.041 27.3429 25.0144 27.3563 24.9909C27.3563 24.9909 27.3182 25.0874 27.3563 25.1452Z",
                            fill: "#C37D04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.4512 32.7563C30.4647 32.7798 30.4718 32.8064 30.4718 32.8335C30.4718 32.8606 30.4647 32.8872 30.4512 32.9107C30.4512 32.9107 30.4512 32.8142 30.4512 32.7563Z",
                            fill: "#C37D04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.0804 30.4978C25.0569 30.5113 25.0303 30.5184 25.0031 30.5184C24.976 30.5184 24.9493 30.5113 24.9258 30.4978C24.9767 30.4862 25.0295 30.4862 25.0804 30.4978Z",
                            fill: "#C47D04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.4512 25.2617C30.478 25.191 30.5172 25.1257 30.5669 25.0688C30.5523 25.1448 30.5113 25.2131 30.4512 25.2617Z",
                            fill: "#B46C03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.4504 25.0678C30.4369 25.0444 30.4297 25.0177 30.4297 24.9906C30.4297 24.9635 30.4369 24.9369 30.4504 24.9135C30.464 24.9369 30.4712 24.9635 30.4712 24.9906C30.4712 25.0177 30.464 25.0444 30.4504 25.0678Z",
                            fill: "#D18B06"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.317 32.8334C27.317 32.8334 27.317 32.9491 27.317 32.9877C27.317 33.0263 27.317 32.9877 27.317 32.8527C27.317 32.7177 27.298 32.8141 27.317 32.8334Z",
                            fill: "#D18B06"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.318 32.8317C27.3041 32.8015 27.2969 32.7686 27.2969 32.7353C27.2969 32.702 27.3041 32.6691 27.318 32.6389V32.8317Z",
                            fill: "#B46C03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.1948 27.4039C25.1238 27.3874 25.0578 27.3544 25.002 27.3075C25.0753 27.317 25.1432 27.3509 25.1948 27.4039Z",
                            fill: "#B56D03"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M25.0001 27.3461C24.9499 27.3624 24.8959 27.3624 24.8457 27.3461C24.8692 27.3326 24.8957 27.3254 24.9228 27.3254C24.9499 27.3254 24.9766 27.3326 25.0001 27.3461Z",
                            fill: "#D18B04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.9328 25.1081V25.3027C28.8948 25.1099 28.8948 24.9116 28.9328 24.7188V25.1081Z",
                            fill: "#B36A04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.8809 28.9999C33.0532 28.9562 33.2337 28.9562 33.4061 28.9999H32.8809Z",
                            fill: "#CC8505"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.2819 29.9926C29.3345 30.0491 29.4019 30.0896 29.4764 30.1093C29.4764 30.1093 29.3403 30.1093 29.2625 30.1093C29.1524 30.1024 29.0418 30.1024 28.9317 30.1093H28.815C28.7049 30.1024 28.5945 30.1024 28.4844 30.1093L28.6011 29.9926C28.8274 29.9692 29.0556 29.9692 29.2819 29.9926Z",
                            fill: "#F0B105"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.8355 30.148H28.9327C28.9327 30.148 29.0496 30.148 29.0885 30.148C29.0278 30.1773 28.9613 30.1925 28.8939 30.1925C28.8265 30.1925 28.7599 30.1773 28.6992 30.148C28.6992 30.148 28.7771 30.148 28.8355 30.148Z",
                            fill: "#8E3D04"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.0873 30.1866C29.0367 30.1702 28.9822 30.1702 28.9316 30.1866C29.0399 30.1567 29.1542 30.1567 29.2625 30.1866H29.0873Z",
                            fill: "#A05303"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.8344 30.1479C28.8132 30.1376 28.7899 30.1323 28.7664 30.1323C28.7428 30.1323 28.7194 30.1376 28.6982 30.1479C28.6282 30.1669 28.5544 30.1669 28.4844 30.1479C28.601 30.1285 28.7177 30.0897 28.8344 30.1479Z",
                            fill: "#A45903"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.5933 28.4353H29.4766C29.5685 28.3643 29.6814 28.3258 29.7976 28.3258C29.9138 28.3258 30.0268 28.3643 30.1187 28.4353C29.9502 28.3672 29.7618 28.3672 29.5933 28.4353Z",
                            fill: "#F2B307"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.6504 28.725H29.4766C29.4766 28.6286 29.4766 28.6093 29.5924 28.5514C29.7083 28.4936 29.5732 28.6479 29.6504 28.725Z",
                            fill: "#EBAA08"
                          }
                        })
                      ])
                    ]
                  )
                : _vm._e(),
              _vm._v(" "),
              _vm.idiomas.some(function(i) {
                return i.diminutivo === "ch"
              })
                ? _c(
                    "a",
                    {
                      staticClass: "Suiza",
                      attrs: {
                        href:
                          "/cursos/" +
                          _vm.idiomas.find(function(i) {
                            return i.diminutivo === "ch"
                          }).nombreURL
                      }
                    },
                    [
                      _c("g", { attrs: { transform: "translate(460,170)" } }, [
                        _c("path", {
                          attrs: {
                            d:
                              "M50.663 44.7804L28.5194 74.9585L6.33699 44.7804C3.32729 40.6831 1.51225 35.8318 1.09347 30.7653C0.674695 25.6987 1.66858 20.6152 3.96473 16.0795C6.26088 11.5437 9.76941 7.7332 14.1006 5.07122C18.4318 2.40925 23.4162 1 28.5 1C33.5838 1 38.5682 2.40925 42.8994 5.07122C47.2306 7.7332 50.7391 11.5437 53.0353 16.0795C55.3314 20.6152 56.3253 25.6987 55.9065 30.7653C55.4878 35.8318 53.6727 40.6831 50.663 44.7804Z",
                            fill: "#FAB500"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M50.663 44.7804L28.5194 74.9585L6.33699 44.7804C3.32729 40.6831 1.51225 35.8318 1.09347 30.7653C0.674695 25.6987 1.66858 20.6152 3.96473 16.0795C6.26088 11.5437 9.76941 7.7332 14.1006 5.07122C18.4318 2.40925 23.4162 1 28.5 1C33.5838 1 38.5682 2.40925 42.8994 5.07122C47.2306 7.7332 50.7391 11.5437 53.0353 16.0795C55.3314 20.6152 56.3253 25.6987 55.9065 30.7653C55.4878 35.8318 53.6727 40.6831 50.663 44.7804V44.7804Z",
                            stroke: "#2F6A69",
                            "stroke-width": "0.83",
                            "stroke-miterlimit": "10"
                          }
                        }),
                        _vm._v(" "),
                        _c(
                          "g",
                          {
                            staticStyle: { "mix-blend-mode": "multiply" },
                            attrs: { opacity: "0.2" }
                          },
                          [
                            _c("path", {
                              attrs: {
                                d:
                                  "M38.4934 84.2352C38.4934 85.6908 34.0298 86.8552 28.5181 86.8552C23.0065 86.8552 18.5234 85.6908 18.5234 84.2352C18.5234 82.7797 23.0065 81.6541 28.5181 81.6541C34.0298 81.6541 38.4934 82.7797 38.4934 84.2352Z",
                                fill: "#00792D"
                              }
                            })
                          ]
                        ),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M51.4391 28.9525C51.4402 29.8536 51.3817 30.7538 51.2641 31.6473C51.0704 33.391 50.659 35.1038 50.0397 36.7459C49.5482 38.0935 48.9299 39.3917 48.1933 40.6232L47.3575 41.8833C47.1826 42.116 47.0271 42.3486 46.8522 42.5619C45.5723 44.2327 44.0682 45.72 42.382 46.982C38.487 49.8757 33.76 51.4386 28.9033 51.4386C24.0467 51.4386 19.3197 49.8757 15.4247 46.982C13.749 45.7145 12.252 44.2277 10.9739 42.5619C10.799 42.3486 10.6241 42.116 10.4686 41.8833L9.63286 40.6232C8.88823 39.396 8.2696 38.097 7.78644 36.7459C7.16976 35.1018 6.75214 33.3901 6.54253 31.6473C6.44118 30.7525 6.38924 29.8529 6.38701 28.9525C6.3661 24.8578 7.46838 20.8354 9.5745 17.3206C9.86603 16.8359 10.1771 16.3706 10.5075 15.9054C13.5942 11.5442 18.1332 8.41813 23.3156 7.08452C26.6292 6.23838 30.0932 6.16011 33.4419 6.85571C36.7905 7.55131 39.9351 9.00229 42.6347 11.0975C44.3989 12.4592 45.9455 14.0803 47.2215 15.9054L47.4354 16.1962C47.688 16.5645 47.9407 16.9523 48.1545 17.3206C49.8361 20.0892 50.8846 23.1937 51.2252 26.4129C51.3807 27.3047 51.4391 28.1189 51.4391 28.9525Z",
                            fill: "#F52717"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M40.8456 25.4238H32.4688V17.0682H25.3358V25.4238H16.9785V32.5386H25.3358V40.8748H32.4688V32.5386H40.8456V25.4238Z",
                            fill: "white"
                          }
                        })
                      ])
                    ]
                  )
                : _vm._e(),
              _vm._v(" "),
              _vm.idiomas.some(function(i) {
                return i.diminutivo === "hr"
              })
                ? _c(
                    "a",
                    {
                      staticClass: "Croacia",
                      attrs: {
                        href:
                          "/cursos/" +
                          _vm.idiomas.find(function(i) {
                            return i.diminutivo === "hr"
                          }).nombreURL
                      }
                    },
                    [
                      _c("g", { attrs: { transform: "translate(510,190)" } }, [
                        _c("path", {
                          attrs: {
                            d:
                              "M50.663 44.7804L28.5194 74.9585L6.33699 44.7804C3.32729 40.6831 1.51225 35.8318 1.09347 30.7653C0.674695 25.6987 1.66858 20.6152 3.96473 16.0795C6.26088 11.5437 9.76941 7.7332 14.1006 5.07122C18.4318 2.40925 23.4162 1 28.5 1C33.5838 1 38.5682 2.40925 42.8994 5.07122C47.2306 7.7332 50.7391 11.5437 53.0353 16.0795C55.3314 20.6152 56.3253 25.6987 55.9065 30.7653C55.4878 35.8318 53.6727 40.6831 50.663 44.7804Z",
                            fill: "#FAB500"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M50.663 44.7804L28.5194 74.9585L6.33699 44.7804C3.32729 40.6831 1.51225 35.8318 1.09347 30.7653C0.674695 25.6987 1.66858 20.6152 3.96473 16.0795C6.26088 11.5437 9.76941 7.7332 14.1006 5.07122C18.4318 2.40925 23.4162 1 28.5 1C33.5838 1 38.5682 2.40925 42.8994 5.07122C47.2306 7.7332 50.7391 11.5437 53.0353 16.0795C55.3314 20.6152 56.3253 25.6987 55.9065 30.7653C55.4878 35.8318 53.6727 40.6831 50.663 44.7804V44.7804Z",
                            stroke: "#2F6A69",
                            "stroke-width": "0.83",
                            "stroke-miterlimit": "10"
                          }
                        }),
                        _vm._v(" "),
                        _c(
                          "g",
                          {
                            staticStyle: { "mix-blend-mode": "multiply" },
                            attrs: { opacity: "0.2" }
                          },
                          [
                            _c("path", {
                              attrs: {
                                d:
                                  "M38.4934 84.2352C38.4934 85.6908 34.0298 86.8552 28.5181 86.8552C23.0065 86.8552 18.5234 85.6908 18.5234 84.2352C18.5234 82.7797 23.0065 81.6541 28.5181 81.6541C34.0298 81.6541 38.4934 82.7797 38.4934 84.2352Z",
                                fill: "#00792D"
                              }
                            })
                          ]
                        ),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M50.4391 28.8046C50.4395 29.7092 50.381 30.6129 50.2641 31.5099C50.0681 33.1684 49.69 34.8001 49.1364 36.3755H6.68999C6.13899 34.7982 5.75444 33.1674 5.54274 31.5099C5.44193 30.6116 5.39009 29.7085 5.38727 28.8046C5.36855 26.1504 5.82288 23.5141 6.72892 21.0195H49.1169V21.1169C49.704 22.7717 50.0955 24.4896 50.2835 26.2355C50.3883 27.0878 50.4403 27.9458 50.4391 28.8046Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M49.1165 21.1169H6.72852C7.24422 19.7573 7.89565 18.4532 8.67292 17.2244C8.96458 16.7379 9.27564 16.2513 9.60619 15.8037C12.6917 11.4142 17.2432 8.27344 22.4392 6.94825C25.7568 6.11463 29.2202 6.04583 32.5681 6.74708C35.9161 7.44833 39.0613 8.90133 41.7666 10.9965C43.5375 12.363 45.0912 13.9904 46.3748 15.8231L46.5693 16.1151C46.8221 16.4849 47.0748 16.8546 47.3082 17.2439C48.0332 18.4741 48.6388 19.771 49.1165 21.1169Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M49.1164 36.3754V36.5505C48.6339 37.9073 48.0149 39.2115 47.2692 40.443C46.9969 40.8712 46.7247 41.2994 46.4331 41.7081L45.9275 42.4088C44.6467 44.0801 43.1418 45.5667 41.4554 46.8267C37.5638 49.7437 32.8328 51.3202 27.9711 51.3202C23.1093 51.3202 18.3783 49.7437 14.4867 46.8267C12.8107 45.5613 11.3129 44.0752 10.034 42.4088L9.52852 41.7081C9.23686 41.2994 8.96466 40.8712 8.69244 40.443C7.91307 39.2155 7.26153 37.9111 6.74805 36.5505V36.3754H49.1164Z",
                            fill: "#000478"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.0762 24.9713V28.8638H29.7901V24.9713H26.0762ZM29.7511 28.8638H26.0956V24.9713H29.7511V28.8638Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.7305 21.0785V24.971H33.2886V21.0785H29.7305ZM33.2497 24.971H29.7694V21.0785H33.2497V24.971Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.7305 28.8041V32.6967H33.2886V28.8041H29.7305ZM29.7305 28.8041H33.2109V32.6967H29.7305V28.8041Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M22.5371 28.8041V32.6967H26.0757V28.8041H22.5371ZM26.0564 32.6967H22.5759V28.8041H26.0564V32.6967Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.0762 32.7169V36.6094H29.7901V32.7169H26.0762ZM29.7511 36.6094H26.0956V32.7169H29.7511V36.6094Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M22.5371 21.0785V24.971H26.0757V21.0785H22.5371ZM26.0564 24.971H22.5759V21.0785H26.0564V24.971Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M22.5556 24.9898V21.0973H18.8613V24.9898H22.5556Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.7509 24.9898V21.0973H26.0566V24.9898H29.7509Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M33.2695 24.971H36.9447V21.0785H33.2695V24.971Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M22.5556 32.7166V28.824H18.8613V32.7166H22.5556Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.0566 32.7166H29.7509V28.824H26.0566V32.7166Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M33.2695 28.824V32.7166H36.9447V28.824H33.2695Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M22.5566 36.5501V38.7299C23.6145 39.4614 24.8027 39.9833 26.0566 40.2675V36.5501H22.5566Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.752 40.2675C31.0145 39.9811 32.2096 39.4523 33.2711 38.7105V36.5501H29.752V40.2675Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M22.5561 36.5501H20.2617C20.6716 37.0999 21.1412 37.6025 21.6617 38.0487C21.9467 38.2926 22.2452 38.5201 22.5561 38.7299V36.5501Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.7509 36.5501H26.0566V40.2674C27.273 40.5399 28.5345 40.5399 29.7509 40.2674V36.5501Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M33.2695 36.5501V38.7104C33.5223 38.5352 33.814 38.3017 34.0474 38.1071C34.5938 37.642 35.0892 37.1201 35.5252 36.5501H33.2695Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.0566 24.9901H22.5566V28.8243H26.0566V24.9901Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.752 24.9901V28.8243H33.2711V24.9901H29.752Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.0566 32.7169H22.5566V36.5511H26.0566V32.7169Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.752 32.7169V36.5511H33.2711V32.7169H29.752Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M22.5556 21.0978H36.9442V20.8058C31.0901 18.7588 24.7155 18.7588 18.8613 20.8058V21.0783L22.5556 21.0978Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M36.8274 21.1369H18.7832V32.8144C18.8658 34.1261 19.3027 35.3907 20.0471 36.4734V36.5902L20.3388 36.921C20.6638 37.3016 21.0145 37.6593 21.3888 37.9915L21.8166 38.3418L22.2638 38.6726C23.8065 39.7693 25.6414 40.3794 27.5331 40.4243H27.7081C29.1734 40.3667 30.6083 39.9884 31.9118 39.3159C33.2153 38.6434 34.3555 37.693 35.2525 36.5318V36.415C36.0031 35.3355 36.4406 34.0691 36.5164 32.756V21.1953L36.8274 21.1369ZM36.8274 32.8144C36.739 34.128 36.2955 35.3928 35.5442 36.4734V36.5707L35.3691 36.8042L35.2135 36.9794L34.9219 37.2908C34.8247 37.3881 34.7274 37.5049 34.6108 37.6022C34.2219 37.9763 33.8059 38.321 33.3663 38.6337L33.0553 38.8283C32.9771 38.9043 32.8845 38.9639 32.783 39.0035L32.472 39.1981L31.8303 39.5095L31.4998 39.6458L31.1886 39.782L30.8386 39.8988L30.4886 40.0156L30.1581 40.1129H29.8859L28.8747 40.2686H28.0386C27.4434 40.2702 26.8499 40.2049 26.2693 40.0739C25.0215 39.7892 23.8399 39.2673 22.7888 38.5364C21.9243 37.9442 21.1623 37.2145 20.5332 36.3761V36.2787C19.9468 35.4254 19.5491 34.4567 19.3666 33.4372V33.1258C19.3571 33.0027 19.3571 32.8791 19.3666 32.756V21.0785H37.3913L36.8274 32.8144Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M36.8475 21.157H18.9785V21.2933H36.8475V21.157Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.0386 40.5786C25.8641 40.5118 23.7671 39.7553 22.0499 38.4183C21.1363 37.7635 20.3724 36.9215 19.8092 35.9484C19.2459 34.9752 18.8962 33.8931 18.7832 32.7741V20.9798H18.9193V32.7741C19.0351 33.8718 19.3828 34.9323 19.9392 35.8853C20.4957 36.8382 21.2484 37.6619 22.1471 38.3015C23.8156 39.6161 25.8584 40.3658 27.9804 40.4424C30.0095 40.3687 31.9632 39.6533 33.5608 38.3988C34.4313 37.7321 35.1755 36.9148 35.758 35.9855C36.3577 35.0122 36.7238 33.9129 36.8274 32.7741V20.9798H36.983V32.7741C36.8687 33.9346 36.4895 35.0533 35.8747 36.0438C35.2966 36.9936 34.5445 37.8256 33.658 38.4961C32.0507 39.7652 30.0841 40.494 28.0386 40.5786Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.0392 40.4437C25.9172 40.3671 23.8745 39.6174 22.206 38.3028C21.2978 37.665 20.5364 36.84 19.973 35.8833C19.4096 34.9266 19.0572 33.8603 18.9395 32.756V21.1758H19.095V32.756C19.2141 33.8403 19.5594 34.8875 20.1088 35.8297C20.6581 36.7718 21.3992 37.5879 22.2839 38.2249C23.9539 39.5316 25.9982 40.2683 28.1171 40.3269C30.1102 40.2742 32.0358 39.5931 33.6196 38.3807C34.5061 37.7244 35.2497 36.894 35.8047 35.9402C36.3596 34.9865 36.7144 33.9295 36.8474 32.8338V21.2536H36.8279V32.8338C36.697 33.9474 36.3375 35.0219 35.772 35.9899C35.2066 36.9578 34.4473 37.7983 33.5419 38.4585C31.9642 39.6873 30.0373 40.3824 28.0392 40.4437Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M39.0445 16.0369L37.625 13.5846L34.864 14.7329L34.6696 14.5188L32.7252 12.5726L30.2363 14.1101L30.1197 14.0128L29.7307 13.7014L27.7864 12.2028L25.7059 14.0517L24.9671 13.6041L23.0227 12.4558L21.6616 14.188L21.3893 14.5383L21.1755 14.8302L18.395 13.5457H18.2199L16.8978 15.998L16.7422 16.2899L18.9978 20.8053C19.7917 20.5187 20.6036 20.2847 21.4283 20.1046H21.7198C23.747 19.6748 25.8117 19.4466 27.8837 19.4234H28.2919C30.0996 19.4287 31.9005 19.6442 33.6585 20.0657C34.46 20.2532 35.2465 20.5004 36.0112 20.8053H36.2251L36.5945 20.961L36.7306 20.669L38.8306 16.6013L39.0445 16.0369ZM37.3529 19.8321L37.0417 20.4355L36.8278 20.8053C35.4415 20.2212 33.9934 19.7968 32.5113 19.5402C31.1896 19.3018 29.8488 19.1845 28.5058 19.1899H28.0975C26.1852 19.2191 24.279 19.4145 22.4005 19.7737L21.6421 19.9294C20.9616 20.0851 20.3977 20.2408 19.97 20.3771L19.2311 20.6301H19.056L16.8394 16.1537L16.9755 15.9007L17.0922 15.6671L18.2783 13.4484H18.4145L21.2337 14.7329L21.4477 14.4605L21.7782 14.0323L23.0809 12.3779L25.0253 13.4873L25.8226 13.9544L27.903 12.1055L29.8474 13.5846L30.2558 13.9155H30.353L32.8419 12.3779L34.7863 14.3242L34.9806 14.5383L37.7611 13.39L38.5389 14.7329L39.025 15.5893L39.1611 15.8228L39.2973 16.0759L37.3529 19.8321Z",
                            fill: "#FD0508"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M35.6804 18.7236L35.2721 18.1981L34.9027 18.0814L35.2916 18.5874L36.7887 20.5336V20.3196L35.6804 18.7236ZM33.5416 15.9794L33.6582 16.1156L34.2415 16.8552V16.6217L33.7554 15.9988L33.5416 15.9794ZM31.4611 15.2009H29.5167H28.5639H26.6195H25.9973H24.3834H24.0334L23.2945 15.3176H22.9251L21.9918 16.5438L21.4085 17.3223C21.4275 17.4448 21.4275 17.5696 21.4085 17.6921L22.0695 16.8358L23.2363 15.2787H26.0362H31.7333C31.6364 15.2845 31.5403 15.257 31.4611 15.2009ZM37.022 20.4558L36.9054 20.3001L35.6804 18.7236L35.2721 18.1981L35.0194 17.8867V17.7894L34.8248 17.5559V17.4391L34.5915 17.1471V17.0109L34.2999 16.6411L33.8138 16.0183L33.4444 15.5512V15.4539H26.2695H24.6556H23.3918L23.1973 15.7264L22.2641 16.9525L21.6808 17.731L21.5057 17.984L21.2529 18.3149L20.7474 18.9766L19.5418 20.5726L19.4057 20.7477L19.5224 21.0202V21.1759H19.639C20.3961 20.8315 21.1757 20.5389 21.9724 20.3001L22.439 20.1638L22.9057 20.0276C24.5984 19.5666 26.3431 19.3246 28.0973 19.3075H28.5445C30.0473 19.3258 31.5449 19.4888 33.0166 19.7941L34.3194 20.1055L34.8055 20.2417L35.5055 20.4753C36.0648 20.6648 36.6104 20.8924 37.1387 21.1564V21.0397L37.2553 20.7283L37.022 20.4558ZM20.4752 18.6263L21.1363 17.7505L21.7974 16.8941L22.964 15.3371H25.764H32.9388L33.3277 15.8431L33.4444 15.9794L34.0277 16.719L34.4749 17.3028V17.4196L34.8638 17.9257L35.2527 18.4317L36.7499 20.3779V20.5336C36.0174 20.1785 35.2563 19.8855 34.4749 19.6578C34.1249 19.6578 33.736 19.4437 33.2693 19.3464C32.1188 19.069 30.9488 18.8803 29.7694 18.782C29.2189 18.7515 28.6672 18.7515 28.1167 18.782H27.6694C27.1639 18.782 26.6778 18.782 26.2111 18.782C25.009 18.8843 23.8184 19.0927 22.653 19.4048C21.5033 19.6821 20.3782 20.0531 19.2891 20.5142V20.3779L20.4752 18.6263ZM31.4805 15.3566C31.471 15.3051 31.471 15.2523 31.4805 15.2009H29.5361H28.5834H26.639H26.0167H24.4029H24.0529L23.314 15.3176H22.9446L22.0113 16.5438L21.428 17.3223C21.447 17.4448 21.447 17.5696 21.428 17.6921L22.089 16.8358L23.2557 15.2787H26.0557H31.7528L31.4805 15.3566ZM33.561 15.9794L33.6777 16.1156L34.261 16.8552V16.6217L33.561 15.9794ZM35.6804 18.7236L35.2721 18.1981L34.9027 18.0814L35.2916 18.5874L36.7887 20.5336V20.3196L35.6804 18.7236Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.0961 18.8987H26.1155L25.668 13.6049L26.0961 18.8987Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M39.1418 15.8238L37.4501 13.099L34.7085 14.1306L32.7641 11.9118L30.2169 13.3715L27.9225 11.4252L25.6476 13.3715L23.1199 11.9118L21.1755 14.1306L18.395 13.099L16.7422 15.8238L18.9394 20.7867L19.1144 20.6894L16.9562 15.8043L18.4727 13.352L21.2338 14.3641L23.1782 12.1648L25.7253 13.6051L27.9809 11.7756L30.1975 13.6245L32.7252 12.1843L34.6697 14.3446L37.4112 13.352L38.9279 15.8043L36.8279 20.8062L37.0223 20.9035L39.1418 15.8238Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M21.2719 14.3634L18.5108 13.3514L16.9941 15.8036L19.1524 20.6888C20.27 20.2222 21.4203 19.8384 22.5941 19.5405L21.2719 14.3634Z",
                            fill: "#0592E0"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M23.2178 12.1651L21.2734 14.3644L22.5956 19.5414C23.7625 19.2317 24.9524 19.0169 26.1539 18.8992L25.726 13.6053L23.2178 12.1651Z",
                            fill: "#06079B"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.0207 18.8591H29.6736L30.1403 13.5653L27.9235 11.6191L25.668 13.5653L26.0957 18.8591C26.7374 18.8591 27.379 18.8591 28.0207 18.8591Z",
                            fill: "#0592E0"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.7695 18.859C30.9481 18.9636 32.1177 19.1522 33.2694 19.4234L34.65 14.2658L32.7056 12.1055L30.1779 13.5457C30.1779 13.5457 29.8473 17.8858 29.7695 18.859Z",
                            fill: "#06079B"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.7711 18.8595C29.7711 17.8086 30.1408 13.5463 30.1408 13.5463L29.6738 18.8401L29.7711 18.8595Z",
                            fill: "#06079B"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M37.3917 13.3514L34.6501 14.344L33.2695 19.5015C34.4989 19.8073 35.6919 20.2445 36.8279 20.8055L39.0056 15.901L37.3917 13.3514Z",
                            fill: "#0592E0"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M33.2695 19.5024L34.6503 14.3448L33.2695 19.5024Z",
                            fill: "#0592E0"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M18.5703 17.691C18.5703 17.691 19.3091 18.7225 20.2813 18.2555C20.5669 18.1496 20.8038 17.9425 20.9471 17.6735C21.0905 17.4045 21.1303 17.0922 21.059 16.7958C21.14 16.9612 21.1864 17.1413 21.1959 17.3252C21.2053 17.5092 21.1773 17.6931 21.1137 17.8659C21.0501 18.0387 20.9522 18.1968 20.8258 18.3307C20.6995 18.4646 20.5472 18.5714 20.3785 18.6447C20.1987 18.7244 20.0032 18.7623 19.8067 18.7556C19.6102 18.749 19.4177 18.6978 19.2438 18.6061C19.0698 18.5143 18.9188 18.3843 18.8022 18.2258C18.6856 18.0674 18.6063 17.8845 18.5703 17.691Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M21.2735 17.3218C21.2607 17.1418 21.2214 16.9647 21.1569 16.7963C21.2121 17.0068 21.2121 17.228 21.1569 17.4386C21.1678 17.5095 21.1678 17.5817 21.1569 17.6527C21.1018 17.7825 21.0149 17.8963 20.9041 17.9835C20.7801 18.1007 20.635 18.1932 20.4764 18.256C20.3254 18.3315 20.1591 18.3714 19.9903 18.3728C19.7534 18.3484 19.524 18.2753 19.3165 18.1581C19.1091 18.0409 18.928 17.882 18.7848 17.6916C18.8476 17.9812 19.0032 18.2424 19.2278 18.4356C19.4523 18.6288 19.7336 18.7434 20.0291 18.762C20.145 18.7812 20.2632 18.7812 20.3791 18.762C20.4566 18.7708 20.5349 18.7708 20.6124 18.762H20.7097C21.0003 18.6317 21.2298 18.3949 21.3512 18.1003C21.3696 18.0038 21.3696 17.9048 21.3512 17.8084C21.3443 17.6437 21.3182 17.4804 21.2735 17.3218ZM21.2735 17.711C21.2526 17.9032 21.1801 18.086 21.0637 18.2402C20.9473 18.3944 20.7913 18.5142 20.6124 18.5868H20.4958C20.4182 18.5957 20.34 18.5957 20.2624 18.5868C20.1466 18.6061 20.0284 18.6061 19.9125 18.5868C19.6269 18.5794 19.3522 18.4753 19.1333 18.2915C18.9144 18.1077 18.7641 17.855 18.707 17.5748C18.8457 17.7638 19.0235 17.9207 19.2281 18.0349C19.4328 18.1491 19.6595 18.2178 19.893 18.2365C20.0678 18.233 20.2399 18.1932 20.3986 18.1197C20.5326 18.0606 20.6571 17.9819 20.768 17.8862C20.9209 17.7693 21.0413 17.6152 21.1179 17.4386C21.1243 17.3934 21.1243 17.3475 21.1179 17.3023C21.1625 17.1168 21.1625 16.9234 21.1179 16.7379C21.134 16.8867 21.134 17.0368 21.1179 17.1855C21.1369 17.3081 21.1369 17.4328 21.1179 17.5553L21.2735 17.711Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M19.3296 15.1817L19.8352 14.9481L19.6601 15.4736L20.1075 15.8045L19.5629 15.9213L19.5047 16.4662L19.1352 16.0575L18.6296 16.291L18.8046 15.7656L18.3379 15.4347L18.8824 15.3179L18.9407 14.7535L19.3296 15.1817Z",
                            fill: "#FDDA00"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M20.1269 15.8039L19.6797 15.4925L19.8743 14.9476L19.3492 15.1811L18.9603 14.753V15.3174L18.3965 15.4342L18.8631 15.7845L18.6881 16.3294L19.1742 16.1153L19.5436 16.5435V15.9985L20.0881 15.8818L20.1269 15.8039ZM19.5631 15.8039V16.31L19.2326 15.9207L18.7659 16.1153L18.9214 15.6288L18.4937 15.3368L18.9798 15.2201V14.6946L19.3103 15.0838L19.7769 14.8697L19.602 15.3563L20.0103 15.6482H19.5048L19.5631 15.8039Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M18.8027 15.7651V15.7456L19.6587 15.4731V15.4926L18.8027 15.7651Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M20.1055 15.8039L18.3555 15.4341V15.4146L20.1055 15.8039Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M19.562 15.9203L18.8809 15.317H18.9003L19.562 15.9203Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M19.5038 16.4851L18.9395 14.7723H18.9589L19.5231 16.4656L19.5038 16.4851Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M19.3042 15.1648L19.125 16.0421L19.144 16.046L19.3233 15.1687L19.3042 15.1648Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M19.7699 14.8587L18.5664 16.184L18.5808 16.1971L19.7843 14.8717L19.7699 14.8587Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M37.1215 14.7137L37.6659 14.8499L37.2187 15.1613L37.3743 15.7063L36.8687 15.4533L36.4798 15.862L36.4409 15.2976L35.8965 15.1613L36.3631 14.8499L36.2076 14.3244L36.7131 14.558L37.0826 14.1687L37.1215 14.7137Z",
                            fill: "#FDDA00"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M37.2168 15.1616L37.6834 14.8502L37.1389 14.7139V14.1301L36.7501 14.5582L36.2251 14.3052L36.3807 14.8502L35.9141 15.1811L36.439 15.3173V15.8623L36.8084 15.473L37.3139 15.7066L37.2168 15.1616ZM36.8668 15.4535L36.5362 15.8233V15.2978L36.0501 15.1811L36.4779 14.8891L36.3418 14.3831L36.7889 14.5972L37.1389 14.2079V14.7139L37.6445 14.8307L37.2168 15.1227L37.3723 15.6092L36.8668 15.4535Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M37.2173 15.1806L36.3613 14.8692V14.8497L37.2173 15.1611V15.1806Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M37.3717 15.7069L36.2051 14.3444L36.2245 14.325L37.3717 15.6874V15.7069Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M36.7203 14.4407L36.7012 14.4443L36.863 15.3248L36.8822 15.3213L36.7203 14.4407Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M37.01 14.11L36.4082 15.7963L36.4265 15.8029L37.0283 14.1165L37.01 14.11Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M37.1192 14.6929L36.4375 15.2733L36.4501 15.2881L37.1318 14.7077L37.1192 14.6929Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M35.9159 15.1806L35.8965 15.1611L37.6659 14.8497L35.9159 15.1806Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M33.6387 18.1009C34.9051 18.4208 36.1412 18.8506 37.333 19.3855L37.4886 19.0351C36.2818 18.4922 35.0249 18.0685 33.7359 17.7701L33.6387 18.1009Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M38.1506 17.5548C36.8798 17.0196 35.5817 16.5519 34.2617 16.1535V16.5038C35.5949 16.8531 36.8959 17.3153 38.1506 17.8856V17.5548Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M34.067 16.5043L33.7363 17.7693C35.0237 18.074 36.2801 18.4974 37.4893 19.0344L37.9947 17.8861C36.7226 17.3258 35.4096 16.8638 34.067 16.5043Z",
                            fill: "#FD0001"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M35.623 17.8081C35.623 17.8081 35.623 17.6914 35.9345 17.8081C36.246 17.9249 36.1098 17.9443 36.0903 17.9638C36.0708 17.9832 36.0903 17.9638 36.0903 17.9638C36.0903 17.9638 35.9346 17.9638 35.8956 17.9638C35.8567 17.9638 35.6425 17.847 35.623 17.8081Z",
                            fill: "white"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M35.9344 17.7496H35.7788C35.7546 17.7376 35.7279 17.7313 35.7009 17.7313C35.6738 17.7313 35.6472 17.7376 35.623 17.7496H36.1291C36.1291 17.7496 36.0512 17.7885 35.9344 17.7496ZM36.0901 17.9248H35.9733H35.8761C35.9138 17.9114 35.9551 17.9114 35.9928 17.9248H36.1486C36.2848 17.9248 36.3042 18.0221 36.3042 18.0221L36.0901 17.9248Z",
                            fill: "#232020"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M21.5458 15.6095C22.9262 15.2394 24.3392 15.0048 25.765 14.9089V13.6049C24.2578 13.6962 22.7649 13.9507 21.3125 14.3639L21.5458 15.6095Z",
                            fill: "#FD0001"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M21.8555 16.9131C23.172 16.5565 24.52 16.3284 25.8805 16.2319V17.5748C24.5607 17.5724 23.2487 17.776 21.9916 18.1782L21.8555 16.9131Z",
                            fill: "#FD0001"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.7194 16.8549H28.6028C28.6028 16.8549 28.6028 16.8549 28.6028 16.7576C28.6028 16.6603 28.6028 16.8549 28.4862 16.8938C28.4952 16.8723 28.4999 16.8491 28.4999 16.8257C28.4999 16.8023 28.4952 16.7792 28.4862 16.7576H28.3501C28.3289 16.7473 28.3055 16.7419 28.2819 16.7419C28.2584 16.7419 28.2352 16.7473 28.214 16.7576H27.2224C27.1721 16.7398 27.1172 16.7398 27.0669 16.7576H26.9502C26.9812 16.7576 27.0108 16.7699 27.0327 16.7918C27.0546 16.8137 27.0669 16.8434 27.0669 16.8744C27.001 16.8302 26.9476 16.7699 26.9114 16.6992C26.9019 16.7507 26.9019 16.8035 26.9114 16.8549H27.0086H27.1058C27.1255 16.9007 27.1548 16.9418 27.1917 16.9754C27.2286 17.0089 27.2722 17.0342 27.3196 17.0495C27.3196 17.0495 27.3196 17.0495 27.203 17.1663C27.2533 17.1841 27.3082 17.1841 27.3585 17.1663V17.2831V17.3804C27.3763 17.3906 27.3963 17.396 27.4168 17.396C27.4373 17.396 27.4574 17.3906 27.4752 17.3804V17.5361H27.5724H27.689C27.7161 17.6049 27.7161 17.6814 27.689 17.7501C27.701 17.7188 27.701 17.6842 27.689 17.6529C27.689 17.6529 27.689 17.6528 27.689 17.7501V17.6529C27.7275 17.6607 27.7672 17.6607 27.8056 17.6529C27.8056 17.5361 27.8056 17.5361 27.8056 17.5166H28.0001H28.1168C28.112 17.4844 28.112 17.4516 28.1168 17.4193V17.322C28.1598 17.3402 28.2061 17.3496 28.2529 17.3496C28.2996 17.3496 28.3458 17.3402 28.3889 17.322C28.4214 17.3131 28.4511 17.2958 28.475 17.2719C28.4989 17.248 28.516 17.2183 28.525 17.1858L28.7194 16.8549Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.4088 16.2124C28.4088 16.2124 28.4088 16.2124 28.2921 16.2124C28.2921 16.2124 28.2921 16.2124 28.1754 16.0956C28.153 16.1529 28.1119 16.2009 28.0587 16.2318C28.0517 16.2471 28.0482 16.2637 28.0482 16.2805C28.0482 16.2973 28.0517 16.3139 28.0587 16.3292C28.0405 16.3205 28.0206 16.316 28.0004 16.316C27.9803 16.316 27.9603 16.3205 27.942 16.3292C27.942 16.3292 27.9421 16.2124 27.6504 16.1734L27.7476 16.3292H28.9144V16.1734C28.9144 16.1734 28.4088 16.1345 28.4088 16.2124Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.456 16.5186L27.4551 16.538L28.4462 16.586L28.4472 16.5666L27.456 16.5186Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.3789 16.3683V16.4656H28.3713V16.3683H27.3789ZM27.6707 16.4656C27.6707 16.4656 27.6707 16.4462 27.6707 16.4656V16.4656ZM28.1766 16.4656C28.1766 16.4656 28.1766 16.4462 28.1766 16.4656V16.4656Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.3603 16.7001C27.3603 16.7001 27.3407 16.6805 27.3603 16.7001V16.7001Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.0005 16.9134C27.9838 16.9009 27.9634 16.8942 27.9426 16.8942C27.9217 16.8942 27.9015 16.9009 27.8848 16.9134H28.0005Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.6689 16.7373C27.6689 16.7373 27.8041 16.7373 27.8234 16.8338C27.8234 16.8338 27.6883 16.718 27.5918 16.7373H27.6689Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.0977 17.3999C28.0977 17.3999 28.1173 17.3803 28.0977 17.3999V17.3999Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.1767 16.4654C28.1767 16.4654 28.1571 16.4458 28.1767 16.4654V16.4654Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.6689 16.4654C27.6689 16.4654 27.6493 16.4458 27.6689 16.4654V16.4654Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.9582 16.4081H27.9238V16.4424H27.9582V16.4081Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.1955 17.866C28.1848 17.8281 28.1848 17.788 28.1955 17.7502V17.866Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.5142 17.2821C27.5031 17.3264 27.5031 17.3729 27.5142 17.4172C27.5142 17.4172 27.5142 17.3207 27.5142 17.2628C27.5142 17.2049 27.5142 17.2628 27.5142 17.2628V17.2821Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.4761 14.4804C27.4641 14.5117 27.4641 14.5463 27.4761 14.5777V14.4804Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.399 13.8967C27.3822 13.8841 27.3617 13.8772 27.3406 13.8772C27.3196 13.8772 27.2992 13.8841 27.2824 13.8967C27.2824 13.8967 27.2824 13.8967 27.1657 13.7799C27.138 13.8338 27.0979 13.8805 27.0489 13.9162C27.0415 13.9482 27.0415 13.9815 27.0489 14.0135C27.0489 14.0135 27.0489 14.0135 26.9323 14.0135C26.9323 14.0135 26.9324 14.0135 26.6602 13.8772V14.0135H27.7878V13.8578C27.7878 13.8578 27.4185 13.8383 27.399 13.8967Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.432 14.2089L26.4316 14.2284L27.4239 14.248L27.4242 14.2285L26.432 14.2089Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.3867 14.0711V14.1684H27.3596V14.0711H26.3867Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.1049 14.5375C27.1049 14.5375 27.1049 14.5375 27.1049 14.4218C27.1049 14.3061 27.1049 14.4218 27.1049 14.4218C27.0963 14.4399 27.0918 14.4597 27.0918 14.4797C27.0918 14.4997 27.0963 14.5194 27.1049 14.5375C27.1049 14.5375 27.1049 14.4411 27.1049 14.5375C27.1279 14.5257 27.1483 14.5094 27.1649 14.4895C27.1815 14.4696 27.1938 14.4466 27.2013 14.4218L27.1049 14.5375Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.6595 14.4407C26.7152 14.4182 26.7774 14.4182 26.8331 14.4407C26.8331 14.4407 26.698 14.325 26.6016 14.325L26.6595 14.4407Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.9117 14.4996C26.9069 14.4674 26.9069 14.4346 26.9117 14.4023C26.903 14.4206 26.8985 14.4405 26.8985 14.4607C26.8985 14.4809 26.903 14.5009 26.9117 14.5191V14.6164H26.7559C26.7559 14.6164 26.7559 14.7137 26.8922 14.7332C27.0285 14.7527 26.8922 14.7332 26.8922 14.7332C26.8922 14.7332 26.8922 14.558 26.9117 14.4996Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.9312 15.142V14.9669V14.8696C26.9129 14.8782 26.8931 14.8827 26.8729 14.8827C26.8527 14.8827 26.8327 14.8782 26.8145 14.8696C26.8145 14.8696 26.8145 14.8696 26.8145 14.8696C26.8145 14.8696 26.8145 14.8696 26.8145 14.9669V15.1031L26.9312 15.142Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.6776 14.1676C26.6776 14.1676 26.6427 14.1501 26.6776 14.1676V14.1676Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.9465 14.1108H26.9121V14.1452H26.9465V14.1108Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M27.1057 15.5691C27.095 15.5312 27.095 15.4912 27.1057 15.4533V15.5691Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M26.5027 14.9672C26.4941 15.0118 26.4941 15.0576 26.5027 15.1023C26.4861 15.0587 26.4861 15.0108 26.5027 14.9672Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.4977 14.4804C29.4858 14.5117 29.4858 14.5463 29.4977 14.5777V14.4804Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.6713 13.76C29.6713 13.76 29.4185 13.76 29.4185 13.8962C29.4185 13.8962 29.4185 13.8962 29.3018 13.8962L29.1657 13.7795C29.1657 13.7795 29.1657 13.8963 29.0295 13.9157C29.0295 13.9157 29.0295 13.9157 29.0295 14.013C29.0113 14.0044 28.9915 13.9999 28.9713 13.9999C28.9511 13.9999 28.9311 14.0044 28.9129 14.013C28.9129 14.013 28.9129 14.013 28.6406 13.8768L28.7379 14.013V14.1298H29.8657V13.9936L29.6713 13.76Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.3421 14.1979L28.3418 14.2174L29.3341 14.2334L29.3344 14.2139L28.3421 14.1979Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.3887 14.0711V14.1684H29.381V14.0711H28.3887Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.6923 14.5187H29.7895L30.4312 14.9079C30.3923 14.9858 30.2562 15.1026 30.2562 15.1026H30.0034V15.1999H29.8673H29.6729C29.6609 15.2206 29.6546 15.2441 29.6546 15.268C29.6546 15.2919 29.6609 15.3154 29.6729 15.3361C29.6198 15.3073 29.5734 15.2675 29.5368 15.2193C29.5244 15.2534 29.5037 15.2837 29.4765 15.3075C29.4493 15.3313 29.4165 15.3479 29.3812 15.3556V15.2388C29.3528 15.287 29.3126 15.3271 29.2645 15.3556C29.2838 15.3268 29.2941 15.2929 29.2941 15.2583C29.2941 15.2236 29.2838 15.1898 29.2645 15.161C29.2204 15.1461 29.1726 15.1461 29.1284 15.161V15.0636V15.0053V14.9663H28.934H28.7007V14.8496C28.6113 14.799 28.5374 14.725 28.4869 14.6355H28.6035V14.5381C28.5952 14.4866 28.5952 14.434 28.6035 14.3824C28.5944 14.344 28.5944 14.3041 28.6035 14.2657C28.6218 14.2743 28.6416 14.2788 28.6618 14.2788C28.682 14.2788 28.7019 14.2743 28.7202 14.2657H28.8368L28.7334 14.0905H28.4674L28.3508 13.9932L28.1562 13.8764H28.2675L28.2536 13.8569C28.3137 13.8569 28.3607 13.8647 28.3973 13.8764H28.607L28.5841 13.8375C28.6216 13.8422 28.6546 13.848 28.6836 13.8546C28.7037 13.8344 28.7337 13.8044 28.7784 13.7597L28.9146 13.8764H29.0312C29.0312 13.8764 29.0475 13.8655 29.0724 13.8499C29.0941 13.829 29.113 13.8052 29.1284 13.7791L29.1515 13.8022C29.1992 13.7749 29.2506 13.7485 29.284 13.7402V13.8764H29.2256L29.2451 13.8959C29.2633 13.8872 29.2833 13.8828 29.3035 13.8828C29.3236 13.8828 29.3435 13.8872 29.3617 13.8959C29.3812 13.7402 29.6145 13.7402 29.6145 13.7402V13.8764L29.459 14.1489H29.5951V14.2657C29.6115 14.3163 29.6115 14.3708 29.5951 14.4214V14.5187H29.6923Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.1849 14.538C29.1764 14.5199 29.1719 14.5002 29.1719 14.4801C29.1719 14.4601 29.1764 14.4403 29.1849 14.4222C29.1849 14.4222 29.1849 14.4222 29.1849 14.4222C29.1764 14.4403 29.1719 14.4601 29.1719 14.4801C29.1719 14.5002 29.1764 14.5199 29.1849 14.538C29.1849 14.538 29.1849 14.4415 29.1849 14.538H29.2814C29.2921 14.5002 29.2921 14.4601 29.2814 14.4222L29.1849 14.538Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.6616 14.4407C28.6616 14.4407 28.816 14.4407 28.8353 14.4407C28.8353 14.4407 28.7003 14.325 28.623 14.325L28.6616 14.4407Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.9332 15.142V14.9669V14.8696C28.9116 14.8787 28.8885 14.8833 28.8651 14.8833C28.8417 14.8833 28.8184 14.8787 28.7969 14.8696C28.7969 14.8696 28.7969 14.8696 28.7969 14.8696C28.7969 14.8696 28.7969 14.8696 28.7969 14.9669V15.1031L28.9332 15.142Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.9485 14.1108H28.9141V14.1452H28.9485V14.1108Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M29.2051 15.5691C29.2107 15.5307 29.2107 15.4917 29.2051 15.4533V15.5691Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M28.5239 14.9672C28.5239 14.9672 28.5239 15.0637 28.5239 15.1023C28.5077 15.0587 28.5077 15.0108 28.5239 14.9672Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.4434 14.9672H31.6379C31.6379 14.9672 31.7934 14.9672 31.8323 14.9672C31.8711 14.9672 31.8323 15.084 31.7156 15.1034C31.5989 15.1229 31.5795 15.1034 31.5017 15.1034C31.424 15.1034 31.5017 15.1034 31.5017 15.1034C31.5017 15.1034 31.5017 15.2202 31.5017 15.2396C31.4954 15.2848 31.4954 15.3307 31.5017 15.3759C31.5017 15.4732 31.6961 15.6484 31.8128 15.6678H32.0268C32.0268 15.6678 32.1434 15.7651 32.2212 15.7846C32.2913 15.8027 32.3649 15.8027 32.435 15.7846C32.5125 15.7748 32.5909 15.7748 32.6683 15.7846C32.7656 15.7846 32.8239 15.7846 32.9017 15.7846C32.9794 15.7846 32.9017 15.7846 32.9017 15.7846H33.0572H33.1934H33.31C33.31 15.7846 33.31 15.7846 33.4267 15.7846C33.4341 15.8166 33.4341 15.8499 33.4267 15.8819C33.4267 15.8819 33.31 15.8819 33.2711 15.8819C33.2322 15.8819 33.2711 15.8819 33.2711 15.9987C33.2711 16.1155 33.2711 15.9987 33.2711 15.9987C33.2601 16.05 33.2601 16.1031 33.2711 16.1544V16.2517C33.2711 16.2517 33.2711 16.2517 33.2711 16.4074C33.2711 16.5631 33.2711 16.5047 33.2711 16.5631C33.2711 16.6215 33.2711 16.5631 33.2711 16.5631C33.2033 16.6112 33.1442 16.6705 33.0962 16.7383L32.9406 16.9329C32.9406 16.9329 32.9406 16.9329 32.9406 17.0302H32.8434C32.8434 17.0302 32.7267 17.0302 32.8434 17.0302C32.96 17.0302 32.8434 17.0302 32.999 16.894L33.1544 16.7577C33.1544 16.7577 33.2906 16.641 33.31 16.5826C33.3295 16.5242 33.31 16.4658 33.1934 16.4269L33.0572 16.5436C33.0572 16.5436 33.0572 16.5436 33.0572 16.641C33.0572 16.7383 32.9211 16.6409 32.9406 16.7577C32.96 16.8745 32.9406 16.7577 32.9406 16.7577C32.9406 16.7577 32.8045 16.7577 32.7462 16.7577C32.6879 16.7577 32.7462 16.7577 32.7462 16.7577H32.8434C32.8935 16.7173 32.9392 16.6717 32.9795 16.6215C33.0022 16.5653 33.0022 16.5025 32.9795 16.4463C32.9795 16.4463 32.9795 16.3101 32.9795 16.2517C32.9795 16.1933 32.9795 16.2517 32.8628 16.2517C32.7462 16.2517 32.8628 16.2517 32.8628 16.2517H32.7462H32.5517L32.435 16.4658C32.435 16.4658 32.435 16.602 32.435 16.6799C32.435 16.7577 32.435 16.6799 32.435 16.6799C32.435 16.6799 32.435 16.8161 32.3184 16.8161H32.2212L32.3573 16.6799C32.3573 16.6799 32.3573 16.5436 32.3573 16.4852V16.3685C32.3573 16.3685 32.3573 16.2128 32.3573 16.1738C32.3573 16.1349 32.3573 16.1738 32.2406 16.1738C32.1974 16.2181 32.1642 16.2712 32.1434 16.3295C32.1434 16.3295 32.1434 16.3295 32.1434 16.4269C32.1434 16.5242 32.1434 16.4269 32.1434 16.4269C32.1434 16.4269 32.1434 16.5631 32.1434 16.602C32.1434 16.6409 32.0073 16.602 31.9489 16.602C31.9979 16.5663 32.0378 16.5197 32.0656 16.4658C32.0729 16.4076 32.0729 16.3488 32.0656 16.2906V16.1933C32.0763 16.1485 32.0763 16.1018 32.0656 16.0571C32.0742 16.0388 32.0788 16.0189 32.0788 15.9987C32.0788 15.9785 32.0742 15.9585 32.0656 15.9403V15.843C32.0656 15.843 32.0656 15.843 32.0656 15.7262C32.0656 15.6094 32.0656 15.6094 32.0656 15.551C32.0656 15.4927 32.0656 15.4537 32.0656 15.3953C32.0656 15.337 32.0656 15.3953 32.0656 15.3953C32.0656 15.3953 32.0656 15.3953 32.0656 15.298C32.0656 15.2007 32.1822 15.298 32.0656 15.1618C32.0656 15.1618 32.0656 15.1618 31.9489 15.1618C31.8323 15.1618 31.9489 15.0645 31.9489 15.0255C31.9489 14.9866 31.9489 15.0255 32.085 15.0255H32.2601C32.2601 15.0255 32.2601 15.0256 32.2601 15.1229H32.3767C32.3767 15.1229 32.5517 15.1229 32.4934 15.1229L31.4434 14.9672Z",
                            fill: "#FDD901"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M33.25 15.922H33.0556H32.8223C32.7449 15.9122 32.6665 15.9122 32.589 15.922C32.5189 15.9401 32.4453 15.9401 32.3752 15.922C32.3752 15.922 32.3405 15.8931 32.2963 15.8636H32.1807H31.9668C31.8502 15.8636 31.7334 15.6884 31.6751 15.5911V15.5516C31.6682 15.5391 31.6618 15.5263 31.6558 15.5132C31.662 15.521 31.6684 15.5294 31.6751 15.5383C31.7172 15.5941 31.7683 15.6685 31.8235 15.7247C31.8667 15.7581 31.9149 15.7853 31.9668 15.8052H32.1807H32.2779H32.7446C32.7628 15.7965 32.7827 15.7921 32.8029 15.7921C32.823 15.7921 32.843 15.7965 32.8613 15.8052C32.8994 15.816 32.9398 15.816 32.9779 15.8052C33.0218 15.7888 33.0701 15.7888 33.114 15.8052L33.1821 15.8636L33.25 15.922Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.9941 14.8313C31.0462 14.7578 31.1127 14.6957 31.1896 14.6489C31.2665 14.602 31.3522 14.5714 31.4413 14.5588C31.6273 14.52 31.8193 14.52 32.0053 14.5588C32.1964 14.6701 32.3984 14.7614 32.6081 14.8313H32.783C32.8997 14.8313 32.9192 14.8313 32.783 14.8313H32.6664C32.4756 14.8393 32.2866 14.792 32.122 14.6951C32.122 14.6951 31.5386 14.4421 31.2275 14.7924C31.1523 14.8178 31.0735 14.8309 30.9941 14.8313Z",
                            fill: "#FF0000"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.8024 14.9677H32.6275C32.4971 14.9452 32.3719 14.899 32.258 14.8315C32.1844 14.7848 32.1062 14.7457 32.0247 14.7147H31.3442C31.2711 14.7269 31.2034 14.7608 31.1498 14.812L31.0137 14.9483H31.1109H31.6553H31.7525C31.8038 14.9378 31.8566 14.9378 31.908 14.9483H32.0247C32.0819 14.965 32.1425 14.965 32.1997 14.9483H32.394H32.1219H31.9274H31.7913H31.6747H31.0914H31.2081H31.4026H31.7136H31.8692H31.9858H32.9385C32.9385 14.9483 32.9385 14.8315 32.8218 14.8315L32.8024 14.9677ZM31.3636 14.9677H31.3247H31.3636Z",
                            fill: "#000001"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.3817 14.8299C31.3244 14.7573 31.2418 14.7091 31.1504 14.6949C31.2332 14.705 31.309 14.7464 31.3624 14.8106L31.3817 14.8299Z",
                            fill: "#000001"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.5196 14.7526C31.4861 14.6859 31.4319 14.6318 31.3652 14.5983C31.4023 14.6139 31.4353 14.6376 31.462 14.6677C31.4887 14.6977 31.5084 14.7333 31.5196 14.7719V14.7526Z",
                            fill: "#000001"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.6758 14.7133C31.6758 14.559 31.6758 14.5397 31.6758 14.5397C31.6758 14.5397 31.6954 14.559 31.6758 14.7133Z",
                            fill: "#000001"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.8711 14.7133C31.8711 14.5782 31.8711 14.5397 31.8711 14.5397C31.8711 14.5397 31.9293 14.559 31.8711 14.7133Z",
                            fill: "#000001"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.0625 14.7522C32.0625 14.7522 32.0625 14.7522 32.0625 14.6171C32.0744 14.6377 32.0808 14.6609 32.0808 14.6846C32.0808 14.7084 32.0744 14.7317 32.0625 14.7522Z",
                            fill: "#000001"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.4145 17.6918H32.2988H32.3952C32.4043 17.6603 32.4043 17.6269 32.3952 17.5953L32.4145 17.6918Z",
                            fill: "#FF0000"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.2258 17.5155H30.9941H31.0907C31.0907 17.5155 31.0906 17.5156 31.2065 17.3805L31.2258 17.5155Z",
                            fill: "#FF0000"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.5694 16.5244C32.5602 16.4926 32.5602 16.4589 32.5694 16.4271C32.5797 16.4059 32.585 16.3826 32.585 16.359C32.585 16.3354 32.5797 16.3121 32.5694 16.2908C32.5836 16.3107 32.5913 16.3345 32.5913 16.359C32.5913 16.3834 32.5836 16.4072 32.5694 16.4271C32.5602 16.4589 32.5602 16.4926 32.5694 16.5244Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.7461 16.544C32.7461 16.544 32.7461 16.544 32.7461 16.4467C32.7461 16.3494 32.7461 16.4467 32.7461 16.4467C32.7545 16.4082 32.7545 16.3684 32.7461 16.3299V16.2132V16.038C32.7632 16.0676 32.7721 16.1012 32.7721 16.1353C32.7721 16.1695 32.7632 16.203 32.7461 16.2326V16.3494C32.7545 16.3944 32.7545 16.4406 32.7461 16.4856V16.544Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.9395 17.0493V16.9143C32.9559 16.9578 32.9559 17.0058 32.9395 17.0493Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.1406 16.9125C32.1553 16.8687 32.1553 16.8212 32.1406 16.7774C32.149 16.8155 32.149 16.8551 32.1406 16.8932L32.2563 16.7581C32.2277 16.8163 32.1885 16.8687 32.1406 16.9125Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.0436 16.9143C32.0436 16.9143 32.0436 16.9143 31.9473 16.9143C31.9473 16.9143 31.9473 16.9143 31.9473 17.0108L32.0436 16.9143Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.2778 15.9418C32.2616 15.9854 32.2616 16.0334 32.2778 16.0769C32.2778 16.0769 32.2585 15.9804 32.2778 15.9418Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.4922 16.1348C32.5114 16.072 32.5114 16.0047 32.4922 15.9418C32.4957 15.9932 32.4957 16.0448 32.4922 16.0962V16.1348Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.6644 16.0945C32.6644 15.9401 32.5293 15.9208 32.5293 15.9208C32.5293 15.9208 32.6451 16.0366 32.6644 16.0752C32.675 16.0508 32.6805 16.0246 32.6805 15.998C32.6805 15.9714 32.675 15.9452 32.6644 15.9208C32.6818 15.9464 32.6911 15.9767 32.6911 16.0077C32.6911 16.0386 32.6818 16.0689 32.6644 16.0945Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.9386 16.4452C32.9251 16.4217 32.918 16.3951 32.918 16.368C32.918 16.3409 32.9251 16.3143 32.9386 16.2908C32.9224 16.3344 32.9224 16.3824 32.9386 16.4259C32.9285 16.4083 32.9231 16.3884 32.9231 16.368C32.9231 16.3477 32.9285 16.3277 32.9386 16.3101C32.9293 16.3547 32.9293 16.4007 32.9386 16.4452Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M33.2692 16.135C33.2591 16.1174 33.2539 16.0974 33.2539 16.0771C33.2539 16.0568 33.2591 16.0368 33.2692 16.0192C33.2692 16.0192 33.2692 16.0192 33.2692 16.1157V16.135Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.9395 16.9131C32.9516 16.8821 32.9516 16.8477 32.9395 16.8167V16.9131Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.5977 16.6601C31.6294 16.6675 31.6624 16.6675 31.6942 16.6601C31.704 16.6222 31.704 16.5823 31.6942 16.5444C31.7116 16.57 31.721 16.6002 31.721 16.6312C31.721 16.6622 31.7116 16.6924 31.6942 16.718L31.5977 16.6601Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.5786 16.602C31.5702 16.5636 31.5702 16.5237 31.5786 16.4853C31.5675 16.4339 31.5675 16.3808 31.5786 16.3295C31.5786 16.3295 31.5786 16.4269 31.5786 16.4853C31.5702 16.5237 31.5702 16.5636 31.5786 16.602C31.5704 16.5701 31.5704 16.5366 31.5786 16.5047C31.5873 16.4865 31.5918 16.4665 31.5918 16.4463C31.5918 16.4261 31.5873 16.4062 31.5786 16.3879C31.5938 16.4254 31.5938 16.4673 31.5786 16.5047C31.5682 16.5363 31.5682 16.5704 31.5786 16.602Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.1212 16.5633C32.1212 16.5633 32.1212 16.466 32.1212 16.4271C32.1315 16.4093 32.1368 16.3892 32.1368 16.3687C32.1368 16.3482 32.1315 16.328 32.1212 16.3103C32.1212 16.3103 32.1212 16.3103 32.1212 16.213C32.1212 16.1156 32.1212 16.213 32.1212 16.0962C32.1121 16.1346 32.1121 16.1746 32.1212 16.213C32.1231 16.2454 32.1231 16.2779 32.1212 16.3103C32.1212 16.1351 32.1212 16.1156 32.1212 16.1156C32.1212 16.1156 32.1212 16.1156 32.1212 16.2908C32.1231 16.2584 32.1231 16.2259 32.1212 16.1935C32.1048 16.1496 32.1048 16.1012 32.1212 16.0573C32.1121 16.0788 32.1074 16.102 32.1074 16.1254C32.1074 16.1488 32.1121 16.172 32.1212 16.1935C32.1212 16.1935 32.1212 16.1935 32.1212 16.2908C32.1355 16.3107 32.1431 16.3345 32.1431 16.3589C32.1431 16.3834 32.1355 16.4072 32.1212 16.4271C32.1104 16.4653 32.1104 16.5057 32.1212 16.5439C32.1212 16.5439 32.1212 16.4465 32.2381 16.4465V16.3492V16.4465C32.2381 16.4465 32.2381 16.4465 32.1212 16.5439V16.5633Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.377 16.2121C32.3963 16.1493 32.3963 16.0821 32.377 16.0192C32.3857 16.0832 32.3857 16.1481 32.377 16.2121C32.377 16.0771 32.377 16.0578 32.377 16.0578C32.377 16.0578 32.377 16.1928 32.377 16.2314V16.2121Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.9473 16.0765C31.9563 16.0384 31.9563 15.9987 31.9473 15.9606C31.9623 15.9978 31.9623 16.0393 31.9473 16.0765Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.791 16.5031C31.8047 16.4762 31.8119 16.4465 31.8119 16.4163C31.8119 16.3862 31.8047 16.3565 31.791 16.3295C31.791 16.3295 31.791 16.3295 31.791 16.3295V16.5031Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.7144 16.6406C31.7116 16.6855 31.7116 16.7306 31.7144 16.7756C31.702 16.7314 31.702 16.6847 31.7144 16.6406Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.4629 16.9119C31.4629 16.9119 31.4629 16.9119 31.4629 16.7576C31.4629 16.6033 31.5401 16.9119 31.4629 16.9119Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.4818 16.6417C31.4902 16.6033 31.4902 16.5634 31.4818 16.525C31.4682 16.5013 31.4609 16.4744 31.4609 16.4471C31.4609 16.4198 31.4682 16.3929 31.4818 16.3693C31.4818 16.3693 31.4818 16.3693 31.4818 16.525C31.4938 16.563 31.4938 16.6037 31.4818 16.6417Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.3832 16.9134C31.3719 16.8555 31.3719 16.7961 31.3832 16.7382C31.3671 16.7956 31.3671 16.8561 31.3832 16.9134V16.7382V16.9718V16.9134Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.3847 16.5812C31.3774 16.53 31.3774 16.478 31.3847 16.4268C31.3744 16.4777 31.3744 16.5303 31.3847 16.5812Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.5006 15.8431V15.9396C31.5006 15.9396 31.4816 15.8624 31.5006 15.8431Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.2478 15.8243C31.2478 15.8243 31.2478 15.8243 31.2478 15.9401C31.2378 15.9225 31.2324 15.9025 31.2324 15.8822C31.2324 15.8618 31.2378 15.8419 31.2478 15.8243Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.209 15.1234C31.209 15.1234 31.2266 15.1585 31.209 15.1234V15.1234Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.9941 15.8611C30.9941 15.8611 30.9941 15.8611 30.9941 15.7646C31.0061 15.7957 31.0061 15.83 30.9941 15.8611Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.995 16.2717C30.9769 16.2802 30.957 16.2847 30.9369 16.2847C30.9168 16.2847 30.897 16.2802 30.8789 16.2717H30.995Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.8008 16.1744H30.8974C30.8899 16.1991 30.8774 16.2222 30.8608 16.2421C30.8442 16.2619 30.8238 16.2783 30.8008 16.2901V16.1744Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.9945 16.6789C30.9862 16.6408 30.9862 16.6013 30.9945 16.5632V16.6982V16.6789Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.1699 15.8034V15.6684C31.1699 15.6684 31.2085 15.7841 31.1699 15.8034Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.1113 15.6861C31.1113 15.6861 31.1466 15.6686 31.1113 15.6861V15.6861Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M30.9941 16.4652C31.0039 16.4272 31.0039 16.3874 30.9941 16.3494C30.9941 16.3494 30.9941 16.3494 30.9941 16.4652Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.3066 17.3411V17.2253C31.3066 17.2253 31.3259 17.3218 31.3066 17.3411Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.2673 16.426C31.2494 16.3761 31.2494 16.3216 31.2673 16.2717C31.2598 16.3034 31.2598 16.3364 31.2673 16.3681V16.426Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.209 16.6782C31.2158 16.6464 31.2158 16.6136 31.209 16.5818C31.2181 16.6133 31.2181 16.6467 31.209 16.6782C31.209 16.6782 31.209 16.6782 31.209 16.5432C31.209 16.4082 31.209 16.6397 31.209 16.6782Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.1895 16.4083C31.1895 16.4083 31.1895 16.4083 31.1895 16.2915V16.1747C31.1809 16.1565 31.1765 16.1365 31.1765 16.1164C31.1765 16.0962 31.1809 16.0762 31.1895 16.058C31.198 16.0432 31.2025 16.0264 31.2025 16.0093C31.2025 15.9922 31.198 15.9754 31.1895 15.9606V16.058C31.1804 16.0795 31.1758 16.1027 31.1758 16.1261C31.1758 16.1495 31.1804 16.1727 31.1895 16.1942C31.1783 16.2651 31.1783 16.3374 31.1895 16.4083Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.7344 16.9143C31.7523 16.912 31.7696 16.906 31.7853 16.8969C31.8009 16.8877 31.8145 16.8755 31.8254 16.861C31.8362 16.8465 31.8441 16.83 31.8485 16.8124C31.8529 16.7949 31.8537 16.7766 31.851 16.7587C31.8315 16.7086 31.8315 16.653 31.851 16.603C31.8359 16.6404 31.8359 16.6823 31.851 16.7197C31.851 16.7197 31.8316 16.7976 31.7344 16.9143Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.3941 17.0084C32.4048 16.9706 32.4048 16.9305 32.3941 16.8927C32.3791 16.8556 32.3791 16.814 32.3941 16.7769C32.3941 16.7769 32.3941 16.7769 32.3941 16.7769C32.4247 16.7769 32.4543 16.7891 32.476 16.8108C32.4976 16.8325 32.5098 16.862 32.5098 16.8927C32.5098 16.9234 32.4976 16.9528 32.476 16.9745C32.4543 16.9962 32.4247 17.0084 32.3941 17.0084Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.3458 17.1661C31.3327 17.1286 31.3327 17.0877 31.3458 17.0503C31.3458 17.0503 31.3458 17.1467 31.3458 17.2046V17.1661Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.131 16.6422C31.1207 16.6245 31.1152 16.6043 31.1152 16.5838C31.1152 16.5633 31.1207 16.5432 31.131 16.5254V16.3892C31.131 16.3892 31.131 16.506 31.131 16.5449V16.6422Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.578 16.912C31.5678 16.8909 31.5625 16.8678 31.5625 16.8444C31.5625 16.821 31.5678 16.798 31.578 16.7769C31.5682 16.8149 31.5682 16.8547 31.578 16.8927C31.578 16.8927 31.6164 16.7962 31.578 16.912Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.6367 16.4452C31.6367 16.4452 31.6367 16.4452 31.6367 16.3295C31.647 16.3471 31.6523 16.3671 31.6523 16.3874C31.6523 16.4077 31.647 16.4277 31.6367 16.4452Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.6172 15.8431C31.6258 15.8612 31.6302 15.881 31.6302 15.901C31.6302 15.921 31.6258 15.9408 31.6172 15.9589C31.625 15.9207 31.625 15.8813 31.6172 15.8431Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.1113 14.9681C31.1616 14.9034 31.2267 14.8519 31.3012 14.818C31.3757 14.7841 31.4574 14.7688 31.5392 14.7735C31.774 14.7419 32.0117 14.8049 32.2002 14.9486L32.4335 15.1432C32.5742 15.2478 32.7322 15.3269 32.9002 15.3768C33.1335 15.3768 33.153 15.3768 33.1919 15.3768C33.2308 15.3768 33.3086 15.3768 33.1919 15.3768C33.0652 15.4261 32.9274 15.4395 32.7936 15.4154C32.6598 15.3914 32.5352 15.3309 32.4335 15.2406C32.2356 15.0744 32.0032 14.9547 31.753 14.8903C31.5002 14.8903 31.4808 14.8903 31.4613 14.8903C31.3505 14.9377 31.2318 14.9641 31.1113 14.9681Z",
                            fill: "#FF0000"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M33.2312 15.2592H32.8034L32.5895 15.1035H32.4534H32.2783H31.6562H31.9089H31.6756H32.3367L32.5118 15.2397H32.6284H32.7256H33.1923H32.7062H32.57H32.4534L32.259 15.1035H32.084H31.9673H32.1811H32.2783L32.4729 15.2397H32.5895C32.6599 15.2556 32.733 15.2556 32.8034 15.2397H32.9589H33.1339L33.2312 15.2592Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.4611 14.9653C31.4701 14.9439 31.4748 14.9209 31.4748 14.8978C31.4748 14.8746 31.4701 14.8516 31.4611 14.8302C31.4104 14.818 31.3574 14.818 31.3066 14.8302C31.331 14.8196 31.3574 14.8141 31.3839 14.8141C31.4105 14.8141 31.4368 14.8196 31.4611 14.8302C31.4714 14.8513 31.4767 14.8744 31.4767 14.8978C31.4767 14.9211 31.4714 14.9442 31.4611 14.9653Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.5981 14.9658C31.6071 14.9444 31.6118 14.9214 31.6118 14.8982C31.6118 14.8751 31.6071 14.8521 31.5981 14.8307C31.5538 14.8193 31.5072 14.8193 31.4629 14.8307C31.484 14.8205 31.5071 14.8152 31.5306 14.8152C31.554 14.8152 31.5771 14.8205 31.5981 14.8307C31.5981 14.8307 31.5981 14.8307 31.5981 14.9658Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M31.9473 14.9664C31.9592 14.9353 31.9592 14.901 31.9473 14.8699C31.9592 14.901 31.9592 14.9353 31.9473 14.9664Z",
                            fill: "black"
                          }
                        }),
                        _vm._v(" "),
                        _c("path", {
                          attrs: {
                            d:
                              "M32.1211 14.9668C32.2563 14.9668 32.237 14.8511 32.237 14.8511C32.233 14.8804 32.2195 14.9076 32.1985 14.9285C32.1776 14.9494 32.1504 14.9628 32.1211 14.9668Z",
                            fill: "black"
                          }
                        })
                      ])
                    ]
                  )
                : _vm._e()
            ]
          )
        ])
      ])
    ]
  )
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("span", { staticClass: "h2 my-5 courses-title" }, [
      _c("span", { staticClass: "courses-span" }, [
        _vm._v("Explora  y aprende del mundo")
      ]),
      _vm._v(" con "),
      _c("br"),
      _vm._v("Lingua Planet")
    ])
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=template&id=6e45ef0f&scoped=true&":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Cursos/Show.vue?vue&type=template&id=6e45ef0f&scoped=true& ***!
  \***********************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass:
        "col-12 text-center d-flex flex-column justify-content-center"
    },
    [
      _c("h1", { staticClass: "m-0" }, [_vm._v("Un tour por el mundo")]),
      _vm._v(" "),
      _c(
        "div",
        { staticClass: "d-flex justify-content-center my-4" },
        _vm._l(_vm.idiomas, function(idio) {
          return _c(
            "a",
            {
              staticClass: "mx-1",
              attrs: { href: "/cursos/" + idio.nombreURL }
            },
            [
              _c("img", {
                key: "lang" + idio.id,
                class: [
                  "mini-flag-img iz-100",
                  idio.diminutivo === _vm.idioma.diminutivo ? "active" : null
                ],
                attrs: { src: idio.src }
              })
            ]
          )
        }),
        0
      ),
      _vm._v(" "),
      _c("div", { staticClass: "video-container" }, [
        _c("iframe", {
          staticClass: "frame-video",
          attrs: {
            src: _vm.idioma.video + "?autoplay=1",
            webkitallowfullscreen: "",
            mozallowfullscreen: "",
            allowfullscreen: "",
            autoplay: "1"
          }
        })
      ]),
      _vm._v(" "),
      _c("h1", { staticClass: "course-show-header mb-4" }, [
        _vm._v(
          "Tus hijos aprenden " +
            _vm._s(_vm.idioma.idioma) +
            " con lingua planet"
        )
      ]),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "carousel slide mobile-display pt-4",
          attrs: {
            id: "carouselMIndicators",
            "data-ride": "false",
            "data-interval": "false"
          }
        },
        [
          _c(
            "ol",
            { staticClass: "carousel-indicators" },
            _vm._l(_vm.idioma.membresias, function(membresia, index) {
              return _c("li", {
                class: { active: index === 0 },
                attrs: {
                  "data-target": "#carouselMIndicators",
                  "data-slide-to": "mCard" + index
                }
              })
            }),
            0
          ),
          _vm._v(" "),
          _c(
            "div",
            { staticClass: "carousel-inner" },
            _vm._l(_vm.idioma.membresias, function(membresia, index) {
              return _c(
                "div",
                {
                  key: "mCard" + index,
                  class: ["carousel-item", index === 0 ? "active" : null]
                },
                [
                  _c(
                    "div",
                    { staticClass: "card card-course-carrousel mx-3" },
                    [
                      _c(
                        "div",
                        { staticClass: "card-body d-flex flex-column" },
                        [
                          _c("img", {
                            staticClass: "flag-img mx-auto",
                            attrs: {
                              src: "" + _vm.idioma.src,
                              alt: "lingua planet france"
                            }
                          }),
                          _vm._v(" "),
                          _c("h1", { staticClass: "mb-0" }, [
                            _vm._v(_vm._s(membresia.nombre))
                          ]),
                          _vm._v(">\n                        "),
                          _vm._m(0, true),
                          _vm._v(" "),
                          _c(
                            "a",
                            {
                              staticClass: "btn btn-buy btn-success",
                              attrs: {
                                href: "/membresia/" + membresia.nombreURL
                              }
                            },
                            [
                              _c("h1", { staticClass: "mb-0" }, [
                                _vm._v("Comprar")
                              ])
                            ]
                          )
                        ]
                      )
                    ]
                  )
                ]
              )
            }),
            0
          ),
          _vm._v(" "),
          _vm._m(1),
          _vm._v(" "),
          _vm._m(2)
        ]
      ),
      _vm._v(" "),
      _c(
        "div",
        {
          staticClass: "carousel slide web-display pt-4",
          attrs: {
            id: "carouselWIndicators",
            "data-ride": "false",
            "data-interval": "false"
          }
        },
        [
          _c(
            "ol",
            { staticClass: "web-display carousel-indicators" },
            _vm._l(
              _vm.keysArray.filter(function(e) {
                return e % 3 === 0
              }),
              function(key, index) {
                return _c("li", {
                  class: { active: index === 0 },
                  attrs: {
                    "data-target": "#carouselWIndicators",
                    "data-slide-to": "wCard" + index
                  }
                })
              }
            ),
            0
          ),
          _vm._v(" "),
          _c(
            "div",
            { staticClass: "carousel-inner" },
            _vm._l(
              _vm.keysArray.filter(function(e) {
                return e % 3 === 0
              }),
              function(key, index) {
                return _c(
                  "div",
                  {
                    key: "wCard" + index,
                    class: ["carousel-item", index === 0 ? "active" : null]
                  },
                  [
                    _c(
                      "div",
                      { staticClass: "row justify-content-center" },
                      _vm._l(_vm.offsetCarousel(key), function(
                        membresia,
                        index2
                      ) {
                        return _c(
                          "div",
                          {
                            staticClass: "card card-course-carrousel mx-3",
                            staticStyle: { width: "15rem" }
                          },
                          [
                            _c(
                              "div",
                              { staticClass: "card-body d-flex flex-column" },
                              [
                                _c("img", {
                                  staticClass: "flag-img mx-auto",
                                  attrs: {
                                    src: "" + _vm.idioma.src,
                                    alt: "lingua planet " + _vm.idioma.idioma
                                  }
                                }),
                                _vm._v(" "),
                                _c(
                                  "span",
                                  {
                                    staticClass: "h3 bold",
                                    staticStyle: { height: "4rem" }
                                  },
                                  [_vm._v(_vm._s(membresia.nombre))]
                                ),
                                _vm._v(" "),
                                _vm._m(3, true),
                                _vm._v(" "),
                                _c(
                                  "a",
                                  {
                                    staticClass:
                                      "btn btn-buy btn-success mx-auto",
                                    attrs: {
                                      href: "/membresia/" + membresia.nombreURL
                                    }
                                  },
                                  [
                                    _c(
                                      "span",
                                      { staticClass: "h4 bold mb-0" },
                                      [_vm._v("Comprar")]
                                    )
                                  ]
                                )
                              ]
                            )
                          ]
                        )
                      }),
                      0
                    )
                  ]
                )
              }
            ),
            0
          ),
          _vm._v(" "),
          _vm._m(4),
          _vm._v(" "),
          _vm._m(5)
        ]
      )
    ]
  )
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "mt-5 mb-4" }, [
      _c("h3", { staticClass: "bold" }, [_vm._v("Tendrás acceso a:")]),
      _vm._v(" "),
      _c("h3", [_vm._v("Dashboard de seguimiento")]),
      _vm._v(" "),
      _c("h3", [_vm._v("Clases offline")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      {
        staticClass: "carousel-control-prev",
        attrs: {
          href: "#carouselMIndicators",
          role: "button",
          "data-slide": "prev"
        }
      },
      [
        _c("span", {
          staticClass: "carousel-control-prev-icon carousel-control-icon",
          attrs: { "aria-hidden": "true" }
        }),
        _vm._v(" "),
        _c("span", { staticClass: "sr-only" }, [_vm._v("Previous")])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      {
        staticClass: "carousel-control-next",
        attrs: {
          href: "#carouselMIndicators",
          role: "button",
          "data-slide": "next"
        }
      },
      [
        _c("span", {
          staticClass: "carousel-control-next-icon carousel-control-icon",
          attrs: { "aria-hidden": "true" }
        }),
        _vm._v(" "),
        _c("span", { staticClass: "sr-only" }, [_vm._v("Next")])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "mt-4 mb-3 lh" }, [
      _c("span", { staticClass: "h5" }, [_vm._v("Tendrás acceso a:")]),
      _vm._v(" "),
      _c("h4", [_vm._v("Dashboard de seguimiento")]),
      _vm._v(" "),
      _c("h4", [_vm._v("Clases offline")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      {
        staticClass: "carousel-control-prev",
        attrs: {
          href: "#carouselWIndicators",
          role: "button",
          "data-slide": "prev"
        }
      },
      [
        _c("span", {
          staticClass: "carousel-control-prev-icon carousel-control-icon",
          attrs: { "aria-hidden": "true" }
        }),
        _vm._v(" "),
        _c("span", { staticClass: "sr-only" }, [_vm._v("Previous")])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      {
        staticClass: "carousel-control-next",
        attrs: {
          href: "#carouselWIndicators",
          role: "button",
          "data-slide": "next"
        }
      },
      [
        _c("span", {
          staticClass: "carousel-control-next-icon carousel-control-icon",
          attrs: { "aria-hidden": "true" }
        }),
        _vm._v(" "),
        _c("span", { staticClass: "sr-only" }, [_vm._v("Next")])
      ]
    )
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=template&id=3a5f66d2&scoped=true&":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Membresia/show.vue?vue&type=template&id=3a5f66d2&scoped=true& ***!
  \**************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "col" }, [
    _vm._m(0),
    _vm._v(" "),
    _vm.screenWidth >= 768
      ? _c("div", { staticClass: "web-display" }, [
          _c("div", { staticClass: "row mt-4" }, [
            _c("div", { staticClass: "col-3" }, [
              _c("div", { staticClass: "card h-100 gray-back" }, [
                _c(
                  "div",
                  { staticClass: "card-body py-3 d-flex flex-column" },
                  [
                    _c("div", { staticClass: "col px-0" }, [
                      _c(
                        "span",
                        {
                          staticClass:
                            "d-flex mb-2 align-items-center justify-content-center"
                        },
                        [
                          _c("img", {
                            staticClass: "mx-1 iz-10 mini-flag-img active",
                            attrs: {
                              src: "" + _vm.membresia.idioma.src,
                              alt: "membresia idioma"
                            }
                          }),
                          _vm._v(" "),
                          _c("h3", { staticClass: "bold mb-0 ml-2" }, [
                            _vm._v(_vm._s(_vm.membresia.nombre))
                          ])
                        ]
                      ),
                      _vm._v(" "),
                      _c("h4", { staticClass: "px-3 select-subtitle" }, [
                        _vm._v("Selecciona tu membresía y comienza aprender.")
                      ])
                    ]),
                    _vm._v(" "),
                    _vm._m(1)
                  ]
                )
              ])
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "col-9" }, [
              _c(
                "div",
                {
                  staticClass: "carousel slide web-display pt-4",
                  attrs: {
                    id: "carouselWIndicators",
                    "data-ride": "false",
                    "data-interval": "false"
                  }
                },
                [
                  false
                    ? undefined
                    : _vm._e(),
                  _vm._v(" "),
                  _c(
                    "div",
                    { staticClass: "carousel-inner" },
                    _vm._l(
                      _vm.keysArray.filter(function(e) {
                        return e % _vm.limit === 0
                      }),
                      function(key, index) {
                        return _c(
                          "div",
                          {
                            key: "wCard" + index,
                            class: [
                              "carousel-item",
                              index === 0 ? "active" : null
                            ]
                          },
                          [
                            _c(
                              "div",
                              { staticClass: "row justify-content-center" },
                              _vm._l(_vm.offsetCarousel(key), function(plan) {
                                return _c(
                                  "div",
                                  {
                                    staticClass:
                                      "card card-membership-web mx-3",
                                    staticStyle: { width: "15rem" }
                                  },
                                  [
                                    _c(
                                      "div",
                                      {
                                        staticClass:
                                          "card-header border-0 text-center py-3"
                                      },
                                      [_vm._v(_vm._s(plan.nombre))]
                                    ),
                                    _vm._v(" "),
                                    _c(
                                      "div",
                                      {
                                        staticClass:
                                          "card-body px-1 d-flex flex-column text-center"
                                      },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "price-web" },
                                          [
                                            _vm._v(
                                              "\n                                            " +
                                                _vm._s(
                                                  plan.precio.toLocaleString(
                                                    "de-DE",
                                                    {
                                                      style: "currency",
                                                      currency: "USD"
                                                    }
                                                  )
                                                ) +
                                                "\n                                        "
                                            )
                                          ]
                                        ),
                                        _vm._v(" "),
                                        _c("span", { staticClass: "h4" }, [
                                          _vm._v("Pago " + _vm._s(plan.tipo))
                                        ]),
                                        _vm._v(" "),
                                        _c(
                                          "ul",
                                          {
                                            staticClass:
                                              "text-left w-80 mx-auto mt-4"
                                          },
                                          [
                                            _c(
                                              "li",
                                              {
                                                staticClass:
                                                  "li-benefits text-secondary"
                                              },
                                              [
                                                _c(
                                                  "span",
                                                  {
                                                    staticClass:
                                                      "text-primary bold"
                                                  },
                                                  [
                                                    _vm._v(
                                                      _vm._s(plan.stock) +
                                                        " perfil"
                                                    )
                                                  ]
                                                ),
                                                _vm._v(
                                                  " de estudiante en la plataforma."
                                                )
                                              ]
                                            ),
                                            _vm._v(" "),
                                            _c(
                                              "li",
                                              {
                                                staticClass:
                                                  "li-benefits text-secondary"
                                              },
                                              [
                                                _vm._v(
                                                  "Certificado de finalización."
                                                )
                                              ]
                                            ),
                                            _vm._v(" "),
                                            _c(
                                              "li",
                                              {
                                                staticClass:
                                                  "li-benefits text-secondary"
                                              },
                                              [
                                                _vm._v(
                                                  "Clases nuevas semanales."
                                                )
                                              ]
                                            )
                                          ]
                                        ),
                                        _vm._v(" "),
                                        _c(
                                          "a",
                                          {
                                            staticClass:
                                              "btn w-50 py-2 btn-primary-red mx-auto",
                                            attrs: {
                                              href:
                                                "/comprar/plan/" +
                                                plan.nombreURL
                                            }
                                          },
                                          [
                                            _c(
                                              "span",
                                              { staticClass: "h5 bold mb-0" },
                                              [_vm._v("Comprar")]
                                            )
                                          ]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              }),
                              0
                            )
                          ]
                        )
                      }
                    ),
                    0
                  )
                ]
              )
            ])
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col-12" }, [
              _c(
                "ul",
                { staticClass: "membership-details text-left mx-auto mt-4" },
                [
                  _c(
                    "li",
                    { staticClass: "d-flex align-items-center p-2" },
                    [
                      _vm._m(4),
                      _vm._v(" "),
                      _vm._l(_vm.membresia.planes, function(plan) {
                        return _c(
                          "div",
                          {
                            key: "descripcion-0-plan-" + plan.id,
                            staticClass: "w-38 text-center p-3"
                          },
                          [
                            _c("span", { staticClass: "h4 bold" }, [
                              _vm._v(_vm._s(plan.nombre))
                            ])
                          ]
                        )
                      })
                    ],
                    2
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    { staticClass: "d-flex align-items-center p-2" },
                    [
                      _vm._m(5),
                      _vm._v(" "),
                      _vm._l(_vm.membresia.planes, function(plan) {
                        return _c(
                          "div",
                          {
                            key: "descripcion-plan-" + plan.id,
                            staticClass: "w-38 text-center p-3"
                          },
                          [
                            _c("span", { staticClass: "h4 bold" }, [
                              _vm._v(_vm._s(plan.stock))
                            ])
                          ]
                        )
                      })
                    ],
                    2
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    { staticClass: "d-flex align-items-center p-2" },
                    [
                      _vm._m(6),
                      _vm._v(" "),
                      _vm._l(_vm.membresia.planes, function(plan) {
                        return _c(
                          "div",
                          {
                            key: "descripcion-1-plan-" + plan.id,
                            staticClass: "w-38 text-center p-3"
                          },
                          [
                            _c("img", {
                              staticClass: "mx-1",
                              attrs: { src: "/images/check.svg" }
                            })
                          ]
                        )
                      })
                    ],
                    2
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    { staticClass: "d-flex align-items-center p-2" },
                    [
                      _vm._m(7),
                      _vm._v(" "),
                      _vm._l(_vm.membresia.planes, function(plan) {
                        return _c(
                          "div",
                          {
                            key: "descripcion-2-plan-" + plan.id,
                            staticClass: "w-38 text-center p-3"
                          },
                          [
                            _c("img", {
                              staticClass: "mx-1",
                              attrs: { src: "/images/check.svg" }
                            })
                          ]
                        )
                      })
                    ],
                    2
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    { staticClass: "d-flex align-items-center p-2" },
                    [
                      _vm._m(8),
                      _vm._v(" "),
                      _vm._l(_vm.membresia.planes, function(plan) {
                        return _c(
                          "div",
                          {
                            key: "descripcion-3-plan-" + plan.id,
                            staticClass: "w-38 text-center"
                          },
                          [
                            _c("img", {
                              staticClass: "mx-1",
                              attrs: { src: "/images/check.svg" }
                            })
                          ]
                        )
                      })
                    ],
                    2
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    { staticClass: "d-flex align-items-center p-2" },
                    [
                      _vm._m(9),
                      _vm._v(" "),
                      _vm._l(_vm.membresia.planes, function(plan) {
                        return _c(
                          "div",
                          {
                            key: "descripcion-4-plan-" + plan.id,
                            staticClass: "w-38 text-center"
                          },
                          [
                            _c("img", {
                              staticClass: "mx-1",
                              attrs: { src: "/images/check.svg" }
                            })
                          ]
                        )
                      })
                    ],
                    2
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    { staticClass: "d-flex align-items-center p-2" },
                    [
                      _vm._m(10),
                      _vm._v(" "),
                      _vm._l(_vm.membresia.planes, function(plan) {
                        return _c(
                          "div",
                          {
                            key: "descripcion-5-plan-" + plan.id,
                            staticClass: "w-38 text-center"
                          },
                          [
                            _c("img", {
                              staticClass: "mx-1",
                              attrs: { src: "/images/check.svg" }
                            })
                          ]
                        )
                      })
                    ],
                    2
                  )
                ]
              )
            ])
          ])
        ])
      : _vm._e(),
    _vm._v(" "),
    _c("div", { staticClass: "mobile-display" }, [
      _c("div", { staticClass: "card gray-back" }, [
        _c("div", { staticClass: "card-body" }, [
          _c("div", { staticClass: "col" }, [
            _c(
              "span",
              {
                staticClass: "d-flex align-items-center justify-content-center"
              },
              [
                _c("img", {
                  staticClass: "mx-1 mini-flag-img active",
                  attrs: {
                    src:
                      "/storage/images/" +
                      _vm.membresia.idioma.diminutivo +
                      ".svg",
                    alt: "membresia idioma"
                  }
                }),
                _vm._v(" "),
                _c("h1", { staticClass: "mb-0 ml-3" }, [
                  _vm._v(_vm._s(_vm.membresia.nombre))
                ])
              ]
            ),
            _vm._v(" "),
            _c("h3", { staticClass: "text-center" }, [
              _vm._v("Selecciona tu membresía y comienza aprender.")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("nav", [
          _c(
            "div",
            {
              staticClass: "nav nav-tabs d-flex text-center",
              attrs: { id: "nav-tab", role: "tablist" }
            },
            _vm._l(_vm.membresia.planes, function(plan, key) {
              return _c(
                "a",
                {
                  class: ["nav-link flex-fill", key === 0 ? "active" : null],
                  attrs: {
                    id: "nav-" + plan.id + "-tab",
                    "data-toggle": "tab",
                    href: "#nav-" + plan.id,
                    role: "tab",
                    "aria-controls": "#nav-" + plan.id,
                    "aria-selected": key === 0 ? true : false
                  }
                },
                [_vm._v(_vm._s(plan.nombre))]
              )
            }),
            0
          )
        ]),
        _vm._v(" "),
        _c(
          "div",
          {
            staticClass: "tab-content bg-white",
            attrs: { id: "nav-tabContent" }
          },
          _vm._l(_vm.membresia.planes, function(plan, key) {
            return _c(
              "div",
              {
                class: ["tab-pane fade", key === 0 ? "show active" : null],
                attrs: {
                  id: "nav-" + plan.id,
                  role: "tabpanel",
                  "aria-labelledby": "nav-" + plan.id + "-tab"
                }
              },
              [
                _c(
                  "div",
                  { staticClass: "card-membership-mobile text-center" },
                  [
                    _c("div", { staticClass: "d-flex flex-column" }, [
                      _c("span", { staticClass: "price-mobile" }, [
                        _vm._v(
                          "\n                                " +
                            _vm._s(
                              plan.precio.toLocaleString("de-DE", {
                                style: "currency",
                                currency: "USD"
                              })
                            ) +
                            "\n                            "
                        )
                      ]),
                      _vm._v(" "),
                      _c("span", { staticClass: "h4" }, [
                        _vm._v("Pago " + _vm._s(plan.tipo))
                      ]),
                      _vm._v(" "),
                      _vm._m(11, true)
                    ]),
                    _vm._v(" "),
                    _c(
                      "a",
                      {
                        staticClass: "btn btn-primary-red px-5 mt-3 mb-2",
                        attrs: { href: "" }
                      },
                      [_vm._v("Comprar")]
                    )
                  ]
                ),
                _vm._v(" "),
                _vm._m(12, true)
              ]
            )
          }),
          0
        )
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row d-flex justify-content-center" }, [
      _c("div", { staticClass: "col-lg-6 col-md-6 col-sm-12 col-xs-12" }, [
        _c("h2", { staticClass: "text-center" }, [
          _c("span", { staticClass: "membership-span" }, [
            _vm._v("Enseñamos idiomas")
          ]),
          _vm._v(" a través del juego ¿Qué esperas para que tus hijos inicien?")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col px-0" }, [
      _c("span", { staticClass: "d-flex mb-2 span-payment-methods" }, [
        _vm._v(
          "\n                                Aceptamos múltiples metodos de pago.\n                            "
        )
      ]),
      _vm._v(" "),
      _c("img", {
        staticClass: "mx-1",
        attrs: { src: "/images/stripe-logo.svg", alt: "membresia idioma" }
      }),
      _vm._v(" "),
      _c("img", {
        staticClass: "mx-1",
        attrs: { src: "/images/paypal-logo.svg", alt: "membresia idioma" }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      {
        staticClass: "carousel-control-prev",
        attrs: {
          href: "#carouselWIndicators",
          role: "button",
          "data-slide": "prev"
        }
      },
      [
        _c("span", {
          staticClass: "carousel-control-prev-icon carousel-control-icon",
          attrs: { "aria-hidden": "true" }
        }),
        _vm._v(" "),
        _c("span", { staticClass: "sr-only" }, [_vm._v("Previous")])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      {
        staticClass: "carousel-control-next",
        attrs: {
          href: "#carouselWIndicators",
          role: "button",
          "data-slide": "next"
        }
      },
      [
        _c("span", {
          staticClass: "carousel-control-next-icon carousel-control-icon",
          attrs: { "aria-hidden": "true" }
        }),
        _vm._v(" "),
        _c("span", { staticClass: "sr-only" }, [_vm._v("Next")])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "w-24" }, [
      _c("h4", { staticClass: "mb-0" }, [_vm._v("Plan")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "w-24" }, [
      _c("h4", { staticClass: "mb-0" }, [
        _vm._v("Estudiantes con acceso a la plataforma")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "w-24" }, [
      _c("h4", { staticClass: "mb-0" }, [
        _vm._v("Panel de monitoreo para padres")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "w-24" }, [
      _c("h4", { staticClass: "mb-0" }, [_vm._v("Clases nuevas semanales")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "w-24" }, [
      _c("h4", { staticClass: "mb-0" }, [_vm._v("Juegos educativos")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "w-24" }, [
      _c("h4", { staticClass: "mb-0" }, [_vm._v("Certificado de finalización")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "w-24" }, [
      _c("h4", { staticClass: "mb-0" }, [_vm._v("Clases en full HD")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "text-left w-80 mx-auto" }, [
      _c("li", [
        _c("span", { staticClass: "text-primary bold" }, [_vm._v("1 perfil")]),
        _vm._v(" de estudiante en la plataforma.")
      ]),
      _vm._v(" "),
      _c("li", [_vm._v("Certificado de finalización.")]),
      _vm._v(" "),
      _c("li", [_vm._v("Clases nuevas semanales.")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "membership-details mx-4" }, [
      _c("li", { staticClass: "d-flex align-items-center py-2" }, [
        _c("div", { staticClass: "w-75" }, [
          _c("h3", { staticClass: "mb-0" }, [
            _vm._v("Estudiantes con acceso a la plataforma")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "w-25 text-center p-4" }, [
          _c("span", { staticClass: "h4 bold" }, [_vm._v("1")])
        ])
      ]),
      _vm._v(" "),
      _c("li", { staticClass: "d-flex align-items-center py-2" }, [
        _c("div", { staticClass: "w-75" }, [
          _c("h3", { staticClass: "mb-0" }, [
            _vm._v("Panel de monitoreo para padres")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "w-25 text-center" }, [
          _c("img", {
            staticClass: "mx-1",
            attrs: { src: "/storage/images/check.svg" }
          })
        ])
      ]),
      _vm._v(" "),
      _c("li", { staticClass: "d-flex align-items-center py-2" }, [
        _c("div", { staticClass: "w-75" }, [
          _c("h3", { staticClass: "mb-0" }, [_vm._v("Clases nuevas semanales")])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "w-25 text-center p-4" }, [
          _c("img", {
            staticClass: "mx-1",
            attrs: { src: "/storage/images/check.svg" }
          })
        ])
      ]),
      _vm._v(" "),
      _c("li", { staticClass: "d-flex align-items-center py-2" }, [
        _c("div", { staticClass: "w-75" }, [
          _c("h3", { staticClass: "mb-0" }, [_vm._v("Juegos educativos")])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "w-25 text-center p-4" }, [
          _c("img", {
            staticClass: "mx-1",
            attrs: { src: "/storage/images/check.svg" }
          })
        ])
      ]),
      _vm._v(" "),
      _c("li", { staticClass: "d-flex align-items-center py-2" }, [
        _c("div", { staticClass: "w-75" }, [
          _c("h3", { staticClass: "mb-0" }, [
            _vm._v("Certificado de finalización")
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "w-25 text-center p-4" }, [
          _c("img", {
            staticClass: "mx-1",
            attrs: { src: "/storage/images/check.svg" }
          })
        ])
      ]),
      _vm._v(" "),
      _c("li", { staticClass: "d-flex align-items-center py-2" }, [
        _c("div", { staticClass: "w-75" }, [
          _c("h3", { staticClass: "mb-0" }, [_vm._v("Clases en full HD")])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "w-25 text-center p-4" }, [
          _c("img", {
            staticClass: "mx-1",
            attrs: { src: "/storage/images/check.svg" }
          })
        ])
      ])
    ])
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue?vue&type=template&id=6760b714&scoped=true&":
/*!******************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue?vue&type=template&id=6760b714&scoped=true& ***!
  \******************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [
    _c("input", { attrs: { type: "hidden", name: "currency", value: "usd" } }),
    _vm._v(" "),
    _c("input", {
      attrs: { type: "hidden", name: "plan_id" },
      domProps: { value: _vm.plan.id }
    }),
    _vm._v(" "),
    _c("input", {
      attrs: { type: "hidden", name: "value" },
      domProps: { value: _vm.precio }
    }),
    _vm._v(" "),
    _vm.cupon
      ? _c("input", {
          attrs: { type: "hidden", name: "cupon_id" },
          domProps: { value: _vm.cupon.id }
        })
      : _vm._e()
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=template&id=6feb5108&scoped=true&":
/*!*************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=template&id=6feb5108&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [
    _vm.paymentmetod === null
      ? _c(
          "div",
          {
            staticClass: "btn-group btn-group-toggle row m-0 w-100 p-0",
            attrs: { "data-toggle": "buttons" }
          },
          [
            _c(
              "label",
              {
                staticClass:
                  "btn d-flex m-2 col-12 py-2 row m-0 justify-content-between align-items-center",
                on: {
                  click: function($event) {
                    $event.preventDefault()
                    return _vm.definir("efectivoCollapse")
                  }
                }
              },
              [_vm._m(0), _vm._v(" "), _vm._m(1)]
            ),
            _vm._v(" "),
            _c(
              "label",
              {
                staticClass:
                  "btn d-flex m-2 col-12 py-2 row m-0 justify-content-between align-items-center",
                on: {
                  click: function($event) {
                    $event.preventDefault()
                    return _vm.definir("transferenciabancariaCollapse")
                  }
                }
              },
              [_vm._m(2), _vm._v(" "), _vm._m(3)]
            )
          ]
        )
      : _c("div", [
          _c("div", { staticClass: "d-flex flex-column align-items-center" }, [
            _vm.paymentmetod === "efectivoCollapse"
              ? _c("img", {
                  staticClass: "iz-lg",
                  attrs: { src: "/images/stripe-logo.svg" }
                })
              : _vm.paymentmetod === "transferenciabancariaCollapse"
              ? _c("img", {
                  staticClass: "iz-lg",
                  attrs: { src: "/images/paypal-logo.svg" }
                })
              : _vm._e(),
            _vm._v(" "),
            _c(
              "div",
              {
                staticClass:
                  "card-rounded m-2 w-100 py-3 d-flex justify-content-between align-items-center"
              },
              [
                _c("span", [_vm._v("Metodo de pago agregado")]),
                _vm._v(" "),
                _c(
                  "button",
                  {
                    staticClass: "btn btn-success btn-registro",
                    on: {
                      click: function($event) {
                        $event.preventDefault()
                        return _vm.cambiar()
                      }
                    }
                  },
                  [_vm._v("Seleccionar otro pago")]
                )
              ]
            )
          ])
        ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", [
      _c("input", {
        staticClass: "position-relative",
        attrs: {
          type: "radio",
          name: "payment_platform",
          value: "efectivo",
          required: ""
        }
      }),
      _vm._v(" "),
      _c("span", { staticClass: "h5" }, [_vm._v("Pagar con Stripe")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", [
      _c("img", {
        staticClass: "iz",
        attrs: { src: "/images/stripe-logo.svg" }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", [
      _c("input", {
        staticClass: "position-relative",
        attrs: {
          type: "radio",
          name: "payment_platform",
          value: "transferencia",
          required: ""
        }
      }),
      _vm._v(" "),
      _c("span", { staticClass: "h5" }, [_vm._v("Paypal")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", [
      _c("img", {
        staticClass: "iz",
        attrs: { src: "/images/paypal-logo.svg" }
      })
    ])
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/cuponmodal.vue?vue&type=template&id=fe2d0fa4&scoped=true&":
/*!***********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/cuponmodal.vue?vue&type=template&id=fe2d0fa4&scoped=true& ***!
  \***********************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass: "modal fade",
      attrs: {
        id: "exampleModal",
        tabindex: "-1",
        role: "dialog",
        "aria-labelledby": "exampleModalLabel",
        "aria-hidden": "true"
      }
    },
    [
      _c(
        "div",
        {
          staticClass: "modal-dialog modal-dialog-centered",
          attrs: { role: "document" }
        },
        [
          _c(
            "div",
            { staticClass: "modal-content", staticStyle: { height: "19rem" } },
            [
              _c(
                "div",
                { staticClass: "modal-header modal-header-admin pb-0" },
                [
                  _c(
                    "button",
                    {
                      staticClass: "close",
                      attrs: {
                        type: "button",
                        "data-dismiss": "modal",
                        "aria-label": "Close"
                      }
                    },
                    [
                      _c(
                        "svg",
                        {
                          attrs: {
                            width: "30",
                            height: "30",
                            viewBox: "0 0 30 30",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg"
                          }
                        },
                        [
                          _c("path", {
                            attrs: {
                              d: "M22.5 7.5L7.5 22.5",
                              stroke: "#606060",
                              "stroke-width": "2",
                              "stroke-linecap": "round",
                              "stroke-linejoin": "round"
                            }
                          }),
                          _vm._v(" "),
                          _c("path", {
                            attrs: {
                              d: "M7.5 7.5L22.5 22.5",
                              stroke: "#606060",
                              "stroke-width": "2",
                              "stroke-linecap": "round",
                              "stroke-linejoin": "round"
                            }
                          })
                        ]
                      )
                    ]
                  )
                ]
              ),
              _vm._v(" "),
              _c("div", { staticClass: "modal-body pt-0 px-5" }, [
                _vm._m(0),
                _vm._v(" "),
                _c("div", { staticClass: "row mt-4" }, [
                  _c("div", { staticClass: "col" }, [
                    _c("input", {
                      directives: [
                        {
                          name: "model",
                          rawName: "v-model",
                          value: _vm.cupon,
                          expression: "cupon"
                        }
                      ],
                      staticClass: "form-input input-primary",
                      attrs: { type: "text", maxlength: "20" },
                      domProps: { value: _vm.cupon },
                      on: {
                        input: function($event) {
                          if ($event.target.composing) {
                            return
                          }
                          _vm.cupon = $event.target.value
                        }
                      }
                    })
                  ])
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "row mt-4" }, [
                  _c("div", { staticClass: "col" }, [
                    _c(
                      "button",
                      {
                        staticClass: "btn btn-block btn-success",
                        attrs: { type: "button" },
                        on: {
                          click: function($event) {
                            $event.preventDefault()
                            return _vm.aplicar(_vm.cupon)
                          }
                        }
                      },
                      [
                        _c("span", { staticClass: "h5 fw-500" }, [
                          _vm._v(
                            "\n                                Aplicar Cupon\n                            "
                          )
                        ])
                      ]
                    )
                  ])
                ])
              ])
            ]
          )
        ]
      )
    ]
  )
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row mt-4" }, [
      _c("div", { staticClass: "col text-center" }, [
        _c(
          "h3",
          {
            staticClass: "modal-title fw-600",
            attrs: { id: "exampleModalLabel" }
          },
          [_vm._v("Cupón de descuento")]
        )
      ])
    ])
  }
]
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=template&id=107001ad&scoped=true&":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=template&id=107001ad&scoped=true& ***!
  \**************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "row justify-content-center" }, [
    _c(
      "div",
      {
        staticClass:
          "col-xs-12 col-sm-12 col-md-6 col-lg-6 d-flex justify-content-center"
      },
      [
        _c("div", { staticClass: "d-flex" }, [
          _c("div", { staticClass: "text-center" }, [
            _c("img", {
              staticClass: "mx-1 mb-2 process-dot active",
              attrs: {
                src:
                  "/images/ellipse-" +
                  (_vm.process >= 33.3 ? "filled" : "outlined") +
                  ".svg"
              }
            }),
            _vm._v(" "),
            _c("span", { staticClass: "h6 d-block" }, [
              _vm._v("Seleccione el curso")
            ])
          ]),
          _vm._v(" "),
          _c("div", [
            _c("img", {
              staticClass: "line1",
              attrs: { src: "/images/line.svg" }
            })
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "text-center" }, [
            _c("img", {
              staticClass: "mx-1 mb-2 process-dot active",
              attrs: {
                src:
                  "/images/ellipse-" +
                  (_vm.process >= 66.6 ? "filled" : "outlined") +
                  ".svg"
              }
            }),
            _vm._v(" "),
            _c("span", { staticClass: "h6 d-block" }, [
              _vm._v("Seleccione el tipo de pago")
            ])
          ]),
          _vm._v(" "),
          _c("div", [
            _c("img", {
              staticClass: "line2",
              attrs: { src: "/images/line.svg" }
            })
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "text-center" }, [
            _c("img", {
              staticClass: "mx-1 mb-2 process-dot active",
              attrs: {
                src:
                  "/images/ellipse-" +
                  (_vm.process === 100 ? "filled" : "outlined") +
                  ".svg"
              }
            }),
            _vm._v(" "),
            _c("span", { staticClass: "h6 d-block" }, [
              _vm._v("Confirma tu pago")
            ])
          ])
        ])
      ]
    )
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/precio.vue?vue&type=template&id=19fd6b44&scoped=true&":
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/PaymentUtils/precio.vue?vue&type=template&id=19fd6b44&scoped=true& ***!
  \*******************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "span",
    { staticClass: "h1 bold mb-0", staticStyle: { "font-size": "2rem" } },
    [_vm._v("USD " + _vm._s(_vm.precio))]
  )
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer.vue?vue&type=template&id=7ca0f343&scoped=true&":
/*!***********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Templades/Footer/footer.vue?vue&type=template&id=7ca0f343&scoped=true& ***!
  \***********************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [_vm._v("\n    footer\n")])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=template&id=17951e7f&scoped=true&":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=template&id=17951e7f&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [_vm._v("\n    footer dos\n")])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
        injectStyles.call(
          this,
          (options.functional ? this.parent : this).$root.$options.shadowRoot
        )
      }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "./node_modules/vue/dist/vue.common.dev.js":
/*!*************************************************!*\
  !*** ./node_modules/vue/dist/vue.common.dev.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */


/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Generate a string containing static keys from compiler modules.
 */
function genStaticKeys (modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (!config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i], vm);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  var haveExpectedTypes = expectedTypes.some(function (t) { return t; });
  if (!valid && haveExpectedTypes) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;

function assertType (value, type, vm) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    try {
      valid = value instanceof type;
    } catch (e) {
      warn('Invalid prop type: "' + String(type) + '" is not a constructor', vm);
      valid = false;
    }
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

var functionTypeCheckRE = /^\s*function (\w+)/;

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(functionTypeCheckRE);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  // check if we need to specify expected value
  if (
    expectedTypes.length === 1 &&
    isExplicable(expectedType) &&
    isExplicable(typeof value) &&
    !isBoolean(expectedType, receivedType)
  ) {
    message += " with value " + (styleValue(value, expectedType));
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + (styleValue(value, receivedType)) + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

var EXPLICABLE_TYPES = ['string', 'number', 'boolean'];
function isExplicable (value) {
  return EXPLICABLE_TYPES.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

var mark;
var measure;

{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

{
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals. ' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    var vnode = res && res[0];
    return res && (
      !vnode ||
      (res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode)) // #9658, #10391
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallbackRender,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) {
    // scoped slot
    props = props || {};
    if (bindObject) {
      if (!isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes =
      scopedSlotFn(props) ||
      (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
  } else {
    nodes =
      this.$slots[name] ||
      (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
  return eventKeyCode === undefined
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  // we know it's MountedComponentVNode but flow doesn't
  vnode,
  // activeInstance in lifecycle state
  parent
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if (isDef(data) && isDef(data.nativeOn) && data.tag !== 'component') {
        warn(
          ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),
          context
        );
      }
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
      warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                "timeout (" + (res.timeout) + "ms)"
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key) ||
    (!newScopedSlots && vm.$scopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (!config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString();
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
      warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        var info = "callback for watcher \"" + (this.expression) + "\"";
        invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      } else if (vm.$options.methods && key in vm.$options.methods) {
        warn(("The computed property \"" + key + "\" is already defined as a method."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      var info = "callback for immediate watcher \"" + (watcher.expression) + "\"";
      pushTarget();
      invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
      popTarget();
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    {
      initProxy(vm);
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if (!(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */





function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var entry = cache[key];
    if (entry) {
      var name = entry.name;
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var entry = cache[key];
  if (entry && (!current || entry.tag !== current.tag)) {
    entry.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  methods: {
    cacheVNode: function cacheVNode() {
      var ref = this;
      var cache = ref.cache;
      var keys = ref.keys;
      var vnodeToCache = ref.vnodeToCache;
      var keyToCache = ref.keyToCache;
      if (vnodeToCache) {
        var tag = vnodeToCache.tag;
        var componentInstance = vnodeToCache.componentInstance;
        var componentOptions = vnodeToCache.componentOptions;
        cache[keyToCache] = {
          name: getComponentName(componentOptions),
          tag: tag,
          componentInstance: componentInstance,
        };
        keys.push(keyToCache);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
        this.vnodeToCache = null;
      }
    }
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.cacheVNode();
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  updated: function updated () {
    this.cacheVNode();
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        // delay setting the cache until update
        this.vnodeToCache = vnode;
        this.keyToCache = key;
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.14';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isPreTag = function (tag) { return tag === 'pre'; };

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key &&
    a.asyncFactory === b.asyncFactory && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur, vnode.data.pre);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value, isInPre) {
  if (isInPre || el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters (exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
    } else if (
      c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C &&
      exp.charCodeAt(i - 1) !== 0x7C &&
      !curly && !square && !paren
    ) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22: inDouble = true; break         // "
        case 0x27: inSingle = true; break         // '
        case 0x60: inTemplateString = true; break // `
        case 0x28: paren++; break                 // (
        case 0x29: paren--; break                 // )
        case 0x5B: square++; break                // [
        case 0x5D: square--; break                // ]
        case 0x7B: curly++; break                 // {
        case 0x7D: curly--; break                 // }
      }
      if (c === 0x2f) { // /
        var j = i - 1;
        var p = (void 0);
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') { break }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter () {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression
}

function wrapFilter (exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return ("_f(\"" + filter + "\")(" + exp + ")")
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
  }
}

/*  */



/* eslint-disable no-unused-vars */
function baseWarn (msg, range) {
  console.error(("[Vue compiler]: " + msg));
}
/* eslint-enable no-unused-vars */

function pluckModuleFunction (
  modules,
  key
) {
  return modules
    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
    : []
}

function addProp (el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

function addAttr (el, name, value, range, dynamic) {
  var attrs = dynamic
    ? (el.dynamicAttrs || (el.dynamicAttrs = []))
    : (el.attrs || (el.attrs = []));
  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

// add a raw attr (use this in preTransforms)
function addRawAttr (el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));
}

function addDirective (
  el,
  name,
  rawName,
  value,
  arg,
  isDynamicArg,
  modifiers,
  range
) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker (symbol, name, dynamic) {
  return dynamic
    ? ("_p(" + name + ",\"" + symbol + "\")")
    : symbol + name // mark the event as captured
}

function addHandler (
  el,
  name,
  value,
  modifiers,
  important,
  warn,
  range,
  dynamic
) {
  modifiers = modifiers || emptyObject;
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (
    warn &&
    modifiers.prevent && modifiers.passive
  ) {
    warn(
      'passive and prevent can\'t be used together. ' +
      'Passive handler can\'t prevent default event.',
      range
    );
  }

  // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.
  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  }

  // check capture modifier
  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }
  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */
  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;
  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr (
  el,
  name
) {
  return el.rawAttrsMap[':' + name] ||
    el.rawAttrsMap['v-bind:' + name] ||
    el.rawAttrsMap[name]
}

function getBindingAttr (
  el,
  name,
  getStatic
) {
  var dynamicValue =
    getAndRemoveAttr(el, ':' + name) ||
    getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue)
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue)
    }
  }
}

// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.
function getAndRemoveAttr (
  el,
  name,
  removeFromMap
) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break
      }
    }
  }
  if (removeFromMap) {
    delete el.attrsMap[name];
  }
  return val
}

function getAndRemoveAttrByRegex (
  el,
  name
) {
  var list = el.attrsList;
  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];
    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr
    }
  }
}

function rangeSetItem (
  item,
  range
) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }
    if (range.end != null) {
      item.end = range.end;
    }
  }
  return item
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel (
  el,
  value,
  modifiers
) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression =
      "(typeof " + baseValueExpression + " === 'string'" +
      "? " + baseValueExpression + ".trim()" +
      ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: ("(" + value + ")"),
    expression: JSON.stringify(value),
    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode (
  value,
  assignment
) {
  var res = parseModel(value);
  if (res.key === null) {
    return (value + "=" + assignment)
  } else {
    return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
  }
}

/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */

var len, str, chr, index$1, expressionPos, expressionEndPos;



function parseModel (val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');
    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      }
    } else {
      return {
        exp: val,
        key: null
      }
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  }
}

function next () {
  return str.charCodeAt(++index$1)
}

function eof () {
  return index$1 >= len
}

function isStringStart (chr) {
  return chr === 0x22 || chr === 0x27
}

function parseBracket (chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue
    }
    if (chr === 0x5B) { inBracket++; }
    if (chr === 0x5D) { inBracket--; }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break
    }
  }
}

function parseString (chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model (
  el,
  dir,
  _warn
) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  {
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1(
        "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
        "File inputs are read only. Use a v-on:change listener instead.",
        el.rawAttrsMap['v-model']
      );
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else {
    warn$1(
      "<" + (el.tag) + " v-model=\"" + value + "\">: " +
      "v-model is not supported on this element type. " +
      'If you are working with contenteditable, it\'s recommended to ' +
      'wrap a library dedicated for that purpose inside a custom component.',
      el.rawAttrsMap['v-model']
    );
  }

  // ensure runtime directive metadata
  return true
}

function genCheckboxModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked',
    "Array.isArray(" + value + ")" +
    "?_i(" + value + "," + valueBinding + ")>-1" + (
      trueValueBinding === 'true'
        ? (":(" + value + ")")
        : (":_q(" + value + "," + trueValueBinding + ")")
    )
  );
  addHandler(el, 'change',
    "var $$a=" + value + "," +
        '$$el=$event.target,' +
        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
    'if(Array.isArray($$a)){' +
      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
          '$$i=_i($$a,$$v);' +
      "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
      "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
    null, true
  );
}

function genRadioModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" +
    ".call($event.target.options,function(o){return o.selected})" +
    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
    "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + (genAssignmentCode(value, assignment));
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel (
  el,
  value,
  modifiers
) {
  var type = el.attrsMap.type;

  // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type
  {
    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
    if (value$1 && !typeBinding) {
      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
      warn$1(
        binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " +
        'because the latter already expands to a value binding internally',
        el.rawAttrsMap[binding]
      );
    }
  }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy
    ? 'change'
    : type === 'range'
      ? RANGE_TOKEN
      : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', ("(" + value + ")"));
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecessary `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else {
        console[console.info ? 'info' : 'log'](
          'Download the Vue Devtools extension for a better development experience:\n' +
          'https://github.com/vuejs/vue-devtools'
        );
      }
    }
    if (config.productionTip !== false &&
      typeof console !== 'undefined'
    ) {
      console[console.info ? 'info' : 'log'](
        "You are running Vue in development mode.\n" +
        "Make sure to turn on production mode when deploying for production.\n" +
        "See more tips at https://vuejs.org/guide/deployment.html"
      );
    }
  }, 0);
}

/*  */

var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
});



function parseText (
  text,
  delimiters
) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return
  }
  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;
  while ((match = tagRE.exec(text))) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push(("_s(" + exp + ")"));
    rawTokens.push({ '@binding': exp });
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }
  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  }
}

/*  */

function transformNode (el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if (staticClass) {
    var res = parseText(staticClass, options.delimiters);
    if (res) {
      warn(
        "class=\"" + staticClass + "\": " +
        'Interpolation inside attributes has been removed. ' +
        'Use v-bind or the colon shorthand instead. For example, ' +
        'instead of <div class="{{ val }}">, use <div :class="val">.',
        el.rawAttrsMap['class']
      );
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData (el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + (el.staticClass) + ",";
  }
  if (el.classBinding) {
    data += "class:" + (el.classBinding) + ",";
  }
  return data
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};

/*  */

function transformNode$1 (el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    {
      var res = parseText(staticStyle, options.delimiters);
      if (res) {
        warn(
          "style=\"" + staticStyle + "\": " +
          'Interpolation inside attributes has been removed. ' +
          'Use v-bind or the colon shorthand instead. For example, ' +
          'instead of <div style="{{ val }}">, use <div :style="val">.',
          el.rawAttrsMap['style']
        );
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1 (el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + (el.staticStyle) + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + (el.styleBinding) + "),";
  }
  return data
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};

/*  */

var decoder;

var he = {
  decode: function decode (html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent
  }
};

/*  */

var isUnaryTag = makeMap(
  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
  'link,meta,param,source,track,wbr'
);

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap(
  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
);

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap(
  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
  'title,tr,track'
);

/**
 * Not type-checking this file because it's mostly vendor code.
 */

// Regular Expressions for parsing tags and attributes
var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp(("^<" + qnameCapture));
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
var doctype = /^<!DOCTYPE [^>]+>/i;
// #7298: escape - to avoid being passed as HTML comment when inlined in page
var comment = /^<!\--/;
var conditionalComment = /^<!\[/;

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

// #5992
var isIgnoreNewlineTag = makeMap('pre,textarea', true);
var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };

function decodeAttr (value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) { return decodingMap[match]; })
}

function parseHTML (html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }
            advance(commentEnd + 3);
            continue
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }
          continue
        }
      }

      var text = (void 0), rest = (void 0), next = (void 0);
      if (textEnd >= 0) {
        rest = html.slice(textEnd);
        while (
          !endTag.test(rest) &&
          !startTagOpen.test(rest) &&
          !comment.test(rest) &&
          !conditionalComment.test(rest)
        ) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);
          if (next < 0) { break }
          textEnd += next;
          rest = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text
            .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }
        if (options.chars) {
          options.chars(text);
        }
        return ''
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if (!stack.length && options.warn) {
        options.warn(("Mal-formatted tag at end of template: \"" + html + "\""), { start: index + html.length });
      }
      break
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance (n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag () {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match
      }
    }
  }

  function handleStartTag (match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
        ? options.shouldDecodeNewlinesForHref
        : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };
      if (options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag (tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) { start = index; }
    if (end == null) { end = index; }

    // Find the closest opened tag of the same type
    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (i > pos || !tagName &&
          options.warn
        ) {
          options.warn(
            ("tag <" + (stack[i].tag) + "> has no matching end tag."),
            { start: stack[i].start, end: stack[i].end }
          );
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:|^#/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;

var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

var slotRE = /^v-slot(:|$)|^#/;

var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /[ \f\t\r\n]+/g;

var invalidAttributeRE = /[\s"'<>\/=]/;

var decodeHTMLCached = cached(he.decode);

var emptySlotScopeToken = "_empty_";

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement (
  tag,
  attrs,
  parent
) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  }
}

/**
 * Convert HTML string to AST.
 */
function parse (
  template,
  options
) {
  warn$2 = options.warn || baseWarn;

  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;
  maybeComponent = function (el) { return !!(
    el.component ||
    el.attrsMap[':is'] ||
    el.attrsMap['v-bind:is'] ||
    !(el.attrsMap.is ? isReservedTag(el.attrsMap.is) : isReservedTag(el.tag))
  ); };
  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce (msg, range) {
    if (!warned) {
      warned = true;
      warn$2(msg, range);
    }
  }

  function closeElement (element) {
    trimEndingWhitespace(element);
    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    }
    // tree management
    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        {
          checkRootConstraints(element);
        }
        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else {
        warnOnce(
          "Component template should contain exactly one root element. " +
          "If you are using v-if on multiple elements, " +
          "use v-else-if to chain them instead.",
          { start: element.start }
        );
      }
    }
    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"'
          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }
        currentParent.children.push(element);
        element.parent = currentParent;
      }
    }

    // final children cleanup
    // filter out scoped slots
    element.children = element.children.filter(function (c) { return !(c).slotScope; });
    // remove trailing whitespace node again
    trimEndingWhitespace(element);

    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
    // apply post-transforms
    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace (el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;
      while (
        (lastNode = el.children[el.children.length - 1]) &&
        lastNode.type === 3 &&
        lastNode.text === ' '
      ) {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints (el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce(
        "Cannot use <" + (el.tag) + "> as component root element because it may " +
        'contain multiple nodes.',
        { start: el.start }
      );
    }
    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce(
        'Cannot use v-for on stateful component root element because ' +
        'it renders multiple elements.',
        el.rawAttrsMap['v-for']
      );
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start (tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);
      if (ns) {
        element.ns = ns;
      }

      {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated
          }, {});
        }
        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$2(
              "Invalid dynamic argument expression: attribute names cannot contain " +
              "spaces, quotes, <, >, / or =.",
              {
                start: attr.start + attr.name.indexOf("["),
                end: attr.start + attr.name.length
              }
            );
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        warn$2(
          'Templates should only be responsible for mapping the state to the ' +
          'UI. Avoid placing tags with side-effects in your templates, such as ' +
          "<" + tag + ">" + ', as they will not be parsed.',
          { start: element.start }
        );
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;
        {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },

    end: function end (tag, start, end$1) {
      var element = stack[stack.length - 1];
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      if (options.outputSourceRange) {
        element.end = end$1;
      }
      closeElement(element);
    },

    chars: function chars (text, start, end) {
      if (!currentParent) {
        {
          if (text === template) {
            warnOnce(
              'Component template requires a root element, rather than just text.',
              { start: start }
            );
          } else if ((text = text.trim())) {
            warnOnce(
              ("text \"" + text + "\" outside root element will be ignored."),
              { start: start }
            );
          }
        }
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      var children = currentParent.children;
      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }
      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }
        var res;
        var child;
        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }
        if (child) {
          if (options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }
          children.push(child);
        }
      }
    },
    comment: function comment (text, start, end) {
      // adding anything as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };
        if (options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }
        currentParent.children.push(child);
      }
    }
  });
  return root
}

function processPre (el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs (el) {
  var list = el.attrsList;
  var len = list.length;
  if (len) {
    var attrs = el.attrs = new Array(len);
    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };
      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement (
  element,
  options
) {
  processKey(element);

  // determine whether this is a plain element after
  // removing structural attributes
  element.plain = (
    !element.key &&
    !element.scopedSlots &&
    !element.attrsList.length
  );

  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);
  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }
  processAttrs(element);
  return element
}

function processKey (el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    {
      if (el.tag === 'template') {
        warn$2(
          "<template> cannot be keyed. Place the key on real elements instead.",
          getRawBindingAttr(el, 'key')
        );
      }
      if (el.for) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;
        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$2(
            "Do not use v-for index as key on <transition-group> children, " +
            "this is the same as not using keys.",
            getRawBindingAttr(el, 'key'),
            true /* tip */
          );
        }
      }
    }
    el.key = exp;
  }
}

function processRef (el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor (el) {
  var exp;
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    var res = parseFor(exp);
    if (res) {
      extend(el, res);
    } else {
      warn$2(
        ("Invalid v-for expression: " + exp),
        el.rawAttrsMap['v-for']
      );
    }
  }
}



function parseFor (exp) {
  var inMatch = exp.match(forAliasRE);
  if (!inMatch) { return }
  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);
  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();
    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }
  return res
}

function processIf (el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions (el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else {
    warn$2(
      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
      "used on element <" + (el.tag) + "> without corresponding v-if.",
      el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']
    );
  }
}

function findPrevElement (children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if (children[i].text !== ' ') {
        warn$2(
          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
          "will be ignored.",
          children[i]
        );
      }
      children.pop();
    }
  }
}

function addIfCondition (el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce (el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

// handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">
function processSlotContent (el) {
  var slotScope;
  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */
    if (slotScope) {
      warn$2(
        "the \"scope\" attribute for scoped slots have been deprecated and " +
        "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +
        "can also be used on plain elements in addition to <template> to " +
        "denote scoped slots.",
        el.rawAttrsMap['scope'],
        true
      );
    }
    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
    /* istanbul ignore if */
    if (el.attrsMap['v-for']) {
      warn$2(
        "Ambiguous combined usage of slot-scope and v-for on <" + (el.tag) + "> " +
        "(v-for takes higher priority). Use a wrapper <template> for the " +
        "scoped slot to make it clearer.",
        el.rawAttrsMap['slot-scope'],
        true
      );
    }
    el.slotScope = slotScope;
  }

  // slot="xxx"
  var slotTarget = getBindingAttr(el, 'slot');
  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
    // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.
    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  }

  // 2.6 v-slot syntax
  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding) {
        {
          if (el.slotTarget || el.slotScope) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.parent && !maybeComponent(el.parent)) {
            warn$2(
              "<template v-slot> can only appear at the root level inside " +
              "the receiving component",
              el
            );
          }
        }
        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding$1) {
        {
          if (!maybeComponent(el)) {
            warn$2(
              "v-slot can only be used on components or <template>.",
              slotBinding$1
            );
          }
          if (el.slotScope || el.slotTarget) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.scopedSlots) {
            warn$2(
              "To avoid scope ambiguity, the default slot should also use " +
              "<template> syntax when there are other named slots.",
              slotBinding$1
            );
          }
        }
        // add the component's children to its default slot
        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
        // remove children as they are returned from scopedSlots now
        el.children = [];
        // mark el non-plain so data gets generated
        el.plain = false;
      }
    }
  }
}

function getSlotName (binding) {
  var name = binding.name.replace(slotRE, '');
  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else {
      warn$2(
        "v-slot shorthand syntax requires a slot name.",
        binding
      );
    }
  }
  return dynamicArgRE.test(name)
    // dynamic [name]
    ? { name: name.slice(1, -1), dynamic: true }
    // static name
    : { name: ("\"" + name + "\""), dynamic: false }
}

// handle <slot/> outlets
function processSlotOutlet (el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if (el.key) {
      warn$2(
        "`key` does not work on <slot> because slots are abstract outlets " +
        "and can possibly expand into multiple elements. " +
        "Use the key on a wrapping element instead.",
        getRawBindingAttr(el, 'key')
      );
    }
  }
}

function processComponent (el) {
  var binding;
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs (el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name.replace(dirRE, ''));
      // support .foo shorthand syntax for the .prop modifier
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        if (
          value.trim().length === 0
        ) {
          warn$2(
            ("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"")
          );
        }
        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);
            if (name === 'innerHtml') { name = 'innerHTML'; }
          }
          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");
            if (!isDynamic) {
              addHandler(
                el,
                ("update:" + (camelize(name))),
                syncGen,
                null,
                false,
                warn$2,
                list[i]
              );
              if (hyphenate(name) !== camelize(name)) {
                addHandler(
                  el,
                  ("update:" + (hyphenate(name))),
                  syncGen,
                  null,
                  false,
                  warn$2,
                  list[i]
                );
              }
            } else {
              // handler w/ dynamic event name
              addHandler(
                el,
                ("\"update:\"+(" + name + ")"),
                syncGen,
                null,
                false,
                warn$2,
                list[i],
                true // dynamic
              );
            }
          }
        }
        if ((modifiers && modifiers.prop) || (
          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
        )) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else { // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }
        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
        if (name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      {
        var res = parseText(value, delimiters);
        if (res) {
          warn$2(
            name + "=\"" + value + "\": " +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div id="{{ val }}">, use <div :id="val">.',
            list[i]
          );
        }
      }
      addAttr(el, name, JSON.stringify(value), list[i]);
      // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation
      if (!el.component &&
          name === 'muted' &&
          platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor (el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent;
  }
  return false
}

function parseModifiers (name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) { ret[m.slice(1)] = true; });
    return ret
  }
}

function makeAttrsMap (attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (
      map[attrs[i].name] && !isIE && !isEdge
    ) {
      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }
    map[attrs[i].name] = attrs[i].value;
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el) {
  return el.tag === 'script' || el.tag === 'style'
}

function isForbiddenTag (el) {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug (attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "You are binding v-model directly to a v-for iteration alias. " +
        "This will not be able to modify the v-for source array because " +
        "writing to the alias is like modifying a function local variable. " +
        "Consider using an array of objects and use v-model on an object property instead.",
        el.rawAttrsMap['v-model']
      );
    }
    _el = _el.parent;
  }
}

/*  */

function preTransformNode (el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;
    if (!map['v-model']) {
      return
    }

    var typeBinding;
    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }
    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + (map['v-bind']) + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
      // 1. checkbox
      var branch0 = cloneASTElement(el);
      // process for on the main node
      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed
      branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0.if,
        block: branch0
      });
      // 2. add radio else-if condition
      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      });
      // 3. other
      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0
    }
  }
}

function cloneASTElement (el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent)
}

var model$1 = {
  preTransformNode: preTransformNode
};

var modules$1 = [
  klass$1,
  style$1,
  model$1
];

/*  */

function text (el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
  }
}

/*  */

function html (el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize (root, options) {
  if (!root) { return }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1 (keys) {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
    (keys ? ',' + keys : '')
  )
}

function markStatic$1 (node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots (node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true;
      return
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic (node) {
  if (node.type === 2) { // expression
    return false
  }
  if (node.type === 3) { // text
    return true
  }
  return !!(node.pre || (
    !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) &&
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}

/*  */

var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

// KeyboardEvent.keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// KeyboardEvent.key aliases
var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers (
  events,
  isNative
) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";
  for (var name in events) {
    var handlerCode = genHandler(events[name]);
    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }
  staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
  } else {
    return prefix + staticHandlers
  }
}

function genHandler (handler) {
  if (!handler) {
    return 'function(){}'
  }

  if (Array.isArray(handler)) {
    return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value
    }
    return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = (handler.modifiers);
        genModifierCode += genGuard(
          ['ctrl', 'shift', 'alt', 'meta']
            .filter(function (keyModifier) { return !modifiers[keyModifier]; })
            .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
            .join('||')
        );
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath
      ? ("return " + (handler.value) + ".apply(null, arguments)")
      : isFunctionExpression
        ? ("return (" + (handler.value) + ").apply(null, arguments)")
        : isFunctionInvocation
          ? ("return " + (handler.value))
          : handler.value;
    return ("function($event){" + code + handlerCode + "}")
  }
}

function genKeyFilter (keys) {
  return (
    // make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" +
    (keys.map(genFilterCode).join('&&')) + ")return null;"
  )
}

function genFilterCode (key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return ("$event.keyCode!==" + keyVal)
  }
  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return (
    "_k($event.keyCode," +
    (JSON.stringify(key)) + "," +
    (JSON.stringify(keyCode)) + "," +
    "$event.key," +
    "" + (JSON.stringify(keyName)) +
    ")"
  )
}

/*  */

function on (el, dir) {
  if (dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }
  el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
}

/*  */

function bind$1 (el, dir) {
  el.wrapData = function (code) {
    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
  };
}

/*  */

var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};

/*  */





var CodegenState = function CodegenState (options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;
  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };
  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};



function generate (
  ast,
  options
) {
  var state = new CodegenState(options);
  // fix #11483, Root level <script> tags should not be rendered.
  var code = ast ? (ast.tag === 'script' ? 'null' : genElement(ast, state)) : '_c("div")';
  return {
    render: ("with(this){return " + code + "}"),
    staticRenderFns: state.staticRenderFns
  }
}

function genElement (el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state)
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state)
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state)
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0'
  } else if (el.tag === 'slot') {
    return genSlot(el, state)
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;
      if (!el.plain || (el.pre && state.maybeComponent(el))) {
        data = genData$2(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
    }
    // module transforms
    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code
  }
}

// hoist static sub-trees out
function genStatic (el, state) {
  el.staticProcessed = true;
  // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.
  var originalPreState = state.pre;
  if (el.pre) {
    state.pre = el.pre;
  }
  state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
  state.pre = originalPreState;
  return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
}

// v-once
function genOnce (el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break
      }
      parent = parent.parent;
    }
    if (!key) {
      state.warn(
        "v-once can only be used inside v-for that is keyed. ",
        el.rawAttrsMap['v-once']
      );
      return genElement(el, state)
    }
    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
  } else {
    return genStatic(el, state)
  }
}

function genIf (
  el,
  state,
  altGen,
  altEmpty
) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
}

function genIfConditions (
  conditions,
  state,
  altGen,
  altEmpty
) {
  if (!conditions.length) {
    return altEmpty || '_e()'
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
  } else {
    return ("" + (genTernaryExp(condition.block)))
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp (el) {
    return altGen
      ? altGen(el, state)
      : el.once
        ? genOnce(el, state)
        : genElement(el, state)
  }
}

function genFor (
  el,
  state,
  altGen,
  altHelper
) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

  if (state.maybeComponent(el) &&
    el.tag !== 'slot' &&
    el.tag !== 'template' &&
    !el.key
  ) {
    state.warn(
      "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
      "v-for should have explicit keys. " +
      "See https://vuejs.org/guide/list.html#key for more info.",
      el.rawAttrsMap['v-for'],
      true /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion
  return (altHelper || '_l') + "((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + ((altGen || genElement)(el, state)) +
    '})'
}

function genData$2 (el, state) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el, state);
  if (dirs) { data += dirs + ','; }

  // key
  if (el.key) {
    data += "key:" + (el.key) + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + (el.ref) + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + (el.tag) + "\",";
  }
  // module data generation functions
  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:" + (genProps(el.attrs)) + ",";
  }
  // DOM props
  if (el.props) {
    data += "domProps:" + (genProps(el.props)) + ",";
  }
  // event handlers
  if (el.events) {
    data += (genHandlers(el.events, false)) + ",";
  }
  if (el.nativeEvents) {
    data += (genHandlers(el.nativeEvents, true)) + ",";
  }
  // slot target
  // only for non-scoped slots
  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + (el.slotTarget) + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.
  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
  }
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  // v-on data wrap
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data
}

function genDirectives (el, state) {
  var dirs = el.directives;
  if (!dirs) { return }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']'
  }
}

function genInlineTemplate (el, state) {
  var ast = el.children[0];
  if (el.children.length !== 1 || ast.type !== 1) {
    state.warn(
      'Inline-template components must have exactly one child element.',
      { start: el.start }
    );
  }
  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
  }
}

function genScopedSlots (
  el,
  slots,
  state
) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return (
      slot.slotTargetDynamic ||
      slot.if ||
      slot.for ||
      containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    )
  });

  // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.
  var needsKey = !!el.if;

  // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.
  if (!needsForceUpdate) {
    var parent = el.parent;
    while (parent) {
      if (
        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
        parent.for
      ) {
        needsForceUpdate = true;
        break
      }
      if (parent.if) {
        needsKey = true;
      }
      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots)
    .map(function (key) { return genScopedSlot(slots[key], state); })
    .join(',');

  return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
}

function hash(str) {
  var hash = 5381;
  var i = str.length;
  while(i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }
  return hash >>> 0
}

function containsSlotChild (el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true
    }
    return el.children.some(containsSlotChild)
  }
  return false
}

function genScopedSlot (
  el,
  state
) {
  var isLegacySyntax = el.attrsMap['slot-scope'];
  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null")
  }
  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot)
  }
  var slotScope = el.slotScope === emptySlotScopeToken
    ? ""
    : String(el.slotScope);
  var fn = "function(" + slotScope + "){" +
    "return " + (el.tag === 'template'
      ? el.if && isLegacySyntax
        ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
        : genChildren(el, state) || 'undefined'
      : genElement(el, state)) + "}";
  // reverse proxy v-slot without scope on this.$slots
  var reverseProxy = slotScope ? "" : ",proxy:true";
  return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
}

function genChildren (
  el,
  state,
  checkSkip,
  altGenElement,
  altGenNode
) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 &&
      el$1.for &&
      el$1.tag !== 'template' &&
      el$1.tag !== 'slot'
    ) {
      var normalizationType = checkSkip
        ? state.maybeComponent(el$1) ? ",1" : ",0"
        : "";
      return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
    }
    var normalizationType$1 = checkSkip
      ? getNormalizationType(children, state.maybeComponent)
      : 0;
    var gen = altGenNode || genNode;
    return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType (
  children,
  maybeComponent
) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue
    }
    if (needsNormalization(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
      res = 2;
      break
    }
    if (maybeComponent(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
      res = 1;
    }
  }
  return res
}

function needsNormalization (el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
}

function genNode (node, state) {
  if (node.type === 1) {
    return genElement(node, state)
  } else if (node.type === 3 && node.isComment) {
    return genComment(node)
  } else {
    return genText(node)
  }
}

function genText (text) {
  return ("_v(" + (text.type === 2
    ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
}

function genComment (comment) {
  return ("_e(" + (JSON.stringify(comment.text)) + ")")
}

function genSlot (el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? (",function(){return " + children + "}") : '');
  var attrs = el.attrs || el.dynamicAttrs
    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({
        // slot props are camelized
        name: camelize(attr.name),
        value: attr.value,
        dynamic: attr.dynamic
      }); }))
    : null;
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')'
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent (
  componentName,
  el,
  state
) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
}

function genProps (props) {
  var staticProps = "";
  var dynamicProps = "";
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);
    if (prop.dynamic) {
      dynamicProps += (prop.name) + "," + value + ",";
    } else {
      staticProps += "\"" + (prop.name) + "\":" + value + ",";
    }
  }
  staticProps = "{" + (staticProps.slice(0, -1)) + "}";
  if (dynamicProps) {
    return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
  } else {
    return staticProps
  }
}

// #3895, #4268
function transformSpecialNewlines (text) {
  return text
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029')
}

/*  */



// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + (
  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
  'super,throw,while,yield,delete,export,import,return,switch,default,' +
  'extends,finally,continue,debugger,function,arguments'
).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + (
  'delete,typeof,void'
).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors (ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode (node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          var range = node.rawAttrsMap[name];
          if (name === 'v-for') {
            checkFor(node, ("v-for=\"" + value + "\""), warn, range);
          } else if (name === 'v-slot' || name[0] === '#') {
            checkFunctionParameterExpression(value, (name + "=\"" + value + "\""), warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, (name + "=\"" + value + "\""), warn, range);
          } else {
            checkExpression(value, (name + "=\"" + value + "\""), warn, range);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent (exp, text, warn, range) {
  var stripped = exp.replace(stripStringRE, '');
  var keywordMatch = stripped.match(unaryOperatorsRE);
  if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {
    warn(
      "avoid using JavaScript unary operator as property name: " +
      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
      range
    );
  }
  checkExpression(exp, text, warn, range);
}

function checkFor (node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier (
  ident,
  type,
  text,
  warn,
  range
) {
  if (typeof ident === 'string') {
    try {
      new Function(("var " + ident + "=_"));
    } catch (e) {
      warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
    }
  }
}

function checkExpression (exp, text, warn, range) {
  try {
    new Function(("return " + exp));
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      warn(
        "avoid using JavaScript keyword as property name: " +
        "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
        range
      );
    } else {
      warn(
        "invalid expression: " + (e.message) + " in\n\n" +
        "    " + exp + "\n\n" +
        "  Raw expression: " + (text.trim()) + "\n",
        range
      );
    }
  }
}

function checkFunctionParameterExpression (exp, text, warn, range) {
  try {
    new Function(exp, '');
  } catch (e) {
    warn(
      "invalid function parameter expression: " + (e.message) + " in\n\n" +
      "    " + exp + "\n\n" +
      "  Raw expression: " + (text.trim()) + "\n",
      range
    );
  }
}

/*  */

var range = 2;

function generateCodeFrame (
  source,
  start,
  end
) {
  if ( start === void 0 ) start = 0;
  if ( end === void 0 ) end = source.length;

  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];
  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;
    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) { continue }
        res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
        var lineLength = lines[j].length;
        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }
          count += lineLength + 1;
        }
      }
      break
    }
  }
  return res.join('\n')
}

function repeat$1 (str, n) {
  var result = '';
  if (n > 0) {
    while (true) { // eslint-disable-line
      if (n & 1) { result += str; }
      n >>>= 1;
      if (n <= 0) { break }
      str += str;
    }
  }
  return result
}

/*  */



function createFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}

function createCompileToFunctionFn (compile) {
  var cache = Object.create(null);

  return function compileToFunctions (
    template,
    options,
    vm
  ) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;

    /* istanbul ignore if */
    {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1(
            'It seems you are using the standalone build of Vue.js in an ' +
            'environment with Content Security Policy that prohibits unsafe-eval. ' +
            'The template compiler cannot work in this environment. Consider ' +
            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
            'templates into render functions.'
          );
        }
      }
    }

    // check cache
    var key = options.delimiters
      ? String(options.delimiters) + template
      : template;
    if (cache[key]) {
      return cache[key]
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$$1(
              "Error compiling template:\n\n" + (e.msg) + "\n\n" +
              generateCodeFrame(template, e.start, e.end),
              vm
            );
          });
        } else {
          warn$$1(
            "Error compiling template:\n\n" + template + "\n\n" +
            compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
            vm
          );
        }
      }
      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) { return tip(e.msg, vm); });
        } else {
          compiled.tips.forEach(function (msg) { return tip(msg, vm); });
        }
      }
    }

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors)
    });

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1(
          "Failed to generate render function:\n\n" +
          fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return ((err.toString()) + " in\n\n" + code + "\n");
        }).join('\n'),
          vm
        );
      }
    }

    return (cache[key] = res)
  }
}

/*  */

function createCompilerCreator (baseCompile) {
  return function createCompiler (baseOptions) {
    function compile (
      template,
      options
    ) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function (msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if (options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function (msg, range, tip) {
            var data = { msg: msg };
            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }
              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }
            (tip ? tips : errors).push(data);
          };
        }
        // merge custom modules
        if (options.modules) {
          finalOptions.modules =
            (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(
            Object.create(baseOptions.directives || null),
            options.directives
          );
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;

      var compiled = baseCompile(template.trim(), finalOptions);
      {
        detectErrors(compiled.ast, warn);
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    }
  }
}

/*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
var createCompiler = createCompilerCreator(function baseCompile (
  template,
  options
) {
  var ast = parse(template.trim(), options);
  if (options.optimize !== false) {
    optimize(ast, options);
  }
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
});

/*  */

var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;

/*  */

// check whether current browser encodes a char inside attribute values
var div;
function getShouldDecode (href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0
}

// #3663: IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
// #6828: chrome encodes content in a[href]
var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML
});

var mount = Vue.prototype.$mount;
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    warn(
      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
    );
    return this
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if (!template) {
            warn(
              ("Template element not found or is empty: " + (options.template)),
              this
            );
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        {
          warn('invalid template option:' + template, this);
        }
        return this
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        outputSourceRange: "development" !== 'production',
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile end');
        measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');
      }
    }
  }
  return mount.call(this, el, hydrating)
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML (el) {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML
  }
}

Vue.compile = compileToFunctions;

module.exports = Vue;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/vue/dist/vue.common.js":
/*!*********************************************!*\
  !*** ./node_modules/vue/dist/vue.common.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

if (false) {} else {
  module.exports = __webpack_require__(/*! ./vue.common.dev.js */ "./node_modules/vue/dist/vue.common.dev.js")
}


/***/ }),

/***/ "./node_modules/vuex/dist/vuex.esm.js":
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: default, Store, createLogger, createNamespacedHelpers, install, mapActions, mapGetters, mapMutations, mapState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Store", function() { return Store; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createLogger", function() { return createLogger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNamespacedHelpers", function() { return createNamespacedHelpers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "install", function() { return install; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapActions", function() { return mapActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapGetters", function() { return mapGetters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapMutations", function() { return mapMutations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapState", function() { return mapState; });
/*!
 * vuex v3.6.2
 * (c) 2021 Evan You
 * @license MIT
 */
function applyMixin (Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({ beforeCreate: vuexInit });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;
    Vue.prototype._init = function (options) {
      if ( options === void 0 ) options = {};

      options.init = options.init
        ? [vuexInit].concat(options.init)
        : vuexInit;
      _init.call(this, options);
    };
  }

  /**
   * Vuex init hook, injected into each instances init hooks list.
   */

  function vuexInit () {
    var options = this.$options;
    // store injection
    if (options.store) {
      this.$store = typeof options.store === 'function'
        ? options.store()
        : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
}

var target = typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
    ? global
    : {};
var devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin (store) {
  if (!devtoolHook) { return }

  store._devtoolHook = devtoolHook;

  devtoolHook.emit('vuex:init', store);

  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });

  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  }, { prepend: true });

  store.subscribeAction(function (action, state) {
    devtoolHook.emit('vuex:action', action, state);
  }, { prepend: true });
}

/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */
function find (list, f) {
  return list.filter(f)[0]
}

/**
 * Deep copy the given object considering circular structure.
 * This function caches all nested objects and its copies.
 * If it detects circular structure, use cached copy to avoid infinite loop.
 *
 * @param {*} obj
 * @param {Array<Object>} cache
 * @return {*}
 */
function deepCopy (obj, cache) {
  if ( cache === void 0 ) cache = [];

  // just return if obj is immutable value
  if (obj === null || typeof obj !== 'object') {
    return obj
  }

  // if obj is hit, it is in circular structure
  var hit = find(cache, function (c) { return c.original === obj; });
  if (hit) {
    return hit.copy
  }

  var copy = Array.isArray(obj) ? [] : {};
  // put the copy into cache at first
  // because we want to refer it in recursive deepCopy
  cache.push({
    original: obj,
    copy: copy
  });

  Object.keys(obj).forEach(function (key) {
    copy[key] = deepCopy(obj[key], cache);
  });

  return copy
}

/**
 * forEach for object
 */
function forEachValue (obj, fn) {
  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });
}

function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

function isPromise (val) {
  return val && typeof val.then === 'function'
}

function assert (condition, msg) {
  if (!condition) { throw new Error(("[vuex] " + msg)) }
}

function partial (fn, arg) {
  return function () {
    return fn(arg)
  }
}

// Base data struct for store's module, package with some attribute and method
var Module = function Module (rawModule, runtime) {
  this.runtime = runtime;
  // Store some children item
  this._children = Object.create(null);
  // Store the origin module object which passed by programmer
  this._rawModule = rawModule;
  var rawState = rawModule.state;

  // Store the origin module's state
  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors = { namespaced: { configurable: true } };

prototypeAccessors.namespaced.get = function () {
  return !!this._rawModule.namespaced
};

Module.prototype.addChild = function addChild (key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild (key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild (key) {
  return this._children[key]
};

Module.prototype.hasChild = function hasChild (key) {
  return key in this._children
};

Module.prototype.update = function update (rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;
  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }
  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }
  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild (fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter (fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction (fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation (fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties( Module.prototype, prototypeAccessors );

var ModuleCollection = function ModuleCollection (rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get (path) {
  return path.reduce(function (module, key) {
    return module.getChild(key)
  }, this.root)
};

ModuleCollection.prototype.getNamespace = function getNamespace (path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '')
  }, '')
};

ModuleCollection.prototype.update = function update$1 (rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register (path, rawModule, runtime) {
    var this$1 = this;
    if ( runtime === void 0 ) runtime = true;

  if ((true)) {
    assertRawModule(path, rawModule);
  }

  var newModule = new Module(rawModule, runtime);
  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  }

  // register nested modules
  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister (path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];
  var child = parent.getChild(key);

  if (!child) {
    if ((true)) {
      console.warn(
        "[vuex] trying to unregister module '" + key + "', which is " +
        "not registered"
      );
    }
    return
  }

  if (!child.runtime) {
    return
  }

  parent.removeChild(key);
};

ModuleCollection.prototype.isRegistered = function isRegistered (path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];

  if (parent) {
    return parent.hasChild(key)
  }

  return false
};

function update (path, targetModule, newModule) {
  if ((true)) {
    assertRawModule(path, newModule);
  }

  // update target module
  targetModule.update(newModule);

  // update nested modules
  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if ((true)) {
          console.warn(
            "[vuex] trying to add a new module '" + key + "' on hot reloading, " +
            'manual reload is needed'
          );
        }
        return
      }
      update(
        path.concat(key),
        targetModule.getChild(key),
        newModule.modules[key]
      );
    }
  }
}

var functionAssert = {
  assert: function (value) { return typeof value === 'function'; },
  expected: 'function'
};

var objectAssert = {
  assert: function (value) { return typeof value === 'function' ||
    (typeof value === 'object' && typeof value.handler === 'function'); },
  expected: 'function or object with "handler" function'
};

var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert
};

function assertRawModule (path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) { return }

    var assertOptions = assertTypes[key];

    forEachValue(rawModule[key], function (value, type) {
      assert(
        assertOptions.assert(value),
        makeAssertionMessage(path, key, type, value, assertOptions.expected)
      );
    });
  });
}

function makeAssertionMessage (path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
  if (path.length > 0) {
    buf += " in module \"" + (path.join('.')) + "\"";
  }
  buf += " is " + (JSON.stringify(value)) + ".";
  return buf
}

var Vue; // bind on install

var Store = function Store (options) {
  var this$1 = this;
  if ( options === void 0 ) options = {};

  // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731
  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if ((true)) {
    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "store must be called with the new operator.");
  }

  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];
  var strict = options.strict; if ( strict === void 0 ) strict = false;

  // store internal state
  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue();
  this._makeLocalGettersCache = Object.create(null);

  // bind commit and dispatch to self
  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;
  this.dispatch = function boundDispatch (type, payload) {
    return dispatch.call(store, type, payload)
  };
  this.commit = function boundCommit (type, payload, options) {
    return commit.call(store, type, payload, options)
  };

  // strict mode
  this.strict = strict;

  var state = this._modules.root.state;

  // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters
  installModule(this, state, [], this._modules.root);

  // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)
  resetStoreVM(this, state);

  // apply plugins
  plugins.forEach(function (plugin) { return plugin(this$1); });

  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;
  if (useDevtools) {
    devtoolPlugin(this);
  }
};

var prototypeAccessors$1 = { state: { configurable: true } };

prototypeAccessors$1.state.get = function () {
  return this._vm._data.$$state
};

prototypeAccessors$1.state.set = function (v) {
  if ((true)) {
    assert(false, "use store.replaceState() to explicit replace store state.");
  }
};

Store.prototype.commit = function commit (_type, _payload, _options) {
    var this$1 = this;

  // check object-style commit
  var ref = unifyObjectStyle(_type, _payload, _options);
    var type = ref.type;
    var payload = ref.payload;
    var options = ref.options;

  var mutation = { type: type, payload: payload };
  var entry = this._mutations[type];
  if (!entry) {
    if ((true)) {
      console.error(("[vuex] unknown mutation type: " + type));
    }
    return
  }
  this._withCommit(function () {
    entry.forEach(function commitIterator (handler) {
      handler(payload);
    });
  });

  this._subscribers
    .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
    .forEach(function (sub) { return sub(mutation, this$1.state); });

  if (
    ( true) &&
    options && options.silent
  ) {
    console.warn(
      "[vuex] mutation type: " + type + ". Silent option has been removed. " +
      'Use the filter functionality in the vue-devtools'
    );
  }
};

Store.prototype.dispatch = function dispatch (_type, _payload) {
    var this$1 = this;

  // check object-style dispatch
  var ref = unifyObjectStyle(_type, _payload);
    var type = ref.type;
    var payload = ref.payload;

  var action = { type: type, payload: payload };
  var entry = this._actions[type];
  if (!entry) {
    if ((true)) {
      console.error(("[vuex] unknown action type: " + type));
    }
    return
  }

  try {
    this._actionSubscribers
      .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
      .filter(function (sub) { return sub.before; })
      .forEach(function (sub) { return sub.before(action, this$1.state); });
  } catch (e) {
    if ((true)) {
      console.warn("[vuex] error in before action subscribers: ");
      console.error(e);
    }
  }

  var result = entry.length > 1
    ? Promise.all(entry.map(function (handler) { return handler(payload); }))
    : entry[0](payload);

  return new Promise(function (resolve, reject) {
    result.then(function (res) {
      try {
        this$1._actionSubscribers
          .filter(function (sub) { return sub.after; })
          .forEach(function (sub) { return sub.after(action, this$1.state); });
      } catch (e) {
        if ((true)) {
          console.warn("[vuex] error in after action subscribers: ");
          console.error(e);
        }
      }
      resolve(res);
    }, function (error) {
      try {
        this$1._actionSubscribers
          .filter(function (sub) { return sub.error; })
          .forEach(function (sub) { return sub.error(action, this$1.state, error); });
      } catch (e) {
        if ((true)) {
          console.warn("[vuex] error in error action subscribers: ");
          console.error(e);
        }
      }
      reject(error);
    });
  })
};

Store.prototype.subscribe = function subscribe (fn, options) {
  return genericSubscribe(fn, this._subscribers, options)
};

Store.prototype.subscribeAction = function subscribeAction (fn, options) {
  var subs = typeof fn === 'function' ? { before: fn } : fn;
  return genericSubscribe(subs, this._actionSubscribers, options)
};

Store.prototype.watch = function watch (getter, cb, options) {
    var this$1 = this;

  if ((true)) {
    assert(typeof getter === 'function', "store.watch only accepts a function.");
  }
  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)
};

Store.prototype.replaceState = function replaceState (state) {
    var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule (path, rawModule, options) {
    if ( options === void 0 ) options = {};

  if (typeof path === 'string') { path = [path]; }

  if ((true)) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
  }

  this._modules.register(path, rawModule);
  installModule(this, this.state, path, this._modules.get(path), options.preserveState);
  // reset store to update getters...
  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule (path) {
    var this$1 = this;

  if (typeof path === 'string') { path = [path]; }

  if ((true)) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  this._modules.unregister(path);
  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue.delete(parentState, path[path.length - 1]);
  });
  resetStore(this);
};

Store.prototype.hasModule = function hasModule (path) {
  if (typeof path === 'string') { path = [path]; }

  if ((true)) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  return this._modules.isRegistered(path)
};

Store.prototype.hotUpdate = function hotUpdate (newOptions) {
  this._modules.update(newOptions);
  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit (fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties( Store.prototype, prototypeAccessors$1 );

function genericSubscribe (fn, subs, options) {
  if (subs.indexOf(fn) < 0) {
    options && options.prepend
      ? subs.unshift(fn)
      : subs.push(fn);
  }
  return function () {
    var i = subs.indexOf(fn);
    if (i > -1) {
      subs.splice(i, 1);
    }
  }
}

function resetStore (store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state;
  // init all modules
  installModule(store, state, [], store._modules.root, true);
  // reset vm
  resetStoreVM(store, state, hot);
}

function resetStoreVM (store, state, hot) {
  var oldVm = store._vm;

  // bind store public getters
  store.getters = {};
  // reset local getters cache
  store._makeLocalGettersCache = Object.create(null);
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    // direct inline function use will lead to closure preserving oldVm.
    // using partial to return function with only arguments preserved in closure environment.
    computed[key] = partial(fn, store);
    Object.defineProperty(store.getters, key, {
      get: function () { return store._vm[key]; },
      enumerable: true // for local getters
    });
  });

  // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent;

  // enable strict mode for new vm
  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }
    Vue.nextTick(function () { return oldVm.$destroy(); });
  }
}

function installModule (store, rootState, path, module, hot) {
  var isRoot = !path.length;
  var namespace = store._modules.getNamespace(path);

  // register in namespace map
  if (module.namespaced) {
    if (store._modulesNamespaceMap[namespace] && ("development" !== 'production')) {
      console.error(("[vuex] duplicate namespace " + namespace + " for the namespaced module " + (path.join('/'))));
    }
    store._modulesNamespaceMap[namespace] = module;
  }

  // set state
  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];
    store._withCommit(function () {
      if ((true)) {
        if (moduleName in parentState) {
          console.warn(
            ("[vuex] state field \"" + moduleName + "\" was overridden by a module with the same name at \"" + (path.join('.')) + "\"")
          );
        }
      }
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);

  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });

  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });

  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });

  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}

/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */
function makeLocalContext (store, namespace, path) {
  var noNamespace = namespace === '';

  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (( true) && !store._actions[type]) {
          console.error(("[vuex] unknown local action type: " + (args.type) + ", global type: " + type));
          return
        }
      }

      return store.dispatch(type, payload)
    },

    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (( true) && !store._mutations[type]) {
          console.error(("[vuex] unknown local mutation type: " + (args.type) + ", global type: " + type));
          return
        }
      }

      store.commit(type, payload, options);
    }
  };

  // getters and state object must be gotten lazily
  // because they will be changed by vm update
  Object.defineProperties(local, {
    getters: {
      get: noNamespace
        ? function () { return store.getters; }
        : function () { return makeLocalGetters(store, namespace); }
    },
    state: {
      get: function () { return getNestedState(store.state, path); }
    }
  });

  return local
}

function makeLocalGetters (store, namespace) {
  if (!store._makeLocalGettersCache[namespace]) {
    var gettersProxy = {};
    var splitPos = namespace.length;
    Object.keys(store.getters).forEach(function (type) {
      // skip if the target getter is not match this namespace
      if (type.slice(0, splitPos) !== namespace) { return }

      // extract local getter type
      var localType = type.slice(splitPos);

      // Add a port to the getters proxy.
      // Define as getter property because
      // we do not want to evaluate the getters in this time.
      Object.defineProperty(gettersProxy, localType, {
        get: function () { return store.getters[type]; },
        enumerable: true
      });
    });
    store._makeLocalGettersCache[namespace] = gettersProxy;
  }

  return store._makeLocalGettersCache[namespace]
}

function registerMutation (store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler (payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction (store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler (payload) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload);
    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }
    if (store._devtoolHook) {
      return res.catch(function (err) {
        store._devtoolHook.emit('vuex:error', err);
        throw err
      })
    } else {
      return res
    }
  });
}

function registerGetter (store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if ((true)) {
      console.error(("[vuex] duplicate getter key: " + type));
    }
    return
  }
  store._wrappedGetters[type] = function wrappedGetter (store) {
    return rawGetter(
      local.state, // local state
      local.getters, // local getters
      store.state, // root state
      store.getters // root getters
    )
  };
}

function enableStrictMode (store) {
  store._vm.$watch(function () { return this._data.$$state }, function () {
    if ((true)) {
      assert(store._committing, "do not mutate vuex store state outside mutation handlers.");
    }
  }, { deep: true, sync: true });
}

function getNestedState (state, path) {
  return path.reduce(function (state, key) { return state[key]; }, state)
}

function unifyObjectStyle (type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if ((true)) {
    assert(typeof type === 'string', ("expects string as the type, but found " + (typeof type) + "."));
  }

  return { type: type, payload: payload, options: options }
}

function install (_Vue) {
  if (Vue && _Vue === Vue) {
    if ((true)) {
      console.error(
        '[vuex] already installed. Vue.use(Vuex) should be called only once.'
      );
    }
    return
  }
  Vue = _Vue;
  applyMixin(Vue);
}

/**
 * Reduce the code which written in Vue.js for getting the state.
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * @param {Object}
 */
var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  if (( true) && !isValidMap(states)) {
    console.error('[vuex] mapState: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState () {
      var state = this.$store.state;
      var getters = this.$store.getters;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);
        if (!module) {
          return
        }
        state = module.context.state;
        getters = module.context.getters;
      }
      return typeof val === 'function'
        ? val.call(this, state, getters)
        : state[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for committing the mutation
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept another params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */
var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  if (( true) && !isValidMap(mutations)) {
    console.error('[vuex] mapMutations: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      // Get the commit method from store
      var commit = this.$store.commit;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
        if (!module) {
          return
        }
        commit = module.context.commit;
      }
      return typeof val === 'function'
        ? val.apply(this, [commit].concat(args))
        : commit.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for getting the getters
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} getters
 * @return {Object}
 */
var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  if (( true) && !isValidMap(getters)) {
    console.error('[vuex] mapGetters: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    // The namespace has been mutated by normalizeNamespace
    val = namespace + val;
    res[key] = function mappedGetter () {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return
      }
      if (( true) && !(val in this.$store.getters)) {
        console.error(("[vuex] unknown getter: " + val));
        return
      }
      return this.$store.getters[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for dispatch the action
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */
var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  if (( true) && !isValidMap(actions)) {
    console.error('[vuex] mapActions: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      // get dispatch function from store
      var dispatch = this.$store.dispatch;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
        if (!module) {
          return
        }
        dispatch = module.context.dispatch;
      }
      return typeof val === 'function'
        ? val.apply(this, [dispatch].concat(args))
        : dispatch.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

/**
 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
 * @param {String} namespace
 * @return {Object}
 */
var createNamespacedHelpers = function (namespace) { return ({
  mapState: mapState.bind(null, namespace),
  mapGetters: mapGetters.bind(null, namespace),
  mapMutations: mapMutations.bind(null, namespace),
  mapActions: mapActions.bind(null, namespace)
}); };

/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
 * @param {Array|Object} map
 * @return {Object}
 */
function normalizeMap (map) {
  if (!isValidMap(map)) {
    return []
  }
  return Array.isArray(map)
    ? map.map(function (key) { return ({ key: key, val: key }); })
    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })
}

/**
 * Validate whether given map is valid or not
 * @param {*} map
 * @return {Boolean}
 */
function isValidMap (map) {
  return Array.isArray(map) || isObject(map)
}

/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
 * @param {Function} fn
 * @return {Function}
 */
function normalizeNamespace (fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }
    return fn(namespace, map)
  }
}

/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * @param {Object} store
 * @param {String} helper
 * @param {String} namespace
 * @return {Object}
 */
function getModuleByNamespace (store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];
  if (( true) && !module) {
    console.error(("[vuex] module namespace not found in " + helper + "(): " + namespace));
  }
  return module
}

// Credits: borrowed code from fcomb/redux-logger

function createLogger (ref) {
  if ( ref === void 0 ) ref = {};
  var collapsed = ref.collapsed; if ( collapsed === void 0 ) collapsed = true;
  var filter = ref.filter; if ( filter === void 0 ) filter = function (mutation, stateBefore, stateAfter) { return true; };
  var transformer = ref.transformer; if ( transformer === void 0 ) transformer = function (state) { return state; };
  var mutationTransformer = ref.mutationTransformer; if ( mutationTransformer === void 0 ) mutationTransformer = function (mut) { return mut; };
  var actionFilter = ref.actionFilter; if ( actionFilter === void 0 ) actionFilter = function (action, state) { return true; };
  var actionTransformer = ref.actionTransformer; if ( actionTransformer === void 0 ) actionTransformer = function (act) { return act; };
  var logMutations = ref.logMutations; if ( logMutations === void 0 ) logMutations = true;
  var logActions = ref.logActions; if ( logActions === void 0 ) logActions = true;
  var logger = ref.logger; if ( logger === void 0 ) logger = console;

  return function (store) {
    var prevState = deepCopy(store.state);

    if (typeof logger === 'undefined') {
      return
    }

    if (logMutations) {
      store.subscribe(function (mutation, state) {
        var nextState = deepCopy(state);

        if (filter(mutation, prevState, nextState)) {
          var formattedTime = getFormattedTime();
          var formattedMutation = mutationTransformer(mutation);
          var message = "mutation " + (mutation.type) + formattedTime;

          startMessage(logger, message, collapsed);
          logger.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState));
          logger.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation);
          logger.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState));
          endMessage(logger);
        }

        prevState = nextState;
      });
    }

    if (logActions) {
      store.subscribeAction(function (action, state) {
        if (actionFilter(action, state)) {
          var formattedTime = getFormattedTime();
          var formattedAction = actionTransformer(action);
          var message = "action " + (action.type) + formattedTime;

          startMessage(logger, message, collapsed);
          logger.log('%c action', 'color: #03A9F4; font-weight: bold', formattedAction);
          endMessage(logger);
        }
      });
    }
  }
}

function startMessage (logger, message, collapsed) {
  var startMessage = collapsed
    ? logger.groupCollapsed
    : logger.group;

  // render
  try {
    startMessage.call(logger, message);
  } catch (e) {
    logger.log(message);
  }
}

function endMessage (logger) {
  try {
    logger.groupEnd();
  } catch (e) {
    logger.log('—— log end ——');
  }
}

function getFormattedTime () {
  var time = new Date();
  return (" @ " + (pad(time.getHours(), 2)) + ":" + (pad(time.getMinutes(), 2)) + ":" + (pad(time.getSeconds(), 2)) + "." + (pad(time.getMilliseconds(), 3)))
}

function repeat (str, times) {
  return (new Array(times + 1)).join(str)
}

function pad (num, maxLength) {
  return repeat('0', maxLength - num.toString().length) + num
}

var index = {
  Store: Store,
  install: install,
  version: '3.6.2',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers,
  createLogger: createLogger
};

/* harmony default export */ __webpack_exports__["default"] = (index);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./resources/js/Landing/Cursos/Cursos.vue":
/*!************************************************!*\
  !*** ./resources/js/Landing/Cursos/Cursos.vue ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Cursos_vue_vue_type_template_id_0a1453e9_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Cursos.vue?vue&type=template&id=0a1453e9&scoped=true& */ "./resources/js/Landing/Cursos/Cursos.vue?vue&type=template&id=0a1453e9&scoped=true&");
/* harmony import */ var _Cursos_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Cursos.vue?vue&type=script&lang=js& */ "./resources/js/Landing/Cursos/Cursos.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Cursos_vue_vue_type_style_index_0_id_0a1453e9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css& */ "./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Cursos_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Cursos_vue_vue_type_template_id_0a1453e9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Cursos_vue_vue_type_template_id_0a1453e9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "0a1453e9",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/Cursos/Cursos.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/Cursos/Cursos.vue?vue&type=script&lang=js&":
/*!*************************************************************************!*\
  !*** ./resources/js/Landing/Cursos/Cursos.vue?vue&type=script&lang=js& ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./Cursos.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css&":
/*!*********************************************************************************************************!*\
  !*** ./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css& ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_style_index_0_id_0a1453e9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/style-loader!../../../../node_modules/css-loader??ref--6-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--6-2!../../../../node_modules/vue-loader/lib??vue-loader-options!./Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=style&index=0&id=0a1453e9&scoped=true&lang=css&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_style_index_0_id_0a1453e9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_style_index_0_id_0a1453e9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_style_index_0_id_0a1453e9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_ref_6_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_2_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_style_index_0_id_0a1453e9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "./resources/js/Landing/Cursos/Cursos.vue?vue&type=template&id=0a1453e9&scoped=true&":
/*!*******************************************************************************************!*\
  !*** ./resources/js/Landing/Cursos/Cursos.vue?vue&type=template&id=0a1453e9&scoped=true& ***!
  \*******************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_template_id_0a1453e9_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./Cursos.vue?vue&type=template&id=0a1453e9&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Cursos.vue?vue&type=template&id=0a1453e9&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_template_id_0a1453e9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Cursos_vue_vue_type_template_id_0a1453e9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/Cursos/Show.vue":
/*!**********************************************!*\
  !*** ./resources/js/Landing/Cursos/Show.vue ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Show_vue_vue_type_template_id_6e45ef0f_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Show.vue?vue&type=template&id=6e45ef0f&scoped=true& */ "./resources/js/Landing/Cursos/Show.vue?vue&type=template&id=6e45ef0f&scoped=true&");
/* harmony import */ var _Show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Show.vue?vue&type=script&lang=js& */ "./resources/js/Landing/Cursos/Show.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Show_vue_vue_type_style_index_0_id_6e45ef0f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true& */ "./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Show_vue_vue_type_template_id_6e45ef0f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Show_vue_vue_type_template_id_6e45ef0f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "6e45ef0f",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/Cursos/Show.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/Cursos/Show.vue?vue&type=script&lang=js&":
/*!***********************************************************************!*\
  !*** ./resources/js/Landing/Cursos/Show.vue?vue&type=script&lang=js& ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./Show.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true&":
/*!********************************************************************************************************!*\
  !*** ./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true& ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_style_index_0_id_6e45ef0f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/style-loader!../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=style&index=0&id=6e45ef0f&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_style_index_0_id_6e45ef0f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_style_index_0_id_6e45ef0f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_style_index_0_id_6e45ef0f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_style_index_0_id_6e45ef0f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "./resources/js/Landing/Cursos/Show.vue?vue&type=template&id=6e45ef0f&scoped=true&":
/*!*****************************************************************************************!*\
  !*** ./resources/js/Landing/Cursos/Show.vue?vue&type=template&id=6e45ef0f&scoped=true& ***!
  \*****************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_template_id_6e45ef0f_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./Show.vue?vue&type=template&id=6e45ef0f&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Cursos/Show.vue?vue&type=template&id=6e45ef0f&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_template_id_6e45ef0f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Show_vue_vue_type_template_id_6e45ef0f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/Membresia/show.vue":
/*!*************************************************!*\
  !*** ./resources/js/Landing/Membresia/show.vue ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _show_vue_vue_type_template_id_3a5f66d2_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./show.vue?vue&type=template&id=3a5f66d2&scoped=true& */ "./resources/js/Landing/Membresia/show.vue?vue&type=template&id=3a5f66d2&scoped=true&");
/* harmony import */ var _show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./show.vue?vue&type=script&lang=js& */ "./resources/js/Landing/Membresia/show.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _show_vue_vue_type_style_index_0_id_3a5f66d2_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true& */ "./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _show_vue_vue_type_template_id_3a5f66d2_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _show_vue_vue_type_template_id_3a5f66d2_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "3a5f66d2",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/Membresia/show.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/Membresia/show.vue?vue&type=script&lang=js&":
/*!**************************************************************************!*\
  !*** ./resources/js/Landing/Membresia/show.vue?vue&type=script&lang=js& ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./show.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true&":
/*!***********************************************************************************************************!*\
  !*** ./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true& ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_style_index_0_id_3a5f66d2_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/style-loader!../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=style&index=0&id=3a5f66d2&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_style_index_0_id_3a5f66d2_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_style_index_0_id_3a5f66d2_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_style_index_0_id_3a5f66d2_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_style_index_0_id_3a5f66d2_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "./resources/js/Landing/Membresia/show.vue?vue&type=template&id=3a5f66d2&scoped=true&":
/*!********************************************************************************************!*\
  !*** ./resources/js/Landing/Membresia/show.vue?vue&type=template&id=3a5f66d2&scoped=true& ***!
  \********************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_template_id_3a5f66d2_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./show.vue?vue&type=template&id=3a5f66d2&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Membresia/show.vue?vue&type=template&id=3a5f66d2&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_template_id_3a5f66d2_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_show_vue_vue_type_template_id_3a5f66d2_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue":
/*!*****************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _articulos_vue_vue_type_template_id_6760b714_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./articulos.vue?vue&type=template&id=6760b714&scoped=true& */ "./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue?vue&type=template&id=6760b714&scoped=true&");
/* harmony import */ var _articulos_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./articulos.vue?vue&type=script&lang=js& */ "./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _articulos_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _articulos_vue_vue_type_template_id_6760b714_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _articulos_vue_vue_type_template_id_6760b714_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "6760b714",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue?vue&type=script&lang=js&":
/*!******************************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_articulos_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/babel-loader/lib??ref--4-0!../../../../../node_modules/vue-loader/lib??vue-loader-options!./articulos.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_articulos_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue?vue&type=template&id=6760b714&scoped=true&":
/*!************************************************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue?vue&type=template&id=6760b714&scoped=true& ***!
  \************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_articulos_vue_vue_type_template_id_6760b714_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../node_modules/vue-loader/lib??vue-loader-options!./articulos.vue?vue&type=template&id=6760b714&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue?vue&type=template&id=6760b714&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_articulos_vue_vue_type_template_id_6760b714_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_articulos_vue_vue_type_template_id_6760b714_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/checkpayment.vue":
/*!************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/checkpayment.vue ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _checkpayment_vue_vue_type_template_id_6feb5108_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./checkpayment.vue?vue&type=template&id=6feb5108&scoped=true& */ "./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=template&id=6feb5108&scoped=true&");
/* harmony import */ var _checkpayment_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./checkpayment.vue?vue&type=script&lang=js& */ "./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _checkpayment_vue_vue_type_style_index_0_id_6feb5108_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true& */ "./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _checkpayment_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _checkpayment_vue_vue_type_template_id_6feb5108_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _checkpayment_vue_vue_type_template_id_6feb5108_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "6feb5108",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/PaymentUtils/checkpayment.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=script&lang=js&":
/*!*************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./checkpayment.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true&":
/*!**********************************************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true& ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_style_index_0_id_6feb5108_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/style-loader!../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=style&index=0&id=6feb5108&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_style_index_0_id_6feb5108_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_style_index_0_id_6feb5108_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_style_index_0_id_6feb5108_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_style_index_0_id_6feb5108_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=template&id=6feb5108&scoped=true&":
/*!*******************************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=template&id=6feb5108&scoped=true& ***!
  \*******************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_template_id_6feb5108_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./checkpayment.vue?vue&type=template&id=6feb5108&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/checkpayment.vue?vue&type=template&id=6feb5108&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_template_id_6feb5108_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_checkpayment_vue_vue_type_template_id_6feb5108_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/cuponmodal.vue":
/*!**********************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/cuponmodal.vue ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _cuponmodal_vue_vue_type_template_id_fe2d0fa4_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cuponmodal.vue?vue&type=template&id=fe2d0fa4&scoped=true& */ "./resources/js/Landing/PaymentUtils/cuponmodal.vue?vue&type=template&id=fe2d0fa4&scoped=true&");
/* harmony import */ var _cuponmodal_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cuponmodal.vue?vue&type=script&lang=js& */ "./resources/js/Landing/PaymentUtils/cuponmodal.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _cuponmodal_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _cuponmodal_vue_vue_type_template_id_fe2d0fa4_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _cuponmodal_vue_vue_type_template_id_fe2d0fa4_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "fe2d0fa4",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/PaymentUtils/cuponmodal.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/cuponmodal.vue?vue&type=script&lang=js&":
/*!***********************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/cuponmodal.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_cuponmodal_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./cuponmodal.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/cuponmodal.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_cuponmodal_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/cuponmodal.vue?vue&type=template&id=fe2d0fa4&scoped=true&":
/*!*****************************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/cuponmodal.vue?vue&type=template&id=fe2d0fa4&scoped=true& ***!
  \*****************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_cuponmodal_vue_vue_type_template_id_fe2d0fa4_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./cuponmodal.vue?vue&type=template&id=fe2d0fa4&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/cuponmodal.vue?vue&type=template&id=fe2d0fa4&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_cuponmodal_vue_vue_type_template_id_fe2d0fa4_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_cuponmodal_vue_vue_type_template_id_fe2d0fa4_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/paymetprocess.vue":
/*!*************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/paymetprocess.vue ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _paymetprocess_vue_vue_type_template_id_107001ad_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paymetprocess.vue?vue&type=template&id=107001ad&scoped=true& */ "./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=template&id=107001ad&scoped=true&");
/* harmony import */ var _paymetprocess_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./paymetprocess.vue?vue&type=script&lang=js& */ "./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _paymetprocess_vue_vue_type_style_index_0_id_107001ad_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true& */ "./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _paymetprocess_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _paymetprocess_vue_vue_type_template_id_107001ad_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _paymetprocess_vue_vue_type_template_id_107001ad_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "107001ad",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/PaymentUtils/paymetprocess.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=script&lang=js&":
/*!**************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./paymetprocess.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true&":
/*!***********************************************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true& ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_style_index_0_id_107001ad_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/style-loader!../../../../node_modules/css-loader!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--7-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--7-3!../../../../node_modules/vue-loader/lib??vue-loader-options!./paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=style&index=0&id=107001ad&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_style_index_0_id_107001ad_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_style_index_0_id_107001ad_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_style_index_0_id_107001ad_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_style_loader_index_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_2_node_modules_sass_loader_dist_cjs_js_ref_7_3_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_style_index_0_id_107001ad_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=template&id=107001ad&scoped=true&":
/*!********************************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=template&id=107001ad&scoped=true& ***!
  \********************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_template_id_107001ad_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./paymetprocess.vue?vue&type=template&id=107001ad&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/paymetprocess.vue?vue&type=template&id=107001ad&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_template_id_107001ad_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_paymetprocess_vue_vue_type_template_id_107001ad_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/precio.vue":
/*!******************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/precio.vue ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _precio_vue_vue_type_template_id_19fd6b44_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./precio.vue?vue&type=template&id=19fd6b44&scoped=true& */ "./resources/js/Landing/PaymentUtils/precio.vue?vue&type=template&id=19fd6b44&scoped=true&");
/* harmony import */ var _precio_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./precio.vue?vue&type=script&lang=js& */ "./resources/js/Landing/PaymentUtils/precio.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _precio_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _precio_vue_vue_type_template_id_19fd6b44_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _precio_vue_vue_type_template_id_19fd6b44_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "19fd6b44",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/PaymentUtils/precio.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/precio.vue?vue&type=script&lang=js&":
/*!*******************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/precio.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_precio_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--4-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./precio.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/precio.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_precio_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/PaymentUtils/precio.vue?vue&type=template&id=19fd6b44&scoped=true&":
/*!*************************************************************************************************!*\
  !*** ./resources/js/Landing/PaymentUtils/precio.vue?vue&type=template&id=19fd6b44&scoped=true& ***!
  \*************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_precio_vue_vue_type_template_id_19fd6b44_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./precio.vue?vue&type=template&id=19fd6b44&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/PaymentUtils/precio.vue?vue&type=template&id=19fd6b44&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_precio_vue_vue_type_template_id_19fd6b44_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_precio_vue_vue_type_template_id_19fd6b44_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/Templades/Footer/footer.vue":
/*!**********************************************************!*\
  !*** ./resources/js/Landing/Templades/Footer/footer.vue ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _footer_vue_vue_type_template_id_7ca0f343_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./footer.vue?vue&type=template&id=7ca0f343&scoped=true& */ "./resources/js/Landing/Templades/Footer/footer.vue?vue&type=template&id=7ca0f343&scoped=true&");
/* harmony import */ var _footer_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./footer.vue?vue&type=script&lang=js& */ "./resources/js/Landing/Templades/Footer/footer.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _footer_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _footer_vue_vue_type_template_id_7ca0f343_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _footer_vue_vue_type_template_id_7ca0f343_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "7ca0f343",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/Templades/Footer/footer.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/Templades/Footer/footer.vue?vue&type=script&lang=js&":
/*!***********************************************************************************!*\
  !*** ./resources/js/Landing/Templades/Footer/footer.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_footer_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/babel-loader/lib??ref--4-0!../../../../../node_modules/vue-loader/lib??vue-loader-options!./footer.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_footer_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/Templades/Footer/footer.vue?vue&type=template&id=7ca0f343&scoped=true&":
/*!*****************************************************************************************************!*\
  !*** ./resources/js/Landing/Templades/Footer/footer.vue?vue&type=template&id=7ca0f343&scoped=true& ***!
  \*****************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_footer_vue_vue_type_template_id_7ca0f343_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../node_modules/vue-loader/lib??vue-loader-options!./footer.vue?vue&type=template&id=7ca0f343&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer.vue?vue&type=template&id=7ca0f343&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_footer_vue_vue_type_template_id_7ca0f343_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_footer_vue_vue_type_template_id_7ca0f343_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/Landing/Templades/Footer/footer2.vue":
/*!***********************************************************!*\
  !*** ./resources/js/Landing/Templades/Footer/footer2.vue ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _footer2_vue_vue_type_template_id_17951e7f_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./footer2.vue?vue&type=template&id=17951e7f&scoped=true& */ "./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=template&id=17951e7f&scoped=true&");
/* harmony import */ var _footer2_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./footer2.vue?vue&type=script&lang=js& */ "./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _footer2_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _footer2_vue_vue_type_template_id_17951e7f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _footer2_vue_vue_type_template_id_17951e7f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "17951e7f",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "resources/js/Landing/Templades/Footer/footer2.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=script&lang=js&":
/*!************************************************************************************!*\
  !*** ./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=script&lang=js& ***!
  \************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_footer2_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/babel-loader/lib??ref--4-0!../../../../../node_modules/vue-loader/lib??vue-loader-options!./footer2.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_footer2_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=template&id=17951e7f&scoped=true&":
/*!******************************************************************************************************!*\
  !*** ./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=template&id=17951e7f&scoped=true& ***!
  \******************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_footer2_vue_vue_type_template_id_17951e7f_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../node_modules/vue-loader/lib??vue-loader-options!./footer2.vue?vue&type=template&id=17951e7f&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./resources/js/Landing/Templades/Footer/footer2.vue?vue&type=template&id=17951e7f&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_footer2_vue_vue_type_template_id_17951e7f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_footer2_vue_vue_type_template_id_17951e7f_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vuex */ "./node_modules/vuex/dist/vuex.esm.js");
__webpack_require__(/*! ./bootstrap */ "./resources/js/bootstrap.js");

window.Vue = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.common.js");

Vue.use(vuex__WEBPACK_IMPORTED_MODULE_0__["default"]);
Vue.component('footer-component', __webpack_require__(/*! ./Landing/Templades/Footer/footer */ "./resources/js/Landing/Templades/Footer/footer.vue")["default"]);
Vue.component('footerdos-component', __webpack_require__(/*! ./Landing/Templades/Footer/footer2 */ "./resources/js/Landing/Templades/Footer/footer2.vue")["default"]);
Vue.component('cursos-component', __webpack_require__(/*! ./Landing/Cursos/Cursos */ "./resources/js/Landing/Cursos/Cursos.vue")["default"]);
Vue.component('curso-show-component', __webpack_require__(/*! ./Landing/Cursos/Show */ "./resources/js/Landing/Cursos/Show.vue")["default"]);
Vue.component('membresia-show-component', __webpack_require__(/*! ./Landing/Membresia/show */ "./resources/js/Landing/Membresia/show.vue")["default"]);
Vue.component('payment-collase', __webpack_require__(/*! ./Landing/PaymentUtils/checkpayment */ "./resources/js/Landing/PaymentUtils/checkpayment.vue")["default"]);
Vue.component('proccess', __webpack_require__(/*! ./Landing/PaymentUtils/paymetprocess */ "./resources/js/Landing/PaymentUtils/paymetprocess.vue")["default"]);
Vue.component('modalcupon', __webpack_require__(/*! ./Landing/PaymentUtils/cuponmodal */ "./resources/js/Landing/PaymentUtils/cuponmodal.vue")["default"]);
Vue.component('articulos', __webpack_require__(/*! ./Landing/PaymentUtils/InputHiddensNoTocar/articulos */ "./resources/js/Landing/PaymentUtils/InputHiddensNoTocar/articulos.vue")["default"]);
Vue.component('precio', __webpack_require__(/*! ./Landing/PaymentUtils/precio */ "./resources/js/Landing/PaymentUtils/precio.vue")["default"]);
var store = new vuex__WEBPACK_IMPORTED_MODULE_0__["default"].Store({
  state: {
    user: null,
    paymentselected: null,
    cupon: null
  },
  mutations: {
    setUser: function setUser(state, payload) {
      state.user = payload.user;
    },
    setPayment: function setPayment(state, payment) {
      state.paymentselected = payment;
    },
    setCupon: function setCupon(state, cupon) {
      state.cupon = cupon;
    }
  },
  getters: {}
});
var app = new Vue({
  el: '#app',
  store: store
});

/***/ }),

/***/ "./resources/js/bootstrap.js":
/*!***********************************!*\
  !*** ./resources/js/bootstrap.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

window._ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/**
 * We'll load jQuery and the Bootstrap jQuery plugin which provides support
 * for JavaScript based Bootstrap features such as modals and tabs. This
 * code may be modified to fit the specific needs of your application.
 */

try {
  window.Popper = __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js")["default"];
  window.$ = window.jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

  __webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.js");
} catch (e) {}
/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */


window.axios = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */
// import Echo from 'laravel-echo';
// window.Pusher = require('pusher-js');
// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: process.env.MIX_PUSHER_APP_KEY,
//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,
//     encrypted: true
// });

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 0:
/*!*************************************************************!*\
  !*** multi ./resources/js/app.js ./resources/sass/app.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! C:\xampp\htdocs\lingua_planet\resources\js\app.js */"./resources/js/app.js");
module.exports = __webpack_require__(/*! C:\xampp\htdocs\lingua_planet\resources\sass\app.scss */"./resources/sass/app.scss");


/***/ })

/******/ });